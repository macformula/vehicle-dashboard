
Uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a28  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002c20  08002c20  00012c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c58  08002c58  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002c58  08002c58  00012c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c60  08002c60  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c60  08002c60  00012c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c64  08002c64  00012c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002c68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000014  08002c7c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002c7c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b7e  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012c9  00000000  00000000  00026bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000608  00000000  00000000  00027e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000560  00000000  00000000  00028498  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025877  00000000  00000000  000289f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c66  00000000  00000000  0004e26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9f95  00000000  00000000  00053ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013de6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001740  00000000  00000000  0013dee8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000014 	.word	0x20000014
 8000214:	00000000 	.word	0x00000000
 8000218:	08002c08 	.word	0x08002c08

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000018 	.word	0x20000018
 8000234:	08002c08 	.word	0x08002c08

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fb7e 	bl	8000c3e <HAL_Init>
//  MX_GPIO_Init();
//  MX_USART2_UART_Init(8,115200,0);
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f81b 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8e5 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_Init(8,115200,0);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000550:	2008      	movs	r0, #8
 8000552:	f000 f88d 	bl	8000670 <MX_USART2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t i = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint8_t testdata[11] = "TEST TEST\n~";
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <main+0x40>)
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000560:	c303      	stmia	r3!, {r0, r1}
 8000562:	801a      	strh	r2, [r3, #0]
 8000564:	3302      	adds	r3, #2
 8000566:	0c12      	lsrs	r2, r2, #16
 8000568:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 800056a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800056e:	f000 fbc3 	bl	8000cf8 <HAL_Delay>
//	  HAL_USART_Transmit(&husart2,"What the fuck ", sizeof("What the fuck"), 500);

	  getData();
 8000572:	f000 fa4d 	bl	8000a10 <getData>
  {
 8000576:	e7f0      	b.n	800055a <main+0x22>
 8000578:	08002c20 	.word	0x08002c20

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b0b8      	sub	sp, #224	; 0xe0
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000586:	2234      	movs	r2, #52	; 0x34
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fb34 	bl	8002bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a0:	f107 0308 	add.w	r3, r7, #8
 80005a4:	2290      	movs	r2, #144	; 0x90
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fb25 	bl	8002bf8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <SystemClock_Config+0xec>)
 80005b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b2:	4a2d      	ldr	r2, [pc, #180]	; (8000668 <SystemClock_Config+0xec>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ba:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <SystemClock_Config+0xec>)
 80005bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c6:	4b29      	ldr	r3, [pc, #164]	; (800066c <SystemClock_Config+0xf0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ce:	4a27      	ldr	r2, [pc, #156]	; (800066c <SystemClock_Config+0xf0>)
 80005d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d4:	6013      	str	r3, [r2, #0]
 80005d6:	4b25      	ldr	r3, [pc, #148]	; (800066c <SystemClock_Config+0xf0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fe46 	bl	8001290 <HAL_RCC_OscConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800060a:	f000 fa1d 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000624:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f001 f8d9 	bl	80017ec <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000640:	f000 fa02 	bl	8000a48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000648:	2300      	movs	r3, #0
 800064a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064c:	f107 0308 	add.w	r3, r7, #8
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fac1 	bl	8001bd8 <HAL_RCCEx_PeriphCLKConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800065c:	f000 f9f4 	bl	8000a48 <Error_Handler>
  }
}
 8000660:	bf00      	nop
 8000662:	37e0      	adds	r7, #224	; 0xe0
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40023800 	.word	0x40023800
 800066c:	40007000 	.word	0x40007000

08000670 <MX_USART2_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_Init(int n, int t, int p)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	60f8      	str	r0, [r7, #12]
 8000678:	60b9      	str	r1, [r7, #8]
 800067a:	607a      	str	r2, [r7, #4]

  /* USER CODE BEGIN USART2_Init 0 */
	  if(n == 7){husart2.Init.WordLength = USART_WORDLENGTH_7B;} // these there if-else statments are to
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b07      	cmp	r3, #7
 8000680:	d104      	bne.n	800068c <MX_USART2_Init+0x1c>
 8000682:	4b22      	ldr	r3, [pc, #136]	; (800070c <MX_USART2_Init+0x9c>)
 8000684:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	e00a      	b.n	80006a2 <MX_USART2_Init+0x32>
	  else if (n == 8){husart2.Init.WordLength = USART_WORDLENGTH_8B;}//used to select the desired word length
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b08      	cmp	r3, #8
 8000690:	d103      	bne.n	800069a <MX_USART2_Init+0x2a>
 8000692:	4b1e      	ldr	r3, [pc, #120]	; (800070c <MX_USART2_Init+0x9c>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	e003      	b.n	80006a2 <MX_USART2_Init+0x32>
	  else{husart2.Init.WordLength = USART_WORDLENGTH_9B;}
 800069a:	4b1c      	ldr	r3, [pc, #112]	; (800070c <MX_USART2_Init+0x9c>)
 800069c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006a0:	609a      	str	r2, [r3, #8]
	  husart2.Init.BaudRate = t; // this statment sets the baud rate
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a19      	ldr	r2, [pc, #100]	; (800070c <MX_USART2_Init+0x9c>)
 80006a6:	6053      	str	r3, [r2, #4]
	  if(p == 0){husart2.Init.Parity = USART_PARITY_NONE;} // these 3 statments set the parity
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d103      	bne.n	80006b6 <MX_USART2_Init+0x46>
 80006ae:	4b17      	ldr	r3, [pc, #92]	; (800070c <MX_USART2_Init+0x9c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	e00b      	b.n	80006ce <MX_USART2_Init+0x5e>
	  else if(p == 1){husart2.Init.Parity = USART_PARITY_ODD;}
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d104      	bne.n	80006c6 <MX_USART2_Init+0x56>
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_Init+0x9c>)
 80006be:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006c2:	611a      	str	r2, [r3, #16]
 80006c4:	e003      	b.n	80006ce <MX_USART2_Init+0x5e>
	  else{husart2.Init.Parity = USART_PARITY_EVEN;}
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_Init+0x9c>)
 80006c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006cc:	611a      	str	r2, [r3, #16]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  husart2.Instance = USART2;
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_Init+0x9c>)
 80006d0:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <MX_USART2_Init+0xa0>)
 80006d2:	601a      	str	r2, [r3, #0]
  husart2.Init.Parity = USART_PARITY_NONE;
 80006d4:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_USART2_Init+0x9c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  husart2.Init.Mode = USART_MODE_TX_RX;
 80006da:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_Init+0x9c>)
 80006dc:	220c      	movs	r2, #12
 80006de:	615a      	str	r2, [r3, #20]
  husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USART2_Init+0x9c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_Init+0x9c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	61da      	str	r2, [r3, #28]
  husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_USART2_Init+0x9c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart2) != HAL_OK)
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_USART2_Init+0x9c>)
 80006f4:	f001 fe96 	bl	8002424 <HAL_USART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_Init+0x92>
  {
    Error_Handler();
 80006fe:	f000 f9a3 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3710      	adds	r7, #16
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000030 	.word	0x20000030
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08c      	sub	sp, #48	; 0x30
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b7f      	ldr	r3, [pc, #508]	; (8000928 <MX_GPIO_Init+0x214>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a7e      	ldr	r2, [pc, #504]	; (8000928 <MX_GPIO_Init+0x214>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b7c      	ldr	r3, [pc, #496]	; (8000928 <MX_GPIO_Init+0x214>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b79      	ldr	r3, [pc, #484]	; (8000928 <MX_GPIO_Init+0x214>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a78      	ldr	r2, [pc, #480]	; (8000928 <MX_GPIO_Init+0x214>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b76      	ldr	r3, [pc, #472]	; (8000928 <MX_GPIO_Init+0x214>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b73      	ldr	r3, [pc, #460]	; (8000928 <MX_GPIO_Init+0x214>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a72      	ldr	r2, [pc, #456]	; (8000928 <MX_GPIO_Init+0x214>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b70      	ldr	r3, [pc, #448]	; (8000928 <MX_GPIO_Init+0x214>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	613b      	str	r3, [r7, #16]
 8000770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b6d      	ldr	r3, [pc, #436]	; (8000928 <MX_GPIO_Init+0x214>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a6c      	ldr	r2, [pc, #432]	; (8000928 <MX_GPIO_Init+0x214>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b6a      	ldr	r3, [pc, #424]	; (8000928 <MX_GPIO_Init+0x214>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	4b67      	ldr	r3, [pc, #412]	; (8000928 <MX_GPIO_Init+0x214>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a66      	ldr	r2, [pc, #408]	; (8000928 <MX_GPIO_Init+0x214>)
 8000790:	f043 0308 	orr.w	r3, r3, #8
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b64      	ldr	r3, [pc, #400]	; (8000928 <MX_GPIO_Init+0x214>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007a2:	4b61      	ldr	r3, [pc, #388]	; (8000928 <MX_GPIO_Init+0x214>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a60      	ldr	r2, [pc, #384]	; (8000928 <MX_GPIO_Init+0x214>)
 80007a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b5e      	ldr	r3, [pc, #376]	; (8000928 <MX_GPIO_Init+0x214>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f244 0181 	movw	r1, #16513	; 0x4081
 80007c0:	485a      	ldr	r0, [pc, #360]	; (800092c <MX_GPIO_Init+0x218>)
 80007c2:	f000 fd4b 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2140      	movs	r1, #64	; 0x40
 80007ca:	4859      	ldr	r0, [pc, #356]	; (8000930 <MX_GPIO_Init+0x21c>)
 80007cc:	f000 fd46 	bl	800125c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	4b57      	ldr	r3, [pc, #348]	; (8000934 <MX_GPIO_Init+0x220>)
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4854      	ldr	r0, [pc, #336]	; (8000938 <MX_GPIO_Init+0x224>)
 80007e6:	f000 fb8f 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007ea:	2332      	movs	r3, #50	; 0x32
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007fa:	230b      	movs	r3, #11
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	4619      	mov	r1, r3
 8000804:	484c      	ldr	r0, [pc, #304]	; (8000938 <MX_GPIO_Init+0x224>)
 8000806:	f000 fb7f 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 800080a:	2382      	movs	r3, #130	; 0x82
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800081a:	230b      	movs	r3, #11
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4845      	ldr	r0, [pc, #276]	; (800093c <MX_GPIO_Init+0x228>)
 8000826:	f000 fb6f 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800082a:	f244 0381 	movw	r3, #16513	; 0x4081
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	483a      	ldr	r0, [pc, #232]	; (800092c <MX_GPIO_Init+0x218>)
 8000844:	f000 fb60 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000856:	2303      	movs	r3, #3
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800085a:	230b      	movs	r3, #11
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4831      	ldr	r0, [pc, #196]	; (800092c <MX_GPIO_Init+0x218>)
 8000866:	f000 fb4f 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800086a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000878:	2303      	movs	r3, #3
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800087c:	2307      	movs	r3, #7
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	482e      	ldr	r0, [pc, #184]	; (8000940 <MX_GPIO_Init+0x22c>)
 8000888:	f000 fb3e 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800088c:	2340      	movs	r3, #64	; 0x40
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	4823      	ldr	r0, [pc, #140]	; (8000930 <MX_GPIO_Init+0x21c>)
 80008a4:	f000 fb30 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	481d      	ldr	r0, [pc, #116]	; (8000930 <MX_GPIO_Init+0x21c>)
 80008bc:	f000 fb24 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008c0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	2302      	movs	r3, #2
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008d2:	230a      	movs	r3, #10
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <MX_GPIO_Init+0x228>)
 80008de:	f000 fb13 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 031c 	add.w	r3, r7, #28
 80008f4:	4619      	mov	r1, r3
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_GPIO_Init+0x228>)
 80008f8:	f000 fb06 	bl	8000f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800090e:	230b      	movs	r3, #11
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_GPIO_Init+0x21c>)
 800091a:	f000 faf5 	bl	8000f08 <HAL_GPIO_Init>

}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	; 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40021800 	.word	0x40021800
 8000934:	10110000 	.word	0x10110000
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000
 8000940:	40020c00 	.word	0x40020c00

08000944 <sendData>:

/* USER CODE BEGIN 4 */

void sendData(uint8_t* data){
 8000944:	b5b0      	push	{r4, r5, r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	HAL_USART_Transmit(&husart2,"sendData", sizeof("sendData"), 500);
 800094c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000950:	2209      	movs	r2, #9
 8000952:	492d      	ldr	r1, [pc, #180]	; (8000a08 <sendData+0xc4>)
 8000954:	482d      	ldr	r0, [pc, #180]	; (8000a0c <sendData+0xc8>)
 8000956:	f001 fdaf 	bl	80024b8 <HAL_USART_Transmit>
	uint8_t i = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	75bb      	strb	r3, [r7, #22]
	uint8_t size = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	75fb      	strb	r3, [r7, #23]
	uint8_t v[1] = {"~"};
 8000962:	237e      	movs	r3, #126	; 0x7e
 8000964:	723b      	strb	r3, [r7, #8]
	while (data[size] != v[0] && size<= sizeof(data)/sizeof(data[0])){size++;}
 8000966:	e002      	b.n	800096e <sendData+0x2a>
 8000968:	7dfb      	ldrb	r3, [r7, #23]
 800096a:	3301      	adds	r3, #1
 800096c:	75fb      	strb	r3, [r7, #23]
 800096e:	7dfb      	ldrb	r3, [r7, #23]
 8000970:	687a      	ldr	r2, [r7, #4]
 8000972:	4413      	add	r3, r2
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	429a      	cmp	r2, r3
 800097a:	d002      	beq.n	8000982 <sendData+0x3e>
 800097c:	7dfb      	ldrb	r3, [r7, #23]
 800097e:	2b04      	cmp	r3, #4
 8000980:	d9f2      	bls.n	8000968 <sendData+0x24>
	uint8_t datasend [size];
 8000982:	7df8      	ldrb	r0, [r7, #23]
 8000984:	466b      	mov	r3, sp
 8000986:	461d      	mov	r5, r3
 8000988:	4603      	mov	r3, r0
 800098a:	3b01      	subs	r3, #1
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	b2c1      	uxtb	r1, r0
 8000990:	f04f 0200 	mov.w	r2, #0
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	f04f 0400 	mov.w	r4, #0
 800099c:	00d4      	lsls	r4, r2, #3
 800099e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80009a2:	00cb      	lsls	r3, r1, #3
 80009a4:	b2c1      	uxtb	r1, r0
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	f04f 0300 	mov.w	r3, #0
 80009ae:	f04f 0400 	mov.w	r4, #0
 80009b2:	00d4      	lsls	r4, r2, #3
 80009b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80009b8:	00cb      	lsls	r3, r1, #3
 80009ba:	4603      	mov	r3, r0
 80009bc:	3307      	adds	r3, #7
 80009be:	08db      	lsrs	r3, r3, #3
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	ebad 0d03 	sub.w	sp, sp, r3
 80009c6:	466b      	mov	r3, sp
 80009c8:	3300      	adds	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
	while (data[i] != v[0]){
 80009cc:	e009      	b.n	80009e2 <sendData+0x9e>
		datasend[i] = data[i];
 80009ce:	7dbb      	ldrb	r3, [r7, #22]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	441a      	add	r2, r3
 80009d4:	7dbb      	ldrb	r3, [r7, #22]
 80009d6:	7811      	ldrb	r1, [r2, #0]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	54d1      	strb	r1, [r2, r3]
		i++;}
 80009dc:	7dbb      	ldrb	r3, [r7, #22]
 80009de:	3301      	adds	r3, #1
 80009e0:	75bb      	strb	r3, [r7, #22]
	while (data[i] != v[0]){
 80009e2:	7dbb      	ldrb	r3, [r7, #22]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	7a3b      	ldrb	r3, [r7, #8]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d1ee      	bne.n	80009ce <sendData+0x8a>

	HAL_USART_Transmit(&husart2,datasend, sizeof(datasend), 500);
 80009f0:	68f9      	ldr	r1, [r7, #12]
 80009f2:	b282      	uxth	r2, r0
 80009f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <sendData+0xc8>)
 80009fa:	f001 fd5d 	bl	80024b8 <HAL_USART_Transmit>
 80009fe:	46ad      	mov	sp, r5

}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bdb0      	pop	{r4, r5, r7, pc}
 8000a08:	08002c2c 	.word	0x08002c2c
 8000a0c:	20000030 	.word	0x20000030

08000a10 <getData>:

void getData(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	 HAL_USART_Transmit(&husart2,"getData", sizeof("getData"), 500);
 8000a14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a18:	2208      	movs	r2, #8
 8000a1a:	4908      	ldr	r1, [pc, #32]	; (8000a3c <getData+0x2c>)
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <getData+0x30>)
 8000a1e:	f001 fd4b 	bl	80024b8 <HAL_USART_Transmit>
	HAL_USART_Receive(&husart2, dataloc, sizeof(dataloc), HAL_MAX_DELAY);
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	2205      	movs	r2, #5
 8000a28:	4906      	ldr	r1, [pc, #24]	; (8000a44 <getData+0x34>)
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <getData+0x30>)
 8000a2c:	f001 fded 	bl	800260a <HAL_USART_Receive>
	sendData(&dataloc[0]);
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <getData+0x34>)
 8000a32:	f7ff ff87 	bl	8000944 <sendData>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	08002c38 	.word	0x08002c38
 8000a40:	20000030 	.word	0x20000030
 8000a44:	20000000 	.word	0x20000000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
	...

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <HAL_MspInit+0x44>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <HAL_MspInit+0x44>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x44>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x44>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a25      	ldr	r2, [pc, #148]	; (8000b54 <HAL_USART_MspInit+0xb4>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d143      	bne.n	8000b4a <HAL_USART_MspInit+0xaa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000af8:	f043 0308 	orr.w	r3, r3, #8
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_USART_MspInit+0xb8>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0308 	and.w	r3, r3, #8
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA4     ------> USART2_CK
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <HAL_USART_MspInit+0xbc>)
 8000b26:	f000 f9ef 	bl	8000f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000b2a:	2360      	movs	r3, #96	; 0x60
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <HAL_USART_MspInit+0xc0>)
 8000b46:	f000 f9df 	bl	8000f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40004400 	.word	0x40004400
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f87e 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <SystemInit+0x28>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <SystemInit+0x28>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bd4:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SystemInit+0x28>)
 8000bd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bda:	609a      	str	r2, [r3, #8]
#endif
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000bf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bf2:	e003      	b.n	8000bfc <LoopCopyDataInit>

08000bf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bfa:	3104      	adds	r1, #4

08000bfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c04:	d3f6      	bcc.n	8000bf4 <CopyDataInit>
  ldr  r2, =_sbss
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c08:	e002      	b.n	8000c10 <LoopFillZerobss>

08000c0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c0c:	f842 3b04 	str.w	r3, [r2], #4

08000c10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c10:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c14:	d3f9      	bcc.n	8000c0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c16:	f7ff ffd3 	bl	8000bc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f001 ffc9 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fc8b 	bl	8000538 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000c28:	08002c68 	.word	0x08002c68
  ldr  r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c30:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000c34:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000c38:	20000084 	.word	0x20000084

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>

08000c3e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c42:	2003      	movs	r0, #3
 8000c44:	f000 f92c 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 f805 	bl	8000c58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c4e:	f7ff ff03 	bl	8000a58 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x54>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_InitTick+0x58>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f939 	bl	8000eee <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e00e      	b.n	8000ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2b0f      	cmp	r3, #15
 8000c8a:	d80a      	bhi.n	8000ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295
 8000c94:	f000 f90f 	bl	8000eb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c98:	4a06      	ldr	r2, [pc, #24]	; (8000cb4 <HAL_InitTick+0x5c>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000010 	.word	0x20000010
 8000cb4:	2000000c 	.word	0x2000000c

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000010 	.word	0x20000010
 8000cdc:	20000080 	.word	0x20000080

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000080 	.word	0x20000080

08000cf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d00:	f7ff ffee 	bl	8000ce0 <HAL_GetTick>
 8000d04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d10:	d005      	beq.n	8000d1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_Delay+0x40>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d1e:	bf00      	nop
 8000d20:	f7ff ffde 	bl	8000ce0 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	68fa      	ldr	r2, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d8f7      	bhi.n	8000d20 <HAL_Delay+0x28>
  {
  }
}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000010 	.word	0x20000010

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <__NVIC_SetPriorityGrouping+0x40>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	05fa0000 	.word	0x05fa0000

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	db0a      	blt.n	8000dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	490c      	ldr	r1, [pc, #48]	; (8000dec <__NVIC_SetPriority+0x4c>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	0112      	lsls	r2, r2, #4
 8000dc0:	b2d2      	uxtb	r2, r2
 8000dc2:	440b      	add	r3, r1
 8000dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc8:	e00a      	b.n	8000de0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4908      	ldr	r1, [pc, #32]	; (8000df0 <__NVIC_SetPriority+0x50>)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	f003 030f 	and.w	r3, r3, #15
 8000dd6:	3b04      	subs	r3, #4
 8000dd8:	0112      	lsls	r2, r2, #4
 8000dda:	b2d2      	uxtb	r2, r2
 8000ddc:	440b      	add	r3, r1
 8000dde:	761a      	strb	r2, [r3, #24]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000e100 	.word	0xe000e100
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b089      	sub	sp, #36	; 0x24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	60f8      	str	r0, [r7, #12]
 8000dfc:	60b9      	str	r1, [r7, #8]
 8000dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f1c3 0307 	rsb	r3, r3, #7
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	bf28      	it	cs
 8000e12:	2304      	movcs	r3, #4
 8000e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	2b06      	cmp	r3, #6
 8000e1c:	d902      	bls.n	8000e24 <NVIC_EncodePriority+0x30>
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3b03      	subs	r3, #3
 8000e22:	e000      	b.n	8000e26 <NVIC_EncodePriority+0x32>
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	43da      	mvns	r2, r3
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	401a      	ands	r2, r3
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	43d9      	mvns	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4c:	4313      	orrs	r3, r2
         );
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3724      	adds	r7, #36	; 0x24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
	...

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff8e 	bl	8000da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff ff47 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b086      	sub	sp, #24
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec8:	f7ff ff5c 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ecc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	68b9      	ldr	r1, [r7, #8]
 8000ed2:	6978      	ldr	r0, [r7, #20]
 8000ed4:	f7ff ff8e 	bl	8000df4 <NVIC_EncodePriority>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff5d 	bl	8000da0 <__NVIC_SetPriority>
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ffb0 	bl	8000e5c <SysTick_Config>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e175      	b.n	8001214 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f28:	2201      	movs	r2, #1
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	f040 8164 	bne.w	800120e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d00b      	beq.n	8000f66 <HAL_GPIO_Init+0x5e>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f5a:	2b11      	cmp	r3, #17
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d130      	bne.n	8000fc8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 0201 	and.w	r2, r3, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x100>
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b12      	cmp	r3, #18
 8001006:	d123      	bne.n	8001050 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	08da      	lsrs	r2, r3, #3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3208      	adds	r2, #8
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	691a      	ldr	r2, [r3, #16]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	08da      	lsrs	r2, r3, #3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3208      	adds	r2, #8
 800104a:	69b9      	ldr	r1, [r7, #24]
 800104c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	2203      	movs	r2, #3
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0203 	and.w	r2, r3, #3
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80be 	beq.w	800120e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b65      	ldr	r3, [pc, #404]	; (8001228 <HAL_GPIO_Init+0x320>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	4a64      	ldr	r2, [pc, #400]	; (8001228 <HAL_GPIO_Init+0x320>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6453      	str	r3, [r2, #68]	; 0x44
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <HAL_GPIO_Init+0x320>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010aa:	4a60      	ldr	r2, [pc, #384]	; (800122c <HAL_GPIO_Init+0x324>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	3302      	adds	r3, #2
 80010b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	220f      	movs	r2, #15
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a57      	ldr	r2, [pc, #348]	; (8001230 <HAL_GPIO_Init+0x328>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d037      	beq.n	8001146 <HAL_GPIO_Init+0x23e>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a56      	ldr	r2, [pc, #344]	; (8001234 <HAL_GPIO_Init+0x32c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d031      	beq.n	8001142 <HAL_GPIO_Init+0x23a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a55      	ldr	r2, [pc, #340]	; (8001238 <HAL_GPIO_Init+0x330>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d02b      	beq.n	800113e <HAL_GPIO_Init+0x236>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a54      	ldr	r2, [pc, #336]	; (800123c <HAL_GPIO_Init+0x334>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d025      	beq.n	800113a <HAL_GPIO_Init+0x232>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a53      	ldr	r2, [pc, #332]	; (8001240 <HAL_GPIO_Init+0x338>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d01f      	beq.n	8001136 <HAL_GPIO_Init+0x22e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a52      	ldr	r2, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x33c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d019      	beq.n	8001132 <HAL_GPIO_Init+0x22a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	; (8001248 <HAL_GPIO_Init+0x340>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x226>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <HAL_GPIO_Init+0x344>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x222>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x348>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x21e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x34c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x21a>
 800111e:	2309      	movs	r3, #9
 8001120:	e012      	b.n	8001148 <HAL_GPIO_Init+0x240>
 8001122:	230a      	movs	r3, #10
 8001124:	e010      	b.n	8001148 <HAL_GPIO_Init+0x240>
 8001126:	2308      	movs	r3, #8
 8001128:	e00e      	b.n	8001148 <HAL_GPIO_Init+0x240>
 800112a:	2307      	movs	r3, #7
 800112c:	e00c      	b.n	8001148 <HAL_GPIO_Init+0x240>
 800112e:	2306      	movs	r3, #6
 8001130:	e00a      	b.n	8001148 <HAL_GPIO_Init+0x240>
 8001132:	2305      	movs	r3, #5
 8001134:	e008      	b.n	8001148 <HAL_GPIO_Init+0x240>
 8001136:	2304      	movs	r3, #4
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x240>
 800113a:	2303      	movs	r3, #3
 800113c:	e004      	b.n	8001148 <HAL_GPIO_Init+0x240>
 800113e:	2302      	movs	r3, #2
 8001140:	e002      	b.n	8001148 <HAL_GPIO_Init+0x240>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x240>
 8001146:	2300      	movs	r3, #0
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	f002 0203 	and.w	r2, r2, #3
 800114e:	0092      	lsls	r2, r2, #2
 8001150:	4093      	lsls	r3, r2
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001158:	4934      	ldr	r1, [pc, #208]	; (800122c <HAL_GPIO_Init+0x324>)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001166:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <HAL_GPIO_Init+0x350>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800118a:	4a33      	ldr	r2, [pc, #204]	; (8001258 <HAL_GPIO_Init+0x350>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001190:	4b31      	ldr	r3, [pc, #196]	; (8001258 <HAL_GPIO_Init+0x350>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <HAL_GPIO_Init+0x350>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ba:	4b27      	ldr	r3, [pc, #156]	; (8001258 <HAL_GPIO_Init+0x350>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011de:	4a1e      	ldr	r2, [pc, #120]	; (8001258 <HAL_GPIO_Init+0x350>)
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <HAL_GPIO_Init+0x350>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001208:	4a13      	ldr	r2, [pc, #76]	; (8001258 <HAL_GPIO_Init+0x350>)
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3301      	adds	r3, #1
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	2b0f      	cmp	r3, #15
 8001218:	f67f ae86 	bls.w	8000f28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800121c:	bf00      	nop
 800121e:	3724      	adds	r7, #36	; 0x24
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40023800 	.word	0x40023800
 800122c:	40013800 	.word	0x40013800
 8001230:	40020000 	.word	0x40020000
 8001234:	40020400 	.word	0x40020400
 8001238:	40020800 	.word	0x40020800
 800123c:	40020c00 	.word	0x40020c00
 8001240:	40021000 	.word	0x40021000
 8001244:	40021400 	.word	0x40021400
 8001248:	40021800 	.word	0x40021800
 800124c:	40021c00 	.word	0x40021c00
 8001250:	40022000 	.word	0x40022000
 8001254:	40022400 	.word	0x40022400
 8001258:	40013c00 	.word	0x40013c00

0800125c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
 8001268:	4613      	mov	r3, r2
 800126a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800126c:	787b      	ldrb	r3, [r7, #1]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001272:	887a      	ldrh	r2, [r7, #2]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001278:	e003      	b.n	8001282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800127a:	887b      	ldrh	r3, [r7, #2]
 800127c:	041a      	lsls	r2, r3, #16
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	619a      	str	r2, [r3, #24]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e29b      	b.n	80017de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8087 	beq.w	80013c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b4:	4b96      	ldr	r3, [pc, #600]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d00c      	beq.n	80012da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c0:	4b93      	ldr	r3, [pc, #588]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d112      	bne.n	80012f2 <HAL_RCC_OscConfig+0x62>
 80012cc:	4b90      	ldr	r3, [pc, #576]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d8:	d10b      	bne.n	80012f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012da:	4b8d      	ldr	r3, [pc, #564]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d06c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x130>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d168      	bne.n	80013c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e275      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x7a>
 80012fc:	4b84      	ldr	r3, [pc, #528]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a83      	ldr	r2, [pc, #524]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e02e      	b.n	8001368 <HAL_RCC_OscConfig+0xd8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x9c>
 8001312:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a7e      	ldr	r2, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7b      	ldr	r2, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xd8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0xc0>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a72      	ldr	r2, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xd8>
 8001350:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a6e      	ldr	r2, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6b      	ldr	r2, [pc, #428]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fcb6 	bl	8000ce0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fcb2 	bl	8000ce0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e229      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fca2 	bl	8000ce0 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fc9e 	bl	8000ce0 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e215      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x110>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d069      	beq.n	80014a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ce:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x190>
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x17a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1e9      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	493d      	ldr	r1, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e040      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc54 	bl	8000ce0 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fc50 	bl	8000ce0 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1c7      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4929      	ldr	r1, [pc, #164]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
 800146e:	e018      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc30 	bl	8000ce0 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fc2c 	bl	8000ce0 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e1a3      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d038      	beq.n	8001520 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d019      	beq.n	80014ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fc0d 	bl	8000ce0 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fc09 	bl	8000ce0 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e180      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x23a>
 80014e8:	e01a      	b.n	8001520 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fbf3 	bl	8000ce0 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fbef 	bl	8000ce0 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d903      	bls.n	8001514 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e166      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
 8001510:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b92      	ldr	r3, [pc, #584]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a4 	beq.w	8001676 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b8c      	ldr	r3, [pc, #560]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b89      	ldr	r3, [pc, #548]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a88      	ldr	r2, [pc, #544]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b86      	ldr	r3, [pc, #536]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001556:	4b83      	ldr	r3, [pc, #524]	; (8001764 <HAL_RCC_OscConfig+0x4d4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001562:	4b80      	ldr	r3, [pc, #512]	; (8001764 <HAL_RCC_OscConfig+0x4d4>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7f      	ldr	r2, [pc, #508]	; (8001764 <HAL_RCC_OscConfig+0x4d4>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff fbb7 	bl	8000ce0 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff fbb3 	bl	8000ce0 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e12a      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001588:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x4d4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x31a>
 800159c:	4b70      	ldr	r3, [pc, #448]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a6f      	ldr	r2, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x33c>
 80015b2:	4b6b      	ldr	r3, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a6a      	ldr	r2, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b68      	ldr	r3, [pc, #416]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a67      	ldr	r2, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x35e>
 80015d4:	4b62      	ldr	r3, [pc, #392]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a61      	ldr	r2, [pc, #388]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b5f      	ldr	r3, [pc, #380]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a5e      	ldr	r2, [pc, #376]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
 80015ee:	4b5c      	ldr	r3, [pc, #368]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a5b      	ldr	r2, [pc, #364]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b59      	ldr	r3, [pc, #356]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a58      	ldr	r2, [pc, #352]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff fb67 	bl	8000ce0 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff fb63 	bl	8000ce0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0d8      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x386>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fb51 	bl	8000ce0 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fb4d 	bl	8000ce0 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0c2      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a3c      	ldr	r2, [pc, #240]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80ae 	beq.w	80017dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b37      	ldr	r3, [pc, #220]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d06d      	beq.n	8001768 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d14b      	bne.n	800172c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b32      	ldr	r3, [pc, #200]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a31      	ldr	r2, [pc, #196]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb1e 	bl	8000ce0 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb1a 	bl	8000ce0 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e091      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	071b      	lsls	r3, r3, #28
 80016f2:	491b      	ldr	r1, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a18      	ldr	r2, [pc, #96]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 80016fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff faec 	bl	8000ce0 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fae8 	bl	8000ce0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e05f      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x47c>
 800172a:	e057      	b.n	80017dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0b      	ldr	r2, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fad2 	bl	8000ce0 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff face 	bl	8000ce0 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e045      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001752:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x4b0>
 800175e:	e03d      	b.n	80017dc <HAL_RCC_OscConfig+0x54c>
 8001760:	40023800 	.word	0x40023800
 8001764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001768:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <HAL_RCC_OscConfig+0x558>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d030      	beq.n	80017d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001780:	429a      	cmp	r2, r3
 8001782:	d129      	bne.n	80017d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d122      	bne.n	80017d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d119      	bne.n	80017d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	085b      	lsrs	r3, r3, #1
 80017b0:	3b01      	subs	r3, #1
 80017b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d10f      	bne.n	80017d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d107      	bne.n	80017d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d001      	beq.n	80017dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800

080017ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0d0      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b6a      	ldr	r3, [pc, #424]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b67      	ldr	r3, [pc, #412]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 020f 	bic.w	r2, r3, #15
 800181a:	4965      	ldr	r1, [pc, #404]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 030f 	and.w	r3, r3, #15
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	4a58      	ldr	r2, [pc, #352]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	4a52      	ldr	r2, [pc, #328]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d040      	beq.n	8001910 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e073      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b3d      	ldr	r3, [pc, #244]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4936      	ldr	r1, [pc, #216]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e0:	f7ff f9fe 	bl	8000ce0 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f9fa 	bl	8000ce0 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e053      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d210      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 020f 	bic.w	r2, r3, #15
 8001926:	4922      	ldr	r1, [pc, #136]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800196a:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f821 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001982:	4601      	mov	r1, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001990:	5cd3      	ldrb	r3, [r2, r3]
 8001992:	fa21 f303 	lsr.w	r3, r1, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1d0>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_ClockConfig+0x1d4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f95a 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023c00 	.word	0x40023c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	08002c40 	.word	0x08002c40
 80019bc:	20000008 	.word	0x20000008
 80019c0:	2000000c 	.word	0x2000000c

080019c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019da:	4b63      	ldr	r3, [pc, #396]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d007      	beq.n	80019f6 <HAL_RCC_GetSysClockFreq+0x32>
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d008      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x38>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f040 80b4 	bne.w	8001b58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f0:	4b5e      	ldr	r3, [pc, #376]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019f2:	60bb      	str	r3, [r7, #8]
      break;
 80019f4:	e0b3      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f6:	4b5d      	ldr	r3, [pc, #372]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80019f8:	60bb      	str	r3, [r7, #8]
      break;
 80019fa:	e0b0      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019fc:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a06:	4b58      	ldr	r3, [pc, #352]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d04a      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a12:	4b55      	ldr	r3, [pc, #340]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	099b      	lsrs	r3, r3, #6
 8001a18:	f04f 0400 	mov.w	r4, #0
 8001a1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	ea03 0501 	and.w	r5, r3, r1
 8001a28:	ea04 0602 	and.w	r6, r4, r2
 8001a2c:	4629      	mov	r1, r5
 8001a2e:	4632      	mov	r2, r6
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	f04f 0400 	mov.w	r4, #0
 8001a38:	0154      	lsls	r4, r2, #5
 8001a3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a3e:	014b      	lsls	r3, r1, #5
 8001a40:	4619      	mov	r1, r3
 8001a42:	4622      	mov	r2, r4
 8001a44:	1b49      	subs	r1, r1, r5
 8001a46:	eb62 0206 	sbc.w	r2, r2, r6
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	f04f 0400 	mov.w	r4, #0
 8001a52:	0194      	lsls	r4, r2, #6
 8001a54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001a58:	018b      	lsls	r3, r1, #6
 8001a5a:	1a5b      	subs	r3, r3, r1
 8001a5c:	eb64 0402 	sbc.w	r4, r4, r2
 8001a60:	f04f 0100 	mov.w	r1, #0
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	00e2      	lsls	r2, r4, #3
 8001a6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001a6e:	00d9      	lsls	r1, r3, #3
 8001a70:	460b      	mov	r3, r1
 8001a72:	4614      	mov	r4, r2
 8001a74:	195b      	adds	r3, r3, r5
 8001a76:	eb44 0406 	adc.w	r4, r4, r6
 8001a7a:	f04f 0100 	mov.w	r1, #0
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	02a2      	lsls	r2, r4, #10
 8001a84:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a88:	0299      	lsls	r1, r3, #10
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	4621      	mov	r1, r4
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f04f 0400 	mov.w	r4, #0
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	f7fe fbcc 	bl	8000238 <__aeabi_uldivmod>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e049      	b.n	8001b3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	099b      	lsrs	r3, r3, #6
 8001aae:	f04f 0400 	mov.w	r4, #0
 8001ab2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	ea03 0501 	and.w	r5, r3, r1
 8001abe:	ea04 0602 	and.w	r6, r4, r2
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f04f 0400 	mov.w	r4, #0
 8001ace:	0154      	lsls	r4, r2, #5
 8001ad0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ad4:	014b      	lsls	r3, r1, #5
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4622      	mov	r2, r4
 8001ada:	1b49      	subs	r1, r1, r5
 8001adc:	eb62 0206 	sbc.w	r2, r2, r6
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	f04f 0400 	mov.w	r4, #0
 8001ae8:	0194      	lsls	r4, r2, #6
 8001aea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001aee:	018b      	lsls	r3, r1, #6
 8001af0:	1a5b      	subs	r3, r3, r1
 8001af2:	eb64 0402 	sbc.w	r4, r4, r2
 8001af6:	f04f 0100 	mov.w	r1, #0
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	00e2      	lsls	r2, r4, #3
 8001b00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b04:	00d9      	lsls	r1, r3, #3
 8001b06:	460b      	mov	r3, r1
 8001b08:	4614      	mov	r4, r2
 8001b0a:	195b      	adds	r3, r3, r5
 8001b0c:	eb44 0406 	adc.w	r4, r4, r6
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	02a2      	lsls	r2, r4, #10
 8001b1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b1e:	0299      	lsls	r1, r3, #10
 8001b20:	460b      	mov	r3, r1
 8001b22:	4614      	mov	r4, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	4621      	mov	r1, r4
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f04f 0400 	mov.w	r4, #0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	4623      	mov	r3, r4
 8001b32:	f7fe fb81 	bl	8000238 <__aeabi_uldivmod>
 8001b36:	4603      	mov	r3, r0
 8001b38:	460c      	mov	r4, r1
 8001b3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	3301      	adds	r3, #1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	60bb      	str	r3, [r7, #8]
      break;
 8001b56:	e002      	b.n	8001b5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b5a:	60bb      	str	r3, [r7, #8]
      break;
 8001b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	00f42400 	.word	0x00f42400

08001b70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001b90:	4601      	mov	r1, r0
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	0a9b      	lsrs	r3, r3, #10
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	4a03      	ldr	r2, [pc, #12]	; (8001bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	08002c50 	.word	0x08002c50

08001bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bb4:	f7ff ffdc 	bl	8001b70 <HAL_RCC_GetHCLKFreq>
 8001bb8:	4601      	mov	r1, r0
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0b5b      	lsrs	r3, r3, #13
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	4a03      	ldr	r2, [pc, #12]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bc6:	5cd3      	ldrb	r3, [r2, r3]
 8001bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08002c50 	.word	0x08002c50

08001bd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d012      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c00:	4b69      	ldr	r3, [pc, #420]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a68      	ldr	r2, [pc, #416]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c0a:	6093      	str	r3, [r2, #8]
 8001c0c:	4b66      	ldr	r3, [pc, #408]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c14:	4964      	ldr	r1, [pc, #400]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d017      	beq.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c40:	4959      	ldr	r1, [pc, #356]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c50:	d101      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d017      	beq.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	494a      	ldr	r1, [pc, #296]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001caa:	2301      	movs	r3, #1
 8001cac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	f000 808b 	beq.w	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a39      	ldr	r2, [pc, #228]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a34      	ldr	r2, [pc, #208]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ce0:	f7fe fffe 	bl	8000ce0 <HAL_GetTick>
 8001ce4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7fe fffa 	bl	8000ce0 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e38d      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d035      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d02e      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d2e:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d32:	4a1d      	ldr	r2, [pc, #116]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a1a      	ldr	r2, [pc, #104]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d46:	4a18      	ldr	r2, [pc, #96]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d114      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7fe ffc2 	bl	8000ce0 <HAL_GetTick>
 8001d5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	e00a      	b.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d60:	f7fe ffbe 	bl	8000ce0 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e34f      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ee      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d8e:	d111      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d9e:	400b      	ands	r3, r1
 8001da0:	4901      	ldr	r1, [pc, #4]	; (8001da8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40007000 	.word	0x40007000
 8001db0:	0ffffcff 	.word	0x0ffffcff
 8001db4:	4bb3      	ldr	r3, [pc, #716]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4ab2      	ldr	r2, [pc, #712]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001dbe:	6093      	str	r3, [r2, #8]
 8001dc0:	4bb0      	ldr	r3, [pc, #704]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	49ad      	ldr	r1, [pc, #692]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0310 	and.w	r3, r3, #16
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dde:	4ba9      	ldr	r3, [pc, #676]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001de4:	4aa7      	ldr	r2, [pc, #668]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dee:	4ba5      	ldr	r3, [pc, #660]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	49a2      	ldr	r1, [pc, #648]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e0c:	4b9d      	ldr	r3, [pc, #628]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e1a:	499a      	ldr	r1, [pc, #616]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e2e:	4b95      	ldr	r3, [pc, #596]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e3c:	4991      	ldr	r1, [pc, #580]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e50:	4b8c      	ldr	r3, [pc, #560]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e5e:	4989      	ldr	r1, [pc, #548]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e72:	4b84      	ldr	r3, [pc, #528]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	4980      	ldr	r1, [pc, #512]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e94:	4b7b      	ldr	r3, [pc, #492]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	4978      	ldr	r1, [pc, #480]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ebc:	f023 020c 	bic.w	r2, r3, #12
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec4:	496f      	ldr	r1, [pc, #444]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00a      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee6:	4967      	ldr	r1, [pc, #412]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efa:	4b62      	ldr	r3, [pc, #392]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f08:	495e      	ldr	r1, [pc, #376]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1c:	4b59      	ldr	r3, [pc, #356]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	4956      	ldr	r1, [pc, #344]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f3e:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	494d      	ldr	r1, [pc, #308]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f60:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	4945      	ldr	r1, [pc, #276]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f82:	4b40      	ldr	r3, [pc, #256]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f90:	493c      	ldr	r1, [pc, #240]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001fb2:	4934      	ldr	r1, [pc, #208]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d011      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fd4:	492b      	ldr	r1, [pc, #172]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fe0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fe4:	d101      	bne.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00a      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002006:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800200c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	491b      	ldr	r1, [pc, #108]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002016:	4313      	orrs	r3, r2
 8002018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00b      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002038:	4912      	ldr	r1, [pc, #72]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800204c:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800205c:	4909      	ldr	r1, [pc, #36]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00f      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002070:	4b04      	ldr	r3, [pc, #16]	; (8002084 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002080:	e002      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	4985      	ldr	r1, [pc, #532]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00b      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800209c:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800209e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ac:	497c      	ldr	r1, [pc, #496]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d005      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020c2:	f040 80d6 	bne.w	8002272 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020c6:	4b76      	ldr	r3, [pc, #472]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a75      	ldr	r2, [pc, #468]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d2:	f7fe fe05 	bl	8000ce0 <HAL_GetTick>
 80020d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020da:	f7fe fe01 	bl	8000ce0 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e194      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020ec:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f0      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d021      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	2b00      	cmp	r3, #0
 800210a:	d11d      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800210c:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800210e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800211c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002120:	0e1b      	lsrs	r3, r3, #24
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	019a      	lsls	r2, r3, #6
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	4957      	ldr	r1, [pc, #348]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800215c:	d00a      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02e      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002172:	d129      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002174:	4b4a      	ldr	r3, [pc, #296]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217a:	0c1b      	lsrs	r3, r3, #16
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002188:	0f1b      	lsrs	r3, r3, #28
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	019a      	lsls	r2, r3, #6
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	061b      	lsls	r3, r3, #24
 80021a2:	431a      	orrs	r2, r3
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	071b      	lsls	r3, r3, #28
 80021a8:	493d      	ldr	r1, [pc, #244]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b6:	f023 021f 	bic.w	r2, r3, #31
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	4937      	ldr	r1, [pc, #220]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01d      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021da:	0e1b      	lsrs	r3, r3, #24
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e8:	0f1b      	lsrs	r3, r3, #28
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	019a      	lsls	r2, r3, #6
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	431a      	orrs	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	061b      	lsls	r3, r3, #24
 8002202:	431a      	orrs	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	071b      	lsls	r3, r3, #28
 8002208:	4925      	ldr	r1, [pc, #148]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d011      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	019a      	lsls	r2, r3, #6
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	061b      	lsls	r3, r3, #24
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	071b      	lsls	r3, r3, #28
 8002238:	4919      	ldr	r1, [pc, #100]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a16      	ldr	r2, [pc, #88]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800224a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7fe fd48 	bl	8000ce0 <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002254:	f7fe fd44 	bl	8000ce0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b64      	cmp	r3, #100	; 0x64
 8002260:	d901      	bls.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0d7      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002266:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d0f0      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	2b01      	cmp	r3, #1
 8002276:	f040 80cd 	bne.w	8002414 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002286:	f7fe fd2b 	bl	8000ce0 <HAL_GetTick>
 800228a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228e:	f7fe fd27 	bl	8000ce0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d903      	bls.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0ba      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80022a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022b0:	d0ed      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d02e      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d12a      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022da:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022e8:	4b4d      	ldr	r3, [pc, #308]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	0f1b      	lsrs	r3, r3, #28
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	019a      	lsls	r2, r3, #6
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	041b      	lsls	r3, r3, #16
 8002300:	431a      	orrs	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	061b      	lsls	r3, r3, #24
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	071b      	lsls	r3, r3, #28
 800230e:	4944      	ldr	r1, [pc, #272]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002316:	4b42      	ldr	r3, [pc, #264]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800231c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002324:	3b01      	subs	r3, #1
 8002326:	021b      	lsls	r3, r3, #8
 8002328:	493d      	ldr	r1, [pc, #244]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800232a:	4313      	orrs	r3, r2
 800232c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d022      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002344:	d11d      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002346:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	0e1b      	lsrs	r3, r3, #24
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002354:	4b32      	ldr	r3, [pc, #200]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	0f1b      	lsrs	r3, r3, #28
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	019a      	lsls	r2, r3, #6
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	061b      	lsls	r3, r3, #24
 8002374:	431a      	orrs	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	071b      	lsls	r3, r3, #28
 800237a:	4929      	ldr	r1, [pc, #164]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d028      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800238e:	4b24      	ldr	r3, [pc, #144]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	0e1b      	lsrs	r3, r3, #24
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800239c:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	019a      	lsls	r2, r3, #6
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	041b      	lsls	r3, r3, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	061b      	lsls	r3, r3, #24
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	071b      	lsls	r3, r3, #28
 80023c2:	4917      	ldr	r1, [pc, #92]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023ca:	4b15      	ldr	r3, [pc, #84]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	4911      	ldr	r1, [pc, #68]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe fc78 	bl	8000ce0 <HAL_GetTick>
 80023f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023f4:	f7fe fc74 	bl	8000ce0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e007      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800240e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002412:	d1ef      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3720      	adds	r7, #32
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800

08002424 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e03c      	b.n	80024b0 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7fe fb28 	bl	8000aa0 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f9d9 	bl	8002820 <USART_SetConfig>
 800246e:	4603      	mov	r3, r0
 8002470:	2b01      	cmp	r3, #1
 8002472:	d101      	bne.n	8002478 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e01b      	b.n	80024b0 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002486:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002496:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 fb3d 	bl	8002b28 <USART_CheckIdleState>
 80024ae:	4603      	mov	r3, r0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <HAL_USART_Transmit>:
  * @param  Size Amount of data elements (u8 or u16) to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	603b      	str	r3, [r7, #0]
 80024c4:	4613      	mov	r3, r2
 80024c6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	f040 8095 	bne.w	8002600 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_USART_Transmit+0x2a>
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e08d      	b.n	8002602 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_USART_Transmit+0x3c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e086      	b.n	8002602 <HAL_USART_Transmit+0x14a>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2212      	movs	r2, #18
 8002506:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800250a:	f7fe fbe9 	bl	8000ce0 <HAL_GetTick>
 800250e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	88fa      	ldrh	r2, [r7, #6]
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88fa      	ldrh	r2, [r7, #6]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002524:	d108      	bne.n	8002538 <HAL_USART_Transmit+0x80>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d104      	bne.n	8002538 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	e003      	b.n	8002540 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8002540:	e02a      	b.n	8002598 <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2200      	movs	r2, #0
 800254a:	2180      	movs	r1, #128	; 0x80
 800254c:	68f8      	ldr	r0, [r7, #12]
 800254e:	f000 f930 	bl	80027b2 <USART_WaitOnFlagUntilTimeout>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e052      	b.n	8002602 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10b      	bne.n	800257a <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002570:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	3302      	adds	r3, #2
 8002576:	61bb      	str	r3, [r7, #24]
 8002578:	e007      	b.n	800258a <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	781a      	ldrb	r2, [r3, #0]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3301      	adds	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1cf      	bne.n	8002542 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2140      	movs	r1, #64	; 0x40
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f900 	bl	80027b2 <USART_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e022      	b.n	8002602 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2208      	movs	r2, #8
 80025ca:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0210 	orr.w	r2, r2, #16
 80025ea:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_USART_Receive>:
  * @param Size Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Receive(USART_HandleTypeDef *husart, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b08a      	sub	sp, #40	; 0x28
 800260e:	af02      	add	r7, sp, #8
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	80fb      	strh	r3, [r7, #6]
  uint8_t  *prxdata8bits;
  uint16_t *prxdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b01      	cmp	r3, #1
 8002624:	f040 80c0 	bne.w	80027a8 <HAL_USART_Receive+0x19e>
  {
    if ((pRxData == NULL) || (Size == 0U))
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d002      	beq.n	8002634 <HAL_USART_Receive+0x2a>
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_USART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0b8      	b.n	80027aa <HAL_USART_Receive+0x1a0>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_USART_Receive+0x3c>
 8002642:	2302      	movs	r3, #2
 8002644:	e0b1      	b.n	80027aa <HAL_USART_Receive+0x1a0>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_RX;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2222      	movs	r2, #34	; 0x22
 8002658:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800265c:	f7fe fb40 	bl	8000ce0 <HAL_GetTick>
 8002660:	6178      	str	r0, [r7, #20]

    husart->RxXferSize = Size;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	88fa      	ldrh	r2, [r7, #6]
 8002666:	861a      	strh	r2, [r3, #48]	; 0x30
    husart->RxXferCount = Size;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	88fa      	ldrh	r2, [r7, #6]
 800266c:	865a      	strh	r2, [r3, #50]	; 0x32

    /* Computation of USART mask to apply to RDR register */
    USART_MASK_COMPUTATION(husart);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002676:	d10c      	bne.n	8002692 <HAL_USART_Receive+0x88>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d104      	bne.n	800268a <HAL_USART_Receive+0x80>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002686:	869a      	strh	r2, [r3, #52]	; 0x34
 8002688:	e027      	b.n	80026da <HAL_USART_Receive+0xd0>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	22ff      	movs	r2, #255	; 0xff
 800268e:	869a      	strh	r2, [r3, #52]	; 0x34
 8002690:	e023      	b.n	80026da <HAL_USART_Receive+0xd0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10b      	bne.n	80026b2 <HAL_USART_Receive+0xa8>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <HAL_USART_Receive+0xa0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	22ff      	movs	r2, #255	; 0xff
 80026a6:	869a      	strh	r2, [r3, #52]	; 0x34
 80026a8:	e017      	b.n	80026da <HAL_USART_Receive+0xd0>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	227f      	movs	r2, #127	; 0x7f
 80026ae:	869a      	strh	r2, [r3, #52]	; 0x34
 80026b0:	e013      	b.n	80026da <HAL_USART_Receive+0xd0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ba:	d10b      	bne.n	80026d4 <HAL_USART_Receive+0xca>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d103      	bne.n	80026cc <HAL_USART_Receive+0xc2>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	227f      	movs	r2, #127	; 0x7f
 80026c8:	869a      	strh	r2, [r3, #52]	; 0x34
 80026ca:	e006      	b.n	80026da <HAL_USART_Receive+0xd0>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	223f      	movs	r2, #63	; 0x3f
 80026d0:	869a      	strh	r2, [r3, #52]	; 0x34
 80026d2:	e002      	b.n	80026da <HAL_USART_Receive+0xd0>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	869a      	strh	r2, [r3, #52]	; 0x34
    uhMask = husart->Mask;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80026de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e8:	d108      	bne.n	80026fc <HAL_USART_Receive+0xf2>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d104      	bne.n	80026fc <HAL_USART_Receive+0xf2>
    {
      prxdata8bits  = NULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
      prxdata16bits = (uint16_t *) pRxData;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	e003      	b.n	8002704 <HAL_USART_Receive+0xfa>
    }
    else
    {
      prxdata8bits  = pRxData;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	61fb      	str	r3, [r7, #28]
      prxdata16bits = NULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (husart->RxXferCount > 0U)
 8002704:	e041      	b.n	800278a <HAL_USART_Receive+0x180>
      {
        /* Wait until TXE flag is set to send dummy byte in order to generate the
        * clock for the slave to send data.
        * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
        * can be written for all the cases. */
        if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2200      	movs	r2, #0
 800270e:	2180      	movs	r1, #128	; 0x80
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 f84e 	bl	80027b2 <USART_WaitOnFlagUntilTimeout>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_USART_Receive+0x116>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e044      	b.n	80027aa <HAL_USART_Receive+0x1a0>
        }
        husart->Instance->TDR = (USART_DUMMY_DATA & (uint16_t)0x0FF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	22ff      	movs	r2, #255	; 0xff
 8002726:	629a      	str	r2, [r3, #40]	; 0x28
      }

      /* Wait for RXNE Flag */
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2200      	movs	r2, #0
 8002730:	2120      	movs	r1, #32
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f83d 	bl	80027b2 <USART_WaitOnFlagUntilTimeout>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_USART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e033      	b.n	80027aa <HAL_USART_Receive+0x1a0>
      }

      if (prxdata8bits == NULL)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10c      	bne.n	8002762 <HAL_USART_Receive+0x158>
      {
        *prxdata16bits = (uint16_t)(husart->Instance->RDR & uhMask);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274e:	b29a      	uxth	r2, r3
 8002750:	8a7b      	ldrh	r3, [r7, #18]
 8002752:	4013      	ands	r3, r2
 8002754:	b29a      	uxth	r2, r3
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	801a      	strh	r2, [r3, #0]
        prxdata16bits++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3302      	adds	r3, #2
 800275e:	61bb      	str	r3, [r7, #24]
 8002760:	e00c      	b.n	800277c <HAL_USART_Receive+0x172>
      }
      else
      {
        *prxdata8bits = (uint8_t)(husart->Instance->RDR & (uint8_t)(uhMask & 0xFFU));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	b2da      	uxtb	r2, r3
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	4013      	ands	r3, r2
 8002770:	b2da      	uxtb	r2, r3
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	701a      	strb	r2, [r3, #0]
        prxdata8bits++;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
      }

      husart->RxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	865a      	strh	r2, [r3, #50]	; 0x32
    while (husart->RxXferCount > 0U)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800278e:	b29b      	uxth	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1b8      	bne.n	8002706 <HAL_USART_Receive+0xfc>

    }


    /* At end of Rx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e000      	b.n	80027aa <HAL_USART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80027a8:	2302      	movs	r3, #2
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	60f8      	str	r0, [r7, #12]
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	603b      	str	r3, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80027c2:	e018      	b.n	80027f6 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d014      	beq.n	80027f6 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027cc:	f7fe fa88 	bl	8000ce0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d302      	bcc.n	80027e2 <USART_WaitOnFlagUntilTimeout+0x30>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e00f      	b.n	8002816 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	4013      	ands	r3, r2
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	429a      	cmp	r2, r3
 8002804:	bf0c      	ite	eq
 8002806:	2301      	moveq	r3, #1
 8002808:	2300      	movne	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	429a      	cmp	r2, r3
 8002812:	d0d7      	beq.n	80027c4 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002844:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4baf      	ldr	r3, [pc, #700]	; (8002b0c <USART_SetConfig+0x2ec>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	6979      	ldr	r1, [r7, #20]
 8002856:	430b      	orrs	r3, r1
 8002858:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800285a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800285e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	4313      	orrs	r3, r2
 8002868:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4313      	orrs	r3, r2
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	4313      	orrs	r3, r2
 8002882:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a9c      	ldr	r2, [pc, #624]	; (8002b10 <USART_SetConfig+0x2f0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d122      	bne.n	80028e8 <USART_SetConfig+0xc8>
 80028a2:	4b9c      	ldr	r3, [pc, #624]	; (8002b14 <USART_SetConfig+0x2f4>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d817      	bhi.n	80028e0 <USART_SetConfig+0xc0>
 80028b0:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <USART_SetConfig+0x98>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	080028c9 	.word	0x080028c9
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028cf 	.word	0x080028cf
 80028c4:	080028db 	.word	0x080028db
 80028c8:	2301      	movs	r3, #1
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e098      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80028ce:	2302      	movs	r3, #2
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e095      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80028d4:	2304      	movs	r3, #4
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e092      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80028da:	2308      	movs	r3, #8
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e08f      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	bf00      	nop
 80028e6:	e08b      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a8a      	ldr	r2, [pc, #552]	; (8002b18 <USART_SetConfig+0x2f8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d134      	bne.n	800295c <USART_SetConfig+0x13c>
 80028f2:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <USART_SetConfig+0x2f4>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d829      	bhi.n	8002954 <USART_SetConfig+0x134>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <USART_SetConfig+0xe8>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002955 	.word	0x08002955
 8002910:	08002955 	.word	0x08002955
 8002914:	08002955 	.word	0x08002955
 8002918:	08002949 	.word	0x08002949
 800291c:	08002955 	.word	0x08002955
 8002920:	08002955 	.word	0x08002955
 8002924:	08002955 	.word	0x08002955
 8002928:	08002943 	.word	0x08002943
 800292c:	08002955 	.word	0x08002955
 8002930:	08002955 	.word	0x08002955
 8002934:	08002955 	.word	0x08002955
 8002938:	0800294f 	.word	0x0800294f
 800293c:	2300      	movs	r3, #0
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e05e      	b.n	8002a00 <USART_SetConfig+0x1e0>
 8002942:	2302      	movs	r3, #2
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e05b      	b.n	8002a00 <USART_SetConfig+0x1e0>
 8002948:	2304      	movs	r3, #4
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e058      	b.n	8002a00 <USART_SetConfig+0x1e0>
 800294e:	2308      	movs	r3, #8
 8002950:	77fb      	strb	r3, [r7, #31]
 8002952:	e055      	b.n	8002a00 <USART_SetConfig+0x1e0>
 8002954:	2310      	movs	r3, #16
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	bf00      	nop
 800295a:	e051      	b.n	8002a00 <USART_SetConfig+0x1e0>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a6e      	ldr	r2, [pc, #440]	; (8002b1c <USART_SetConfig+0x2fc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d120      	bne.n	80029a8 <USART_SetConfig+0x188>
 8002966:	4b6b      	ldr	r3, [pc, #428]	; (8002b14 <USART_SetConfig+0x2f4>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002970:	2b10      	cmp	r3, #16
 8002972:	d00f      	beq.n	8002994 <USART_SetConfig+0x174>
 8002974:	2b10      	cmp	r3, #16
 8002976:	d802      	bhi.n	800297e <USART_SetConfig+0x15e>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <USART_SetConfig+0x168>
 800297c:	e010      	b.n	80029a0 <USART_SetConfig+0x180>
 800297e:	2b20      	cmp	r3, #32
 8002980:	d005      	beq.n	800298e <USART_SetConfig+0x16e>
 8002982:	2b30      	cmp	r3, #48	; 0x30
 8002984:	d009      	beq.n	800299a <USART_SetConfig+0x17a>
 8002986:	e00b      	b.n	80029a0 <USART_SetConfig+0x180>
 8002988:	2300      	movs	r3, #0
 800298a:	77fb      	strb	r3, [r7, #31]
 800298c:	e038      	b.n	8002a00 <USART_SetConfig+0x1e0>
 800298e:	2302      	movs	r3, #2
 8002990:	77fb      	strb	r3, [r7, #31]
 8002992:	e035      	b.n	8002a00 <USART_SetConfig+0x1e0>
 8002994:	2304      	movs	r3, #4
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e032      	b.n	8002a00 <USART_SetConfig+0x1e0>
 800299a:	2308      	movs	r3, #8
 800299c:	77fb      	strb	r3, [r7, #31]
 800299e:	e02f      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029a0:	2310      	movs	r3, #16
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	bf00      	nop
 80029a6:	e02b      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <USART_SetConfig+0x300>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d124      	bne.n	80029fc <USART_SetConfig+0x1dc>
 80029b2:	4b58      	ldr	r3, [pc, #352]	; (8002b14 <USART_SetConfig+0x2f4>)
 80029b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c0:	d012      	beq.n	80029e8 <USART_SetConfig+0x1c8>
 80029c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029c6:	d802      	bhi.n	80029ce <USART_SetConfig+0x1ae>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <USART_SetConfig+0x1bc>
 80029cc:	e012      	b.n	80029f4 <USART_SetConfig+0x1d4>
 80029ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d2:	d006      	beq.n	80029e2 <USART_SetConfig+0x1c2>
 80029d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029d8:	d009      	beq.n	80029ee <USART_SetConfig+0x1ce>
 80029da:	e00b      	b.n	80029f4 <USART_SetConfig+0x1d4>
 80029dc:	2301      	movs	r3, #1
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e00e      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029e2:	2302      	movs	r3, #2
 80029e4:	77fb      	strb	r3, [r7, #31]
 80029e6:	e00b      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029e8:	2304      	movs	r3, #4
 80029ea:	77fb      	strb	r3, [r7, #31]
 80029ec:	e008      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029ee:	2308      	movs	r3, #8
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e005      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029f4:	2310      	movs	r3, #16
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	bf00      	nop
 80029fa:	e001      	b.n	8002a00 <USART_SetConfig+0x1e0>
 80029fc:	2310      	movs	r3, #16
 80029fe:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d857      	bhi.n	8002ab6 <USART_SetConfig+0x296>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <USART_SetConfig+0x1ec>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a31 	.word	0x08002a31
 8002a10:	08002a4f 	.word	0x08002a4f
 8002a14:	08002a6d 	.word	0x08002a6d
 8002a18:	08002ab7 	.word	0x08002ab7
 8002a1c:	08002a83 	.word	0x08002a83
 8002a20:	08002ab7 	.word	0x08002ab7
 8002a24:	08002ab7 	.word	0x08002ab7
 8002a28:	08002ab7 	.word	0x08002ab7
 8002a2c:	08002aa1 	.word	0x08002aa1
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a30:	f7ff f8aa 	bl	8001b88 <HAL_RCC_GetPCLK1Freq>
 8002a34:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	005a      	lsls	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	441a      	add	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	61bb      	str	r3, [r7, #24]
      break;
 8002a4c:	e036      	b.n	8002abc <USART_SetConfig+0x29c>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a4e:	f7ff f8af 	bl	8001bb0 <HAL_RCC_GetPCLK2Freq>
 8002a52:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	005a      	lsls	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	61bb      	str	r3, [r7, #24]
      break;
 8002a6a:	e027      	b.n	8002abc <USART_SetConfig+0x29c>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	085a      	lsrs	r2, r3, #1
 8002a72:	4b2c      	ldr	r3, [pc, #176]	; (8002b24 <USART_SetConfig+0x304>)
 8002a74:	4413      	add	r3, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6852      	ldr	r2, [r2, #4]
 8002a7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      break;
 8002a80:	e01c      	b.n	8002abc <USART_SetConfig+0x29c>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8002a82:	f7fe ff9f 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002a86:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	005a      	lsls	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	61bb      	str	r3, [r7, #24]
      break;
 8002a9e:	e00d      	b.n	8002abc <USART_SetConfig+0x29c>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab2:	61bb      	str	r3, [r7, #24]
      break;
 8002ab4:	e002      	b.n	8002abc <USART_SetConfig+0x29c>
    default:
      ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	77bb      	strb	r3, [r7, #30]
      break;
 8002aba:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	d916      	bls.n	8002af0 <USART_SetConfig+0x2d0>
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac8:	d212      	bcs.n	8002af0 <USART_SetConfig+0x2d0>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	f023 030f 	bic.w	r3, r3, #15
 8002ad2:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	89fb      	ldrh	r3, [r7, #14]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	89fa      	ldrh	r2, [r7, #14]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	e001      	b.n	8002af4 <USART_SetConfig+0x2d4>
  }
  else
  {
    ret = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8002b00:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3720      	adds	r7, #32
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	efff69f3 	.word	0xefff69f3
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	40004800 	.word	0x40004800
 8002b20:	40011400 	.word	0x40011400
 8002b24:	01e84800 	.word	0x01e84800

08002b28 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b36:	f7fe f8d3 	bl	8000ce0 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d10e      	bne.n	8002b68 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fe2a 	bl	80027b2 <USART_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e01e      	b.n	8002ba6 <USART_CheckIdleState+0x7e>
    }
  }
#if defined(USART_ISR_REACK)
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d10e      	bne.n	8002b94 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8002b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff fe14 	bl	80027b2 <USART_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e008      	b.n	8002ba6 <USART_CheckIdleState+0x7e>
    }
  }
#endif

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4e0d      	ldr	r6, [pc, #52]	; (8002be8 <__libc_init_array+0x38>)
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb6:	1ba4      	subs	r4, r4, r6
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	2500      	movs	r5, #0
 8002bbc:	42a5      	cmp	r5, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	4e0b      	ldr	r6, [pc, #44]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc2:	4c0c      	ldr	r4, [pc, #48]	; (8002bf4 <__libc_init_array+0x44>)
 8002bc4:	f000 f820 	bl	8002c08 <_init>
 8002bc8:	1ba4      	subs	r4, r4, r6
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	2500      	movs	r5, #0
 8002bce:	42a5      	cmp	r5, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002bd8:	4798      	blx	r3
 8002bda:	3501      	adds	r5, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002be2:	4798      	blx	r3
 8002be4:	3501      	adds	r5, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08002c60 	.word	0x08002c60
 8002bec:	08002c60 	.word	0x08002c60
 8002bf0:	08002c60 	.word	0x08002c60
 8002bf4:	08002c64 	.word	0x08002c64

08002bf8 <memset>:
 8002bf8:	4402      	add	r2, r0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <memset+0xa>
 8002c00:	4770      	bx	lr
 8002c02:	f803 1b01 	strb.w	r1, [r3], #1
 8002c06:	e7f9      	b.n	8002bfc <memset+0x4>

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
