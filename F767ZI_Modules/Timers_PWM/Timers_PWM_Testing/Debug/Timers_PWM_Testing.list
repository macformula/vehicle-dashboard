
Timers_PWM_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046cc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  080048cc  080048cc  000148cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e68  08004e68  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e70  08004e70  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08004ee8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004ee8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd7a  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018a4  00000000  00000000  0002be18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009f0  00000000  00000000  0002e178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027ce9  00000000  00000000  0002eb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d5c  00000000  00000000  00056851  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f69a8  00000000  00000000  0005f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  00155fd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080048b4 	.word	0x080048b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080048b4 	.word	0x080048b4

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Var_Timer_Init>:
  * @brief set up default values for Timer_Init function
  * @param Timer_Init_args
  * @retval None
  */
static void Var_Timer_Init(Timer_Init_args in)
{
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b08d      	sub	sp, #52	; 0x34
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t timer_out = in.timer;
 80005ec:	793b      	ldrb	r3, [r7, #4]
 80005ee:	77fb      	strb	r3, [r7, #31]
	uint16_t period_out = in.period;
 80005f0:	88fb      	ldrh	r3, [r7, #6]
 80005f2:	83bb      	strh	r3, [r7, #28]
	uint8_t do_trigger_ISR_out = in.do_trigger_ISR ? in.do_trigger_ISR :1;
 80005f4:	7a3b      	ldrb	r3, [r7, #8]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <Var_Timer_Init+0x1e>
 80005fa:	7a3b      	ldrb	r3, [r7, #8]
 80005fc:	e000      	b.n	8000600 <Var_Timer_Init+0x20>
 80005fe:	2301      	movs	r3, #1
 8000600:	76fb      	strb	r3, [r7, #27]
	uint8_t channel_1_out = in.channel_1 ? in.channel_1 :1;
 8000602:	7a7b      	ldrb	r3, [r7, #9]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <Var_Timer_Init+0x2c>
 8000608:	7a7b      	ldrb	r3, [r7, #9]
 800060a:	e000      	b.n	800060e <Var_Timer_Init+0x2e>
 800060c:	2301      	movs	r3, #1
 800060e:	76bb      	strb	r3, [r7, #26]
	uint8_t channel_2_out = in.channel_2 ? in.channel_2 :1;
 8000610:	7abb      	ldrb	r3, [r7, #10]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <Var_Timer_Init+0x3a>
 8000616:	7abb      	ldrb	r3, [r7, #10]
 8000618:	e000      	b.n	800061c <Var_Timer_Init+0x3c>
 800061a:	2301      	movs	r3, #1
 800061c:	767b      	strb	r3, [r7, #25]
	uint8_t channel_3_out = in.channel_3 ? in.channel_3 :1;
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <Var_Timer_Init+0x48>
 8000624:	7afb      	ldrb	r3, [r7, #11]
 8000626:	e000      	b.n	800062a <Var_Timer_Init+0x4a>
 8000628:	2301      	movs	r3, #1
 800062a:	763b      	strb	r3, [r7, #24]
	uint8_t channel_4_out = in.channel_4 ? in.channel_4 :1;
 800062c:	7b3b      	ldrb	r3, [r7, #12]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <Var_Timer_Init+0x56>
 8000632:	7b3b      	ldrb	r3, [r7, #12]
 8000634:	e000      	b.n	8000638 <Var_Timer_Init+0x58>
 8000636:	2301      	movs	r3, #1
 8000638:	75fb      	strb	r3, [r7, #23]
	uint16_t ISR_period_out = in.ISR_period ? in.ISR_period :in.period;
 800063a:	89fb      	ldrh	r3, [r7, #14]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <Var_Timer_Init+0x64>
 8000640:	89fb      	ldrh	r3, [r7, #14]
 8000642:	e000      	b.n	8000646 <Var_Timer_Init+0x66>
 8000644:	88fb      	ldrh	r3, [r7, #6]
 8000646:	82bb      	strh	r3, [r7, #20]
	Timer_Init_Base(timer_out,period_out,do_trigger_ISR_out,channel_1_out,channel_2_out,channel_3_out,channel_4_out,ISR_period_out);
 8000648:	7ebc      	ldrb	r4, [r7, #26]
 800064a:	7efa      	ldrb	r2, [r7, #27]
 800064c:	8bb9      	ldrh	r1, [r7, #28]
 800064e:	7ff8      	ldrb	r0, [r7, #31]
 8000650:	8abb      	ldrh	r3, [r7, #20]
 8000652:	9303      	str	r3, [sp, #12]
 8000654:	7dfb      	ldrb	r3, [r7, #23]
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	7e3b      	ldrb	r3, [r7, #24]
 800065a:	9301      	str	r3, [sp, #4]
 800065c:	7e7b      	ldrb	r3, [r7, #25]
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	4623      	mov	r3, r4
 8000662:	f000 f983 	bl	800096c <Timer_Init_Base>
}
 8000666:	bf00      	nop
 8000668:	3724      	adds	r7, #36	; 0x24
 800066a:	46bd      	mov	sp, r7
 800066c:	bd90      	pop	{r4, r7, pc}
	...

08000670 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param Prescaler, Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init,
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09c      	sub	sp, #112	; 0x70
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	4608      	mov	r0, r1
 800067a:	4611      	mov	r1, r2
 800067c:	461a      	mov	r2, r3
 800067e:	4603      	mov	r3, r0
 8000680:	70fb      	strb	r3, [r7, #3]
 8000682:	460b      	mov	r3, r1
 8000684:	70bb      	strb	r3, [r7, #2]
 8000686:	4613      	mov	r3, r2
 8000688:	707b      	strb	r3, [r7, #1]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800068a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000698:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]
 80006b4:	615a      	str	r2, [r3, #20]
 80006b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	222c      	movs	r2, #44	; 0x2c
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f003 fa0b 	bl	8003adc <memset>

  htim1.Init.Prescaler = prescaler;
 80006c6:	4a57      	ldr	r2, [pc, #348]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6053      	str	r3, [r2, #4]
  htim1.Init.Period = COUNTER_PERIOD;
 80006cc:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80006d0:	461a      	mov	r2, r3
 80006d2:	4b54      	ldr	r3, [pc, #336]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006d4:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 80006d6:	4b53      	ldr	r3, [pc, #332]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006d8:	4a53      	ldr	r2, [pc, #332]	; (8000828 <MX_TIM1_Init+0x1b8>)
 80006da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 80006dc:	4a51      	ldr	r2, [pc, #324]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e2:	4b50      	ldr	r3, [pc, #320]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD;
 80006e8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f2:	4b4c      	ldr	r3, [pc, #304]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006f8:	4b4a      	ldr	r3, [pc, #296]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b49      	ldr	r3, [pc, #292]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000704:	4847      	ldr	r0, [pc, #284]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000706:	f001 ff99 	bl	800263c <HAL_TIM_Base_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000710:	f000 fdb4 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800071a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800071e:	4619      	mov	r1, r3
 8000720:	4840      	ldr	r0, [pc, #256]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000722:	f002 fbe7 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800072c:	f000 fda6 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000730:	483c      	ldr	r0, [pc, #240]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000732:	f002 f853 	bl	80027dc <HAL_TIM_PWM_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800073c:	f000 fd9e 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000740:	2300      	movs	r3, #0
 8000742:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000750:	4619      	mov	r1, r3
 8000752:	4834      	ldr	r0, [pc, #208]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000754:	f003 f86e 	bl	8003834 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800075e:	f000 fd8d 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000762:	2360      	movs	r3, #96	; 0x60
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800076a:	2300      	movs	r3, #0
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800076e:	2300      	movs	r3, #0
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000772:	2300      	movs	r3, #0
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000776:	2300      	movs	r3, #0
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000792:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000796:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	481b      	ldr	r0, [pc, #108]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80007b6:	f003 f8cb 	bl	8003950 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80007c0:	f000 fd5c 	bl	800127c <Error_Handler>
  }

  //Channel configuration
  if (channel_1==1)
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d106      	bne.n	80007d8 <MX_TIM1_Init+0x168>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 80007ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ce:	2200      	movs	r2, #0
 80007d0:	4619      	mov	r1, r3
 80007d2:	4814      	ldr	r0, [pc, #80]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80007d4:	f002 fa7e 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 80007d8:	78bb      	ldrb	r3, [r7, #2]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d106      	bne.n	80007ec <MX_TIM1_Init+0x17c>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 80007de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007e2:	2204      	movs	r2, #4
 80007e4:	4619      	mov	r1, r3
 80007e6:	480f      	ldr	r0, [pc, #60]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80007e8:	f002 fa74 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 80007ec:	787b      	ldrb	r3, [r7, #1]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d106      	bne.n	8000800 <MX_TIM1_Init+0x190>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 80007f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007f6:	2208      	movs	r2, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	480a      	ldr	r0, [pc, #40]	; (8000824 <MX_TIM1_Init+0x1b4>)
 80007fc:	f002 fa6a 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 8000800:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000804:	2b01      	cmp	r3, #1
 8000806:	d106      	bne.n	8000816 <MX_TIM1_Init+0x1a6>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8000808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800080c:	220c      	movs	r2, #12
 800080e:	4619      	mov	r1, r3
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000812:	f002 fa5f 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000816:	4803      	ldr	r0, [pc, #12]	; (8000824 <MX_TIM1_Init+0x1b4>)
 8000818:	f000 fd98 	bl	800134c <HAL_TIM_MspPostInit>
}
 800081c:	bf00      	nop
 800081e:	3770      	adds	r7, #112	; 0x70
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	2000009c 	.word	0x2000009c
 8000828:	40010000 	.word	0x40010000

0800082c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param Prescaler, Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init,
  * @retval None
  */
static void MX_TIM2_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b090      	sub	sp, #64	; 0x40
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	4608      	mov	r0, r1
 8000836:	4611      	mov	r1, r2
 8000838:	461a      	mov	r2, r3
 800083a:	4603      	mov	r3, r0
 800083c:	70fb      	strb	r3, [r7, #3]
 800083e:	460b      	mov	r3, r1
 8000840:	70bb      	strb	r3, [r7, #2]
 8000842:	4613      	mov	r3, r2
 8000844:	707b      	strb	r3, [r7, #1]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000860:	f107 0308 	add.w	r3, r7, #8
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]
 8000870:	615a      	str	r2, [r3, #20]
 8000872:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8000874:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800087a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 800087c:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <MX_TIM2_Init+0x13c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_PERIOD;
 8000888:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800088c:	461a      	mov	r2, r3
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000890:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000892:	4b35      	ldr	r3, [pc, #212]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <MX_TIM2_Init+0x13c>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800089e:	4832      	ldr	r0, [pc, #200]	; (8000968 <MX_TIM2_Init+0x13c>)
 80008a0:	f001 fecc 	bl	800263c <HAL_TIM_Base_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80008aa:	f000 fce7 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b8:	4619      	mov	r1, r3
 80008ba:	482b      	ldr	r0, [pc, #172]	; (8000968 <MX_TIM2_Init+0x13c>)
 80008bc:	f002 fb1a 	bl	8002ef4 <HAL_TIM_ConfigClockSource>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008c6:	f000 fcd9 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008ca:	4827      	ldr	r0, [pc, #156]	; (8000968 <MX_TIM2_Init+0x13c>)
 80008cc:	f001 ff86 	bl	80027dc <HAL_TIM_PWM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80008d6:	f000 fcd1 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4619      	mov	r1, r3
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <MX_TIM2_Init+0x13c>)
 80008ea:	f002 ffa3 	bl	8003834 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80008f4:	f000 fcc2 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f8:	2360      	movs	r3, #96	; 0x60
 80008fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]

  //Channel configuration
  if (channel_1==1)
 8000908:	78fb      	ldrb	r3, [r7, #3]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d106      	bne.n	800091c <MX_TIM2_Init+0xf0>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	2200      	movs	r2, #0
 8000914:	4619      	mov	r1, r3
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000918:	f002 f9dc 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 800091c:	78bb      	ldrb	r3, [r7, #2]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d106      	bne.n	8000930 <MX_TIM2_Init+0x104>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	2204      	movs	r2, #4
 8000928:	4619      	mov	r1, r3
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <MX_TIM2_Init+0x13c>)
 800092c:	f002 f9d2 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 8000930:	787b      	ldrb	r3, [r7, #1]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d106      	bne.n	8000944 <MX_TIM2_Init+0x118>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2208      	movs	r2, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000940:	f002 f9c8 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 8000944:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <MX_TIM2_Init+0x12e>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	220c      	movs	r2, #12
 8000952:	4619      	mov	r1, r3
 8000954:	4804      	ldr	r0, [pc, #16]	; (8000968 <MX_TIM2_Init+0x13c>)
 8000956:	f002 f9bd 	bl	8002cd4 <HAL_TIM_PWM_ConfigChannel>
  }

  HAL_TIM_MspPostInit(&htim2);
 800095a:	4803      	ldr	r0, [pc, #12]	; (8000968 <MX_TIM2_Init+0x13c>)
 800095c:	f000 fcf6 	bl	800134c <HAL_TIM_MspPostInit>
}
 8000960:	bf00      	nop
 8000962:	3740      	adds	r7, #64	; 0x40
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000ec 	.word	0x200000ec

0800096c <Timer_Init_Base>:
  * @brief Initialize timer n on channel m for s milli seconds with ISR
  * @param Timer number, period (milliseconds), Trigger the Interrupt Service Routine(2=True 1=False), Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init, ISR_period (milliseconds)
  * @retval None
  */
static void Timer_Init_Base(uint8_t timer, uint16_t period, uint8_t do_trigger_ISR, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4, uint16_t ISR_period)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b087      	sub	sp, #28
 8000970:	af02      	add	r7, sp, #8
 8000972:	4604      	mov	r4, r0
 8000974:	4608      	mov	r0, r1
 8000976:	4611      	mov	r1, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4623      	mov	r3, r4
 800097c:	71fb      	strb	r3, [r7, #7]
 800097e:	4603      	mov	r3, r0
 8000980:	80bb      	strh	r3, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	71bb      	strb	r3, [r7, #6]
 8000986:	4613      	mov	r3, r2
 8000988:	70fb      	strb	r3, [r7, #3]
	//Checks to see that all arguments passed to the function are valid (*note that -1 evaluates to 255)
	if ((timer >= 1 && timer <= 2) && (period > 0 && period < 65536) && (do_trigger_ISR == 255 || do_trigger_ISR == 1 || do_trigger_ISR == 0) && (channel_1 == 255 || channel_1 == 1 || channel_1 == 0) && (channel_2 == 255 || channel_2 == 1 || channel_2 == 0) && (channel_3 == 255 || channel_3 == 1 || channel_3 == 0) && (channel_4 == 255 || channel_4 == 1 || channel_4 == 0) && ISR_period % period == 0)
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	2b00      	cmp	r3, #0
 800098e:	f000 808c 	beq.w	8000aaa <Timer_Init_Base+0x13e>
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b02      	cmp	r3, #2
 8000996:	f200 8088 	bhi.w	8000aaa <Timer_Init_Base+0x13e>
 800099a:	88bb      	ldrh	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	f000 8084 	beq.w	8000aaa <Timer_Init_Base+0x13e>
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	2bff      	cmp	r3, #255	; 0xff
 80009a6:	d005      	beq.n	80009b4 <Timer_Init_Base+0x48>
 80009a8:	79bb      	ldrb	r3, [r7, #6]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d002      	beq.n	80009b4 <Timer_Init_Base+0x48>
 80009ae:	79bb      	ldrb	r3, [r7, #6]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d17a      	bne.n	8000aaa <Timer_Init_Base+0x13e>
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d005      	beq.n	80009c6 <Timer_Init_Base+0x5a>
 80009ba:	78fb      	ldrb	r3, [r7, #3]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d002      	beq.n	80009c6 <Timer_Init_Base+0x5a>
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d171      	bne.n	8000aaa <Timer_Init_Base+0x13e>
 80009c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009ca:	2bff      	cmp	r3, #255	; 0xff
 80009cc:	d007      	beq.n	80009de <Timer_Init_Base+0x72>
 80009ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d003      	beq.n	80009de <Timer_Init_Base+0x72>
 80009d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d165      	bne.n	8000aaa <Timer_Init_Base+0x13e>
 80009de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009e2:	2bff      	cmp	r3, #255	; 0xff
 80009e4:	d007      	beq.n	80009f6 <Timer_Init_Base+0x8a>
 80009e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d003      	beq.n	80009f6 <Timer_Init_Base+0x8a>
 80009ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d159      	bne.n	8000aaa <Timer_Init_Base+0x13e>
 80009f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009fa:	2bff      	cmp	r3, #255	; 0xff
 80009fc:	d007      	beq.n	8000a0e <Timer_Init_Base+0xa2>
 80009fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d003      	beq.n	8000a0e <Timer_Init_Base+0xa2>
 8000a06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d14d      	bne.n	8000aaa <Timer_Init_Base+0x13e>
 8000a0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a10:	88ba      	ldrh	r2, [r7, #4]
 8000a12:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a16:	fb02 f201 	mul.w	r2, r2, r1
 8000a1a:	1a9b      	subs	r3, r3, r2
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d143      	bne.n	8000aaa <Timer_Init_Base+0x13e>
	{
		uint32_t prescaler = Calculate_Prescaler(period); //max period value is 2^16-1
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 f8c5 	bl	8000bb4 <Calculate_Prescaler>
 8000a2a:	60f8      	str	r0, [r7, #12]
		Calculate_Timer_Period_Multiplier(timer, period, ISR_period); //This allows you to slow down the ISR_period in relation to the timer period
 8000a2c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000a2e:	88b9      	ldrh	r1, [r7, #4]
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f8f0 	bl	8000c18 <Calculate_Timer_Period_Multiplier>

		switch (timer)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d002      	beq.n	8000a44 <Timer_Init_Base+0xd8>
 8000a3e:	2b02      	cmp	r3, #2
 8000a40:	d016      	beq.n	8000a70 <Timer_Init_Base+0x104>
 8000a42:	e02b      	b.n	8000a9c <Timer_Init_Base+0x130>
		{
			case (1):
				timer_1_repetition_counter = 0; //Because the timer is being reinitialized the timer count must be reset
 8000a44:	4b51      	ldr	r3, [pc, #324]	; (8000b8c <Timer_Init_Base+0x220>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	801a      	strh	r2, [r3, #0]
				MX_TIM1_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 8000a4a:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000a4e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a52:	78f9      	ldrb	r1, [r7, #3]
 8000a54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f7ff fe07 	bl	8000670 <MX_TIM1_Init>
				if(do_trigger_ISR==1)
 8000a62:	79bb      	ldrb	r3, [r7, #6]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d122      	bne.n	8000aae <Timer_Init_Base+0x142>
				{
					HAL_TIM_Base_Start_IT(&htim1);
 8000a68:	4849      	ldr	r0, [pc, #292]	; (8000b90 <Timer_Init_Base+0x224>)
 8000a6a:	f001 fe3f 	bl	80026ec <HAL_TIM_Base_Start_IT>
				}
				break;
 8000a6e:	e01e      	b.n	8000aae <Timer_Init_Base+0x142>
			case (2):
				timer_2_repetition_counter = 0;
 8000a70:	4b48      	ldr	r3, [pc, #288]	; (8000b94 <Timer_Init_Base+0x228>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	801a      	strh	r2, [r3, #0]
				MX_TIM2_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 8000a76:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000a7a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a7e:	78f9      	ldrb	r1, [r7, #3]
 8000a80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a84:	9300      	str	r3, [sp, #0]
 8000a86:	4603      	mov	r3, r0
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff fecf 	bl	800082c <MX_TIM2_Init>
				if(do_trigger_ISR==1)
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d10e      	bne.n	8000ab2 <Timer_Init_Base+0x146>
						{
							HAL_TIM_Base_Start_IT(&htim2);
 8000a94:	4840      	ldr	r0, [pc, #256]	; (8000b98 <Timer_Init_Base+0x22c>)
 8000a96:	f001 fe29 	bl	80026ec <HAL_TIM_Base_Start_IT>
						}
				break;
 8000a9a:	e00a      	b.n	8000ab2 <Timer_Init_Base+0x146>
			default:
				printf("'Timer_Init(%d, %d, ...)' - This is the default message for timer switch, check timer_pwm_lib.h\n", timer, period);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	88ba      	ldrh	r2, [r7, #4]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	483e      	ldr	r0, [pc, #248]	; (8000b9c <Timer_Init_Base+0x230>)
 8000aa4:	f003 f822 	bl	8003aec <iprintf>
 8000aa8:	e004      	b.n	8000ab4 <Timer_Init_Base+0x148>
		}
	}
 8000aaa:	bf00      	nop
 8000aac:	e002      	b.n	8000ab4 <Timer_Init_Base+0x148>
				break;
 8000aae:	bf00      	nop
 8000ab0:	e000      	b.n	8000ab4 <Timer_Init_Base+0x148>
				break;
 8000ab2:	bf00      	nop

	//Argument specific error statements
	if (!(timer >= 1 && timer <= 2))
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d002      	beq.n	8000ac0 <Timer_Init_Base+0x154>
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d905      	bls.n	8000acc <Timer_Init_Base+0x160>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid timer argument. Should be either '1' or '2'.\n", timer, period);
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	88ba      	ldrh	r2, [r7, #4]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4836      	ldr	r0, [pc, #216]	; (8000ba0 <Timer_Init_Base+0x234>)
 8000ac8:	f003 f810 	bl	8003aec <iprintf>
	}
	if (!(period > 0 && period < 65536))
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d105      	bne.n	8000ade <Timer_Init_Base+0x172>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid period argument. Should be an int in range of (0,65536).\n", timer, period);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	88ba      	ldrh	r2, [r7, #4]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4832      	ldr	r0, [pc, #200]	; (8000ba4 <Timer_Init_Base+0x238>)
 8000ada:	f003 f807 	bl	8003aec <iprintf>
	}
	if (!(do_trigger_ISR == 255 || do_trigger_ISR == 1 || do_trigger_ISR == 0))
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	2bff      	cmp	r3, #255	; 0xff
 8000ae2:	d00b      	beq.n	8000afc <Timer_Init_Base+0x190>
 8000ae4:	79bb      	ldrb	r3, [r7, #6]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d008      	beq.n	8000afc <Timer_Init_Base+0x190>
 8000aea:	79bb      	ldrb	r3, [r7, #6]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <Timer_Init_Base+0x190>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid do_trigger_ISR argument. Should be either '-1' or '1'.\n", timer, period);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	4619      	mov	r1, r3
 8000af6:	482c      	ldr	r0, [pc, #176]	; (8000ba8 <Timer_Init_Base+0x23c>)
 8000af8:	f002 fff8 	bl	8003aec <iprintf>
	}
	if (!(ISR_period % period == 0))
 8000afc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000afe:	88ba      	ldrh	r2, [r7, #4]
 8000b00:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b04:	fb02 f201 	mul.w	r2, r2, r1
 8000b08:	1a9b      	subs	r3, r3, r2
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d005      	beq.n	8000b1c <Timer_Init_Base+0x1b0>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid ISR_period argument. Should be a multiple of the timer period.\n", timer, period);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	88ba      	ldrh	r2, [r7, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4825      	ldr	r0, [pc, #148]	; (8000bac <Timer_Init_Base+0x240>)
 8000b18:	f002 ffe8 	bl	8003aec <iprintf>
	}
	if (!((channel_1 == 255 || channel_1 == 1 || channel_1 == 0) && (channel_2 == 255 || channel_2 == 1 || channel_2 == 0) && (channel_3 == 255 || channel_3 == 1 || channel_3 == 0) && (channel_4 == 255 || channel_4 == 1 || channel_4 == 0)))
 8000b1c:	78fb      	ldrb	r3, [r7, #3]
 8000b1e:	2bff      	cmp	r3, #255	; 0xff
 8000b20:	d005      	beq.n	8000b2e <Timer_Init_Base+0x1c2>
 8000b22:	78fb      	ldrb	r3, [r7, #3]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d002      	beq.n	8000b2e <Timer_Init_Base+0x1c2>
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d123      	bne.n	8000b76 <Timer_Init_Base+0x20a>
 8000b2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b32:	2bff      	cmp	r3, #255	; 0xff
 8000b34:	d007      	beq.n	8000b46 <Timer_Init_Base+0x1da>
 8000b36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d003      	beq.n	8000b46 <Timer_Init_Base+0x1da>
 8000b3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d117      	bne.n	8000b76 <Timer_Init_Base+0x20a>
 8000b46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b4a:	2bff      	cmp	r3, #255	; 0xff
 8000b4c:	d007      	beq.n	8000b5e <Timer_Init_Base+0x1f2>
 8000b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d003      	beq.n	8000b5e <Timer_Init_Base+0x1f2>
 8000b56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10b      	bne.n	8000b76 <Timer_Init_Base+0x20a>
 8000b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b62:	2bff      	cmp	r3, #255	; 0xff
 8000b64:	d00d      	beq.n	8000b82 <Timer_Init_Base+0x216>
 8000b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d009      	beq.n	8000b82 <Timer_Init_Base+0x216>
 8000b6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <Timer_Init_Base+0x216>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid channel_x argument. Should be either '-1' or '1'.\n", timer, period);
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	88ba      	ldrh	r2, [r7, #4]
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <Timer_Init_Base+0x244>)
 8000b7e:	f002 ffb5 	bl	8003aec <iprintf>
	}
}
 8000b82:	bf00      	nop
 8000b84:	3714      	adds	r7, #20
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd90      	pop	{r4, r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000008c 	.word	0x2000008c
 8000b90:	2000009c 	.word	0x2000009c
 8000b94:	2000008e 	.word	0x2000008e
 8000b98:	200000ec 	.word	0x200000ec
 8000b9c:	080048cc 	.word	0x080048cc
 8000ba0:	08004930 	.word	0x08004930
 8000ba4:	08004984 	.word	0x08004984
 8000ba8:	080049e4 	.word	0x080049e4
 8000bac:	08004a40 	.word	0x08004a40
 8000bb0:	08004aa4 	.word	0x08004aa4

08000bb4 <Calculate_Prescaler>:
  * @brief Calculate the prescaler necessary to operate desired PWM
  * @param period
  * @retval prescaler
  */
uint32_t Calculate_Prescaler(uint16_t period)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
	uint32_t prescaler = ((HAL_RCC_GetSysClockFreq()*(float)period)/(COUNTER_PERIOD+1))-1;
 8000bbe:	f001 fc67 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8000bc2:	ee07 0a90 	vmov	s15, r0
 8000bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bca:	88fb      	ldrh	r3, [r7, #6]
 8000bcc:	ee07 3a90 	vmov	s15, r3
 8000bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bd4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000bd8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000bdc:	3301      	adds	r3, #1
 8000bde:	ee07 3a90 	vmov	s15, r3
 8000be2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bf6:	ee17 3a90 	vmov	r3, s15
 8000bfa:	60fb      	str	r3, [r7, #12]
	prescaler /= 1000;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <Calculate_Prescaler+0x60>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	099b      	lsrs	r3, r3, #6
 8000c06:	60fb      	str	r3, [r7, #12]
	return prescaler;
 8000c08:	68fb      	ldr	r3, [r7, #12]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	10624dd3 	.word	0x10624dd3

08000c18 <Calculate_Timer_Period_Multiplier>:
  * @param timer number, period and ISR_period
  * @retval None
  * @note: copy this into the user code 4 section
  */
static void Calculate_Timer_Period_Multiplier(uint8_t timer,uint16_t period, uint16_t ISR_period)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	460b      	mov	r3, r1
 8000c24:	80bb      	strh	r3, [r7, #4]
 8000c26:	4613      	mov	r3, r2
 8000c28:	807b      	strh	r3, [r7, #2]
	switch (timer)
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d002      	beq.n	8000c36 <Calculate_Timer_Period_Multiplier+0x1e>
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d008      	beq.n	8000c46 <Calculate_Timer_Period_Multiplier+0x2e>
			break;
		case(2):
			TIMER_2_PERIOD_MULTIPLIER = ISR_period/period;
			break;
	}
}
 8000c34:	e00f      	b.n	8000c56 <Calculate_Timer_Period_Multiplier+0x3e>
			TIMER_1_PERIOD_MULTIPLIER = ISR_period/period;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	88bb      	ldrh	r3, [r7, #4]
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <Calculate_Timer_Period_Multiplier+0x4c>)
 8000c42:	801a      	strh	r2, [r3, #0]
			break;
 8000c44:	e007      	b.n	8000c56 <Calculate_Timer_Period_Multiplier+0x3e>
			TIMER_2_PERIOD_MULTIPLIER = ISR_period/period;
 8000c46:	887a      	ldrh	r2, [r7, #2]
 8000c48:	88bb      	ldrh	r3, [r7, #4]
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <Calculate_Timer_Period_Multiplier+0x50>)
 8000c52:	801a      	strh	r2, [r3, #0]
			break;
 8000c54:	bf00      	nop
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	200000e8 	.word	0x200000e8
 8000c68:	20000138 	.word	0x20000138

08000c6c <PWM_Init>:
  * @brief Take initialized timer, channel and desired duty cycle and initialize PWM
  * @param Timer, channel, duty cycle
  * @retval None
  */
static void PWM_Init(uint8_t timer, uint8_t channel, uint8_t duty_cycle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	71fb      	strb	r3, [r7, #7]
 8000c76:	460b      	mov	r3, r1
 8000c78:	71bb      	strb	r3, [r7, #6]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	717b      	strb	r3, [r7, #5]
	if (timer >= 1 && timer <= 2 && channel >= 1 && channel <= 4 && duty_cycle >= 0 && duty_cycle <= 100)
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d075      	beq.n	8000d70 <PWM_Init+0x104>
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d872      	bhi.n	8000d70 <PWM_Init+0x104>
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d06f      	beq.n	8000d70 <PWM_Init+0x104>
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d86c      	bhi.n	8000d70 <PWM_Init+0x104>
 8000c96:	797b      	ldrb	r3, [r7, #5]
 8000c98:	2b64      	cmp	r3, #100	; 0x64
 8000c9a:	d869      	bhi.n	8000d70 <PWM_Init+0x104>
	{
		TIM_HandleTypeDef* desired_timer;
		uint32_t desired_channel;

		//Calculate the pulse
		uint16_t ticks_on_per_cycle = Calculate_Ticks_On_Per_Cycle(duty_cycle);
 8000c9c:	797b      	ldrb	r3, [r7, #5]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f898 	bl	8000dd4 <Calculate_Ticks_On_Per_Cycle>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	81fb      	strh	r3, [r7, #14]

		//Find desired timer
		switch(timer)
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d002      	beq.n	8000cb4 <PWM_Init+0x48>
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d003      	beq.n	8000cba <PWM_Init+0x4e>
 8000cb2:	e005      	b.n	8000cc0 <PWM_Init+0x54>
		{
			case(1):
				desired_timer = &htim1;
 8000cb4:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <PWM_Init+0x14c>)
 8000cb6:	617b      	str	r3, [r7, #20]
				break;
 8000cb8:	e008      	b.n	8000ccc <PWM_Init+0x60>
			case(2):
				desired_timer = &htim2;
 8000cba:	4b40      	ldr	r3, [pc, #256]	; (8000dbc <PWM_Init+0x150>)
 8000cbc:	617b      	str	r3, [r7, #20]
				break;
 8000cbe:	e005      	b.n	8000ccc <PWM_Init+0x60>
			default:
				printf("'PWM_Init(%d, %d, %d)' - This is the default message for timer switch, check timer_pwm_lib.h.\n", timer, channel, duty_cycle);
 8000cc0:	79f9      	ldrb	r1, [r7, #7]
 8000cc2:	79ba      	ldrb	r2, [r7, #6]
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	483e      	ldr	r0, [pc, #248]	; (8000dc0 <PWM_Init+0x154>)
 8000cc8:	f002 ff10 	bl	8003aec <iprintf>
		}

		//Find desired channel
		switch(channel)
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d817      	bhi.n	8000d04 <PWM_Init+0x98>
 8000cd4:	a201      	add	r2, pc, #4	; (adr r2, 8000cdc <PWM_Init+0x70>)
 8000cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cda:	bf00      	nop
 8000cdc:	08000ced 	.word	0x08000ced
 8000ce0:	08000cf3 	.word	0x08000cf3
 8000ce4:	08000cf9 	.word	0x08000cf9
 8000ce8:	08000cff 	.word	0x08000cff
		{
			case(1):
				desired_channel = TIM_CHANNEL_1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
				break;
 8000cf0:	e00e      	b.n	8000d10 <PWM_Init+0xa4>
			case(2):
				desired_channel = TIM_CHANNEL_2;
 8000cf2:	2304      	movs	r3, #4
 8000cf4:	613b      	str	r3, [r7, #16]
				break;
 8000cf6:	e00b      	b.n	8000d10 <PWM_Init+0xa4>
			case(3):
				desired_channel = TIM_CHANNEL_3;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	613b      	str	r3, [r7, #16]
				break;
 8000cfc:	e008      	b.n	8000d10 <PWM_Init+0xa4>
			case(4):
				desired_channel = TIM_CHANNEL_4;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	613b      	str	r3, [r7, #16]
				break;
 8000d02:	e005      	b.n	8000d10 <PWM_Init+0xa4>
			default:
				printf("'PWM_Init(%d, %d, %d)' - This is the default message for channel switch, check timer_pwm_lib.h.\n", timer, channel, duty_cycle);
 8000d04:	79f9      	ldrb	r1, [r7, #7]
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	482e      	ldr	r0, [pc, #184]	; (8000dc4 <PWM_Init+0x158>)
 8000d0c:	f002 feee 	bl	8003aec <iprintf>
		}

		//Initiate the PWM and desired duty cycle
		HAL_TIM_PWM_Start(desired_timer, desired_channel);
 8000d10:	6939      	ldr	r1, [r7, #16]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f001 fdc4 	bl	80028a0 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d104      	bne.n	8000d28 <PWM_Init+0xbc>
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	89fa      	ldrh	r2, [r7, #14]
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
 8000d26:	e023      	b.n	8000d70 <PWM_Init+0x104>
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d104      	bne.n	8000d38 <PWM_Init+0xcc>
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	89fa      	ldrh	r2, [r7, #14]
 8000d34:	639a      	str	r2, [r3, #56]	; 0x38
 8000d36:	e01b      	b.n	8000d70 <PWM_Init+0x104>
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	2b08      	cmp	r3, #8
 8000d3c:	d104      	bne.n	8000d48 <PWM_Init+0xdc>
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	89fa      	ldrh	r2, [r7, #14]
 8000d44:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d46:	e013      	b.n	8000d70 <PWM_Init+0x104>
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	2b0c      	cmp	r3, #12
 8000d4c:	d104      	bne.n	8000d58 <PWM_Init+0xec>
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	89fa      	ldrh	r2, [r7, #14]
 8000d54:	641a      	str	r2, [r3, #64]	; 0x40
 8000d56:	e00b      	b.n	8000d70 <PWM_Init+0x104>
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	2b10      	cmp	r3, #16
 8000d5c:	d104      	bne.n	8000d68 <PWM_Init+0xfc>
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	89fa      	ldrh	r2, [r7, #14]
 8000d64:	659a      	str	r2, [r3, #88]	; 0x58
 8000d66:	e003      	b.n	8000d70 <PWM_Init+0x104>
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	89fa      	ldrh	r2, [r7, #14]
 8000d6e:	65da      	str	r2, [r3, #92]	; 0x5c
	}

	if (!(timer >= 1 && timer <= 2))
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <PWM_Init+0x110>
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d905      	bls.n	8000d88 <PWM_Init+0x11c>
		{
			printf("'PWM_Init(%d, %d, %d)' - Invalid timer argument. Should be either '1' or '2'.\n", timer, channel, duty_cycle);
 8000d7c:	79f9      	ldrb	r1, [r7, #7]
 8000d7e:	79ba      	ldrb	r2, [r7, #6]
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <PWM_Init+0x15c>)
 8000d84:	f002 feb2 	bl	8003aec <iprintf>
		}
	if (!(channel >= 1 && channel <= 4))
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d002      	beq.n	8000d94 <PWM_Init+0x128>
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d905      	bls.n	8000da0 <PWM_Init+0x134>
	{
		printf("'PWM_Init(%d, %d, %d)' - Invalid Channel argument. Should be an integer within range [1,4].\n", timer, channel, duty_cycle);
 8000d94:	79f9      	ldrb	r1, [r7, #7]
 8000d96:	79ba      	ldrb	r2, [r7, #6]
 8000d98:	797b      	ldrb	r3, [r7, #5]
 8000d9a:	480c      	ldr	r0, [pc, #48]	; (8000dcc <PWM_Init+0x160>)
 8000d9c:	f002 fea6 	bl	8003aec <iprintf>
	}
	if (!(duty_cycle >= 0 && duty_cycle <= 100))
 8000da0:	797b      	ldrb	r3, [r7, #5]
 8000da2:	2b64      	cmp	r3, #100	; 0x64
 8000da4:	d904      	bls.n	8000db0 <PWM_Init+0x144>
	{
		printf("'PWM_Init(.duty_cycle = %d)' - Invalid Duty Cycle argument. Should be within range [0,100].\n", duty_cycle);
 8000da6:	797b      	ldrb	r3, [r7, #5]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4809      	ldr	r0, [pc, #36]	; (8000dd0 <PWM_Init+0x164>)
 8000dac:	f002 fe9e 	bl	8003aec <iprintf>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000009c 	.word	0x2000009c
 8000dbc:	200000ec 	.word	0x200000ec
 8000dc0:	08004afc 	.word	0x08004afc
 8000dc4:	08004b5c 	.word	0x08004b5c
 8000dc8:	08004bc0 	.word	0x08004bc0
 8000dcc:	08004c10 	.word	0x08004c10
 8000dd0:	08004c70 	.word	0x08004c70

08000dd4 <Calculate_Ticks_On_Per_Cycle>:
  * @brief Calculate the duty cycle in ticks
  * @param duty cycle
  * @retval Ticks per cycle
  */
uint16_t Calculate_Ticks_On_Per_Cycle(uint8_t duty_cycle)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	uint16_t ticks_on_per_cycle;

	ticks_on_per_cycle = (duty_cycle*COUNTER_PERIOD)/100;
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	4a06      	ldr	r2, [pc, #24]	; (8000e04 <Calculate_Ticks_On_Per_Cycle+0x30>)
 8000dea:	fb82 1203 	smull	r1, r2, r2, r3
 8000dee:	1152      	asrs	r2, r2, #5
 8000df0:	17db      	asrs	r3, r3, #31
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	81fb      	strh	r3, [r7, #14]

	return ticks_on_per_cycle;
 8000df6:	89fb      	ldrh	r3, [r7, #14]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	51eb851f 	.word	0x51eb851f

08000e08 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Code below copied from .txt file named "ISR_On_Timer_Overflow_Function.txt"
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) //ISR triggered by timer overflow
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
    if(htim == &htim1 && timer_1_repetition_counter == TIMER_1_PERIOD_MULTIPLIER-1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d110      	bne.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x32>
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e20:	881b      	ldrh	r3, [r3, #0]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d108      	bne.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x32>
    {
        //ISR for Timer 1
        //User code here
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //Red on-board LED
 8000e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2c:	481c      	ldr	r0, [pc, #112]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e2e:	f000 ff7a 	bl	8001d26 <HAL_GPIO_TogglePin>
        //User code ends
	    timer_1_repetition_counter = 0;
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	801a      	strh	r2, [r3, #0]
 8000e38:	e009      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x46>
    }
    else if(htim == &htim1)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x46>
    {
    	timer_1_repetition_counter++;
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e4c:	801a      	strh	r2, [r3, #0]
    }
    if(htim == &htim2 && timer_2_repetition_counter == TIMER_2_PERIOD_MULTIPLIER-1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d10f      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000e5e:	881b      	ldrh	r3, [r3, #0]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d107      	bne.n	8000e76 <HAL_TIM_PeriodElapsedCallback+0x6e>
    {
        //ISR for Timer 2
        //User code here
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //Blue on-board LED
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e6a:	f000 ff5c 	bl	8001d26 <HAL_GPIO_TogglePin>
        //User code ends
	    timer_2_repetition_counter = 0;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	801a      	strh	r2, [r3, #0]
    }
    else if(htim == &htim2)
    {
    	timer_2_repetition_counter++;
    }
}
 8000e74:	e009      	b.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x82>
    else if(htim == &htim2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d105      	bne.n	8000e8a <HAL_TIM_PeriodElapsedCallback+0x82>
    	timer_2_repetition_counter++;
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e80:	881b      	ldrh	r3, [r3, #0]
 8000e82:	3301      	adds	r3, #1
 8000e84:	b29a      	uxth	r2, r3
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e88:	801a      	strh	r2, [r3, #0]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000009c 	.word	0x2000009c
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	200000e8 	.word	0x200000e8
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	200000ec 	.word	0x200000ec
 8000ea8:	2000008e 	.word	0x2000008e
 8000eac:	20000138 	.word	0x20000138

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb6:	f000 fbe2 	bl	800167e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eba:	f000 f85f 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebe:	f000 f8b9 	bl	8001034 <MX_GPIO_Init>
//  MX_TIM1_Init();
//  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  //Initialize timer1 with PWM on all four channels and interrupt service routine(ISR) running every 1 second (Red LED)
  Timer_Init(1, 500, .ISR_period=1000); //in order to use the non-default arguments a period '.' must be added at the start of the parameter name
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	713b      	strb	r3, [r7, #4]
 8000ed0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eda:	81fb      	strh	r3, [r7, #14]
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ee2:	f7ff fb7d 	bl	80005e0 <Var_Timer_Init>
  PWM_Init(1, 1, 90);
 8000ee6:	225a      	movs	r2, #90	; 0x5a
 8000ee8:	2101      	movs	r1, #1
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff febe 	bl	8000c6c <PWM_Init>
  HAL_Delay(500);
 8000ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef4:	f000 fc20 	bl	8001738 <HAL_Delay>
  PWM_Init(1,2,50);
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	2102      	movs	r1, #2
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff feb5 	bl	8000c6c <PWM_Init>
  HAL_Delay(500);
 8000f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f06:	f000 fc17 	bl	8001738 <HAL_Delay>
  PWM_Init(1,3,30);
 8000f0a:	221e      	movs	r2, #30
 8000f0c:	2103      	movs	r1, #3
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f7ff feac 	bl	8000c6c <PWM_Init>
  HAL_Delay(500);
 8000f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f18:	f000 fc0e 	bl	8001738 <HAL_Delay>
  PWM_Init(1,4,10);
 8000f1c:	220a      	movs	r2, #10
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2001      	movs	r0, #1
 8000f22:	f7ff fea3 	bl	8000c6c <PWM_Init>
  HAL_Delay(500);
 8000f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f2a:	f000 fc05 	bl	8001738 <HAL_Delay>

  //Similar to timer1, much faster period, channel 4 turned off, ISR running twice as fast (0.5 seconds, Blue LED)
  //Also note that Timer_Init_Base() does the same thing as Timer_Init() though it lacks default arguments
  Timer_Init_Base(2, 5, 1, 1, 1, 1, -1, 500);
 8000f2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f32:	9303      	str	r3, [sp, #12]
 8000f34:	23ff      	movs	r3, #255	; 0xff
 8000f36:	9302      	str	r3, [sp, #8]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	9301      	str	r3, [sp, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2201      	movs	r2, #1
 8000f44:	2105      	movs	r1, #5
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff fd10 	bl	800096c <Timer_Init_Base>
  PWM_Init(2, 1, 100);
 8000f4c:	2264      	movs	r2, #100	; 0x64
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2002      	movs	r0, #2
 8000f52:	f7ff fe8b 	bl	8000c6c <PWM_Init>
  HAL_Delay(500);
 8000f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5a:	f000 fbed 	bl	8001738 <HAL_Delay>
  PWM_Init(2,2,40);
 8000f5e:	2228      	movs	r2, #40	; 0x28
 8000f60:	2102      	movs	r1, #2
 8000f62:	2002      	movs	r0, #2
 8000f64:	f7ff fe82 	bl	8000c6c <PWM_Init>
  HAL_Delay(500);
 8000f68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6c:	f000 fbe4 	bl	8001738 <HAL_Delay>
  PWM_Init(2,3,10);
 8000f70:	220a      	movs	r2, #10
 8000f72:	2103      	movs	r1, #3
 8000f74:	2002      	movs	r0, #2
 8000f76:	f7ff fe79 	bl	8000c6c <PWM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <main+0xca>

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	2234      	movs	r2, #52	; 0x34
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f002 fda6 	bl	8003adc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 0308 	add.w	r3, r7, #8
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <SystemClock_Config+0xb0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a21      	ldr	r2, [pc, #132]	; (800102c <SystemClock_Config+0xb0>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <SystemClock_Config+0xb0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <SystemClock_Config+0xb4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fc0:	4a1b      	ldr	r2, [pc, #108]	; (8001030 <SystemClock_Config+0xb4>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b19      	ldr	r3, [pc, #100]	; (8001030 <SystemClock_Config+0xb4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 feb7 	bl	8001d5c <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000ff4:	f000 f942 	bl	800127c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	230f      	movs	r3, #15
 8000ffa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001008:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f001 f94f 	bl	80022b8 <HAL_RCC_ClockConfig>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001020:	f000 f92c 	bl	800127c <Error_Handler>
  }
}
 8001024:	bf00      	nop
 8001026:	3750      	adds	r7, #80	; 0x50
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	4b85      	ldr	r3, [pc, #532]	; (8001260 <MX_GPIO_Init+0x22c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a84      	ldr	r2, [pc, #528]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b82      	ldr	r3, [pc, #520]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	4b7f      	ldr	r3, [pc, #508]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a7e      	ldr	r2, [pc, #504]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b7c      	ldr	r3, [pc, #496]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4b79      	ldr	r3, [pc, #484]	; (8001260 <MX_GPIO_Init+0x22c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a78      	ldr	r2, [pc, #480]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b76      	ldr	r3, [pc, #472]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b73      	ldr	r3, [pc, #460]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a72      	ldr	r2, [pc, #456]	; (8001260 <MX_GPIO_Init+0x22c>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b70      	ldr	r3, [pc, #448]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010aa:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a6c      	ldr	r2, [pc, #432]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010b0:	f043 0310 	orr.w	r3, r3, #16
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b6a      	ldr	r3, [pc, #424]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	4b67      	ldr	r3, [pc, #412]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a66      	ldr	r2, [pc, #408]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010c8:	f043 0308 	orr.w	r3, r3, #8
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b64      	ldr	r3, [pc, #400]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010da:	4b61      	ldr	r3, [pc, #388]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a60      	ldr	r2, [pc, #384]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b5e      	ldr	r3, [pc, #376]	; (8001260 <MX_GPIO_Init+0x22c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80010f8:	485a      	ldr	r0, [pc, #360]	; (8001264 <MX_GPIO_Init+0x230>)
 80010fa:	f000 fdfb 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	2140      	movs	r1, #64	; 0x40
 8001102:	4859      	ldr	r0, [pc, #356]	; (8001268 <MX_GPIO_Init+0x234>)
 8001104:	f000 fdf6 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001108:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110e:	4b57      	ldr	r3, [pc, #348]	; (800126c <MX_GPIO_Init+0x238>)
 8001110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	4619      	mov	r1, r3
 800111c:	4854      	ldr	r0, [pc, #336]	; (8001270 <MX_GPIO_Init+0x23c>)
 800111e:	f000 fc3f 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001122:	2332      	movs	r3, #50	; 0x32
 8001124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001132:	230b      	movs	r3, #11
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4619      	mov	r1, r3
 800113c:	484c      	ldr	r0, [pc, #304]	; (8001270 <MX_GPIO_Init+0x23c>)
 800113e:	f000 fc2f 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001142:	2386      	movs	r3, #134	; 0x86
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001152:	230b      	movs	r3, #11
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4845      	ldr	r0, [pc, #276]	; (8001274 <MX_GPIO_Init+0x240>)
 800115e:	f000 fc1f 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001162:	f244 0381 	movw	r3, #16513	; 0x4081
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	483a      	ldr	r0, [pc, #232]	; (8001264 <MX_GPIO_Init+0x230>)
 800117c:	f000 fc10 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001192:	230b      	movs	r3, #11
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	4831      	ldr	r0, [pc, #196]	; (8001264 <MX_GPIO_Init+0x230>)
 800119e:	f000 fbff 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80011a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011b4:	2307      	movs	r3, #7
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	482e      	ldr	r0, [pc, #184]	; (8001278 <MX_GPIO_Init+0x244>)
 80011c0:	f000 fbee 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011c4:	2340      	movs	r3, #64	; 0x40
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4823      	ldr	r0, [pc, #140]	; (8001268 <MX_GPIO_Init+0x234>)
 80011dc:	f000 fbe0 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <MX_GPIO_Init+0x234>)
 80011f4:	f000 fbd4 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011f8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800120a:	230a      	movs	r3, #10
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4817      	ldr	r0, [pc, #92]	; (8001274 <MX_GPIO_Init+0x240>)
 8001216:	f000 fbc3 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800121a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_GPIO_Init+0x240>)
 8001230:	f000 fbb6 	bl	80019a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001234:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001246:	230b      	movs	r3, #11
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_GPIO_Init+0x234>)
 8001252:	f000 fba5 	bl	80019a0 <HAL_GPIO_Init>

}
 8001256:	bf00      	nop
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40020400 	.word	0x40020400
 8001268:	40021800 	.word	0x40021800
 800126c:	10110000 	.word	0x10110000
 8001270:	40020800 	.word	0x40020800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020c00 	.word	0x40020c00

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001282:	e7fe      	b.n	8001282 <Error_Handler+0x6>

08001284 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_MspInit+0x44>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_MspInit+0x44>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	; 0x40
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_MspInit+0x44>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_MspInit+0x44>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a08      	ldr	r2, [pc, #32]	; (80012c8 <HAL_MspInit+0x44>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_MspInit+0x44>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800

080012cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1a      	ldr	r2, [pc, #104]	; (8001344 <HAL_TIM_Base_MspInit+0x78>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d114      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <HAL_TIM_Base_MspInit+0x7c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <HAL_TIM_Base_MspInit+0x7c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b17      	ldr	r3, [pc, #92]	; (8001348 <HAL_TIM_Base_MspInit+0x7c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2019      	movs	r0, #25
 80012fc:	f000 fb19 	bl	8001932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001300:	2019      	movs	r0, #25
 8001302:	f000 fb32 	bl	800196a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001306:	e018      	b.n	800133a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d113      	bne.n	800133a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <HAL_TIM_Base_MspInit+0x7c>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_TIM_Base_MspInit+0x7c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <HAL_TIM_Base_MspInit+0x7c>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201c      	movs	r0, #28
 8001330:	f000 faff 	bl	8001932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001334:	201c      	movs	r0, #28
 8001336:	f000 fb18 	bl	800196a <HAL_NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40010000 	.word	0x40010000
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a31      	ldr	r2, [pc, #196]	; (8001430 <HAL_TIM_MspPostInit+0xe4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d11d      	bne.n	80013aa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a30      	ldr	r2, [pc, #192]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001386:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800138a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001398:	2301      	movs	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	4619      	mov	r1, r3
 80013a2:	4825      	ldr	r0, [pc, #148]	; (8001438 <HAL_TIM_MspPostInit+0xec>)
 80013a4:	f000 fafc 	bl	80019a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013a8:	e03d      	b.n	8001426 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b2:	d138      	bne.n	8001426 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	4a18      	ldr	r2, [pc, #96]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 80013d2:	f043 0302 	orr.w	r3, r3, #2
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <HAL_TIM_MspPostInit+0xe8>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f4:	2301      	movs	r3, #1
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	480f      	ldr	r0, [pc, #60]	; (800143c <HAL_TIM_MspPostInit+0xf0>)
 8001400:	f000 face 	bl	80019a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001404:	f640 4308 	movw	r3, #3080	; 0xc08
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4807      	ldr	r0, [pc, #28]	; (8001440 <HAL_TIM_MspPostInit+0xf4>)
 8001422:	f000 fabd 	bl	80019a0 <HAL_GPIO_Init>
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010000 	.word	0x40010000
 8001434:	40023800 	.word	0x40023800
 8001438:	40021000 	.word	0x40021000
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <NMI_Handler+0x4>

0800144a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144e:	e7fe      	b.n	800144e <HardFault_Handler+0x4>

08001450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001454:	e7fe      	b.n	8001454 <MemManage_Handler+0x4>

08001456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145a:	e7fe      	b.n	800145a <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <UsageFault_Handler+0x4>

08001462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001490:	f000 f932 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800149e:	f001 faf9 	bl	8002a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	2000009c 	.word	0x2000009c

080014ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <TIM2_IRQHandler+0x10>)
 80014b2:	f001 faef 	bl	8002a94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200000ec 	.word	0x200000ec

080014c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
 80014d0:	e00a      	b.n	80014e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014d2:	f3af 8000 	nop.w
 80014d6:	4601      	mov	r1, r0
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	b2ca      	uxtb	r2, r1
 80014e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	3301      	adds	r3, #1
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	dbf0      	blt.n	80014d2 <_read+0x12>
	}

return len;
 80014f0:	687b      	ldr	r3, [r7, #4]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	e009      	b.n	8001520 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60ba      	str	r2, [r7, #8]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf1      	blt.n	800150c <_write+0x12>
	}
	return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_close>:

int _close(int file)
{
 8001532:	b480      	push	{r7}
 8001534:	b083      	sub	sp, #12
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800153e:	4618      	mov	r0, r3
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155a:	605a      	str	r2, [r3, #4]
	return 0;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <_isatty>:

int _isatty(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
	return 1;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f002 fa5c 	bl	8003a88 <__errno>
 80015d0:	4602      	mov	r2, r0
 80015d2:	230c      	movs	r3, #12
 80015d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20080000 	.word	0x20080000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000090 	.word	0x20000090
 8001604:	20000148 	.word	0x20000148

08001608 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <SystemInit+0x20>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a05      	ldr	r2, [pc, #20]	; (8001628 <SystemInit+0x20>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001664 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480d      	ldr	r0, [pc, #52]	; (8001668 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001632:	490e      	ldr	r1, [pc, #56]	; (800166c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001634:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <LoopFillZerobss+0x26>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001656:	f7ff ffd7 	bl	8001608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800165a:	f002 fa1b 	bl	8003a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165e:	f7ff fc27 	bl	8000eb0 <main>
  bx  lr    
 8001662:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001664:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001670:	08004e78 	.word	0x08004e78
  ldr r2, =_sbss
 8001674:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001678:	20000144 	.word	0x20000144

0800167c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>

0800167e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f94a 	bl	800191c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001688:	2000      	movs	r0, #0
 800168a:	f000 f805 	bl	8001698 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800168e:	f7ff fdf9 	bl	8001284 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f965 	bl	8001986 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f92d 	bl	8001932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	2000013c 	.word	0x2000013c

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	2000013c 	.word	0x2000013c

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_Delay+0x40>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008

0800177c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001798:	4013      	ands	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x40>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00
 80017c0:	05fa0000 	.word	0x05fa0000

080017c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c8:	4b04      	ldr	r3, [pc, #16]	; (80017dc <__NVIC_GetPriorityGrouping+0x18>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 0307 	and.w	r3, r3, #7
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	db0b      	blt.n	800180a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <__NVIC_EnableIRQ+0x38>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	095b      	lsrs	r3, r3, #5
 8001800:	2001      	movs	r0, #1
 8001802:	fa00 f202 	lsl.w	r2, r0, r2
 8001806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db0a      	blt.n	8001846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	b2da      	uxtb	r2, r3
 8001834:	490c      	ldr	r1, [pc, #48]	; (8001868 <__NVIC_SetPriority+0x4c>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	0112      	lsls	r2, r2, #4
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	440b      	add	r3, r1
 8001840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001844:	e00a      	b.n	800185c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4908      	ldr	r1, [pc, #32]	; (800186c <__NVIC_SetPriority+0x50>)
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	3b04      	subs	r3, #4
 8001854:	0112      	lsls	r2, r2, #4
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	440b      	add	r3, r1
 800185a:	761a      	strb	r2, [r3, #24]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000e100 	.word	0xe000e100
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f1c3 0307 	rsb	r3, r3, #7
 800188a:	2b04      	cmp	r3, #4
 800188c:	bf28      	it	cs
 800188e:	2304      	movcs	r3, #4
 8001890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3304      	adds	r3, #4
 8001896:	2b06      	cmp	r3, #6
 8001898:	d902      	bls.n	80018a0 <NVIC_EncodePriority+0x30>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3b03      	subs	r3, #3
 800189e:	e000      	b.n	80018a2 <NVIC_EncodePriority+0x32>
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 32ff 	mov.w	r2, #4294967295
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43da      	mvns	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	401a      	ands	r2, r3
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b8:	f04f 31ff 	mov.w	r1, #4294967295
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	fa01 f303 	lsl.w	r3, r1, r3
 80018c2:	43d9      	mvns	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	4313      	orrs	r3, r2
         );
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3724      	adds	r7, #36	; 0x24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018e8:	d301      	bcc.n	80018ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <SysTick_Config+0x40>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f6:	210f      	movs	r1, #15
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295
 80018fc:	f7ff ff8e 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <SysTick_Config+0x40>)
 8001902:	2200      	movs	r2, #0
 8001904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001906:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SysTick_Config+0x40>)
 8001908:	2207      	movs	r2, #7
 800190a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	e000e010 	.word	0xe000e010

0800191c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff29 	bl	800177c <__NVIC_SetPriorityGrouping>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001932:	b580      	push	{r7, lr}
 8001934:	b086      	sub	sp, #24
 8001936:	af00      	add	r7, sp, #0
 8001938:	4603      	mov	r3, r0
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001944:	f7ff ff3e 	bl	80017c4 <__NVIC_GetPriorityGrouping>
 8001948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	68b9      	ldr	r1, [r7, #8]
 800194e:	6978      	ldr	r0, [r7, #20]
 8001950:	f7ff ff8e 	bl	8001870 <NVIC_EncodePriority>
 8001954:	4602      	mov	r2, r0
 8001956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195a:	4611      	mov	r1, r2
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	bf00      	nop
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	4603      	mov	r3, r0
 8001972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff31 	bl	80017e0 <__NVIC_EnableIRQ>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff ffa2 	bl	80018d8 <SysTick_Config>
 8001994:	4603      	mov	r3, r0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019aa:	2300      	movs	r3, #0
 80019ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
 80019be:	e175      	b.n	8001cac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	429a      	cmp	r2, r3
 80019da:	f040 8164 	bne.w	8001ca6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d00b      	beq.n	80019fe <HAL_GPIO_Init+0x5e>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f2:	2b11      	cmp	r3, #17
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x100>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b12      	cmp	r3, #18
 8001a9e:	d123      	bne.n	8001ae8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	08da      	lsrs	r2, r3, #3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3208      	adds	r2, #8
 8001aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	691a      	ldr	r2, [r3, #16]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	08da      	lsrs	r2, r3, #3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	3208      	adds	r2, #8
 8001ae2:	69b9      	ldr	r1, [r7, #24]
 8001ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0203 	and.w	r2, r3, #3
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80be 	beq.w	8001ca6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b65      	ldr	r3, [pc, #404]	; (8001cc0 <HAL_GPIO_Init+0x320>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a64      	ldr	r2, [pc, #400]	; (8001cc0 <HAL_GPIO_Init+0x320>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <HAL_GPIO_Init+0x320>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b42:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <HAL_GPIO_Init+0x324>)
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	220f      	movs	r2, #15
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a57      	ldr	r2, [pc, #348]	; (8001cc8 <HAL_GPIO_Init+0x328>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d037      	beq.n	8001bde <HAL_GPIO_Init+0x23e>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a56      	ldr	r2, [pc, #344]	; (8001ccc <HAL_GPIO_Init+0x32c>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d031      	beq.n	8001bda <HAL_GPIO_Init+0x23a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a55      	ldr	r2, [pc, #340]	; (8001cd0 <HAL_GPIO_Init+0x330>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d02b      	beq.n	8001bd6 <HAL_GPIO_Init+0x236>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a54      	ldr	r2, [pc, #336]	; (8001cd4 <HAL_GPIO_Init+0x334>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d025      	beq.n	8001bd2 <HAL_GPIO_Init+0x232>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a53      	ldr	r2, [pc, #332]	; (8001cd8 <HAL_GPIO_Init+0x338>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d01f      	beq.n	8001bce <HAL_GPIO_Init+0x22e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a52      	ldr	r2, [pc, #328]	; (8001cdc <HAL_GPIO_Init+0x33c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x22a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a51      	ldr	r2, [pc, #324]	; (8001ce0 <HAL_GPIO_Init+0x340>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x226>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a50      	ldr	r2, [pc, #320]	; (8001ce4 <HAL_GPIO_Init+0x344>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x222>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4f      	ldr	r2, [pc, #316]	; (8001ce8 <HAL_GPIO_Init+0x348>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x21e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	; (8001cec <HAL_GPIO_Init+0x34c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x21a>
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	e012      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bba:	230a      	movs	r3, #10
 8001bbc:	e010      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	e00e      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00c      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bc6:	2306      	movs	r3, #6
 8001bc8:	e00a      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bca:	2305      	movs	r3, #5
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bce:	2304      	movs	r3, #4
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x240>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001bf0:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <HAL_GPIO_Init+0x324>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfe:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c22:	4a33      	ldr	r2, [pc, #204]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4c:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a1e      	ldr	r2, [pc, #120]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <HAL_GPIO_Init+0x350>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f ae86 	bls.w	80019c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3724      	adds	r7, #36	; 0x24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40022400 	.word	0x40022400
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d38:	887a      	ldrh	r2, [r7, #2]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	041a      	lsls	r2, r3, #16
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	887b      	ldrh	r3, [r7, #2]
 8001d46:	400b      	ands	r3, r1
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	619a      	str	r2, [r3, #24]
}
 8001d4e:	bf00      	nop
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e29b      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8087 	beq.w	8001e8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d80:	4b96      	ldr	r3, [pc, #600]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d00c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8c:	4b93      	ldr	r3, [pc, #588]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d112      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62>
 8001d98:	4b90      	ldr	r3, [pc, #576]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001da4:	d10b      	bne.n	8001dbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d06c      	beq.n	8001e8c <HAL_RCC_OscConfig+0x130>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d168      	bne.n	8001e8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e275      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x7a>
 8001dc8:	4b84      	ldr	r3, [pc, #528]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a83      	ldr	r2, [pc, #524]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e02e      	b.n	8001e34 <HAL_RCC_OscConfig+0xd8>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x9c>
 8001dde:	4b7f      	ldr	r3, [pc, #508]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a7e      	ldr	r2, [pc, #504]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b7c      	ldr	r3, [pc, #496]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7b      	ldr	r2, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	e01d      	b.n	8001e34 <HAL_RCC_OscConfig+0xd8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0xc0>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a75      	ldr	r2, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b73      	ldr	r3, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a72      	ldr	r2, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e00b      	b.n	8001e34 <HAL_RCC_OscConfig+0xd8>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6e      	ldr	r2, [pc, #440]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	4b6c      	ldr	r3, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a6b      	ldr	r2, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fc70 	bl	8001720 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7ff fc6c 	bl	8001720 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e229      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b61      	ldr	r3, [pc, #388]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0xe8>
 8001e62:	e014      	b.n	8001e8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff fc5c 	bl	8001720 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6c:	f7ff fc58 	bl	8001720 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e215      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7e:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x110>
 8001e8a:	e000      	b.n	8001e8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d069      	beq.n	8001f6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9a:	4b50      	ldr	r3, [pc, #320]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ea6:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d11c      	bne.n	8001eec <HAL_RCC_OscConfig+0x190>
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d116      	bne.n	8001eec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e1e9      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b41      	ldr	r3, [pc, #260]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	493d      	ldr	r1, [pc, #244]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eea:	e040      	b.n	8001f6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d023      	beq.n	8001f3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef4:	4b39      	ldr	r3, [pc, #228]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a38      	ldr	r2, [pc, #224]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc0e 	bl	8001720 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7ff fc0a 	bl	8001720 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1c7      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1a:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b2d      	ldr	r3, [pc, #180]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4929      	ldr	r1, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
 8001f3a:	e018      	b.n	8001f6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f42:	f023 0301 	bic.w	r3, r3, #1
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fbea 	bl	8001720 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f50:	f7ff fbe6 	bl	8001720 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1a3      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d038      	beq.n	8001fec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d019      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fbc7 	bl	8001720 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fbc3 	bl	8001720 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e180      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d0f0      	beq.n	8001f96 <HAL_RCC_OscConfig+0x23a>
 8001fb4:	e01a      	b.n	8001fec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fb6:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fba:	4a08      	ldr	r2, [pc, #32]	; (8001fdc <HAL_RCC_OscConfig+0x280>)
 8001fbc:	f023 0301 	bic.w	r3, r3, #1
 8001fc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fbad 	bl	8001720 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fca:	f7ff fba9 	bl	8001720 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d903      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e166      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
 8001fdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe0:	4b92      	ldr	r3, [pc, #584]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8001fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80a4 	beq.w	8002142 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffa:	4b8c      	ldr	r3, [pc, #560]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10d      	bne.n	8002022 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002006:	4b89      	ldr	r3, [pc, #548]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a88      	ldr	r2, [pc, #544]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 800200c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b86      	ldr	r3, [pc, #536]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201e:	2301      	movs	r3, #1
 8002020:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	4b83      	ldr	r3, [pc, #524]	; (8002230 <HAL_RCC_OscConfig+0x4d4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d118      	bne.n	8002060 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800202e:	4b80      	ldr	r3, [pc, #512]	; (8002230 <HAL_RCC_OscConfig+0x4d4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a7f      	ldr	r2, [pc, #508]	; (8002230 <HAL_RCC_OscConfig+0x4d4>)
 8002034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002038:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800203a:	f7ff fb71 	bl	8001720 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff fb6d 	bl	8001720 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b64      	cmp	r3, #100	; 0x64
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e12a      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002054:	4b76      	ldr	r3, [pc, #472]	; (8002230 <HAL_RCC_OscConfig+0x4d4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d106      	bne.n	8002076 <HAL_RCC_OscConfig+0x31a>
 8002068:	4b70      	ldr	r3, [pc, #448]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a6f      	ldr	r2, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 800206e:	f043 0301 	orr.w	r3, r3, #1
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
 8002074:	e02d      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10c      	bne.n	8002098 <HAL_RCC_OscConfig+0x33c>
 800207e:	4b6b      	ldr	r3, [pc, #428]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a6a      	ldr	r2, [pc, #424]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a67      	ldr	r2, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
 8002096:	e01c      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x35e>
 80020a0:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a61      	ldr	r2, [pc, #388]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b5f      	ldr	r3, [pc, #380]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a5e      	ldr	r2, [pc, #376]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x376>
 80020ba:	4b5c      	ldr	r3, [pc, #368]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020be:	4a5b      	ldr	r2, [pc, #364]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	; 0x70
 80020c6:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ca:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d015      	beq.n	8002106 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7ff fb21 	bl	8001720 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7ff fb1d 	bl	8001720 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0d8      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f8:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80020fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ee      	beq.n	80020e2 <HAL_RCC_OscConfig+0x386>
 8002104:	e014      	b.n	8002130 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7ff fb0b 	bl	8001720 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210c:	e00a      	b.n	8002124 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7ff fb07 	bl	8001720 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f241 3288 	movw	r2, #5000	; 0x1388
 800211c:	4293      	cmp	r3, r2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0c2      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002124:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1ee      	bne.n	800210e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002130:	7dfb      	ldrb	r3, [r7, #23]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d105      	bne.n	8002142 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a3c      	ldr	r2, [pc, #240]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 800213c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80ae 	beq.w	80022a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800214c:	4b37      	ldr	r3, [pc, #220]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d06d      	beq.n	8002234 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d14b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002160:	4b32      	ldr	r3, [pc, #200]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a31      	ldr	r2, [pc, #196]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002166:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff fad8 	bl	8001720 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff fad4 	bl	8001720 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e091      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69da      	ldr	r2, [r3, #28]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	019b      	lsls	r3, r3, #6
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	085b      	lsrs	r3, r3, #1
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021bc:	071b      	lsls	r3, r3, #28
 80021be:	491b      	ldr	r1, [pc, #108]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a18      	ldr	r2, [pc, #96]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff faa6 	bl	8001720 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff faa2 	bl	8001720 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e05f      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x47c>
 80021f6:	e057      	b.n	80022a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b0c      	ldr	r3, [pc, #48]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 80021fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7ff fa8c 	bl	8001720 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff fa88 	bl	8001720 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e045      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	4b03      	ldr	r3, [pc, #12]	; (800222c <HAL_RCC_OscConfig+0x4d0>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x4b0>
 800222a:	e03d      	b.n	80022a8 <HAL_RCC_OscConfig+0x54c>
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002234:	4b1f      	ldr	r3, [pc, #124]	; (80022b4 <HAL_RCC_OscConfig+0x558>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d030      	beq.n	80022a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800224c:	429a      	cmp	r2, r3
 800224e:	d129      	bne.n	80022a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d122      	bne.n	80022a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800226a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800226c:	4293      	cmp	r3, r2
 800226e:	d119      	bne.n	80022a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d10f      	bne.n	80022a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d107      	bne.n	80022a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0d0      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d910      	bls.n	8002300 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 020f 	bic.w	r2, r3, #15
 80022e6:	4965      	ldr	r1, [pc, #404]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b63      	ldr	r3, [pc, #396]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0b8      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d020      	beq.n	800234e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002318:	4b59      	ldr	r3, [pc, #356]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002322:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0308 	and.w	r3, r3, #8
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002330:	4b53      	ldr	r3, [pc, #332]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	4a52      	ldr	r2, [pc, #328]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800233a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b50      	ldr	r3, [pc, #320]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	494d      	ldr	r1, [pc, #308]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d040      	beq.n	80023dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b47      	ldr	r3, [pc, #284]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07f      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e073      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e06b      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b39      	ldr	r3, [pc, #228]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4936      	ldr	r1, [pc, #216]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ac:	f7ff f9b8 	bl	8001720 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff f9b4 	bl	8001720 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e053      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d210      	bcs.n	800240c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 020f 	bic.w	r2, r3, #15
 80023f2:	4922      	ldr	r1, [pc, #136]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e032      	b.n	8002472 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b19      	ldr	r3, [pc, #100]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4916      	ldr	r1, [pc, #88]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244a:	f000 f821 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 800244e:	4601      	mov	r1, r0
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	4a0a      	ldr	r2, [pc, #40]	; (8002484 <HAL_RCC_ClockConfig+0x1cc>)
 800245c:	5cd3      	ldrb	r3, [r2, r3]
 800245e:	fa21 f303 	lsr.w	r3, r1, r3
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_RCC_ClockConfig+0x1d0>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_ClockConfig+0x1d4>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff f914 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023c00 	.word	0x40023c00
 8002480:	40023800 	.word	0x40023800
 8002484:	08004dc0 	.word	0x08004dc0
 8002488:	20000000 	.word	0x20000000
 800248c:	20000004 	.word	0x20000004

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	607b      	str	r3, [r7, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a6:	4b63      	ldr	r3, [pc, #396]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 030c 	and.w	r3, r3, #12
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d007      	beq.n	80024c2 <HAL_RCC_GetSysClockFreq+0x32>
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d008      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x38>
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f040 80b4 	bne.w	8002624 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024be:	60bb      	str	r3, [r7, #8]
      break;
 80024c0:	e0b3      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024c2:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024c4:	60bb      	str	r3, [r7, #8]
      break;
 80024c6:	e0b0      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c8:	4b5a      	ldr	r3, [pc, #360]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024d2:	4b58      	ldr	r3, [pc, #352]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d04a      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024de:	4b55      	ldr	r3, [pc, #340]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	099b      	lsrs	r3, r3, #6
 80024e4:	f04f 0400 	mov.w	r4, #0
 80024e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	ea03 0501 	and.w	r5, r3, r1
 80024f4:	ea04 0602 	and.w	r6, r4, r2
 80024f8:	4629      	mov	r1, r5
 80024fa:	4632      	mov	r2, r6
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	f04f 0400 	mov.w	r4, #0
 8002504:	0154      	lsls	r4, r2, #5
 8002506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800250a:	014b      	lsls	r3, r1, #5
 800250c:	4619      	mov	r1, r3
 800250e:	4622      	mov	r2, r4
 8002510:	1b49      	subs	r1, r1, r5
 8002512:	eb62 0206 	sbc.w	r2, r2, r6
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	f04f 0400 	mov.w	r4, #0
 800251e:	0194      	lsls	r4, r2, #6
 8002520:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002524:	018b      	lsls	r3, r1, #6
 8002526:	1a5b      	subs	r3, r3, r1
 8002528:	eb64 0402 	sbc.w	r4, r4, r2
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	00e2      	lsls	r2, r4, #3
 8002536:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800253a:	00d9      	lsls	r1, r3, #3
 800253c:	460b      	mov	r3, r1
 800253e:	4614      	mov	r4, r2
 8002540:	195b      	adds	r3, r3, r5
 8002542:	eb44 0406 	adc.w	r4, r4, r6
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	02a2      	lsls	r2, r4, #10
 8002550:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002554:	0299      	lsls	r1, r3, #10
 8002556:	460b      	mov	r3, r1
 8002558:	4614      	mov	r4, r2
 800255a:	4618      	mov	r0, r3
 800255c:	4621      	mov	r1, r4
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f04f 0400 	mov.w	r4, #0
 8002564:	461a      	mov	r2, r3
 8002566:	4623      	mov	r3, r4
 8002568:	f7fd feba 	bl	80002e0 <__aeabi_uldivmod>
 800256c:	4603      	mov	r3, r0
 800256e:	460c      	mov	r4, r1
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	e049      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002574:	4b2f      	ldr	r3, [pc, #188]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	099b      	lsrs	r3, r3, #6
 800257a:	f04f 0400 	mov.w	r4, #0
 800257e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	ea03 0501 	and.w	r5, r3, r1
 800258a:	ea04 0602 	and.w	r6, r4, r2
 800258e:	4629      	mov	r1, r5
 8002590:	4632      	mov	r2, r6
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f04f 0400 	mov.w	r4, #0
 800259a:	0154      	lsls	r4, r2, #5
 800259c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a0:	014b      	lsls	r3, r1, #5
 80025a2:	4619      	mov	r1, r3
 80025a4:	4622      	mov	r2, r4
 80025a6:	1b49      	subs	r1, r1, r5
 80025a8:	eb62 0206 	sbc.w	r2, r2, r6
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	0194      	lsls	r4, r2, #6
 80025b6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025ba:	018b      	lsls	r3, r1, #6
 80025bc:	1a5b      	subs	r3, r3, r1
 80025be:	eb64 0402 	sbc.w	r4, r4, r2
 80025c2:	f04f 0100 	mov.w	r1, #0
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	00e2      	lsls	r2, r4, #3
 80025cc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025d0:	00d9      	lsls	r1, r3, #3
 80025d2:	460b      	mov	r3, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	195b      	adds	r3, r3, r5
 80025d8:	eb44 0406 	adc.w	r4, r4, r6
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	02a2      	lsls	r2, r4, #10
 80025e6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80025ea:	0299      	lsls	r1, r3, #10
 80025ec:	460b      	mov	r3, r1
 80025ee:	4614      	mov	r4, r2
 80025f0:	4618      	mov	r0, r3
 80025f2:	4621      	mov	r1, r4
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f04f 0400 	mov.w	r4, #0
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	f7fd fe6f 	bl	80002e0 <__aeabi_uldivmod>
 8002602:	4603      	mov	r3, r0
 8002604:	460c      	mov	r4, r1
 8002606:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	3301      	adds	r3, #1
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002620:	60bb      	str	r3, [r7, #8]
      break;
 8002622:	e002      	b.n	800262a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002626:	60bb      	str	r3, [r7, #8]
      break;
 8002628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800262a:	68bb      	ldr	r3, [r7, #8]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	00f42400 	.word	0x00f42400

0800263c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e049      	b.n	80026e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fe32 	bl	80012cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2202      	movs	r2, #2
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	4619      	mov	r1, r3
 800267a:	4610      	mov	r0, r2
 800267c:	f000 fd1c 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d001      	beq.n	8002704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e054      	b.n	80027ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a26      	ldr	r2, [pc, #152]	; (80027bc <HAL_TIM_Base_Start_IT+0xd0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d022      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272e:	d01d      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a22      	ldr	r2, [pc, #136]	; (80027c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d018      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d013      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1f      	ldr	r2, [pc, #124]	; (80027c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00e      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <HAL_TIM_Base_Start_IT+0xe0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d009      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a1c      	ldr	r2, [pc, #112]	; (80027d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d004      	beq.n	800276c <HAL_TIM_Base_Start_IT+0x80>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a1b      	ldr	r2, [pc, #108]	; (80027d4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d115      	bne.n	8002798 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <HAL_TIM_Base_Start_IT+0xec>)
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b06      	cmp	r3, #6
 800277c:	d015      	beq.n	80027aa <HAL_TIM_Base_Start_IT+0xbe>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d011      	beq.n	80027aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0201 	orr.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002796:	e008      	b.n	80027aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	e000      	b.n	80027ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40010000 	.word	0x40010000
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40010400 	.word	0x40010400
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40001800 	.word	0x40001800
 80027d8:	00010007 	.word	0x00010007

080027dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e049      	b.n	8002882 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d106      	bne.n	8002808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f841 	bl	800288a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3304      	adds	r3, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4610      	mov	r0, r2
 800281c:	f000 fc4c 	bl	80030b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_TIM_PWM_Start+0x24>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e03c      	b.n	800293e <HAL_TIM_PWM_Start+0x9e>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d109      	bne.n	80028de <HAL_TIM_PWM_Start+0x3e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	bf14      	ite	ne
 80028d6:	2301      	movne	r3, #1
 80028d8:	2300      	moveq	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	e02f      	b.n	800293e <HAL_TIM_PWM_Start+0x9e>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d109      	bne.n	80028f8 <HAL_TIM_PWM_Start+0x58>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	e022      	b.n	800293e <HAL_TIM_PWM_Start+0x9e>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d109      	bne.n	8002912 <HAL_TIM_PWM_Start+0x72>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	bf14      	ite	ne
 800290a:	2301      	movne	r3, #1
 800290c:	2300      	moveq	r3, #0
 800290e:	b2db      	uxtb	r3, r3
 8002910:	e015      	b.n	800293e <HAL_TIM_PWM_Start+0x9e>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b10      	cmp	r3, #16
 8002916:	d109      	bne.n	800292c <HAL_TIM_PWM_Start+0x8c>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	bf14      	ite	ne
 8002924:	2301      	movne	r3, #1
 8002926:	2300      	moveq	r3, #0
 8002928:	b2db      	uxtb	r3, r3
 800292a:	e008      	b.n	800293e <HAL_TIM_PWM_Start+0x9e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e092      	b.n	8002a6c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Start+0xb6>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002954:	e023      	b.n	800299e <HAL_TIM_PWM_Start+0xfe>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b04      	cmp	r3, #4
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Start+0xc6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002964:	e01b      	b.n	800299e <HAL_TIM_PWM_Start+0xfe>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	2b08      	cmp	r3, #8
 800296a:	d104      	bne.n	8002976 <HAL_TIM_PWM_Start+0xd6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002974:	e013      	b.n	800299e <HAL_TIM_PWM_Start+0xfe>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b0c      	cmp	r3, #12
 800297a:	d104      	bne.n	8002986 <HAL_TIM_PWM_Start+0xe6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002984:	e00b      	b.n	800299e <HAL_TIM_PWM_Start+0xfe>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b10      	cmp	r3, #16
 800298a:	d104      	bne.n	8002996 <HAL_TIM_PWM_Start+0xf6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002994:	e003      	b.n	800299e <HAL_TIM_PWM_Start+0xfe>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2201      	movs	r2, #1
 80029a4:	6839      	ldr	r1, [r7, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 ff1e 	bl	80037e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a30      	ldr	r2, [pc, #192]	; (8002a74 <HAL_TIM_PWM_Start+0x1d4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_TIM_PWM_Start+0x120>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2f      	ldr	r2, [pc, #188]	; (8002a78 <HAL_TIM_PWM_Start+0x1d8>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PWM_Start+0x124>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_TIM_PWM_Start+0x126>
 80029c4:	2300      	movs	r3, #0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_TIM_PWM_Start+0x1d4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d022      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d01d      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_TIM_PWM_Start+0x1dc>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d018      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a20      	ldr	r2, [pc, #128]	; (8002a80 <HAL_TIM_PWM_Start+0x1e0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_TIM_PWM_Start+0x1e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d00e      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a19      	ldr	r2, [pc, #100]	; (8002a78 <HAL_TIM_PWM_Start+0x1d8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d009      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1b      	ldr	r2, [pc, #108]	; (8002a88 <HAL_TIM_PWM_Start+0x1e8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <HAL_TIM_PWM_Start+0x18a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a19      	ldr	r2, [pc, #100]	; (8002a8c <HAL_TIM_PWM_Start+0x1ec>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d115      	bne.n	8002a56 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <HAL_TIM_PWM_Start+0x1f0>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2b06      	cmp	r3, #6
 8002a3a:	d015      	beq.n	8002a68 <HAL_TIM_PWM_Start+0x1c8>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a42:	d011      	beq.n	8002a68 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a54:	e008      	b.n	8002a68 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0201 	orr.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	e000      	b.n	8002a6a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40010400 	.word	0x40010400
 8002a7c:	40000400 	.word	0x40000400
 8002a80:	40000800 	.word	0x40000800
 8002a84:	40000c00 	.word	0x40000c00
 8002a88:	40014000 	.word	0x40014000
 8002a8c:	40001800 	.word	0x40001800
 8002a90:	00010007 	.word	0x00010007

08002a94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0202 	mvn.w	r2, #2
 8002ac0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fad0 	bl	800307c <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fac2 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fad3 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0204 	mvn.w	r2, #4
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 faa6 	bl	800307c <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa98 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 faa9 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0208 	mvn.w	r2, #8
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa7c 	bl	800307c <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fa6e 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fa7f 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b10      	cmp	r3, #16
 8002ba4:	d122      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b10      	cmp	r3, #16
 8002bb2:	d11b      	bne.n	8002bec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0210 	mvn.w	r2, #16
 8002bbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa52 	bl	800307c <HAL_TIM_IC_CaptureCallback>
 8002bd8:	e005      	b.n	8002be6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fa44 	bl	8003068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fa55 	bl	8003090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10e      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f003 0301 	and.w	r3, r3, #1
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0201 	mvn.w	r2, #1
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f8f8 	bl	8000e08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b80      	cmp	r3, #128	; 0x80
 8002c24:	d10e      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d107      	bne.n	8002c44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 ff0e 	bl	8003a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c52:	d10e      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d107      	bne.n	8002c72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 ff01 	bl	8003a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7c:	2b40      	cmp	r3, #64	; 0x40
 8002c7e:	d10e      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c8a:	2b40      	cmp	r3, #64	; 0x40
 8002c8c:	d107      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fa03 	bl	80030a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b20      	cmp	r3, #32
 8002caa:	d10e      	bne.n	8002cca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b20      	cmp	r3, #32
 8002cb8:	d107      	bne.n	8002cca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f06f 0220 	mvn.w	r2, #32
 8002cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fec1 	bl	8003a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e0fd      	b.n	8002eea <HAL_TIM_PWM_ConfigChannel+0x216>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b14      	cmp	r3, #20
 8002cfa:	f200 80f0 	bhi.w	8002ede <HAL_TIM_PWM_ConfigChannel+0x20a>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d59 	.word	0x08002d59
 8002d08:	08002edf 	.word	0x08002edf
 8002d0c:	08002edf 	.word	0x08002edf
 8002d10:	08002edf 	.word	0x08002edf
 8002d14:	08002d99 	.word	0x08002d99
 8002d18:	08002edf 	.word	0x08002edf
 8002d1c:	08002edf 	.word	0x08002edf
 8002d20:	08002edf 	.word	0x08002edf
 8002d24:	08002ddb 	.word	0x08002ddb
 8002d28:	08002edf 	.word	0x08002edf
 8002d2c:	08002edf 	.word	0x08002edf
 8002d30:	08002edf 	.word	0x08002edf
 8002d34:	08002e1b 	.word	0x08002e1b
 8002d38:	08002edf 	.word	0x08002edf
 8002d3c:	08002edf 	.word	0x08002edf
 8002d40:	08002edf 	.word	0x08002edf
 8002d44:	08002e5d 	.word	0x08002e5d
 8002d48:	08002edf 	.word	0x08002edf
 8002d4c:	08002edf 	.word	0x08002edf
 8002d50:	08002edf 	.word	0x08002edf
 8002d54:	08002e9d 	.word	0x08002e9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 fa4a 	bl	80031f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0208 	orr.w	r2, r2, #8
 8002d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699a      	ldr	r2, [r3, #24]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0204 	bic.w	r2, r2, #4
 8002d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6999      	ldr	r1, [r3, #24]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	619a      	str	r2, [r3, #24]
      break;
 8002d96:	e0a3      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 fa9c 	bl	80032dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6999      	ldr	r1, [r3, #24]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	619a      	str	r2, [r3, #24]
      break;
 8002dd8:	e082      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68b9      	ldr	r1, [r7, #8]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 faf3 	bl	80033cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69da      	ldr	r2, [r3, #28]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0208 	orr.w	r2, r2, #8
 8002df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69da      	ldr	r2, [r3, #28]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0204 	bic.w	r2, r2, #4
 8002e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	61da      	str	r2, [r3, #28]
      break;
 8002e18:	e062      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68b9      	ldr	r1, [r7, #8]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 fb49 	bl	80034b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	69da      	ldr	r2, [r3, #28]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	021a      	lsls	r2, r3, #8
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	430a      	orrs	r2, r1
 8002e58:	61da      	str	r2, [r3, #28]
      break;
 8002e5a:	e041      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fb80 	bl	8003568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0208 	orr.w	r2, r2, #8
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002e9a:	e021      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 fbb2 	bl	800360c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ec6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002edc:	e000      	b.n	8002ee0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8002ede:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop

08002ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIM_ConfigClockSource+0x18>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0a6      	b.n	800305a <HAL_TIM_ConfigClockSource+0x166>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4b4f      	ldr	r3, [pc, #316]	; (8003064 <HAL_TIM_ConfigClockSource+0x170>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b40      	cmp	r3, #64	; 0x40
 8002f42:	d067      	beq.n	8003014 <HAL_TIM_ConfigClockSource+0x120>
 8002f44:	2b40      	cmp	r3, #64	; 0x40
 8002f46:	d80b      	bhi.n	8002f60 <HAL_TIM_ConfigClockSource+0x6c>
 8002f48:	2b10      	cmp	r3, #16
 8002f4a:	d073      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x140>
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d802      	bhi.n	8002f56 <HAL_TIM_ConfigClockSource+0x62>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d06f      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002f54:	e078      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f56:	2b20      	cmp	r3, #32
 8002f58:	d06c      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x140>
 8002f5a:	2b30      	cmp	r3, #48	; 0x30
 8002f5c:	d06a      	beq.n	8003034 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f5e:	e073      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f60:	2b70      	cmp	r3, #112	; 0x70
 8002f62:	d00d      	beq.n	8002f80 <HAL_TIM_ConfigClockSource+0x8c>
 8002f64:	2b70      	cmp	r3, #112	; 0x70
 8002f66:	d804      	bhi.n	8002f72 <HAL_TIM_ConfigClockSource+0x7e>
 8002f68:	2b50      	cmp	r3, #80	; 0x50
 8002f6a:	d033      	beq.n	8002fd4 <HAL_TIM_ConfigClockSource+0xe0>
 8002f6c:	2b60      	cmp	r3, #96	; 0x60
 8002f6e:	d041      	beq.n	8002ff4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002f70:	e06a      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f76:	d066      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0x152>
 8002f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f7c:	d017      	beq.n	8002fae <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002f7e:	e063      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6899      	ldr	r1, [r3, #8]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f000 fc0a 	bl	80037a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fa2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	609a      	str	r2, [r3, #8]
      break;
 8002fac:	e04c      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f000 fbf3 	bl	80037a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd0:	609a      	str	r2, [r3, #8]
      break;
 8002fd2:	e039      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f000 fb67 	bl	80036b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2150      	movs	r1, #80	; 0x50
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fbc0 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8002ff2:	e029      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6859      	ldr	r1, [r3, #4]
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	461a      	mov	r2, r3
 8003002:	f000 fb86 	bl	8003712 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2160      	movs	r1, #96	; 0x60
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fbb0 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8003012:	e019      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	461a      	mov	r2, r3
 8003022:	f000 fb47 	bl	80036b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2140      	movs	r1, #64	; 0x40
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fba0 	bl	8003772 <TIM_ITRx_SetConfig>
      break;
 8003032:	e009      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 fb97 	bl	8003772 <TIM_ITRx_SetConfig>
        break;
 8003044:	e000      	b.n	8003048 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003046:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	fffeff88 	.word	0xfffeff88

08003068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a40      	ldr	r2, [pc, #256]	; (80031cc <TIM_Base_SetConfig+0x114>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d00f      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3d      	ldr	r2, [pc, #244]	; (80031d0 <TIM_Base_SetConfig+0x118>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3c      	ldr	r2, [pc, #240]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3b      	ldr	r2, [pc, #236]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3a      	ldr	r2, [pc, #232]	; (80031dc <TIM_Base_SetConfig+0x124>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a2f      	ldr	r2, [pc, #188]	; (80031cc <TIM_Base_SetConfig+0x114>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02b      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d027      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a2c      	ldr	r2, [pc, #176]	; (80031d0 <TIM_Base_SetConfig+0x118>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d023      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2b      	ldr	r2, [pc, #172]	; (80031d4 <TIM_Base_SetConfig+0x11c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d01f      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a2a      	ldr	r2, [pc, #168]	; (80031d8 <TIM_Base_SetConfig+0x120>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01b      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a29      	ldr	r2, [pc, #164]	; (80031dc <TIM_Base_SetConfig+0x124>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d017      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a28      	ldr	r2, [pc, #160]	; (80031e0 <TIM_Base_SetConfig+0x128>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a27      	ldr	r2, [pc, #156]	; (80031e4 <TIM_Base_SetConfig+0x12c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a26      	ldr	r2, [pc, #152]	; (80031e8 <TIM_Base_SetConfig+0x130>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a25      	ldr	r2, [pc, #148]	; (80031ec <TIM_Base_SetConfig+0x134>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a24      	ldr	r2, [pc, #144]	; (80031f0 <TIM_Base_SetConfig+0x138>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a23      	ldr	r2, [pc, #140]	; (80031f4 <TIM_Base_SetConfig+0x13c>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <TIM_Base_SetConfig+0x114>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0xf8>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a0c      	ldr	r2, [pc, #48]	; (80031dc <TIM_Base_SetConfig+0x124>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d103      	bne.n	80031b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	615a      	str	r2, [r3, #20]
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40000c00 	.word	0x40000c00
 80031dc:	40010400 	.word	0x40010400
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800
 80031ec:	40001800 	.word	0x40001800
 80031f0:	40001c00 	.word	0x40001c00
 80031f4:	40002000 	.word	0x40002000

080031f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f023 0201 	bic.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <TIM_OC1_SetConfig+0xd8>)
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 0303 	bic.w	r3, r3, #3
 800322e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 0302 	bic.w	r3, r3, #2
 8003240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a21      	ldr	r2, [pc, #132]	; (80032d4 <TIM_OC1_SetConfig+0xdc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC1_SetConfig+0x64>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a20      	ldr	r2, [pc, #128]	; (80032d8 <TIM_OC1_SetConfig+0xe0>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10c      	bne.n	8003276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0308 	bic.w	r3, r3, #8
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a16      	ldr	r2, [pc, #88]	; (80032d4 <TIM_OC1_SetConfig+0xdc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <TIM_OC1_SetConfig+0x8e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a15      	ldr	r2, [pc, #84]	; (80032d8 <TIM_OC1_SetConfig+0xe0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d111      	bne.n	80032aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800328c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	621a      	str	r2, [r3, #32]
}
 80032c4:	bf00      	nop
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	fffeff8f 	.word	0xfffeff8f
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40010400 	.word	0x40010400

080032dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f023 0210 	bic.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <TIM_OC2_SetConfig+0xe4>)
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0320 	bic.w	r3, r3, #32
 8003326:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <TIM_OC2_SetConfig+0xe8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_OC2_SetConfig+0x68>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <TIM_OC2_SetConfig+0xec>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d10d      	bne.n	8003360 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800334a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800335e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a18      	ldr	r2, [pc, #96]	; (80033c4 <TIM_OC2_SetConfig+0xe8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_OC2_SetConfig+0x94>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <TIM_OC2_SetConfig+0xec>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d113      	bne.n	8003398 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003376:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	feff8fff 	.word	0xfeff8fff
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40010400 	.word	0x40010400

080033cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b087      	sub	sp, #28
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <TIM_OC3_SetConfig+0xe0>)
 80033f8:	4013      	ands	r3, r2
 80033fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0303 	bic.w	r3, r3, #3
 8003402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <TIM_OC3_SetConfig+0xe4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d003      	beq.n	8003432 <TIM_OC3_SetConfig+0x66>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a21      	ldr	r2, [pc, #132]	; (80034b4 <TIM_OC3_SetConfig+0xe8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d10d      	bne.n	800344e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003438:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a17      	ldr	r2, [pc, #92]	; (80034b0 <TIM_OC3_SetConfig+0xe4>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_OC3_SetConfig+0x92>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a16      	ldr	r2, [pc, #88]	; (80034b4 <TIM_OC3_SetConfig+0xe8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d113      	bne.n	8003486 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	621a      	str	r2, [r3, #32]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	fffeff8f 	.word	0xfffeff8f
 80034b0:	40010000 	.word	0x40010000
 80034b4:	40010400 	.word	0x40010400

080034b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a1b      	ldr	r3, [r3, #32]
 80034d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <TIM_OC4_SetConfig+0xa4>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	031b      	lsls	r3, r3, #12
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a13      	ldr	r2, [pc, #76]	; (8003560 <TIM_OC4_SetConfig+0xa8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_OC4_SetConfig+0x68>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a12      	ldr	r2, [pc, #72]	; (8003564 <TIM_OC4_SetConfig+0xac>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	feff8fff 	.word	0xfeff8fff
 8003560:	40010000 	.word	0x40010000
 8003564:	40010400 	.word	0x40010400

08003568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <TIM_OC5_SetConfig+0x98>)
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a12      	ldr	r2, [pc, #72]	; (8003604 <TIM_OC5_SetConfig+0x9c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d003      	beq.n	80035c6 <TIM_OC5_SetConfig+0x5e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a11      	ldr	r2, [pc, #68]	; (8003608 <TIM_OC5_SetConfig+0xa0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d109      	bne.n	80035da <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	621a      	str	r2, [r3, #32]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	fffeff8f 	.word	0xfffeff8f
 8003604:	40010000 	.word	0x40010000
 8003608:	40010400 	.word	0x40010400

0800360c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <TIM_OC6_SetConfig+0x9c>)
 8003638:	4013      	ands	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800364e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	051b      	lsls	r3, r3, #20
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a13      	ldr	r2, [pc, #76]	; (80036ac <TIM_OC6_SetConfig+0xa0>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_OC6_SetConfig+0x60>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <TIM_OC6_SetConfig+0xa4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d109      	bne.n	8003680 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	feff8fff 	.word	0xfeff8fff
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40010400 	.word	0x40010400

080036b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f023 0201 	bic.w	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 030a 	bic.w	r3, r3, #10
 80036f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003712:	b480      	push	{r7}
 8003714:	b087      	sub	sp, #28
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f023 0210 	bic.w	r2, r3, #16
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800373c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800374e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	621a      	str	r2, [r3, #32]
}
 8003766:	bf00      	nop
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003772:	b480      	push	{r7}
 8003774:	b085      	sub	sp, #20
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	f043 0307 	orr.w	r3, r3, #7
 8003794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	609a      	str	r2, [r3, #8]
}
 800379c:	bf00      	nop
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	021a      	lsls	r2, r3, #8
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f003 031f 	and.w	r3, r3, #31
 80037fa:	2201      	movs	r2, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	43db      	mvns	r3, r3
 800380a:	401a      	ands	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a1a      	ldr	r2, [r3, #32]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	431a      	orrs	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003844:	2b01      	cmp	r3, #1
 8003846:	d101      	bne.n	800384c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003848:	2302      	movs	r3, #2
 800384a:	e06d      	b.n	8003928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a30      	ldr	r2, [pc, #192]	; (8003934 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d004      	beq.n	8003880 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d108      	bne.n	8003892 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003886:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a20      	ldr	r2, [pc, #128]	; (8003934 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038be:	d01d      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1c      	ldr	r2, [pc, #112]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a15      	ldr	r2, [pc, #84]	; (8003938 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d10c      	bne.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	4313      	orrs	r3, r2
 800390c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40010000 	.word	0x40010000
 8003938:	40010400 	.word	0x40010400
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40014000 	.word	0x40014000
 800394c:	40001800 	.word	0x40001800

08003950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e065      	b.n	8003a38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a14      	ldr	r2, [pc, #80]	; (8003a48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d115      	bne.n	8003a26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	051b      	lsls	r3, r3, #20
 8003a06:	4313      	orrs	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr
 8003a44:	40010000 	.word	0x40010000
 8003a48:	40010400 	.word	0x40010400

08003a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <__errno>:
 8003a88:	4b01      	ldr	r3, [pc, #4]	; (8003a90 <__errno+0x8>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000000c 	.word	0x2000000c

08003a94 <__libc_init_array>:
 8003a94:	b570      	push	{r4, r5, r6, lr}
 8003a96:	4e0d      	ldr	r6, [pc, #52]	; (8003acc <__libc_init_array+0x38>)
 8003a98:	4c0d      	ldr	r4, [pc, #52]	; (8003ad0 <__libc_init_array+0x3c>)
 8003a9a:	1ba4      	subs	r4, r4, r6
 8003a9c:	10a4      	asrs	r4, r4, #2
 8003a9e:	2500      	movs	r5, #0
 8003aa0:	42a5      	cmp	r5, r4
 8003aa2:	d109      	bne.n	8003ab8 <__libc_init_array+0x24>
 8003aa4:	4e0b      	ldr	r6, [pc, #44]	; (8003ad4 <__libc_init_array+0x40>)
 8003aa6:	4c0c      	ldr	r4, [pc, #48]	; (8003ad8 <__libc_init_array+0x44>)
 8003aa8:	f000 ff04 	bl	80048b4 <_init>
 8003aac:	1ba4      	subs	r4, r4, r6
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	42a5      	cmp	r5, r4
 8003ab4:	d105      	bne.n	8003ac2 <__libc_init_array+0x2e>
 8003ab6:	bd70      	pop	{r4, r5, r6, pc}
 8003ab8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003abc:	4798      	blx	r3
 8003abe:	3501      	adds	r5, #1
 8003ac0:	e7ee      	b.n	8003aa0 <__libc_init_array+0xc>
 8003ac2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ac6:	4798      	blx	r3
 8003ac8:	3501      	adds	r5, #1
 8003aca:	e7f2      	b.n	8003ab2 <__libc_init_array+0x1e>
 8003acc:	08004e70 	.word	0x08004e70
 8003ad0:	08004e70 	.word	0x08004e70
 8003ad4:	08004e70 	.word	0x08004e70
 8003ad8:	08004e74 	.word	0x08004e74

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <iprintf>:
 8003aec:	b40f      	push	{r0, r1, r2, r3}
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <iprintf+0x2c>)
 8003af0:	b513      	push	{r0, r1, r4, lr}
 8003af2:	681c      	ldr	r4, [r3, #0]
 8003af4:	b124      	cbz	r4, 8003b00 <iprintf+0x14>
 8003af6:	69a3      	ldr	r3, [r4, #24]
 8003af8:	b913      	cbnz	r3, 8003b00 <iprintf+0x14>
 8003afa:	4620      	mov	r0, r4
 8003afc:	f000 f84e 	bl	8003b9c <__sinit>
 8003b00:	ab05      	add	r3, sp, #20
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	68a1      	ldr	r1, [r4, #8]
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f000 f955 	bl	8003db8 <_vfiprintf_r>
 8003b0e:	b002      	add	sp, #8
 8003b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b14:	b004      	add	sp, #16
 8003b16:	4770      	bx	lr
 8003b18:	2000000c 	.word	0x2000000c

08003b1c <std>:
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	b510      	push	{r4, lr}
 8003b20:	4604      	mov	r4, r0
 8003b22:	e9c0 3300 	strd	r3, r3, [r0]
 8003b26:	6083      	str	r3, [r0, #8]
 8003b28:	8181      	strh	r1, [r0, #12]
 8003b2a:	6643      	str	r3, [r0, #100]	; 0x64
 8003b2c:	81c2      	strh	r2, [r0, #14]
 8003b2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b32:	6183      	str	r3, [r0, #24]
 8003b34:	4619      	mov	r1, r3
 8003b36:	2208      	movs	r2, #8
 8003b38:	305c      	adds	r0, #92	; 0x5c
 8003b3a:	f7ff ffcf 	bl	8003adc <memset>
 8003b3e:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <std+0x38>)
 8003b40:	6263      	str	r3, [r4, #36]	; 0x24
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <std+0x3c>)
 8003b44:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <std+0x40>)
 8003b48:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b4a:	4b05      	ldr	r3, [pc, #20]	; (8003b60 <std+0x44>)
 8003b4c:	6224      	str	r4, [r4, #32]
 8003b4e:	6323      	str	r3, [r4, #48]	; 0x30
 8003b50:	bd10      	pop	{r4, pc}
 8003b52:	bf00      	nop
 8003b54:	08004315 	.word	0x08004315
 8003b58:	08004337 	.word	0x08004337
 8003b5c:	0800436f 	.word	0x0800436f
 8003b60:	08004393 	.word	0x08004393

08003b64 <_cleanup_r>:
 8003b64:	4901      	ldr	r1, [pc, #4]	; (8003b6c <_cleanup_r+0x8>)
 8003b66:	f000 b885 	b.w	8003c74 <_fwalk_reent>
 8003b6a:	bf00      	nop
 8003b6c:	0800466d 	.word	0x0800466d

08003b70 <__sfmoreglue>:
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	1e4a      	subs	r2, r1, #1
 8003b74:	2568      	movs	r5, #104	; 0x68
 8003b76:	4355      	muls	r5, r2
 8003b78:	460e      	mov	r6, r1
 8003b7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b7e:	f000 f897 	bl	8003cb0 <_malloc_r>
 8003b82:	4604      	mov	r4, r0
 8003b84:	b140      	cbz	r0, 8003b98 <__sfmoreglue+0x28>
 8003b86:	2100      	movs	r1, #0
 8003b88:	e9c0 1600 	strd	r1, r6, [r0]
 8003b8c:	300c      	adds	r0, #12
 8003b8e:	60a0      	str	r0, [r4, #8]
 8003b90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b94:	f7ff ffa2 	bl	8003adc <memset>
 8003b98:	4620      	mov	r0, r4
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}

08003b9c <__sinit>:
 8003b9c:	6983      	ldr	r3, [r0, #24]
 8003b9e:	b510      	push	{r4, lr}
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	bb33      	cbnz	r3, 8003bf2 <__sinit+0x56>
 8003ba4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003ba8:	6503      	str	r3, [r0, #80]	; 0x50
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <__sinit+0x58>)
 8003bac:	4a12      	ldr	r2, [pc, #72]	; (8003bf8 <__sinit+0x5c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6282      	str	r2, [r0, #40]	; 0x28
 8003bb2:	4298      	cmp	r0, r3
 8003bb4:	bf04      	itt	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	6183      	streq	r3, [r0, #24]
 8003bba:	f000 f81f 	bl	8003bfc <__sfp>
 8003bbe:	6060      	str	r0, [r4, #4]
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f000 f81b 	bl	8003bfc <__sfp>
 8003bc6:	60a0      	str	r0, [r4, #8]
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 f817 	bl	8003bfc <__sfp>
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60e0      	str	r0, [r4, #12]
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	6860      	ldr	r0, [r4, #4]
 8003bd6:	f7ff ffa1 	bl	8003b1c <std>
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2109      	movs	r1, #9
 8003bde:	68a0      	ldr	r0, [r4, #8]
 8003be0:	f7ff ff9c 	bl	8003b1c <std>
 8003be4:	2202      	movs	r2, #2
 8003be6:	2112      	movs	r1, #18
 8003be8:	68e0      	ldr	r0, [r4, #12]
 8003bea:	f7ff ff97 	bl	8003b1c <std>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	61a3      	str	r3, [r4, #24]
 8003bf2:	bd10      	pop	{r4, pc}
 8003bf4:	08004dd0 	.word	0x08004dd0
 8003bf8:	08003b65 	.word	0x08003b65

08003bfc <__sfp>:
 8003bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <__sfp+0x70>)
 8003c00:	681e      	ldr	r6, [r3, #0]
 8003c02:	69b3      	ldr	r3, [r6, #24]
 8003c04:	4607      	mov	r7, r0
 8003c06:	b913      	cbnz	r3, 8003c0e <__sfp+0x12>
 8003c08:	4630      	mov	r0, r6
 8003c0a:	f7ff ffc7 	bl	8003b9c <__sinit>
 8003c0e:	3648      	adds	r6, #72	; 0x48
 8003c10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	d503      	bpl.n	8003c20 <__sfp+0x24>
 8003c18:	6833      	ldr	r3, [r6, #0]
 8003c1a:	b133      	cbz	r3, 8003c2a <__sfp+0x2e>
 8003c1c:	6836      	ldr	r6, [r6, #0]
 8003c1e:	e7f7      	b.n	8003c10 <__sfp+0x14>
 8003c20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003c24:	b16d      	cbz	r5, 8003c42 <__sfp+0x46>
 8003c26:	3468      	adds	r4, #104	; 0x68
 8003c28:	e7f4      	b.n	8003c14 <__sfp+0x18>
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	f7ff ff9f 	bl	8003b70 <__sfmoreglue>
 8003c32:	6030      	str	r0, [r6, #0]
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d1f1      	bne.n	8003c1c <__sfp+0x20>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4604      	mov	r4, r0
 8003c3e:	4620      	mov	r0, r4
 8003c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <__sfp+0x74>)
 8003c44:	6665      	str	r5, [r4, #100]	; 0x64
 8003c46:	e9c4 5500 	strd	r5, r5, [r4]
 8003c4a:	60a5      	str	r5, [r4, #8]
 8003c4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4629      	mov	r1, r5
 8003c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c5c:	f7ff ff3e 	bl	8003adc <memset>
 8003c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c68:	e7e9      	b.n	8003c3e <__sfp+0x42>
 8003c6a:	bf00      	nop
 8003c6c:	08004dd0 	.word	0x08004dd0
 8003c70:	ffff0001 	.word	0xffff0001

08003c74 <_fwalk_reent>:
 8003c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c78:	4680      	mov	r8, r0
 8003c7a:	4689      	mov	r9, r1
 8003c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c80:	2600      	movs	r6, #0
 8003c82:	b914      	cbnz	r4, 8003c8a <_fwalk_reent+0x16>
 8003c84:	4630      	mov	r0, r6
 8003c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c8e:	3f01      	subs	r7, #1
 8003c90:	d501      	bpl.n	8003c96 <_fwalk_reent+0x22>
 8003c92:	6824      	ldr	r4, [r4, #0]
 8003c94:	e7f5      	b.n	8003c82 <_fwalk_reent+0xe>
 8003c96:	89ab      	ldrh	r3, [r5, #12]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d907      	bls.n	8003cac <_fwalk_reent+0x38>
 8003c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	d003      	beq.n	8003cac <_fwalk_reent+0x38>
 8003ca4:	4629      	mov	r1, r5
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	47c8      	blx	r9
 8003caa:	4306      	orrs	r6, r0
 8003cac:	3568      	adds	r5, #104	; 0x68
 8003cae:	e7ee      	b.n	8003c8e <_fwalk_reent+0x1a>

08003cb0 <_malloc_r>:
 8003cb0:	b570      	push	{r4, r5, r6, lr}
 8003cb2:	1ccd      	adds	r5, r1, #3
 8003cb4:	f025 0503 	bic.w	r5, r5, #3
 8003cb8:	3508      	adds	r5, #8
 8003cba:	2d0c      	cmp	r5, #12
 8003cbc:	bf38      	it	cc
 8003cbe:	250c      	movcc	r5, #12
 8003cc0:	2d00      	cmp	r5, #0
 8003cc2:	4606      	mov	r6, r0
 8003cc4:	db01      	blt.n	8003cca <_malloc_r+0x1a>
 8003cc6:	42a9      	cmp	r1, r5
 8003cc8:	d903      	bls.n	8003cd2 <_malloc_r+0x22>
 8003cca:	230c      	movs	r3, #12
 8003ccc:	6033      	str	r3, [r6, #0]
 8003cce:	2000      	movs	r0, #0
 8003cd0:	bd70      	pop	{r4, r5, r6, pc}
 8003cd2:	f000 fd6b 	bl	80047ac <__malloc_lock>
 8003cd6:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <_malloc_r+0xac>)
 8003cd8:	6814      	ldr	r4, [r2, #0]
 8003cda:	4621      	mov	r1, r4
 8003cdc:	b991      	cbnz	r1, 8003d04 <_malloc_r+0x54>
 8003cde:	4c20      	ldr	r4, [pc, #128]	; (8003d60 <_malloc_r+0xb0>)
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	b91b      	cbnz	r3, 8003cec <_malloc_r+0x3c>
 8003ce4:	4630      	mov	r0, r6
 8003ce6:	f000 fb05 	bl	80042f4 <_sbrk_r>
 8003cea:	6020      	str	r0, [r4, #0]
 8003cec:	4629      	mov	r1, r5
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f000 fb00 	bl	80042f4 <_sbrk_r>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d124      	bne.n	8003d42 <_malloc_r+0x92>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	6033      	str	r3, [r6, #0]
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 fd56 	bl	80047ae <__malloc_unlock>
 8003d02:	e7e4      	b.n	8003cce <_malloc_r+0x1e>
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	1b5b      	subs	r3, r3, r5
 8003d08:	d418      	bmi.n	8003d3c <_malloc_r+0x8c>
 8003d0a:	2b0b      	cmp	r3, #11
 8003d0c:	d90f      	bls.n	8003d2e <_malloc_r+0x7e>
 8003d0e:	600b      	str	r3, [r1, #0]
 8003d10:	50cd      	str	r5, [r1, r3]
 8003d12:	18cc      	adds	r4, r1, r3
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 fd4a 	bl	80047ae <__malloc_unlock>
 8003d1a:	f104 000b 	add.w	r0, r4, #11
 8003d1e:	1d23      	adds	r3, r4, #4
 8003d20:	f020 0007 	bic.w	r0, r0, #7
 8003d24:	1ac3      	subs	r3, r0, r3
 8003d26:	d0d3      	beq.n	8003cd0 <_malloc_r+0x20>
 8003d28:	425a      	negs	r2, r3
 8003d2a:	50e2      	str	r2, [r4, r3]
 8003d2c:	e7d0      	b.n	8003cd0 <_malloc_r+0x20>
 8003d2e:	428c      	cmp	r4, r1
 8003d30:	684b      	ldr	r3, [r1, #4]
 8003d32:	bf16      	itet	ne
 8003d34:	6063      	strne	r3, [r4, #4]
 8003d36:	6013      	streq	r3, [r2, #0]
 8003d38:	460c      	movne	r4, r1
 8003d3a:	e7eb      	b.n	8003d14 <_malloc_r+0x64>
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	6849      	ldr	r1, [r1, #4]
 8003d40:	e7cc      	b.n	8003cdc <_malloc_r+0x2c>
 8003d42:	1cc4      	adds	r4, r0, #3
 8003d44:	f024 0403 	bic.w	r4, r4, #3
 8003d48:	42a0      	cmp	r0, r4
 8003d4a:	d005      	beq.n	8003d58 <_malloc_r+0xa8>
 8003d4c:	1a21      	subs	r1, r4, r0
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 fad0 	bl	80042f4 <_sbrk_r>
 8003d54:	3001      	adds	r0, #1
 8003d56:	d0cf      	beq.n	8003cf8 <_malloc_r+0x48>
 8003d58:	6025      	str	r5, [r4, #0]
 8003d5a:	e7db      	b.n	8003d14 <_malloc_r+0x64>
 8003d5c:	20000094 	.word	0x20000094
 8003d60:	20000098 	.word	0x20000098

08003d64 <__sfputc_r>:
 8003d64:	6893      	ldr	r3, [r2, #8]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	b410      	push	{r4}
 8003d6c:	6093      	str	r3, [r2, #8]
 8003d6e:	da08      	bge.n	8003d82 <__sfputc_r+0x1e>
 8003d70:	6994      	ldr	r4, [r2, #24]
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	db01      	blt.n	8003d7a <__sfputc_r+0x16>
 8003d76:	290a      	cmp	r1, #10
 8003d78:	d103      	bne.n	8003d82 <__sfputc_r+0x1e>
 8003d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d7e:	f000 bb0d 	b.w	800439c <__swbuf_r>
 8003d82:	6813      	ldr	r3, [r2, #0]
 8003d84:	1c58      	adds	r0, r3, #1
 8003d86:	6010      	str	r0, [r2, #0]
 8003d88:	7019      	strb	r1, [r3, #0]
 8003d8a:	4608      	mov	r0, r1
 8003d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <__sfputs_r>:
 8003d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d94:	4606      	mov	r6, r0
 8003d96:	460f      	mov	r7, r1
 8003d98:	4614      	mov	r4, r2
 8003d9a:	18d5      	adds	r5, r2, r3
 8003d9c:	42ac      	cmp	r4, r5
 8003d9e:	d101      	bne.n	8003da4 <__sfputs_r+0x12>
 8003da0:	2000      	movs	r0, #0
 8003da2:	e007      	b.n	8003db4 <__sfputs_r+0x22>
 8003da4:	463a      	mov	r2, r7
 8003da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003daa:	4630      	mov	r0, r6
 8003dac:	f7ff ffda 	bl	8003d64 <__sfputc_r>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	d1f3      	bne.n	8003d9c <__sfputs_r+0xa>
 8003db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003db8 <_vfiprintf_r>:
 8003db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	b09d      	sub	sp, #116	; 0x74
 8003dc0:	4617      	mov	r7, r2
 8003dc2:	461d      	mov	r5, r3
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	b118      	cbz	r0, 8003dd0 <_vfiprintf_r+0x18>
 8003dc8:	6983      	ldr	r3, [r0, #24]
 8003dca:	b90b      	cbnz	r3, 8003dd0 <_vfiprintf_r+0x18>
 8003dcc:	f7ff fee6 	bl	8003b9c <__sinit>
 8003dd0:	4b7c      	ldr	r3, [pc, #496]	; (8003fc4 <_vfiprintf_r+0x20c>)
 8003dd2:	429c      	cmp	r4, r3
 8003dd4:	d158      	bne.n	8003e88 <_vfiprintf_r+0xd0>
 8003dd6:	6874      	ldr	r4, [r6, #4]
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	0718      	lsls	r0, r3, #28
 8003ddc:	d55e      	bpl.n	8003e9c <_vfiprintf_r+0xe4>
 8003dde:	6923      	ldr	r3, [r4, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d05b      	beq.n	8003e9c <_vfiprintf_r+0xe4>
 8003de4:	2300      	movs	r3, #0
 8003de6:	9309      	str	r3, [sp, #36]	; 0x24
 8003de8:	2320      	movs	r3, #32
 8003dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003dee:	2330      	movs	r3, #48	; 0x30
 8003df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003df4:	9503      	str	r5, [sp, #12]
 8003df6:	f04f 0b01 	mov.w	fp, #1
 8003dfa:	46b8      	mov	r8, r7
 8003dfc:	4645      	mov	r5, r8
 8003dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e02:	b10b      	cbz	r3, 8003e08 <_vfiprintf_r+0x50>
 8003e04:	2b25      	cmp	r3, #37	; 0x25
 8003e06:	d154      	bne.n	8003eb2 <_vfiprintf_r+0xfa>
 8003e08:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e0c:	d00b      	beq.n	8003e26 <_vfiprintf_r+0x6e>
 8003e0e:	4653      	mov	r3, sl
 8003e10:	463a      	mov	r2, r7
 8003e12:	4621      	mov	r1, r4
 8003e14:	4630      	mov	r0, r6
 8003e16:	f7ff ffbc 	bl	8003d92 <__sfputs_r>
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	f000 80c2 	beq.w	8003fa4 <_vfiprintf_r+0x1ec>
 8003e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e22:	4453      	add	r3, sl
 8003e24:	9309      	str	r3, [sp, #36]	; 0x24
 8003e26:	f898 3000 	ldrb.w	r3, [r8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80ba 	beq.w	8003fa4 <_vfiprintf_r+0x1ec>
 8003e30:	2300      	movs	r3, #0
 8003e32:	f04f 32ff 	mov.w	r2, #4294967295
 8003e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	9307      	str	r3, [sp, #28]
 8003e3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e42:	931a      	str	r3, [sp, #104]	; 0x68
 8003e44:	46a8      	mov	r8, r5
 8003e46:	2205      	movs	r2, #5
 8003e48:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003e4c:	485e      	ldr	r0, [pc, #376]	; (8003fc8 <_vfiprintf_r+0x210>)
 8003e4e:	f7fc f9f7 	bl	8000240 <memchr>
 8003e52:	9b04      	ldr	r3, [sp, #16]
 8003e54:	bb78      	cbnz	r0, 8003eb6 <_vfiprintf_r+0xfe>
 8003e56:	06d9      	lsls	r1, r3, #27
 8003e58:	bf44      	itt	mi
 8003e5a:	2220      	movmi	r2, #32
 8003e5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e60:	071a      	lsls	r2, r3, #28
 8003e62:	bf44      	itt	mi
 8003e64:	222b      	movmi	r2, #43	; 0x2b
 8003e66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e6a:	782a      	ldrb	r2, [r5, #0]
 8003e6c:	2a2a      	cmp	r2, #42	; 0x2a
 8003e6e:	d02a      	beq.n	8003ec6 <_vfiprintf_r+0x10e>
 8003e70:	9a07      	ldr	r2, [sp, #28]
 8003e72:	46a8      	mov	r8, r5
 8003e74:	2000      	movs	r0, #0
 8003e76:	250a      	movs	r5, #10
 8003e78:	4641      	mov	r1, r8
 8003e7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e7e:	3b30      	subs	r3, #48	; 0x30
 8003e80:	2b09      	cmp	r3, #9
 8003e82:	d969      	bls.n	8003f58 <_vfiprintf_r+0x1a0>
 8003e84:	b360      	cbz	r0, 8003ee0 <_vfiprintf_r+0x128>
 8003e86:	e024      	b.n	8003ed2 <_vfiprintf_r+0x11a>
 8003e88:	4b50      	ldr	r3, [pc, #320]	; (8003fcc <_vfiprintf_r+0x214>)
 8003e8a:	429c      	cmp	r4, r3
 8003e8c:	d101      	bne.n	8003e92 <_vfiprintf_r+0xda>
 8003e8e:	68b4      	ldr	r4, [r6, #8]
 8003e90:	e7a2      	b.n	8003dd8 <_vfiprintf_r+0x20>
 8003e92:	4b4f      	ldr	r3, [pc, #316]	; (8003fd0 <_vfiprintf_r+0x218>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	bf08      	it	eq
 8003e98:	68f4      	ldreq	r4, [r6, #12]
 8003e9a:	e79d      	b.n	8003dd8 <_vfiprintf_r+0x20>
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f000 fae0 	bl	8004464 <__swsetup_r>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d09d      	beq.n	8003de4 <_vfiprintf_r+0x2c>
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	b01d      	add	sp, #116	; 0x74
 8003eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb2:	46a8      	mov	r8, r5
 8003eb4:	e7a2      	b.n	8003dfc <_vfiprintf_r+0x44>
 8003eb6:	4a44      	ldr	r2, [pc, #272]	; (8003fc8 <_vfiprintf_r+0x210>)
 8003eb8:	1a80      	subs	r0, r0, r2
 8003eba:	fa0b f000 	lsl.w	r0, fp, r0
 8003ebe:	4318      	orrs	r0, r3
 8003ec0:	9004      	str	r0, [sp, #16]
 8003ec2:	4645      	mov	r5, r8
 8003ec4:	e7be      	b.n	8003e44 <_vfiprintf_r+0x8c>
 8003ec6:	9a03      	ldr	r2, [sp, #12]
 8003ec8:	1d11      	adds	r1, r2, #4
 8003eca:	6812      	ldr	r2, [r2, #0]
 8003ecc:	9103      	str	r1, [sp, #12]
 8003ece:	2a00      	cmp	r2, #0
 8003ed0:	db01      	blt.n	8003ed6 <_vfiprintf_r+0x11e>
 8003ed2:	9207      	str	r2, [sp, #28]
 8003ed4:	e004      	b.n	8003ee0 <_vfiprintf_r+0x128>
 8003ed6:	4252      	negs	r2, r2
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	9207      	str	r2, [sp, #28]
 8003ede:	9304      	str	r3, [sp, #16]
 8003ee0:	f898 3000 	ldrb.w	r3, [r8]
 8003ee4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ee6:	d10e      	bne.n	8003f06 <_vfiprintf_r+0x14e>
 8003ee8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003eec:	2b2a      	cmp	r3, #42	; 0x2a
 8003eee:	d138      	bne.n	8003f62 <_vfiprintf_r+0x1aa>
 8003ef0:	9b03      	ldr	r3, [sp, #12]
 8003ef2:	1d1a      	adds	r2, r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	9203      	str	r2, [sp, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bfb8      	it	lt
 8003efc:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f00:	f108 0802 	add.w	r8, r8, #2
 8003f04:	9305      	str	r3, [sp, #20]
 8003f06:	4d33      	ldr	r5, [pc, #204]	; (8003fd4 <_vfiprintf_r+0x21c>)
 8003f08:	f898 1000 	ldrb.w	r1, [r8]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fc f996 	bl	8000240 <memchr>
 8003f14:	b140      	cbz	r0, 8003f28 <_vfiprintf_r+0x170>
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	1b40      	subs	r0, r0, r5
 8003f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f1e:	9b04      	ldr	r3, [sp, #16]
 8003f20:	4303      	orrs	r3, r0
 8003f22:	f108 0801 	add.w	r8, r8, #1
 8003f26:	9304      	str	r3, [sp, #16]
 8003f28:	f898 1000 	ldrb.w	r1, [r8]
 8003f2c:	482a      	ldr	r0, [pc, #168]	; (8003fd8 <_vfiprintf_r+0x220>)
 8003f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f32:	2206      	movs	r2, #6
 8003f34:	f108 0701 	add.w	r7, r8, #1
 8003f38:	f7fc f982 	bl	8000240 <memchr>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d037      	beq.n	8003fb0 <_vfiprintf_r+0x1f8>
 8003f40:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <_vfiprintf_r+0x224>)
 8003f42:	bb1b      	cbnz	r3, 8003f8c <_vfiprintf_r+0x1d4>
 8003f44:	9b03      	ldr	r3, [sp, #12]
 8003f46:	3307      	adds	r3, #7
 8003f48:	f023 0307 	bic.w	r3, r3, #7
 8003f4c:	3308      	adds	r3, #8
 8003f4e:	9303      	str	r3, [sp, #12]
 8003f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f52:	444b      	add	r3, r9
 8003f54:	9309      	str	r3, [sp, #36]	; 0x24
 8003f56:	e750      	b.n	8003dfa <_vfiprintf_r+0x42>
 8003f58:	fb05 3202 	mla	r2, r5, r2, r3
 8003f5c:	2001      	movs	r0, #1
 8003f5e:	4688      	mov	r8, r1
 8003f60:	e78a      	b.n	8003e78 <_vfiprintf_r+0xc0>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f108 0801 	add.w	r8, r8, #1
 8003f68:	9305      	str	r3, [sp, #20]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	250a      	movs	r5, #10
 8003f6e:	4640      	mov	r0, r8
 8003f70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f74:	3a30      	subs	r2, #48	; 0x30
 8003f76:	2a09      	cmp	r2, #9
 8003f78:	d903      	bls.n	8003f82 <_vfiprintf_r+0x1ca>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d0c3      	beq.n	8003f06 <_vfiprintf_r+0x14e>
 8003f7e:	9105      	str	r1, [sp, #20]
 8003f80:	e7c1      	b.n	8003f06 <_vfiprintf_r+0x14e>
 8003f82:	fb05 2101 	mla	r1, r5, r1, r2
 8003f86:	2301      	movs	r3, #1
 8003f88:	4680      	mov	r8, r0
 8003f8a:	e7f0      	b.n	8003f6e <_vfiprintf_r+0x1b6>
 8003f8c:	ab03      	add	r3, sp, #12
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	4622      	mov	r2, r4
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <_vfiprintf_r+0x228>)
 8003f94:	a904      	add	r1, sp, #16
 8003f96:	4630      	mov	r0, r6
 8003f98:	f3af 8000 	nop.w
 8003f9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003fa0:	4681      	mov	r9, r0
 8003fa2:	d1d5      	bne.n	8003f50 <_vfiprintf_r+0x198>
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	065b      	lsls	r3, r3, #25
 8003fa8:	f53f af7e 	bmi.w	8003ea8 <_vfiprintf_r+0xf0>
 8003fac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fae:	e77d      	b.n	8003eac <_vfiprintf_r+0xf4>
 8003fb0:	ab03      	add	r3, sp, #12
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <_vfiprintf_r+0x228>)
 8003fb8:	a904      	add	r1, sp, #16
 8003fba:	4630      	mov	r0, r6
 8003fbc:	f000 f888 	bl	80040d0 <_printf_i>
 8003fc0:	e7ec      	b.n	8003f9c <_vfiprintf_r+0x1e4>
 8003fc2:	bf00      	nop
 8003fc4:	08004df4 	.word	0x08004df4
 8003fc8:	08004e34 	.word	0x08004e34
 8003fcc:	08004e14 	.word	0x08004e14
 8003fd0:	08004dd4 	.word	0x08004dd4
 8003fd4:	08004e3a 	.word	0x08004e3a
 8003fd8:	08004e3e 	.word	0x08004e3e
 8003fdc:	00000000 	.word	0x00000000
 8003fe0:	08003d93 	.word	0x08003d93

08003fe4 <_printf_common>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	4691      	mov	r9, r2
 8003fea:	461f      	mov	r7, r3
 8003fec:	688a      	ldr	r2, [r1, #8]
 8003fee:	690b      	ldr	r3, [r1, #16]
 8003ff0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	bfb8      	it	lt
 8003ff8:	4613      	movlt	r3, r2
 8003ffa:	f8c9 3000 	str.w	r3, [r9]
 8003ffe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004002:	4606      	mov	r6, r0
 8004004:	460c      	mov	r4, r1
 8004006:	b112      	cbz	r2, 800400e <_printf_common+0x2a>
 8004008:	3301      	adds	r3, #1
 800400a:	f8c9 3000 	str.w	r3, [r9]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	0699      	lsls	r1, r3, #26
 8004012:	bf42      	ittt	mi
 8004014:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004018:	3302      	addmi	r3, #2
 800401a:	f8c9 3000 	strmi.w	r3, [r9]
 800401e:	6825      	ldr	r5, [r4, #0]
 8004020:	f015 0506 	ands.w	r5, r5, #6
 8004024:	d107      	bne.n	8004036 <_printf_common+0x52>
 8004026:	f104 0a19 	add.w	sl, r4, #25
 800402a:	68e3      	ldr	r3, [r4, #12]
 800402c:	f8d9 2000 	ldr.w	r2, [r9]
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	42ab      	cmp	r3, r5
 8004034:	dc28      	bgt.n	8004088 <_printf_common+0xa4>
 8004036:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	3300      	adds	r3, #0
 800403e:	bf18      	it	ne
 8004040:	2301      	movne	r3, #1
 8004042:	0692      	lsls	r2, r2, #26
 8004044:	d42d      	bmi.n	80040a2 <_printf_common+0xbe>
 8004046:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800404a:	4639      	mov	r1, r7
 800404c:	4630      	mov	r0, r6
 800404e:	47c0      	blx	r8
 8004050:	3001      	adds	r0, #1
 8004052:	d020      	beq.n	8004096 <_printf_common+0xb2>
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	68e5      	ldr	r5, [r4, #12]
 8004058:	f8d9 2000 	ldr.w	r2, [r9]
 800405c:	f003 0306 	and.w	r3, r3, #6
 8004060:	2b04      	cmp	r3, #4
 8004062:	bf08      	it	eq
 8004064:	1aad      	subeq	r5, r5, r2
 8004066:	68a3      	ldr	r3, [r4, #8]
 8004068:	6922      	ldr	r2, [r4, #16]
 800406a:	bf0c      	ite	eq
 800406c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004070:	2500      	movne	r5, #0
 8004072:	4293      	cmp	r3, r2
 8004074:	bfc4      	itt	gt
 8004076:	1a9b      	subgt	r3, r3, r2
 8004078:	18ed      	addgt	r5, r5, r3
 800407a:	f04f 0900 	mov.w	r9, #0
 800407e:	341a      	adds	r4, #26
 8004080:	454d      	cmp	r5, r9
 8004082:	d11a      	bne.n	80040ba <_printf_common+0xd6>
 8004084:	2000      	movs	r0, #0
 8004086:	e008      	b.n	800409a <_printf_common+0xb6>
 8004088:	2301      	movs	r3, #1
 800408a:	4652      	mov	r2, sl
 800408c:	4639      	mov	r1, r7
 800408e:	4630      	mov	r0, r6
 8004090:	47c0      	blx	r8
 8004092:	3001      	adds	r0, #1
 8004094:	d103      	bne.n	800409e <_printf_common+0xba>
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409e:	3501      	adds	r5, #1
 80040a0:	e7c3      	b.n	800402a <_printf_common+0x46>
 80040a2:	18e1      	adds	r1, r4, r3
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	2030      	movs	r0, #48	; 0x30
 80040a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040ac:	4422      	add	r2, r4
 80040ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b6:	3302      	adds	r3, #2
 80040b8:	e7c5      	b.n	8004046 <_printf_common+0x62>
 80040ba:	2301      	movs	r3, #1
 80040bc:	4622      	mov	r2, r4
 80040be:	4639      	mov	r1, r7
 80040c0:	4630      	mov	r0, r6
 80040c2:	47c0      	blx	r8
 80040c4:	3001      	adds	r0, #1
 80040c6:	d0e6      	beq.n	8004096 <_printf_common+0xb2>
 80040c8:	f109 0901 	add.w	r9, r9, #1
 80040cc:	e7d8      	b.n	8004080 <_printf_common+0x9c>
	...

080040d0 <_printf_i>:
 80040d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80040d8:	460c      	mov	r4, r1
 80040da:	7e09      	ldrb	r1, [r1, #24]
 80040dc:	b085      	sub	sp, #20
 80040de:	296e      	cmp	r1, #110	; 0x6e
 80040e0:	4617      	mov	r7, r2
 80040e2:	4606      	mov	r6, r0
 80040e4:	4698      	mov	r8, r3
 80040e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040e8:	f000 80b3 	beq.w	8004252 <_printf_i+0x182>
 80040ec:	d822      	bhi.n	8004134 <_printf_i+0x64>
 80040ee:	2963      	cmp	r1, #99	; 0x63
 80040f0:	d036      	beq.n	8004160 <_printf_i+0x90>
 80040f2:	d80a      	bhi.n	800410a <_printf_i+0x3a>
 80040f4:	2900      	cmp	r1, #0
 80040f6:	f000 80b9 	beq.w	800426c <_printf_i+0x19c>
 80040fa:	2958      	cmp	r1, #88	; 0x58
 80040fc:	f000 8083 	beq.w	8004206 <_printf_i+0x136>
 8004100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004104:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004108:	e032      	b.n	8004170 <_printf_i+0xa0>
 800410a:	2964      	cmp	r1, #100	; 0x64
 800410c:	d001      	beq.n	8004112 <_printf_i+0x42>
 800410e:	2969      	cmp	r1, #105	; 0x69
 8004110:	d1f6      	bne.n	8004100 <_printf_i+0x30>
 8004112:	6820      	ldr	r0, [r4, #0]
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	0605      	lsls	r5, r0, #24
 8004118:	f103 0104 	add.w	r1, r3, #4
 800411c:	d52a      	bpl.n	8004174 <_printf_i+0xa4>
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6011      	str	r1, [r2, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da03      	bge.n	800412e <_printf_i+0x5e>
 8004126:	222d      	movs	r2, #45	; 0x2d
 8004128:	425b      	negs	r3, r3
 800412a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800412e:	486f      	ldr	r0, [pc, #444]	; (80042ec <_printf_i+0x21c>)
 8004130:	220a      	movs	r2, #10
 8004132:	e039      	b.n	80041a8 <_printf_i+0xd8>
 8004134:	2973      	cmp	r1, #115	; 0x73
 8004136:	f000 809d 	beq.w	8004274 <_printf_i+0x1a4>
 800413a:	d808      	bhi.n	800414e <_printf_i+0x7e>
 800413c:	296f      	cmp	r1, #111	; 0x6f
 800413e:	d020      	beq.n	8004182 <_printf_i+0xb2>
 8004140:	2970      	cmp	r1, #112	; 0x70
 8004142:	d1dd      	bne.n	8004100 <_printf_i+0x30>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	f043 0320 	orr.w	r3, r3, #32
 800414a:	6023      	str	r3, [r4, #0]
 800414c:	e003      	b.n	8004156 <_printf_i+0x86>
 800414e:	2975      	cmp	r1, #117	; 0x75
 8004150:	d017      	beq.n	8004182 <_printf_i+0xb2>
 8004152:	2978      	cmp	r1, #120	; 0x78
 8004154:	d1d4      	bne.n	8004100 <_printf_i+0x30>
 8004156:	2378      	movs	r3, #120	; 0x78
 8004158:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800415c:	4864      	ldr	r0, [pc, #400]	; (80042f0 <_printf_i+0x220>)
 800415e:	e055      	b.n	800420c <_printf_i+0x13c>
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	1d19      	adds	r1, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6011      	str	r1, [r2, #0]
 8004168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800416c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004170:	2301      	movs	r3, #1
 8004172:	e08c      	b.n	800428e <_printf_i+0x1be>
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6011      	str	r1, [r2, #0]
 8004178:	f010 0f40 	tst.w	r0, #64	; 0x40
 800417c:	bf18      	it	ne
 800417e:	b21b      	sxthne	r3, r3
 8004180:	e7cf      	b.n	8004122 <_printf_i+0x52>
 8004182:	6813      	ldr	r3, [r2, #0]
 8004184:	6825      	ldr	r5, [r4, #0]
 8004186:	1d18      	adds	r0, r3, #4
 8004188:	6010      	str	r0, [r2, #0]
 800418a:	0628      	lsls	r0, r5, #24
 800418c:	d501      	bpl.n	8004192 <_printf_i+0xc2>
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	e002      	b.n	8004198 <_printf_i+0xc8>
 8004192:	0668      	lsls	r0, r5, #25
 8004194:	d5fb      	bpl.n	800418e <_printf_i+0xbe>
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	4854      	ldr	r0, [pc, #336]	; (80042ec <_printf_i+0x21c>)
 800419a:	296f      	cmp	r1, #111	; 0x6f
 800419c:	bf14      	ite	ne
 800419e:	220a      	movne	r2, #10
 80041a0:	2208      	moveq	r2, #8
 80041a2:	2100      	movs	r1, #0
 80041a4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041a8:	6865      	ldr	r5, [r4, #4]
 80041aa:	60a5      	str	r5, [r4, #8]
 80041ac:	2d00      	cmp	r5, #0
 80041ae:	f2c0 8095 	blt.w	80042dc <_printf_i+0x20c>
 80041b2:	6821      	ldr	r1, [r4, #0]
 80041b4:	f021 0104 	bic.w	r1, r1, #4
 80041b8:	6021      	str	r1, [r4, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d13d      	bne.n	800423a <_printf_i+0x16a>
 80041be:	2d00      	cmp	r5, #0
 80041c0:	f040 808e 	bne.w	80042e0 <_printf_i+0x210>
 80041c4:	4665      	mov	r5, ip
 80041c6:	2a08      	cmp	r2, #8
 80041c8:	d10b      	bne.n	80041e2 <_printf_i+0x112>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	07db      	lsls	r3, r3, #31
 80041ce:	d508      	bpl.n	80041e2 <_printf_i+0x112>
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	6862      	ldr	r2, [r4, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	bfde      	ittt	le
 80041d8:	2330      	movle	r3, #48	; 0x30
 80041da:	f805 3c01 	strble.w	r3, [r5, #-1]
 80041de:	f105 35ff 	addle.w	r5, r5, #4294967295
 80041e2:	ebac 0305 	sub.w	r3, ip, r5
 80041e6:	6123      	str	r3, [r4, #16]
 80041e8:	f8cd 8000 	str.w	r8, [sp]
 80041ec:	463b      	mov	r3, r7
 80041ee:	aa03      	add	r2, sp, #12
 80041f0:	4621      	mov	r1, r4
 80041f2:	4630      	mov	r0, r6
 80041f4:	f7ff fef6 	bl	8003fe4 <_printf_common>
 80041f8:	3001      	adds	r0, #1
 80041fa:	d14d      	bne.n	8004298 <_printf_i+0x1c8>
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	b005      	add	sp, #20
 8004202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004206:	4839      	ldr	r0, [pc, #228]	; (80042ec <_printf_i+0x21c>)
 8004208:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800420c:	6813      	ldr	r3, [r2, #0]
 800420e:	6821      	ldr	r1, [r4, #0]
 8004210:	1d1d      	adds	r5, r3, #4
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6015      	str	r5, [r2, #0]
 8004216:	060a      	lsls	r2, r1, #24
 8004218:	d50b      	bpl.n	8004232 <_printf_i+0x162>
 800421a:	07ca      	lsls	r2, r1, #31
 800421c:	bf44      	itt	mi
 800421e:	f041 0120 	orrmi.w	r1, r1, #32
 8004222:	6021      	strmi	r1, [r4, #0]
 8004224:	b91b      	cbnz	r3, 800422e <_printf_i+0x15e>
 8004226:	6822      	ldr	r2, [r4, #0]
 8004228:	f022 0220 	bic.w	r2, r2, #32
 800422c:	6022      	str	r2, [r4, #0]
 800422e:	2210      	movs	r2, #16
 8004230:	e7b7      	b.n	80041a2 <_printf_i+0xd2>
 8004232:	064d      	lsls	r5, r1, #25
 8004234:	bf48      	it	mi
 8004236:	b29b      	uxthmi	r3, r3
 8004238:	e7ef      	b.n	800421a <_printf_i+0x14a>
 800423a:	4665      	mov	r5, ip
 800423c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004240:	fb02 3311 	mls	r3, r2, r1, r3
 8004244:	5cc3      	ldrb	r3, [r0, r3]
 8004246:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800424a:	460b      	mov	r3, r1
 800424c:	2900      	cmp	r1, #0
 800424e:	d1f5      	bne.n	800423c <_printf_i+0x16c>
 8004250:	e7b9      	b.n	80041c6 <_printf_i+0xf6>
 8004252:	6813      	ldr	r3, [r2, #0]
 8004254:	6825      	ldr	r5, [r4, #0]
 8004256:	6961      	ldr	r1, [r4, #20]
 8004258:	1d18      	adds	r0, r3, #4
 800425a:	6010      	str	r0, [r2, #0]
 800425c:	0628      	lsls	r0, r5, #24
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	d501      	bpl.n	8004266 <_printf_i+0x196>
 8004262:	6019      	str	r1, [r3, #0]
 8004264:	e002      	b.n	800426c <_printf_i+0x19c>
 8004266:	066a      	lsls	r2, r5, #25
 8004268:	d5fb      	bpl.n	8004262 <_printf_i+0x192>
 800426a:	8019      	strh	r1, [r3, #0]
 800426c:	2300      	movs	r3, #0
 800426e:	6123      	str	r3, [r4, #16]
 8004270:	4665      	mov	r5, ip
 8004272:	e7b9      	b.n	80041e8 <_printf_i+0x118>
 8004274:	6813      	ldr	r3, [r2, #0]
 8004276:	1d19      	adds	r1, r3, #4
 8004278:	6011      	str	r1, [r2, #0]
 800427a:	681d      	ldr	r5, [r3, #0]
 800427c:	6862      	ldr	r2, [r4, #4]
 800427e:	2100      	movs	r1, #0
 8004280:	4628      	mov	r0, r5
 8004282:	f7fb ffdd 	bl	8000240 <memchr>
 8004286:	b108      	cbz	r0, 800428c <_printf_i+0x1bc>
 8004288:	1b40      	subs	r0, r0, r5
 800428a:	6060      	str	r0, [r4, #4]
 800428c:	6863      	ldr	r3, [r4, #4]
 800428e:	6123      	str	r3, [r4, #16]
 8004290:	2300      	movs	r3, #0
 8004292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004296:	e7a7      	b.n	80041e8 <_printf_i+0x118>
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	462a      	mov	r2, r5
 800429c:	4639      	mov	r1, r7
 800429e:	4630      	mov	r0, r6
 80042a0:	47c0      	blx	r8
 80042a2:	3001      	adds	r0, #1
 80042a4:	d0aa      	beq.n	80041fc <_printf_i+0x12c>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	079b      	lsls	r3, r3, #30
 80042aa:	d413      	bmi.n	80042d4 <_printf_i+0x204>
 80042ac:	68e0      	ldr	r0, [r4, #12]
 80042ae:	9b03      	ldr	r3, [sp, #12]
 80042b0:	4298      	cmp	r0, r3
 80042b2:	bfb8      	it	lt
 80042b4:	4618      	movlt	r0, r3
 80042b6:	e7a3      	b.n	8004200 <_printf_i+0x130>
 80042b8:	2301      	movs	r3, #1
 80042ba:	464a      	mov	r2, r9
 80042bc:	4639      	mov	r1, r7
 80042be:	4630      	mov	r0, r6
 80042c0:	47c0      	blx	r8
 80042c2:	3001      	adds	r0, #1
 80042c4:	d09a      	beq.n	80041fc <_printf_i+0x12c>
 80042c6:	3501      	adds	r5, #1
 80042c8:	68e3      	ldr	r3, [r4, #12]
 80042ca:	9a03      	ldr	r2, [sp, #12]
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	42ab      	cmp	r3, r5
 80042d0:	dcf2      	bgt.n	80042b8 <_printf_i+0x1e8>
 80042d2:	e7eb      	b.n	80042ac <_printf_i+0x1dc>
 80042d4:	2500      	movs	r5, #0
 80042d6:	f104 0919 	add.w	r9, r4, #25
 80042da:	e7f5      	b.n	80042c8 <_printf_i+0x1f8>
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1ac      	bne.n	800423a <_printf_i+0x16a>
 80042e0:	7803      	ldrb	r3, [r0, #0]
 80042e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042ea:	e76c      	b.n	80041c6 <_printf_i+0xf6>
 80042ec:	08004e45 	.word	0x08004e45
 80042f0:	08004e56 	.word	0x08004e56

080042f4 <_sbrk_r>:
 80042f4:	b538      	push	{r3, r4, r5, lr}
 80042f6:	4c06      	ldr	r4, [pc, #24]	; (8004310 <_sbrk_r+0x1c>)
 80042f8:	2300      	movs	r3, #0
 80042fa:	4605      	mov	r5, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	f7fd f94c 	bl	800159c <_sbrk>
 8004304:	1c43      	adds	r3, r0, #1
 8004306:	d102      	bne.n	800430e <_sbrk_r+0x1a>
 8004308:	6823      	ldr	r3, [r4, #0]
 800430a:	b103      	cbz	r3, 800430e <_sbrk_r+0x1a>
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	20000140 	.word	0x20000140

08004314 <__sread>:
 8004314:	b510      	push	{r4, lr}
 8004316:	460c      	mov	r4, r1
 8004318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431c:	f000 fa96 	bl	800484c <_read_r>
 8004320:	2800      	cmp	r0, #0
 8004322:	bfab      	itete	ge
 8004324:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004326:	89a3      	ldrhlt	r3, [r4, #12]
 8004328:	181b      	addge	r3, r3, r0
 800432a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800432e:	bfac      	ite	ge
 8004330:	6563      	strge	r3, [r4, #84]	; 0x54
 8004332:	81a3      	strhlt	r3, [r4, #12]
 8004334:	bd10      	pop	{r4, pc}

08004336 <__swrite>:
 8004336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800433a:	461f      	mov	r7, r3
 800433c:	898b      	ldrh	r3, [r1, #12]
 800433e:	05db      	lsls	r3, r3, #23
 8004340:	4605      	mov	r5, r0
 8004342:	460c      	mov	r4, r1
 8004344:	4616      	mov	r6, r2
 8004346:	d505      	bpl.n	8004354 <__swrite+0x1e>
 8004348:	2302      	movs	r3, #2
 800434a:	2200      	movs	r2, #0
 800434c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004350:	f000 f9b6 	bl	80046c0 <_lseek_r>
 8004354:	89a3      	ldrh	r3, [r4, #12]
 8004356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800435a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800435e:	81a3      	strh	r3, [r4, #12]
 8004360:	4632      	mov	r2, r6
 8004362:	463b      	mov	r3, r7
 8004364:	4628      	mov	r0, r5
 8004366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800436a:	f000 b869 	b.w	8004440 <_write_r>

0800436e <__sseek>:
 800436e:	b510      	push	{r4, lr}
 8004370:	460c      	mov	r4, r1
 8004372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004376:	f000 f9a3 	bl	80046c0 <_lseek_r>
 800437a:	1c43      	adds	r3, r0, #1
 800437c:	89a3      	ldrh	r3, [r4, #12]
 800437e:	bf15      	itete	ne
 8004380:	6560      	strne	r0, [r4, #84]	; 0x54
 8004382:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004386:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800438a:	81a3      	strheq	r3, [r4, #12]
 800438c:	bf18      	it	ne
 800438e:	81a3      	strhne	r3, [r4, #12]
 8004390:	bd10      	pop	{r4, pc}

08004392 <__sclose>:
 8004392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004396:	f000 b8d3 	b.w	8004540 <_close_r>
	...

0800439c <__swbuf_r>:
 800439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800439e:	460e      	mov	r6, r1
 80043a0:	4614      	mov	r4, r2
 80043a2:	4605      	mov	r5, r0
 80043a4:	b118      	cbz	r0, 80043ae <__swbuf_r+0x12>
 80043a6:	6983      	ldr	r3, [r0, #24]
 80043a8:	b90b      	cbnz	r3, 80043ae <__swbuf_r+0x12>
 80043aa:	f7ff fbf7 	bl	8003b9c <__sinit>
 80043ae:	4b21      	ldr	r3, [pc, #132]	; (8004434 <__swbuf_r+0x98>)
 80043b0:	429c      	cmp	r4, r3
 80043b2:	d12a      	bne.n	800440a <__swbuf_r+0x6e>
 80043b4:	686c      	ldr	r4, [r5, #4]
 80043b6:	69a3      	ldr	r3, [r4, #24]
 80043b8:	60a3      	str	r3, [r4, #8]
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	071a      	lsls	r2, r3, #28
 80043be:	d52e      	bpl.n	800441e <__swbuf_r+0x82>
 80043c0:	6923      	ldr	r3, [r4, #16]
 80043c2:	b363      	cbz	r3, 800441e <__swbuf_r+0x82>
 80043c4:	6923      	ldr	r3, [r4, #16]
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	1ac0      	subs	r0, r0, r3
 80043ca:	6963      	ldr	r3, [r4, #20]
 80043cc:	b2f6      	uxtb	r6, r6
 80043ce:	4283      	cmp	r3, r0
 80043d0:	4637      	mov	r7, r6
 80043d2:	dc04      	bgt.n	80043de <__swbuf_r+0x42>
 80043d4:	4621      	mov	r1, r4
 80043d6:	4628      	mov	r0, r5
 80043d8:	f000 f948 	bl	800466c <_fflush_r>
 80043dc:	bb28      	cbnz	r0, 800442a <__swbuf_r+0x8e>
 80043de:	68a3      	ldr	r3, [r4, #8]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	60a3      	str	r3, [r4, #8]
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	6022      	str	r2, [r4, #0]
 80043ea:	701e      	strb	r6, [r3, #0]
 80043ec:	6963      	ldr	r3, [r4, #20]
 80043ee:	3001      	adds	r0, #1
 80043f0:	4283      	cmp	r3, r0
 80043f2:	d004      	beq.n	80043fe <__swbuf_r+0x62>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	07db      	lsls	r3, r3, #31
 80043f8:	d519      	bpl.n	800442e <__swbuf_r+0x92>
 80043fa:	2e0a      	cmp	r6, #10
 80043fc:	d117      	bne.n	800442e <__swbuf_r+0x92>
 80043fe:	4621      	mov	r1, r4
 8004400:	4628      	mov	r0, r5
 8004402:	f000 f933 	bl	800466c <_fflush_r>
 8004406:	b190      	cbz	r0, 800442e <__swbuf_r+0x92>
 8004408:	e00f      	b.n	800442a <__swbuf_r+0x8e>
 800440a:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <__swbuf_r+0x9c>)
 800440c:	429c      	cmp	r4, r3
 800440e:	d101      	bne.n	8004414 <__swbuf_r+0x78>
 8004410:	68ac      	ldr	r4, [r5, #8]
 8004412:	e7d0      	b.n	80043b6 <__swbuf_r+0x1a>
 8004414:	4b09      	ldr	r3, [pc, #36]	; (800443c <__swbuf_r+0xa0>)
 8004416:	429c      	cmp	r4, r3
 8004418:	bf08      	it	eq
 800441a:	68ec      	ldreq	r4, [r5, #12]
 800441c:	e7cb      	b.n	80043b6 <__swbuf_r+0x1a>
 800441e:	4621      	mov	r1, r4
 8004420:	4628      	mov	r0, r5
 8004422:	f000 f81f 	bl	8004464 <__swsetup_r>
 8004426:	2800      	cmp	r0, #0
 8004428:	d0cc      	beq.n	80043c4 <__swbuf_r+0x28>
 800442a:	f04f 37ff 	mov.w	r7, #4294967295
 800442e:	4638      	mov	r0, r7
 8004430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004432:	bf00      	nop
 8004434:	08004df4 	.word	0x08004df4
 8004438:	08004e14 	.word	0x08004e14
 800443c:	08004dd4 	.word	0x08004dd4

08004440 <_write_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4c07      	ldr	r4, [pc, #28]	; (8004460 <_write_r+0x20>)
 8004444:	4605      	mov	r5, r0
 8004446:	4608      	mov	r0, r1
 8004448:	4611      	mov	r1, r2
 800444a:	2200      	movs	r2, #0
 800444c:	6022      	str	r2, [r4, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f7fd f853 	bl	80014fa <_write>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_write_r+0x1e>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	b103      	cbz	r3, 800445e <_write_r+0x1e>
 800445c:	602b      	str	r3, [r5, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20000140 	.word	0x20000140

08004464 <__swsetup_r>:
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <__swsetup_r+0xcc>)
 8004466:	b570      	push	{r4, r5, r6, lr}
 8004468:	681d      	ldr	r5, [r3, #0]
 800446a:	4606      	mov	r6, r0
 800446c:	460c      	mov	r4, r1
 800446e:	b125      	cbz	r5, 800447a <__swsetup_r+0x16>
 8004470:	69ab      	ldr	r3, [r5, #24]
 8004472:	b913      	cbnz	r3, 800447a <__swsetup_r+0x16>
 8004474:	4628      	mov	r0, r5
 8004476:	f7ff fb91 	bl	8003b9c <__sinit>
 800447a:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <__swsetup_r+0xd0>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d10f      	bne.n	80044a0 <__swsetup_r+0x3c>
 8004480:	686c      	ldr	r4, [r5, #4]
 8004482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004486:	b29a      	uxth	r2, r3
 8004488:	0715      	lsls	r5, r2, #28
 800448a:	d42c      	bmi.n	80044e6 <__swsetup_r+0x82>
 800448c:	06d0      	lsls	r0, r2, #27
 800448e:	d411      	bmi.n	80044b4 <__swsetup_r+0x50>
 8004490:	2209      	movs	r2, #9
 8004492:	6032      	str	r2, [r6, #0]
 8004494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004498:	81a3      	strh	r3, [r4, #12]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	e03e      	b.n	800451e <__swsetup_r+0xba>
 80044a0:	4b25      	ldr	r3, [pc, #148]	; (8004538 <__swsetup_r+0xd4>)
 80044a2:	429c      	cmp	r4, r3
 80044a4:	d101      	bne.n	80044aa <__swsetup_r+0x46>
 80044a6:	68ac      	ldr	r4, [r5, #8]
 80044a8:	e7eb      	b.n	8004482 <__swsetup_r+0x1e>
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <__swsetup_r+0xd8>)
 80044ac:	429c      	cmp	r4, r3
 80044ae:	bf08      	it	eq
 80044b0:	68ec      	ldreq	r4, [r5, #12]
 80044b2:	e7e6      	b.n	8004482 <__swsetup_r+0x1e>
 80044b4:	0751      	lsls	r1, r2, #29
 80044b6:	d512      	bpl.n	80044de <__swsetup_r+0x7a>
 80044b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044ba:	b141      	cbz	r1, 80044ce <__swsetup_r+0x6a>
 80044bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80044c0:	4299      	cmp	r1, r3
 80044c2:	d002      	beq.n	80044ca <__swsetup_r+0x66>
 80044c4:	4630      	mov	r0, r6
 80044c6:	f000 f973 	bl	80047b0 <_free_r>
 80044ca:	2300      	movs	r3, #0
 80044cc:	6363      	str	r3, [r4, #52]	; 0x34
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80044d4:	81a3      	strh	r3, [r4, #12]
 80044d6:	2300      	movs	r3, #0
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	6023      	str	r3, [r4, #0]
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f043 0308 	orr.w	r3, r3, #8
 80044e4:	81a3      	strh	r3, [r4, #12]
 80044e6:	6923      	ldr	r3, [r4, #16]
 80044e8:	b94b      	cbnz	r3, 80044fe <__swsetup_r+0x9a>
 80044ea:	89a3      	ldrh	r3, [r4, #12]
 80044ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80044f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f4:	d003      	beq.n	80044fe <__swsetup_r+0x9a>
 80044f6:	4621      	mov	r1, r4
 80044f8:	4630      	mov	r0, r6
 80044fa:	f000 f917 	bl	800472c <__smakebuf_r>
 80044fe:	89a2      	ldrh	r2, [r4, #12]
 8004500:	f012 0301 	ands.w	r3, r2, #1
 8004504:	d00c      	beq.n	8004520 <__swsetup_r+0xbc>
 8004506:	2300      	movs	r3, #0
 8004508:	60a3      	str	r3, [r4, #8]
 800450a:	6963      	ldr	r3, [r4, #20]
 800450c:	425b      	negs	r3, r3
 800450e:	61a3      	str	r3, [r4, #24]
 8004510:	6923      	ldr	r3, [r4, #16]
 8004512:	b953      	cbnz	r3, 800452a <__swsetup_r+0xc6>
 8004514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004518:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800451c:	d1ba      	bne.n	8004494 <__swsetup_r+0x30>
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	0792      	lsls	r2, r2, #30
 8004522:	bf58      	it	pl
 8004524:	6963      	ldrpl	r3, [r4, #20]
 8004526:	60a3      	str	r3, [r4, #8]
 8004528:	e7f2      	b.n	8004510 <__swsetup_r+0xac>
 800452a:	2000      	movs	r0, #0
 800452c:	e7f7      	b.n	800451e <__swsetup_r+0xba>
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c
 8004534:	08004df4 	.word	0x08004df4
 8004538:	08004e14 	.word	0x08004e14
 800453c:	08004dd4 	.word	0x08004dd4

08004540 <_close_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4c06      	ldr	r4, [pc, #24]	; (800455c <_close_r+0x1c>)
 8004544:	2300      	movs	r3, #0
 8004546:	4605      	mov	r5, r0
 8004548:	4608      	mov	r0, r1
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	f7fc fff1 	bl	8001532 <_close>
 8004550:	1c43      	adds	r3, r0, #1
 8004552:	d102      	bne.n	800455a <_close_r+0x1a>
 8004554:	6823      	ldr	r3, [r4, #0]
 8004556:	b103      	cbz	r3, 800455a <_close_r+0x1a>
 8004558:	602b      	str	r3, [r5, #0]
 800455a:	bd38      	pop	{r3, r4, r5, pc}
 800455c:	20000140 	.word	0x20000140

08004560 <__sflush_r>:
 8004560:	898a      	ldrh	r2, [r1, #12]
 8004562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004566:	4605      	mov	r5, r0
 8004568:	0710      	lsls	r0, r2, #28
 800456a:	460c      	mov	r4, r1
 800456c:	d458      	bmi.n	8004620 <__sflush_r+0xc0>
 800456e:	684b      	ldr	r3, [r1, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	dc05      	bgt.n	8004580 <__sflush_r+0x20>
 8004574:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	dc02      	bgt.n	8004580 <__sflush_r+0x20>
 800457a:	2000      	movs	r0, #0
 800457c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004580:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004582:	2e00      	cmp	r6, #0
 8004584:	d0f9      	beq.n	800457a <__sflush_r+0x1a>
 8004586:	2300      	movs	r3, #0
 8004588:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800458c:	682f      	ldr	r7, [r5, #0]
 800458e:	6a21      	ldr	r1, [r4, #32]
 8004590:	602b      	str	r3, [r5, #0]
 8004592:	d032      	beq.n	80045fa <__sflush_r+0x9a>
 8004594:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004596:	89a3      	ldrh	r3, [r4, #12]
 8004598:	075a      	lsls	r2, r3, #29
 800459a:	d505      	bpl.n	80045a8 <__sflush_r+0x48>
 800459c:	6863      	ldr	r3, [r4, #4]
 800459e:	1ac0      	subs	r0, r0, r3
 80045a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80045a2:	b10b      	cbz	r3, 80045a8 <__sflush_r+0x48>
 80045a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045a6:	1ac0      	subs	r0, r0, r3
 80045a8:	2300      	movs	r3, #0
 80045aa:	4602      	mov	r2, r0
 80045ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80045ae:	6a21      	ldr	r1, [r4, #32]
 80045b0:	4628      	mov	r0, r5
 80045b2:	47b0      	blx	r6
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	89a3      	ldrh	r3, [r4, #12]
 80045b8:	d106      	bne.n	80045c8 <__sflush_r+0x68>
 80045ba:	6829      	ldr	r1, [r5, #0]
 80045bc:	291d      	cmp	r1, #29
 80045be:	d848      	bhi.n	8004652 <__sflush_r+0xf2>
 80045c0:	4a29      	ldr	r2, [pc, #164]	; (8004668 <__sflush_r+0x108>)
 80045c2:	40ca      	lsrs	r2, r1
 80045c4:	07d6      	lsls	r6, r2, #31
 80045c6:	d544      	bpl.n	8004652 <__sflush_r+0xf2>
 80045c8:	2200      	movs	r2, #0
 80045ca:	6062      	str	r2, [r4, #4]
 80045cc:	04d9      	lsls	r1, r3, #19
 80045ce:	6922      	ldr	r2, [r4, #16]
 80045d0:	6022      	str	r2, [r4, #0]
 80045d2:	d504      	bpl.n	80045de <__sflush_r+0x7e>
 80045d4:	1c42      	adds	r2, r0, #1
 80045d6:	d101      	bne.n	80045dc <__sflush_r+0x7c>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b903      	cbnz	r3, 80045de <__sflush_r+0x7e>
 80045dc:	6560      	str	r0, [r4, #84]	; 0x54
 80045de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045e0:	602f      	str	r7, [r5, #0]
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d0c9      	beq.n	800457a <__sflush_r+0x1a>
 80045e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045ea:	4299      	cmp	r1, r3
 80045ec:	d002      	beq.n	80045f4 <__sflush_r+0x94>
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 f8de 	bl	80047b0 <_free_r>
 80045f4:	2000      	movs	r0, #0
 80045f6:	6360      	str	r0, [r4, #52]	; 0x34
 80045f8:	e7c0      	b.n	800457c <__sflush_r+0x1c>
 80045fa:	2301      	movs	r3, #1
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b0      	blx	r6
 8004600:	1c41      	adds	r1, r0, #1
 8004602:	d1c8      	bne.n	8004596 <__sflush_r+0x36>
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0c5      	beq.n	8004596 <__sflush_r+0x36>
 800460a:	2b1d      	cmp	r3, #29
 800460c:	d001      	beq.n	8004612 <__sflush_r+0xb2>
 800460e:	2b16      	cmp	r3, #22
 8004610:	d101      	bne.n	8004616 <__sflush_r+0xb6>
 8004612:	602f      	str	r7, [r5, #0]
 8004614:	e7b1      	b.n	800457a <__sflush_r+0x1a>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	e7ad      	b.n	800457c <__sflush_r+0x1c>
 8004620:	690f      	ldr	r7, [r1, #16]
 8004622:	2f00      	cmp	r7, #0
 8004624:	d0a9      	beq.n	800457a <__sflush_r+0x1a>
 8004626:	0793      	lsls	r3, r2, #30
 8004628:	680e      	ldr	r6, [r1, #0]
 800462a:	bf08      	it	eq
 800462c:	694b      	ldreq	r3, [r1, #20]
 800462e:	600f      	str	r7, [r1, #0]
 8004630:	bf18      	it	ne
 8004632:	2300      	movne	r3, #0
 8004634:	eba6 0807 	sub.w	r8, r6, r7
 8004638:	608b      	str	r3, [r1, #8]
 800463a:	f1b8 0f00 	cmp.w	r8, #0
 800463e:	dd9c      	ble.n	800457a <__sflush_r+0x1a>
 8004640:	4643      	mov	r3, r8
 8004642:	463a      	mov	r2, r7
 8004644:	6a21      	ldr	r1, [r4, #32]
 8004646:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004648:	4628      	mov	r0, r5
 800464a:	47b0      	blx	r6
 800464c:	2800      	cmp	r0, #0
 800464e:	dc06      	bgt.n	800465e <__sflush_r+0xfe>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e78e      	b.n	800457c <__sflush_r+0x1c>
 800465e:	4407      	add	r7, r0
 8004660:	eba8 0800 	sub.w	r8, r8, r0
 8004664:	e7e9      	b.n	800463a <__sflush_r+0xda>
 8004666:	bf00      	nop
 8004668:	20400001 	.word	0x20400001

0800466c <_fflush_r>:
 800466c:	b538      	push	{r3, r4, r5, lr}
 800466e:	690b      	ldr	r3, [r1, #16]
 8004670:	4605      	mov	r5, r0
 8004672:	460c      	mov	r4, r1
 8004674:	b1db      	cbz	r3, 80046ae <_fflush_r+0x42>
 8004676:	b118      	cbz	r0, 8004680 <_fflush_r+0x14>
 8004678:	6983      	ldr	r3, [r0, #24]
 800467a:	b90b      	cbnz	r3, 8004680 <_fflush_r+0x14>
 800467c:	f7ff fa8e 	bl	8003b9c <__sinit>
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <_fflush_r+0x48>)
 8004682:	429c      	cmp	r4, r3
 8004684:	d109      	bne.n	800469a <_fflush_r+0x2e>
 8004686:	686c      	ldr	r4, [r5, #4]
 8004688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800468c:	b17b      	cbz	r3, 80046ae <_fflush_r+0x42>
 800468e:	4621      	mov	r1, r4
 8004690:	4628      	mov	r0, r5
 8004692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004696:	f7ff bf63 	b.w	8004560 <__sflush_r>
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <_fflush_r+0x4c>)
 800469c:	429c      	cmp	r4, r3
 800469e:	d101      	bne.n	80046a4 <_fflush_r+0x38>
 80046a0:	68ac      	ldr	r4, [r5, #8]
 80046a2:	e7f1      	b.n	8004688 <_fflush_r+0x1c>
 80046a4:	4b05      	ldr	r3, [pc, #20]	; (80046bc <_fflush_r+0x50>)
 80046a6:	429c      	cmp	r4, r3
 80046a8:	bf08      	it	eq
 80046aa:	68ec      	ldreq	r4, [r5, #12]
 80046ac:	e7ec      	b.n	8004688 <_fflush_r+0x1c>
 80046ae:	2000      	movs	r0, #0
 80046b0:	bd38      	pop	{r3, r4, r5, pc}
 80046b2:	bf00      	nop
 80046b4:	08004df4 	.word	0x08004df4
 80046b8:	08004e14 	.word	0x08004e14
 80046bc:	08004dd4 	.word	0x08004dd4

080046c0 <_lseek_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4c07      	ldr	r4, [pc, #28]	; (80046e0 <_lseek_r+0x20>)
 80046c4:	4605      	mov	r5, r0
 80046c6:	4608      	mov	r0, r1
 80046c8:	4611      	mov	r1, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7fc ff56 	bl	8001580 <_lseek>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_lseek_r+0x1e>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	b103      	cbz	r3, 80046de <_lseek_r+0x1e>
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	20000140 	.word	0x20000140

080046e4 <__swhatbuf_r>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	460e      	mov	r6, r1
 80046e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ec:	2900      	cmp	r1, #0
 80046ee:	b096      	sub	sp, #88	; 0x58
 80046f0:	4614      	mov	r4, r2
 80046f2:	461d      	mov	r5, r3
 80046f4:	da07      	bge.n	8004706 <__swhatbuf_r+0x22>
 80046f6:	2300      	movs	r3, #0
 80046f8:	602b      	str	r3, [r5, #0]
 80046fa:	89b3      	ldrh	r3, [r6, #12]
 80046fc:	061a      	lsls	r2, r3, #24
 80046fe:	d410      	bmi.n	8004722 <__swhatbuf_r+0x3e>
 8004700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004704:	e00e      	b.n	8004724 <__swhatbuf_r+0x40>
 8004706:	466a      	mov	r2, sp
 8004708:	f000 f8b2 	bl	8004870 <_fstat_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	dbf2      	blt.n	80046f6 <__swhatbuf_r+0x12>
 8004710:	9a01      	ldr	r2, [sp, #4]
 8004712:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004716:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800471a:	425a      	negs	r2, r3
 800471c:	415a      	adcs	r2, r3
 800471e:	602a      	str	r2, [r5, #0]
 8004720:	e7ee      	b.n	8004700 <__swhatbuf_r+0x1c>
 8004722:	2340      	movs	r3, #64	; 0x40
 8004724:	2000      	movs	r0, #0
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	b016      	add	sp, #88	; 0x58
 800472a:	bd70      	pop	{r4, r5, r6, pc}

0800472c <__smakebuf_r>:
 800472c:	898b      	ldrh	r3, [r1, #12]
 800472e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004730:	079d      	lsls	r5, r3, #30
 8004732:	4606      	mov	r6, r0
 8004734:	460c      	mov	r4, r1
 8004736:	d507      	bpl.n	8004748 <__smakebuf_r+0x1c>
 8004738:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800473c:	6023      	str	r3, [r4, #0]
 800473e:	6123      	str	r3, [r4, #16]
 8004740:	2301      	movs	r3, #1
 8004742:	6163      	str	r3, [r4, #20]
 8004744:	b002      	add	sp, #8
 8004746:	bd70      	pop	{r4, r5, r6, pc}
 8004748:	ab01      	add	r3, sp, #4
 800474a:	466a      	mov	r2, sp
 800474c:	f7ff ffca 	bl	80046e4 <__swhatbuf_r>
 8004750:	9900      	ldr	r1, [sp, #0]
 8004752:	4605      	mov	r5, r0
 8004754:	4630      	mov	r0, r6
 8004756:	f7ff faab 	bl	8003cb0 <_malloc_r>
 800475a:	b948      	cbnz	r0, 8004770 <__smakebuf_r+0x44>
 800475c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004760:	059a      	lsls	r2, r3, #22
 8004762:	d4ef      	bmi.n	8004744 <__smakebuf_r+0x18>
 8004764:	f023 0303 	bic.w	r3, r3, #3
 8004768:	f043 0302 	orr.w	r3, r3, #2
 800476c:	81a3      	strh	r3, [r4, #12]
 800476e:	e7e3      	b.n	8004738 <__smakebuf_r+0xc>
 8004770:	4b0d      	ldr	r3, [pc, #52]	; (80047a8 <__smakebuf_r+0x7c>)
 8004772:	62b3      	str	r3, [r6, #40]	; 0x28
 8004774:	89a3      	ldrh	r3, [r4, #12]
 8004776:	6020      	str	r0, [r4, #0]
 8004778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800477c:	81a3      	strh	r3, [r4, #12]
 800477e:	9b00      	ldr	r3, [sp, #0]
 8004780:	6163      	str	r3, [r4, #20]
 8004782:	9b01      	ldr	r3, [sp, #4]
 8004784:	6120      	str	r0, [r4, #16]
 8004786:	b15b      	cbz	r3, 80047a0 <__smakebuf_r+0x74>
 8004788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478c:	4630      	mov	r0, r6
 800478e:	f000 f881 	bl	8004894 <_isatty_r>
 8004792:	b128      	cbz	r0, 80047a0 <__smakebuf_r+0x74>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	f023 0303 	bic.w	r3, r3, #3
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	81a3      	strh	r3, [r4, #12]
 80047a0:	89a3      	ldrh	r3, [r4, #12]
 80047a2:	431d      	orrs	r5, r3
 80047a4:	81a5      	strh	r5, [r4, #12]
 80047a6:	e7cd      	b.n	8004744 <__smakebuf_r+0x18>
 80047a8:	08003b65 	.word	0x08003b65

080047ac <__malloc_lock>:
 80047ac:	4770      	bx	lr

080047ae <__malloc_unlock>:
 80047ae:	4770      	bx	lr

080047b0 <_free_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4605      	mov	r5, r0
 80047b4:	2900      	cmp	r1, #0
 80047b6:	d045      	beq.n	8004844 <_free_r+0x94>
 80047b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047bc:	1f0c      	subs	r4, r1, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bfb8      	it	lt
 80047c2:	18e4      	addlt	r4, r4, r3
 80047c4:	f7ff fff2 	bl	80047ac <__malloc_lock>
 80047c8:	4a1f      	ldr	r2, [pc, #124]	; (8004848 <_free_r+0x98>)
 80047ca:	6813      	ldr	r3, [r2, #0]
 80047cc:	4610      	mov	r0, r2
 80047ce:	b933      	cbnz	r3, 80047de <_free_r+0x2e>
 80047d0:	6063      	str	r3, [r4, #4]
 80047d2:	6014      	str	r4, [r2, #0]
 80047d4:	4628      	mov	r0, r5
 80047d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047da:	f7ff bfe8 	b.w	80047ae <__malloc_unlock>
 80047de:	42a3      	cmp	r3, r4
 80047e0:	d90c      	bls.n	80047fc <_free_r+0x4c>
 80047e2:	6821      	ldr	r1, [r4, #0]
 80047e4:	1862      	adds	r2, r4, r1
 80047e6:	4293      	cmp	r3, r2
 80047e8:	bf04      	itt	eq
 80047ea:	681a      	ldreq	r2, [r3, #0]
 80047ec:	685b      	ldreq	r3, [r3, #4]
 80047ee:	6063      	str	r3, [r4, #4]
 80047f0:	bf04      	itt	eq
 80047f2:	1852      	addeq	r2, r2, r1
 80047f4:	6022      	streq	r2, [r4, #0]
 80047f6:	6004      	str	r4, [r0, #0]
 80047f8:	e7ec      	b.n	80047d4 <_free_r+0x24>
 80047fa:	4613      	mov	r3, r2
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	b10a      	cbz	r2, 8004804 <_free_r+0x54>
 8004800:	42a2      	cmp	r2, r4
 8004802:	d9fa      	bls.n	80047fa <_free_r+0x4a>
 8004804:	6819      	ldr	r1, [r3, #0]
 8004806:	1858      	adds	r0, r3, r1
 8004808:	42a0      	cmp	r0, r4
 800480a:	d10b      	bne.n	8004824 <_free_r+0x74>
 800480c:	6820      	ldr	r0, [r4, #0]
 800480e:	4401      	add	r1, r0
 8004810:	1858      	adds	r0, r3, r1
 8004812:	4282      	cmp	r2, r0
 8004814:	6019      	str	r1, [r3, #0]
 8004816:	d1dd      	bne.n	80047d4 <_free_r+0x24>
 8004818:	6810      	ldr	r0, [r2, #0]
 800481a:	6852      	ldr	r2, [r2, #4]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	4401      	add	r1, r0
 8004820:	6019      	str	r1, [r3, #0]
 8004822:	e7d7      	b.n	80047d4 <_free_r+0x24>
 8004824:	d902      	bls.n	800482c <_free_r+0x7c>
 8004826:	230c      	movs	r3, #12
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	e7d3      	b.n	80047d4 <_free_r+0x24>
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	1821      	adds	r1, r4, r0
 8004830:	428a      	cmp	r2, r1
 8004832:	bf04      	itt	eq
 8004834:	6811      	ldreq	r1, [r2, #0]
 8004836:	6852      	ldreq	r2, [r2, #4]
 8004838:	6062      	str	r2, [r4, #4]
 800483a:	bf04      	itt	eq
 800483c:	1809      	addeq	r1, r1, r0
 800483e:	6021      	streq	r1, [r4, #0]
 8004840:	605c      	str	r4, [r3, #4]
 8004842:	e7c7      	b.n	80047d4 <_free_r+0x24>
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	bf00      	nop
 8004848:	20000094 	.word	0x20000094

0800484c <_read_r>:
 800484c:	b538      	push	{r3, r4, r5, lr}
 800484e:	4c07      	ldr	r4, [pc, #28]	; (800486c <_read_r+0x20>)
 8004850:	4605      	mov	r5, r0
 8004852:	4608      	mov	r0, r1
 8004854:	4611      	mov	r1, r2
 8004856:	2200      	movs	r2, #0
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	f7fc fe30 	bl	80014c0 <_read>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_read_r+0x1e>
 8004864:	6823      	ldr	r3, [r4, #0]
 8004866:	b103      	cbz	r3, 800486a <_read_r+0x1e>
 8004868:	602b      	str	r3, [r5, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	20000140 	.word	0x20000140

08004870 <_fstat_r>:
 8004870:	b538      	push	{r3, r4, r5, lr}
 8004872:	4c07      	ldr	r4, [pc, #28]	; (8004890 <_fstat_r+0x20>)
 8004874:	2300      	movs	r3, #0
 8004876:	4605      	mov	r5, r0
 8004878:	4608      	mov	r0, r1
 800487a:	4611      	mov	r1, r2
 800487c:	6023      	str	r3, [r4, #0]
 800487e:	f7fc fe64 	bl	800154a <_fstat>
 8004882:	1c43      	adds	r3, r0, #1
 8004884:	d102      	bne.n	800488c <_fstat_r+0x1c>
 8004886:	6823      	ldr	r3, [r4, #0]
 8004888:	b103      	cbz	r3, 800488c <_fstat_r+0x1c>
 800488a:	602b      	str	r3, [r5, #0]
 800488c:	bd38      	pop	{r3, r4, r5, pc}
 800488e:	bf00      	nop
 8004890:	20000140 	.word	0x20000140

08004894 <_isatty_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4c06      	ldr	r4, [pc, #24]	; (80048b0 <_isatty_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4605      	mov	r5, r0
 800489c:	4608      	mov	r0, r1
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	f7fc fe63 	bl	800156a <_isatty>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_isatty_r+0x1a>
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_isatty_r+0x1a>
 80048ac:	602b      	str	r3, [r5, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000140 	.word	0x20000140

080048b4 <_init>:
 80048b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b6:	bf00      	nop
 80048b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ba:	bc08      	pop	{r3}
 80048bc:	469e      	mov	lr, r3
 80048be:	4770      	bx	lr

080048c0 <_fini>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	bf00      	nop
 80048c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c6:	bc08      	pop	{r3}
 80048c8:	469e      	mov	lr, r3
 80048ca:	4770      	bx	lr
