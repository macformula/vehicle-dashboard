
PWMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b28  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f8c  08003f8c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003f8c  08003f8c  00013f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f94  08003f94  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f94  08003f94  00013f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f98  08003f98  00013f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  0800400c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  0800400c  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b75f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001901  00000000  00000000  0002b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a88  00000000  00000000  0002d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d8  00000000  00000000  0002db88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b7a  00000000  00000000  0002e560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007aa0  00000000  00000000  000560da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f55c3  00000000  00000000  0005db7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015313d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  001531b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000070 	.word	0x20000070
 8000214:	00000000 	.word	0x00000000
 8000218:	08003d08 	.word	0x08003d08

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000074 	.word	0x20000074
 8000234:	08003d08 	.word	0x08003d08

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000540:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000544:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000548:	f003 0301 	and.w	r3, r3, #1
 800054c:	2b00      	cmp	r3, #0
 800054e:	d013      	beq.n	8000578 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000550:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000554:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000558:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800055c:	2b00      	cmp	r3, #0
 800055e:	d00b      	beq.n	8000578 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000560:	e000      	b.n	8000564 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000562:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000564:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800056e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000572:	687a      	ldr	r2, [r7, #4]
 8000574:	b2d2      	uxtb	r2, r2
 8000576:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000578:	687b      	ldr	r3, [r7, #4]
}
 800057a:	4618      	mov	r0, r3
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <var_Timer_Init>:
}Timer_Init_args;


//Wrapper function that return default variables
static void var_Timer_Init(Timer_Init_args in)
{
 8000586:	b590      	push	{r4, r7, lr}
 8000588:	b08d      	sub	sp, #52	; 0x34
 800058a:	af04      	add	r7, sp, #16
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t timer_out = in.timer;
 8000592:	793b      	ldrb	r3, [r7, #4]
 8000594:	77fb      	strb	r3, [r7, #31]
	uint16_t period_out = in.period;
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	83bb      	strh	r3, [r7, #28]
	uint8_t do_trigger_ISR_out = in.do_trigger_ISR ? in.do_trigger_ISR :1;
 800059a:	7a3b      	ldrb	r3, [r7, #8]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <var_Timer_Init+0x1e>
 80005a0:	7a3b      	ldrb	r3, [r7, #8]
 80005a2:	e000      	b.n	80005a6 <var_Timer_Init+0x20>
 80005a4:	2301      	movs	r3, #1
 80005a6:	76fb      	strb	r3, [r7, #27]
	uint8_t channel_1_out = in.channel_1 ? in.channel_1 :1;
 80005a8:	7a7b      	ldrb	r3, [r7, #9]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <var_Timer_Init+0x2c>
 80005ae:	7a7b      	ldrb	r3, [r7, #9]
 80005b0:	e000      	b.n	80005b4 <var_Timer_Init+0x2e>
 80005b2:	2301      	movs	r3, #1
 80005b4:	76bb      	strb	r3, [r7, #26]
	uint8_t channel_2_out = in.channel_2 ? in.channel_2 :1;
 80005b6:	7abb      	ldrb	r3, [r7, #10]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <var_Timer_Init+0x3a>
 80005bc:	7abb      	ldrb	r3, [r7, #10]
 80005be:	e000      	b.n	80005c2 <var_Timer_Init+0x3c>
 80005c0:	2301      	movs	r3, #1
 80005c2:	767b      	strb	r3, [r7, #25]
	uint8_t channel_3_out = in.channel_3 ? in.channel_3 :1;
 80005c4:	7afb      	ldrb	r3, [r7, #11]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <var_Timer_Init+0x48>
 80005ca:	7afb      	ldrb	r3, [r7, #11]
 80005cc:	e000      	b.n	80005d0 <var_Timer_Init+0x4a>
 80005ce:	2301      	movs	r3, #1
 80005d0:	763b      	strb	r3, [r7, #24]
	uint8_t channel_4_out = in.channel_4 ? in.channel_4 :1;
 80005d2:	7b3b      	ldrb	r3, [r7, #12]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <var_Timer_Init+0x56>
 80005d8:	7b3b      	ldrb	r3, [r7, #12]
 80005da:	e000      	b.n	80005de <var_Timer_Init+0x58>
 80005dc:	2301      	movs	r3, #1
 80005de:	75fb      	strb	r3, [r7, #23]
	uint16_t ISR_period_out = in.ISR_period ? in.ISR_period :in.period;
 80005e0:	89fb      	ldrh	r3, [r7, #14]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <var_Timer_Init+0x64>
 80005e6:	89fb      	ldrh	r3, [r7, #14]
 80005e8:	e000      	b.n	80005ec <var_Timer_Init+0x66>
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	82bb      	strh	r3, [r7, #20]
	Timer_Init_Base(timer_out,period_out,do_trigger_ISR_out,channel_1_out,channel_2_out,channel_3_out,channel_4_out,ISR_period_out);
 80005ee:	7ebc      	ldrb	r4, [r7, #26]
 80005f0:	7efa      	ldrb	r2, [r7, #27]
 80005f2:	8bb9      	ldrh	r1, [r7, #28]
 80005f4:	7ff8      	ldrb	r0, [r7, #31]
 80005f6:	8abb      	ldrh	r3, [r7, #20]
 80005f8:	9303      	str	r3, [sp, #12]
 80005fa:	7dfb      	ldrb	r3, [r7, #23]
 80005fc:	9302      	str	r3, [sp, #8]
 80005fe:	7e3b      	ldrb	r3, [r7, #24]
 8000600:	9301      	str	r3, [sp, #4]
 8000602:	7e7b      	ldrb	r3, [r7, #25]
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	4623      	mov	r3, r4
 8000608:	f000 fb12 	bl	8000c30 <Timer_Init_Base>
}
 800060c:	bf00      	nop
 800060e:	3724      	adds	r7, #36	; 0x24
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}

08000614 <_write>:


int _write(int file, char *ptr, int len) //printf to SWV ITM
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i<len ; i++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e009      	b.n	800063e <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	1c5a      	adds	r2, r3, #1
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ff80 	bl	8000538 <ITM_SendChar>
	for(i = 0 ; i<len ; i++)
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	3301      	adds	r3, #1
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	697a      	ldr	r2, [r7, #20]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbf1      	blt.n	800062a <_write+0x16>
	}
	return len;
 8000646:	687b      	ldr	r3, [r7, #4]
}
 8000648:	4618      	mov	r0, r3
 800064a:	3718      	adds	r7, #24
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <HAL_TIM_PeriodElapsedCallback>:

//Values below are calculated in the Calculate_Timer_Period_Multiplier
uint16_t TIMER_1_PERIOD_MULTIPLIER; //(Timer period) x (TIMER_1_PERIOD_MULTIPLIER) = period for timer 1 ISR
uint16_t TIMER_2_PERIOD_MULTIPLIER; //(Timer period) x (TIMER_2_PERIOD_MULTIPLIER) = period for timer 2 ISR
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) //ISR triggered by timer overflow
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]


    if (htim == &htim1 && timer_1_repetition_counter == TIMER_1_PERIOD_MULTIPLIER-1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d10f      	bne.n	8000680 <HAL_TIM_PeriodElapsedCallback+0x30>
 8000660:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	3b01      	subs	r3, #1
 800066c:	429a      	cmp	r2, r3
 800066e:	d107      	bne.n	8000680 <HAL_TIM_PeriodElapsedCallback+0x30>
    {
       //ISR for Timer 1
       //User code here

       HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000670:	2101      	movs	r1, #1
 8000672:	481d      	ldr	r0, [pc, #116]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000674:	f001 f975 	bl	8001962 <HAL_GPIO_TogglePin>

       //User code ends
	   timer_1_repetition_counter = 0;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800067a:	2200      	movs	r2, #0
 800067c:	801a      	strh	r2, [r3, #0]
 800067e:	e009      	b.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x44>
    }
    else if(htim == &htim1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a16      	ldr	r2, [pc, #88]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d105      	bne.n	8000694 <HAL_TIM_PeriodElapsedCallback+0x44>
    {
    	timer_1_repetition_counter++;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000692:	801a      	strh	r2, [r3, #0]
    }

    if(htim == &htim2 && timer_2_repetition_counter == TIMER_2_PERIOD_MULTIPLIER-1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d110      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x6e>
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006a4:	881b      	ldrh	r3, [r3, #0]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d108      	bne.n	80006be <HAL_TIM_PeriodElapsedCallback+0x6e>
    {
        //ISR for Timer 2
       //User code here

       HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006b2:	f001 f956 	bl	8001962 <HAL_GPIO_TogglePin>

       //User code ends
	   timer_2_repetition_counter = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	801a      	strh	r2, [r3, #0]
    else if(htim == &htim2)
    {
    	timer_2_repetition_counter++;
    }

}
 80006bc:	e009      	b.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x82>
    else if(htim == &htim2)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d105      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x82>
    	timer_2_repetition_counter++;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	3301      	adds	r3, #1
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006d0:	801a      	strh	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000009c 	.word	0x2000009c
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	200000dc 	.word	0x200000dc
 80006e8:	40020400 	.word	0x40020400
 80006ec:	200000e0 	.word	0x200000e0
 80006f0:	2000008e 	.word	0x2000008e
 80006f4:	20000120 	.word	0x20000120

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006fe:	f000 fdfe 	bl	80012fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000702:	f000 f84b 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000706:	f000 fa23 	bl	8000b50 <MX_GPIO_Init>
   * - Timer 1 period should be half of timer 2
   * - PWM should be running on all four channels for both timers
   * - After period is elapsed for each timer, two on-board LEDs should toggle On/Off (caused by the ISR)
   * - HAL_TIM_PeriodElapsedCallback(...) controls the ISR
   */
  Timer_Init(1, 1000);
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	2301      	movs	r3, #1
 8000716:	703b      	strb	r3, [r7, #0]
 8000718:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071c:	807b      	strh	r3, [r7, #2]
 800071e:	463b      	mov	r3, r7
 8000720:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000724:	f7ff ff2f 	bl	8000586 <var_Timer_Init>
  Timer_Init(2, 500);
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	2302      	movs	r3, #2
 8000736:	733b      	strb	r3, [r7, #12]
 8000738:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800073c:	81fb      	strh	r3, [r7, #14]
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000746:	f7ff ff1e 	bl	8000586 <var_Timer_Init>

  PWM_Init(2,1,20);
 800074a:	2214      	movs	r2, #20
 800074c:	2101      	movs	r1, #1
 800074e:	2002      	movs	r0, #2
 8000750:	f000 fb4e 	bl	8000df0 <PWM_Init>
  PWM_Init(2,2,40);
 8000754:	2228      	movs	r2, #40	; 0x28
 8000756:	2102      	movs	r1, #2
 8000758:	2002      	movs	r0, #2
 800075a:	f000 fb49 	bl	8000df0 <PWM_Init>
  PWM_Init(2,3,60);
 800075e:	223c      	movs	r2, #60	; 0x3c
 8000760:	2103      	movs	r1, #3
 8000762:	2002      	movs	r0, #2
 8000764:	f000 fb44 	bl	8000df0 <PWM_Init>
  PWM_Init(2,4,80);
 8000768:	2250      	movs	r2, #80	; 0x50
 800076a:	2104      	movs	r1, #4
 800076c:	2002      	movs	r0, #2
 800076e:	f000 fb3f 	bl	8000df0 <PWM_Init>

  PWM_Init(1,1,20);
 8000772:	2214      	movs	r2, #20
 8000774:	2101      	movs	r1, #1
 8000776:	2001      	movs	r0, #1
 8000778:	f000 fb3a 	bl	8000df0 <PWM_Init>
  PWM_Init(1,2,40);
 800077c:	2228      	movs	r2, #40	; 0x28
 800077e:	2102      	movs	r1, #2
 8000780:	2001      	movs	r0, #1
 8000782:	f000 fb35 	bl	8000df0 <PWM_Init>
  PWM_Init(1,3,60);
 8000786:	223c      	movs	r2, #60	; 0x3c
 8000788:	2103      	movs	r1, #3
 800078a:	2001      	movs	r0, #1
 800078c:	f000 fb30 	bl	8000df0 <PWM_Init>
  PWM_Init(1,4,80);
 8000790:	2250      	movs	r2, #80	; 0x50
 8000792:	2104      	movs	r1, #4
 8000794:	2001      	movs	r0, #1
 8000796:	f000 fb2b 	bl	8000df0 <PWM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0xa2>

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	2234      	movs	r2, #52	; 0x34
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fe3c 	bl	8003428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 0308 	add.w	r3, r7, #8
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xb0>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemClock_Config+0xb0>)
 80007c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ca:	6413      	str	r3, [r2, #64]	; 0x40
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemClock_Config+0xb0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <SystemClock_Config+0xb4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e0:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <SystemClock_Config+0xb4>)
 80007e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e6:	6013      	str	r3, [r2, #0]
 80007e8:	4b19      	ldr	r3, [pc, #100]	; (8000850 <SystemClock_Config+0xb4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fc:	2310      	movs	r3, #16
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000800:	2300      	movs	r3, #0
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4618      	mov	r0, r3
 800080a:	f001 f8c5 	bl	8001998 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000814:	f000 fb8a 	bl	8000f2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	230f      	movs	r3, #15
 800081a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082c:	f107 0308 	add.w	r3, r7, #8
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fb5e 	bl	8001ef4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800083e:	f000 fb75 	bl	8000f2c <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param Prescaler, channel 1 init, channel 2 init, channel 3 init, channel 4 init,
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b09c      	sub	sp, #112	; 0x70
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	4608      	mov	r0, r1
 800085e:	4611      	mov	r1, r2
 8000860:	461a      	mov	r2, r3
 8000862:	4603      	mov	r3, r0
 8000864:	70fb      	strb	r3, [r7, #3]
 8000866:	460b      	mov	r3, r1
 8000868:	70bb      	strb	r3, [r7, #2]
 800086a:	4613      	mov	r3, r2
 800086c:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]
 800089a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	222c      	movs	r2, #44	; 0x2c
 80008a2:	2100      	movs	r1, #0
 80008a4:	4618      	mov	r0, r3
 80008a6:	f002 fdbf 	bl	8003428 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Prescaler = prescaler;
 80008aa:	4a57      	ldr	r2, [pc, #348]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6053      	str	r3, [r2, #4]
  htim1.Init.Period = COUNTER_PERIOD;
 80008b0:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b54      	ldr	r3, [pc, #336]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008b8:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ba:	4b53      	ldr	r3, [pc, #332]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008bc:	4a53      	ldr	r2, [pc, #332]	; (8000a0c <MX_TIM1_Init+0x1b8>)
 80008be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 80008c0:	4a51      	ldr	r2, [pc, #324]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b50      	ldr	r3, [pc, #320]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD;
 80008cc:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b4d      	ldr	r3, [pc, #308]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d6:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008dc:	4b4a      	ldr	r3, [pc, #296]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e2:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008e8:	4847      	ldr	r0, [pc, #284]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80008ea:	f001 fca1 	bl	8002230 <HAL_TIM_Base_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008f4:	f000 fb1a 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000902:	4619      	mov	r1, r3
 8000904:	4840      	ldr	r0, [pc, #256]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 8000906:	f001 ff9b 	bl	8002840 <HAL_TIM_ConfigClockSource>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000910:	f000 fb0c 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000914:	483c      	ldr	r0, [pc, #240]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 8000916:	f001 fce1 	bl	80022dc <HAL_TIM_PWM_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000920:	f000 fb04 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000930:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000934:	4619      	mov	r1, r3
 8000936:	4834      	ldr	r0, [pc, #208]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 8000938:	f002 fc22 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000942:	f000 faf3 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	; 0x60
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000952:	2300      	movs	r3, #0
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	653b      	str	r3, [r7, #80]	; 0x50
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }*/
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000992:	f107 030c 	add.w	r3, r7, #12
 8000996:	4619      	mov	r1, r3
 8000998:	481b      	ldr	r0, [pc, #108]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 800099a:	f002 fc7f 	bl	800329c <HAL_TIMEx_ConfigBreakDeadTime>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80009a4:	f000 fac2 	bl	8000f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  //Channel configuration
  if (channel_1==1)
 80009a8:	78fb      	ldrb	r3, [r7, #3]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d106      	bne.n	80009bc <MX_TIM1_Init+0x168>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 80009ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009b2:	2200      	movs	r2, #0
 80009b4:	4619      	mov	r1, r3
 80009b6:	4814      	ldr	r0, [pc, #80]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80009b8:	f001 fe2a 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 80009bc:	78bb      	ldrb	r3, [r7, #2]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d106      	bne.n	80009d0 <MX_TIM1_Init+0x17c>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 80009c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c6:	2204      	movs	r2, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	480f      	ldr	r0, [pc, #60]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80009cc:	f001 fe20 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 80009d0:	787b      	ldrb	r3, [r7, #1]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d106      	bne.n	80009e4 <MX_TIM1_Init+0x190>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 80009d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009da:	2208      	movs	r2, #8
 80009dc:	4619      	mov	r1, r3
 80009de:	480a      	ldr	r0, [pc, #40]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80009e0:	f001 fe16 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 80009e4:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d106      	bne.n	80009fa <MX_TIM1_Init+0x1a6>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 80009ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009f0:	220c      	movs	r2, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80009f6:	f001 fe0b 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM1_Init+0x1b4>)
 80009fc:	f000 fafe 	bl	8000ffc <HAL_TIM_MspPostInit>

}
 8000a00:	bf00      	nop
 8000a02:	3770      	adds	r7, #112	; 0x70
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000009c 	.word	0x2000009c
 8000a0c:	40010000 	.word	0x40010000

08000a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param Prescaler, channel 1 init, channel 2 init, channel 3 init, channel 4 init,
  * @retval None
  */
static void MX_TIM2_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b090      	sub	sp, #64	; 0x40
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	4608      	mov	r0, r1
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4603      	mov	r3, r0
 8000a20:	70fb      	strb	r3, [r7, #3]
 8000a22:	460b      	mov	r3, r1
 8000a24:	70bb      	strb	r3, [r7, #2]
 8000a26:	4613      	mov	r3, r2
 8000a28:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a58:	4b3c      	ldr	r3, [pc, #240]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 8000a60:	4a3a      	ldr	r2, [pc, #232]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	4b39      	ldr	r3, [pc, #228]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_PERIOD;
 8000a6c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b36      	ldr	r3, [pc, #216]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a76:	4b35      	ldr	r3, [pc, #212]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7c:	4b33      	ldr	r3, [pc, #204]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a82:	4832      	ldr	r0, [pc, #200]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000a84:	f001 fbd4 	bl	8002230 <HAL_TIM_Base_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a8e:	f000 fa4d 	bl	8000f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	482b      	ldr	r0, [pc, #172]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000aa0:	f001 fece 	bl	8002840 <HAL_TIM_ConfigClockSource>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000aaa:	f000 fa3f 	bl	8000f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000aae:	4827      	ldr	r0, [pc, #156]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000ab0:	f001 fc14 	bl	80022dc <HAL_TIM_PWM_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000aba:	f000 fa37 	bl	8000f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	4619      	mov	r1, r3
 8000acc:	481f      	ldr	r0, [pc, #124]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000ace:	f002 fb57 	bl	8003180 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000ad8:	f000 fa28 	bl	8000f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000adc:	2360      	movs	r3, #96	; 0x60
 8000ade:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    Error_Handler();
  }*/
  /* USER CODE BEGIN TIM2_Init 2 */

  //Channel configuration
  if (channel_1==1)
 8000aec:	78fb      	ldrb	r3, [r7, #3]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d106      	bne.n	8000b00 <MX_TIM2_Init+0xf0>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000af2:	f107 0308 	add.w	r3, r7, #8
 8000af6:	2200      	movs	r2, #0
 8000af8:	4619      	mov	r1, r3
 8000afa:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000afc:	f001 fd88 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 8000b00:	78bb      	ldrb	r3, [r7, #2]
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d106      	bne.n	8000b14 <MX_TIM2_Init+0x104>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480f      	ldr	r0, [pc, #60]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000b10:	f001 fd7e 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 8000b14:	787b      	ldrb	r3, [r7, #1]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d106      	bne.n	8000b28 <MX_TIM2_Init+0x118>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2208      	movs	r2, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	480a      	ldr	r0, [pc, #40]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000b24:	f001 fd74 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 8000b28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d106      	bne.n	8000b3e <MX_TIM2_Init+0x12e>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	220c      	movs	r2, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000b3a:	f001 fd69 	bl	8002610 <HAL_TIM_PWM_ConfigChannel>
  }
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b3e:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MX_TIM2_Init+0x13c>)
 8000b40:	f000 fa5c 	bl	8000ffc <HAL_TIM_MspPostInit>

}
 8000b44:	bf00      	nop
 8000b46:	3740      	adds	r7, #64	; 0x40
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	200000e0 	.word	0x200000e0

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a2e      	ldr	r2, [pc, #184]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	4b29      	ldr	r3, [pc, #164]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a28      	ldr	r2, [pc, #160]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b96:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000b9c:	f043 0310 	orr.w	r3, r3, #16
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0310 	and.w	r3, r3, #16
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000bb4:	f043 0308 	orr.w	r3, r3, #8
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_GPIO_Init+0xd4>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0308 	and.w	r3, r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bcc:	4816      	ldr	r0, [pc, #88]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000bce:	f000 feaf 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <MX_GPIO_Init+0xdc>)
 8000bda:	f000 fea9 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bde:	f244 0301 	movw	r3, #16385	; 0x4001
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_GPIO_Init+0xd8>)
 8000bf8:	f000 fcf0 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 8000bfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	2301      	movs	r3, #1
 8000c04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_GPIO_Init+0xdc>)
 8000c16:	f000 fce1 	bl	80015dc <HAL_GPIO_Init>

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40020c00 	.word	0x40020c00

08000c30 <Timer_Init_Base>:
  * @brief Initialize timer n on channel m for s milli seconds with ISR
  * @param Timer number, period (milliseconds), Trigger the Interrupt Service Routine(2=True 1=False), channel 1 init, channel 2 init, channel 3 init, channel 4 init, ISR_period (milliseconds)
  * @retval None
  */
static void Timer_Init_Base(uint8_t timer, uint16_t period, uint8_t do_trigger_ISR, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4, uint16_t ISR_period)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b087      	sub	sp, #28
 8000c34:	af02      	add	r7, sp, #8
 8000c36:	4604      	mov	r4, r0
 8000c38:	4608      	mov	r0, r1
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4623      	mov	r3, r4
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	4603      	mov	r3, r0
 8000c44:	80bb      	strh	r3, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	71bb      	strb	r3, [r7, #6]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	70fb      	strb	r3, [r7, #3]
	if (period > 0 && period <65536)
 8000c4e:	88bb      	ldrh	r3, [r7, #4]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d040      	beq.n	8000cd6 <Timer_Init_Base+0xa6>
	{
		uint32_t prescaler = Calculate_Prescaler(period); //max period value is 2^16-1
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f854 	bl	8000d04 <Calculate_Prescaler>
 8000c5c:	60f8      	str	r0, [r7, #12]
		Calculate_Timer_Period_Multiplier(timer, period, ISR_period); //This allows you to slow down the ISR_period in relation to the timer period
 8000c5e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000c60:	88b9      	ldrh	r1, [r7, #4]
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f87f 	bl	8000d68 <Calculate_Timer_Period_Multiplier>


		switch (timer)
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d002      	beq.n	8000c76 <Timer_Init_Base+0x46>
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d016      	beq.n	8000ca2 <Timer_Init_Base+0x72>
 8000c74:	e02b      	b.n	8000cce <Timer_Init_Base+0x9e>
		{
			case (1):
				timer_1_repetition_counter = 0; //Because the timer is being reinitialized the timer count must be reset
 8000c76:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <Timer_Init_Base+0xbc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	801a      	strh	r2, [r3, #0]
				MX_TIM1_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 8000c7c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000c80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c84:	78f9      	ldrb	r1, [r7, #3]
 8000c86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	68f8      	ldr	r0, [r7, #12]
 8000c90:	f7ff fde0 	bl	8000854 <MX_TIM1_Init>
				if(do_trigger_ISR==1)
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d121      	bne.n	8000cde <Timer_Init_Base+0xae>
				{
					HAL_TIM_Base_Start_IT(&htim1);
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <Timer_Init_Base+0xc0>)
 8000c9c:	f001 faf4 	bl	8002288 <HAL_TIM_Base_Start_IT>
				}
				break;
 8000ca0:	e01d      	b.n	8000cde <Timer_Init_Base+0xae>
			case (2):
				timer_2_repetition_counter = 0;
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <Timer_Init_Base+0xc4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	801a      	strh	r2, [r3, #0]
				MX_TIM2_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 8000ca8:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000cac:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cb0:	78f9      	ldrb	r1, [r7, #3]
 8000cb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	4603      	mov	r3, r0
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f7ff fea8 	bl	8000a10 <MX_TIM2_Init>
				if(do_trigger_ISR==1)
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10d      	bne.n	8000ce2 <Timer_Init_Base+0xb2>
						{
							HAL_TIM_Base_Start_IT(&htim2);
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <Timer_Init_Base+0xc8>)
 8000cc8:	f001 fade 	bl	8002288 <HAL_TIM_Base_Start_IT>
						}
				break;
 8000ccc:	e009      	b.n	8000ce2 <Timer_Init_Base+0xb2>
			default:
				printf("Invalid Timer argument. Should be either '1' or '2'.\n");
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <Timer_Init_Base+0xcc>)
 8000cd0:	f002 fc0e 	bl	80034f0 <puts>

	else
	{
		printf("Invalid Period argument. Should be in range of (0, 65536) \n");
	}
}
 8000cd4:	e006      	b.n	8000ce4 <Timer_Init_Base+0xb4>
		printf("Invalid Period argument. Should be in range of (0, 65536) \n");
 8000cd6:	480a      	ldr	r0, [pc, #40]	; (8000d00 <Timer_Init_Base+0xd0>)
 8000cd8:	f002 fc0a 	bl	80034f0 <puts>
}
 8000cdc:	e002      	b.n	8000ce4 <Timer_Init_Base+0xb4>
				break;
 8000cde:	bf00      	nop
 8000ce0:	e000      	b.n	8000ce4 <Timer_Init_Base+0xb4>
				break;
 8000ce2:	bf00      	nop
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	2000008c 	.word	0x2000008c
 8000cf0:	2000009c 	.word	0x2000009c
 8000cf4:	2000008e 	.word	0x2000008e
 8000cf8:	200000e0 	.word	0x200000e0
 8000cfc:	08003d20 	.word	0x08003d20
 8000d00:	08003d58 	.word	0x08003d58

08000d04 <Calculate_Prescaler>:
  * @brief Calculate the prescaler necessary to operate desired PWM
  * @param period
  * @retval prescaler
  */
uint32_t Calculate_Prescaler(uint16_t period)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
	uint32_t prescaler = ((HAL_RCC_GetSysClockFreq()*(float)period)/(COUNTER_PERIOD+1))-1;
 8000d0e:	f001 f9dd 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8000d12:	ee07 0a90 	vmov	s15, r0
 8000d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d24:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d28:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	ee07 3a90 	vmov	s15, r3
 8000d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d46:	ee17 3a90 	vmov	r3, s15
 8000d4a:	60fb      	str	r3, [r7, #12]
	prescaler /= 1000;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <Calculate_Prescaler+0x60>)
 8000d50:	fba2 2303 	umull	r2, r3, r2, r3
 8000d54:	099b      	lsrs	r3, r3, #6
 8000d56:	60fb      	str	r3, [r7, #12]
	return prescaler;
 8000d58:	68fb      	ldr	r3, [r7, #12]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	10624dd3 	.word	0x10624dd3

08000d68 <Calculate_Timer_Period_Multiplier>:
  * @brief Calculate the value stored in TIMER_1_PERIOD_MULTIPLIER for the ISR
  * @param timer number, period and ISR_period
  * @retval None
  */
static void Calculate_Timer_Period_Multiplier(uint8_t timer,uint16_t period, uint16_t ISR_period)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
 8000d72:	460b      	mov	r3, r1
 8000d74:	80bb      	strh	r3, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	807b      	strh	r3, [r7, #2]
	if (ISR_period < period) //the ISR only runs once the timer overflows, it's impossible to have an ISR_Period that is less than the timer period
 8000d7a:	887a      	ldrh	r2, [r7, #2]
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d205      	bcs.n	8000d8e <Calculate_Timer_Period_Multiplier+0x26>
	{
		ISR_period = period;
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	807b      	strh	r3, [r7, #2]
		printf("Invalid ISR_period, the ISR only runs once the timer overflows thus the ISR_period must be the same if not greater than the timer period\n");
 8000d86:	4816      	ldr	r0, [pc, #88]	; (8000de0 <Calculate_Timer_Period_Multiplier+0x78>)
 8000d88:	f002 fbb2 	bl	80034f0 <puts>
 8000d8c:	e00e      	b.n	8000dac <Calculate_Timer_Period_Multiplier+0x44>
	}

	else if(ISR_period % period != 0) //ISR_period must be a multiple of timer period
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	88ba      	ldrh	r2, [r7, #4]
 8000d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8000d96:	fb02 f201 	mul.w	r2, r2, r1
 8000d9a:	1a9b      	subs	r3, r3, r2
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d004      	beq.n	8000dac <Calculate_Timer_Period_Multiplier+0x44>
	{
		ISR_period = period;
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	807b      	strh	r3, [r7, #2]
		printf("The ISR_period must be a multiple of timer period since the overflow runs upon one completion of the timer period\n");
 8000da6:	480f      	ldr	r0, [pc, #60]	; (8000de4 <Calculate_Timer_Period_Multiplier+0x7c>)
 8000da8:	f002 fba2 	bl	80034f0 <puts>
	}


	switch (timer)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d002      	beq.n	8000db8 <Calculate_Timer_Period_Multiplier+0x50>
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d008      	beq.n	8000dc8 <Calculate_Timer_Period_Multiplier+0x60>
		case(2):
			TIMER_2_PERIOD_MULTIPLIER = ISR_period/period;
			break;
	}

}
 8000db6:	e00f      	b.n	8000dd8 <Calculate_Timer_Period_Multiplier+0x70>
			TIMER_1_PERIOD_MULTIPLIER = ISR_period/period;
 8000db8:	887a      	ldrh	r2, [r7, #2]
 8000dba:	88bb      	ldrh	r3, [r7, #4]
 8000dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc0:	b29a      	uxth	r2, r3
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <Calculate_Timer_Period_Multiplier+0x80>)
 8000dc4:	801a      	strh	r2, [r3, #0]
			break;
 8000dc6:	e007      	b.n	8000dd8 <Calculate_Timer_Period_Multiplier+0x70>
			TIMER_2_PERIOD_MULTIPLIER = ISR_period/period;
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	88bb      	ldrh	r3, [r7, #4]
 8000dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <Calculate_Timer_Period_Multiplier+0x84>)
 8000dd4:	801a      	strh	r2, [r3, #0]
			break;
 8000dd6:	bf00      	nop
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	08003d94 	.word	0x08003d94
 8000de4:	08003e20 	.word	0x08003e20
 8000de8:	200000dc 	.word	0x200000dc
 8000dec:	20000120 	.word	0x20000120

08000df0 <PWM_Init>:
  * @brief Take initialized timer, channel and desired duty cycle and initialize PWM
  * @param Timer, channel, duty cycle
  * @retval None
  */
static void PWM_Init(uint8_t timer, uint8_t channel, uint8_t duty_cycle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	71bb      	strb	r3, [r7, #6]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	717b      	strb	r3, [r7, #5]

	TIM_HandleTypeDef* desired_timer;
	uint32_t desired_channel;

	//Calculate the pulse
	uint16_t ticks_on_per_cycle = Calculate_Ticks_On_Per_Cycle(duty_cycle);
 8000e02:	797b      	ldrb	r3, [r7, #5]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f86d 	bl	8000ee4 <Calculate_Ticks_On_Per_Cycle>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	81fb      	strh	r3, [r7, #14]

	//Find desired timer
	switch(timer)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d002      	beq.n	8000e1a <PWM_Init+0x2a>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d003      	beq.n	8000e20 <PWM_Init+0x30>
 8000e18:	e005      	b.n	8000e26 <PWM_Init+0x36>
	{
		case(1):
			desired_timer = &htim1;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ed4 <PWM_Init+0xe4>)
 8000e1c:	617b      	str	r3, [r7, #20]
			break;
 8000e1e:	e005      	b.n	8000e2c <PWM_Init+0x3c>
		case(2):
			desired_timer = &htim2;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <PWM_Init+0xe8>)
 8000e22:	617b      	str	r3, [r7, #20]
			break;
 8000e24:	e002      	b.n	8000e2c <PWM_Init+0x3c>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.\n");
 8000e26:	482d      	ldr	r0, [pc, #180]	; (8000edc <PWM_Init+0xec>)
 8000e28:	f002 fb62 	bl	80034f0 <puts>
	}

	//Find desired channel
	switch(channel)
 8000e2c:	79bb      	ldrb	r3, [r7, #6]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d817      	bhi.n	8000e64 <PWM_Init+0x74>
 8000e34:	a201      	add	r2, pc, #4	; (adr r2, 8000e3c <PWM_Init+0x4c>)
 8000e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3a:	bf00      	nop
 8000e3c:	08000e4d 	.word	0x08000e4d
 8000e40:	08000e53 	.word	0x08000e53
 8000e44:	08000e59 	.word	0x08000e59
 8000e48:	08000e5f 	.word	0x08000e5f
	{
		case(1):
			desired_channel = TIM_CHANNEL_1;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	613b      	str	r3, [r7, #16]
			break;
 8000e50:	e00b      	b.n	8000e6a <PWM_Init+0x7a>
		case(2):
			desired_channel = TIM_CHANNEL_2;
 8000e52:	2304      	movs	r3, #4
 8000e54:	613b      	str	r3, [r7, #16]
			break;
 8000e56:	e008      	b.n	8000e6a <PWM_Init+0x7a>
		case(3):
			desired_channel = TIM_CHANNEL_3;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	613b      	str	r3, [r7, #16]
			break;
 8000e5c:	e005      	b.n	8000e6a <PWM_Init+0x7a>
		case(4):
			desired_channel = TIM_CHANNEL_4;
 8000e5e:	230c      	movs	r3, #12
 8000e60:	613b      	str	r3, [r7, #16]
			break;
 8000e62:	e002      	b.n	8000e6a <PWM_Init+0x7a>
		default:
			printf("Invalid channel argument. Should be an integer within range [1,4].\n");
 8000e64:	481e      	ldr	r0, [pc, #120]	; (8000ee0 <PWM_Init+0xf0>)
 8000e66:	f002 fb43 	bl	80034f0 <puts>
	}

	//Initiate the PWM and desired duty cycle
    HAL_TIM_PWM_Start(desired_timer, desired_channel);
 8000e6a:	6939      	ldr	r1, [r7, #16]
 8000e6c:	6978      	ldr	r0, [r7, #20]
 8000e6e:	f001 fa6b 	bl	8002348 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <PWM_Init+0x92>
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	89fa      	ldrh	r2, [r7, #14]
 8000e7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e80:	e023      	b.n	8000eca <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d104      	bne.n	8000e92 <PWM_Init+0xa2>
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	89fa      	ldrh	r2, [r7, #14]
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e90:	e01b      	b.n	8000eca <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d104      	bne.n	8000ea2 <PWM_Init+0xb2>
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	89fa      	ldrh	r2, [r7, #14]
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ea0:	e013      	b.n	8000eca <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b0c      	cmp	r3, #12
 8000ea6:	d104      	bne.n	8000eb2 <PWM_Init+0xc2>
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	89fa      	ldrh	r2, [r7, #14]
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000eb0:	e00b      	b.n	8000eca <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d104      	bne.n	8000ec2 <PWM_Init+0xd2>
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	89fa      	ldrh	r2, [r7, #14]
 8000ebe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ec0:	e003      	b.n	8000eca <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	89fa      	ldrh	r2, [r7, #14]
 8000ec8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2000009c 	.word	0x2000009c
 8000ed8:	200000e0 	.word	0x200000e0
 8000edc:	08003d20 	.word	0x08003d20
 8000ee0:	08003e94 	.word	0x08003e94

08000ee4 <Calculate_Ticks_On_Per_Cycle>:
  * @brief Calculate the duty cycle in ticks
  * @param duty cycle
  * @retval Ticks per cycle
  */
uint16_t Calculate_Ticks_On_Per_Cycle(uint8_t duty_cycle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
	uint16_t ticks_on_per_cycle;
	//CHECK TO MAKE SURE DUTY CYCLE IS WITHIN [0,100]
	if (duty_cycle>=0 && duty_cycle <=100)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	d80c      	bhi.n	8000f0e <Calculate_Ticks_On_Per_Cycle+0x2a>
	{
		ticks_on_per_cycle = (duty_cycle*COUNTER_PERIOD)/100;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a09      	ldr	r2, [pc, #36]	; (8000f24 <Calculate_Ticks_On_Per_Cycle+0x40>)
 8000f00:	fb82 1203 	smull	r1, r2, r2, r3
 8000f04:	1152      	asrs	r2, r2, #5
 8000f06:	17db      	asrs	r3, r3, #31
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	81fb      	strh	r3, [r7, #14]
 8000f0c:	e004      	b.n	8000f18 <Calculate_Ticks_On_Per_Cycle+0x34>
	}

	else
	{
		ticks_on_per_cycle = 0; //Default value
 8000f0e:	2300      	movs	r3, #0
 8000f10:	81fb      	strh	r3, [r7, #14]
		printf("Invalid Duty Cycle argument. Should be within range [0,100].\n");
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <Calculate_Ticks_On_Per_Cycle+0x44>)
 8000f14:	f002 faec 	bl	80034f0 <puts>
	}
	return ticks_on_per_cycle;
 8000f18:	89fb      	ldrh	r3, [r7, #14]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	51eb851f 	.word	0x51eb851f
 8000f28:	08003ed8 	.word	0x08003ed8

08000f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f30:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <Error_Handler+0x6>

08000f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_MspInit+0x44>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <HAL_MspInit+0x44>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_MspInit+0x44>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <HAL_MspInit+0x44>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x44>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2019      	movs	r0, #25
 8000fac:	f000 fadf 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fb0:	2019      	movs	r0, #25
 8000fb2:	f000 faf8 	bl	80015a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fb6:	e018      	b.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fc2:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201c      	movs	r0, #28
 8000fe0:	f000 fac5 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fe4:	201c      	movs	r0, #28
 8000fe6:	f000 fade 	bl	80015a6 <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <HAL_TIM_MspPostInit+0xe4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d11d      	bne.n	800105a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800101e:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a30      	ldr	r2, [pc, #192]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 8001024:	f043 0310 	orr.w	r3, r3, #16
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0310 	and.w	r3, r3, #16
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8001036:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800103a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4825      	ldr	r0, [pc, #148]	; (80010e8 <HAL_TIM_MspPostInit+0xec>)
 8001054:	f000 fac2 	bl	80015dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001058:	e03d      	b.n	80010d6 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001062:	d138      	bne.n	80010d6 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 8001066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001068:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6313      	str	r3, [r2, #48]	; 0x30
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 800107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001080:	4a18      	ldr	r2, [pc, #96]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6313      	str	r3, [r2, #48]	; 0x30
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <HAL_TIM_MspPostInit+0xe8>)
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001094:	2320      	movs	r3, #32
 8001096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010a4:	2301      	movs	r3, #1
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	4619      	mov	r1, r3
 80010ae:	480f      	ldr	r0, [pc, #60]	; (80010ec <HAL_TIM_MspPostInit+0xf0>)
 80010b0:	f000 fa94 	bl	80015dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80010b4:	f640 4308 	movw	r3, #3080	; 0xc08
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c6:	2301      	movs	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	4807      	ldr	r0, [pc, #28]	; (80010f0 <HAL_TIM_MspPostInit+0xf4>)
 80010d2:	f000 fa83 	bl	80015dc <HAL_GPIO_Init>
}
 80010d6:	bf00      	nop
 80010d8:	3728      	adds	r7, #40	; 0x28
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40020000 	.word	0x40020000
 80010f0:	40020400 	.word	0x40020400

080010f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <NMI_Handler+0x4>

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f91a 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800114e:	f001 f93f 	bl	80023d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000009c 	.word	0x2000009c

0800115c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM2_IRQHandler+0x10>)
 8001162:	f001 f935 	bl	80023d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000e0 	.word	0x200000e0

08001170 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00a      	b.n	8001198 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001182:	f3af 8000 	nop.w
 8001186:	4601      	mov	r1, r0
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	60ba      	str	r2, [r7, #8]
 800118e:	b2ca      	uxtb	r2, r1
 8001190:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	dbf0      	blt.n	8001182 <_read+0x12>
	}

return len;
 80011a0:	687b      	ldr	r3, [r7, #4]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_close>:
	}
	return len;
}

int _close(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
	return -1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011c2:	b480      	push	{r7}
 80011c4:	b083      	sub	sp, #12
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d2:	605a      	str	r2, [r3, #4]
	return 0;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_isatty>:

int _isatty(int file)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
	return 1;
 80011ea:	2301      	movs	r3, #1
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
	return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <_sbrk+0x5c>)
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <_sbrk+0x60>)
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d102      	bne.n	8001236 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <_sbrk+0x64>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <_sbrk+0x68>)
 8001234:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <_sbrk+0x64>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4413      	add	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	429a      	cmp	r2, r3
 8001242:	d207      	bcs.n	8001254 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001244:	f002 f8c6 	bl	80033d4 <__errno>
 8001248:	4602      	mov	r2, r0
 800124a:	230c      	movs	r3, #12
 800124c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e009      	b.n	8001268 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <_sbrk+0x64>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <_sbrk+0x64>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4413      	add	r3, r2
 8001262:	4a05      	ldr	r2, [pc, #20]	; (8001278 <_sbrk+0x64>)
 8001264:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20080000 	.word	0x20080000
 8001274:	00000400 	.word	0x00000400
 8001278:	20000090 	.word	0x20000090
 800127c:	20000130 	.word	0x20000130

08001280 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <SystemInit+0x28>)
 8001286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <SystemInit+0x28>)
 800128c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001290:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SystemInit+0x28>)
 8001296:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800129a:	609a      	str	r2, [r3, #8]
#endif
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012b2:	e003      	b.n	80012bc <LoopCopyDataInit>

080012b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ba:	3104      	adds	r1, #4

080012bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012c4:	d3f6      	bcc.n	80012b4 <CopyDataInit>
  ldr  r2, =_sbss
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012c8:	e002      	b.n	80012d0 <LoopFillZerobss>

080012ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012cc:	f842 3b04 	str.w	r3, [r2], #4

080012d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012d4:	d3f9      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d6:	f7ff ffd3 	bl	8001280 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f002 f881 	bl	80033e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff fa0b 	bl	80006f8 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80012e8:	08003f9c 	.word	0x08003f9c
  ldr  r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012f0:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80012f4:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80012f8:	2000012c 	.word	0x2000012c

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>

080012fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001302:	2003      	movs	r0, #3
 8001304:	f000 f928 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001308:	2000      	movs	r0, #0
 800130a:	f000 f805 	bl	8001318 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800130e:	f7ff fe11 	bl	8000f34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f943 	bl	80015c2 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f90b 	bl	800156e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008
 800139c:	20000124 	.word	0x20000124

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000124 	.word	0x20000124

080013b8 <__NVIC_SetPriorityGrouping>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	05fa0000 	.word	0x05fa0000

08001400 <__NVIC_GetPriorityGrouping>:
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	; (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	; (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	; (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	; 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	; 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff3e 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff31 	bl	800141c <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	e175      	b.n	80018e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	429a      	cmp	r2, r3
 8001616:	f040 8164 	bne.w	80018e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d00b      	beq.n	800163a <HAL_GPIO_Init+0x5e>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800162e:	2b11      	cmp	r3, #17
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b12      	cmp	r3, #18
 8001638:	d130      	bne.n	800169c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0201 	and.w	r2, r3, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x100>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b12      	cmp	r3, #18
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	69b9      	ldr	r1, [r7, #24]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80be 	beq.w	80018e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b65      	ldr	r3, [pc, #404]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a64      	ldr	r2, [pc, #400]	; (80018fc <HAL_GPIO_Init+0x320>)
 800176c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b62      	ldr	r3, [pc, #392]	; (80018fc <HAL_GPIO_Init+0x320>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800177e:	4a60      	ldr	r2, [pc, #384]	; (8001900 <HAL_GPIO_Init+0x324>)
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4013      	ands	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a57      	ldr	r2, [pc, #348]	; (8001904 <HAL_GPIO_Init+0x328>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d037      	beq.n	800181a <HAL_GPIO_Init+0x23e>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a56      	ldr	r2, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x32c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_GPIO_Init+0x23a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a55      	ldr	r2, [pc, #340]	; (800190c <HAL_GPIO_Init+0x330>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d02b      	beq.n	8001812 <HAL_GPIO_Init+0x236>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a54      	ldr	r2, [pc, #336]	; (8001910 <HAL_GPIO_Init+0x334>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d025      	beq.n	800180e <HAL_GPIO_Init+0x232>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a53      	ldr	r2, [pc, #332]	; (8001914 <HAL_GPIO_Init+0x338>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d01f      	beq.n	800180a <HAL_GPIO_Init+0x22e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_GPIO_Init+0x33c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d019      	beq.n	8001806 <HAL_GPIO_Init+0x22a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a51      	ldr	r2, [pc, #324]	; (800191c <HAL_GPIO_Init+0x340>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x226>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a50      	ldr	r2, [pc, #320]	; (8001920 <HAL_GPIO_Init+0x344>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x222>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4f      	ldr	r2, [pc, #316]	; (8001924 <HAL_GPIO_Init+0x348>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x21e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4e      	ldr	r2, [pc, #312]	; (8001928 <HAL_GPIO_Init+0x34c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x21a>
 80017f2:	2309      	movs	r3, #9
 80017f4:	e012      	b.n	800181c <HAL_GPIO_Init+0x240>
 80017f6:	230a      	movs	r3, #10
 80017f8:	e010      	b.n	800181c <HAL_GPIO_Init+0x240>
 80017fa:	2308      	movs	r3, #8
 80017fc:	e00e      	b.n	800181c <HAL_GPIO_Init+0x240>
 80017fe:	2307      	movs	r3, #7
 8001800:	e00c      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001802:	2306      	movs	r3, #6
 8001804:	e00a      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001806:	2305      	movs	r3, #5
 8001808:	e008      	b.n	800181c <HAL_GPIO_Init+0x240>
 800180a:	2304      	movs	r3, #4
 800180c:	e006      	b.n	800181c <HAL_GPIO_Init+0x240>
 800180e:	2303      	movs	r3, #3
 8001810:	e004      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001812:	2302      	movs	r3, #2
 8001814:	e002      	b.n	800181c <HAL_GPIO_Init+0x240>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x240>
 800181a:	2300      	movs	r3, #0
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f002 0203 	and.w	r2, r2, #3
 8001822:	0092      	lsls	r2, r2, #2
 8001824:	4093      	lsls	r3, r2
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800182c:	4934      	ldr	r1, [pc, #208]	; (8001900 <HAL_GPIO_Init+0x324>)
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	089b      	lsrs	r3, r3, #2
 8001832:	3302      	adds	r3, #2
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800183a:	4b3c      	ldr	r3, [pc, #240]	; (800192c <HAL_GPIO_Init+0x350>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_GPIO_Init+0x350>)
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001864:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_GPIO_Init+0x350>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001888:	4a28      	ldr	r2, [pc, #160]	; (800192c <HAL_GPIO_Init+0x350>)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_GPIO_Init+0x350>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018b2:	4a1e      	ldr	r2, [pc, #120]	; (800192c <HAL_GPIO_Init+0x350>)
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_GPIO_Init+0x350>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018dc:	4a13      	ldr	r2, [pc, #76]	; (800192c <HAL_GPIO_Init+0x350>)
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b0f      	cmp	r3, #15
 80018ec:	f67f ae86 	bls.w	80015fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018f0:	bf00      	nop
 80018f2:	3724      	adds	r7, #36	; 0x24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40023800 	.word	0x40023800
 8001900:	40013800 	.word	0x40013800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40021400 	.word	0x40021400
 800191c:	40021800 	.word	0x40021800
 8001920:	40021c00 	.word	0x40021c00
 8001924:	40022000 	.word	0x40022000
 8001928:	40022400 	.word	0x40022400
 800192c:	40013c00 	.word	0x40013c00

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800194c:	e003      	b.n	8001956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	041a      	lsls	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	619a      	str	r2, [r3, #24]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800197a:	887b      	ldrh	r3, [r7, #2]
 800197c:	041a      	lsls	r2, r3, #16
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001982:	e002      	b.n	800198a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019a0:	2300      	movs	r3, #0
 80019a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e29b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019bc:	4b96      	ldr	r3, [pc, #600]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d00c      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019c8:	4b93      	ldr	r3, [pc, #588]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d112      	bne.n	80019fa <HAL_RCC_OscConfig+0x62>
 80019d4:	4b90      	ldr	r3, [pc, #576]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019e0:	d10b      	bne.n	80019fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e2:	4b8d      	ldr	r3, [pc, #564]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d06c      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x130>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d168      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e275      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a02:	d106      	bne.n	8001a12 <HAL_RCC_OscConfig+0x7a>
 8001a04:	4b84      	ldr	r3, [pc, #528]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a83      	ldr	r2, [pc, #524]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	e02e      	b.n	8001a70 <HAL_RCC_OscConfig+0xd8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x9c>
 8001a1a:	4b7f      	ldr	r3, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a7e      	ldr	r2, [pc, #504]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b7c      	ldr	r3, [pc, #496]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a7b      	ldr	r2, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xd8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a75      	ldr	r2, [pc, #468]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a72      	ldr	r2, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xd8>
 8001a58:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b6c      	ldr	r3, [pc, #432]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a6b      	ldr	r2, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fc92 	bl	80013a0 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fc8e 	bl	80013a0 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e229      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b61      	ldr	r3, [pc, #388]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xe8>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fc7e 	bl	80013a0 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fc7a 	bl	80013a0 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	; 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e215      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b57      	ldr	r3, [pc, #348]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x110>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d069      	beq.n	8001baa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad6:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b4d      	ldr	r3, [pc, #308]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x190>
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1e9      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b41      	ldr	r3, [pc, #260]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	493d      	ldr	r1, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e040      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b39      	ldr	r3, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a38      	ldr	r2, [pc, #224]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fc30 	bl	80013a0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff fc2c 	bl	80013a0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1c7      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4929      	ldr	r1, [pc, #164]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]
 8001b76:	e018      	b.n	8001baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a26      	ldr	r2, [pc, #152]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001b7e:	f023 0301 	bic.w	r3, r3, #1
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff fc0c 	bl	80013a0 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff fc08 	bl	80013a0 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1a3      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	4b1e      	ldr	r3, [pc, #120]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d038      	beq.n	8001c28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d019      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bbe:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc2:	4a15      	ldr	r2, [pc, #84]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	f043 0301 	orr.w	r3, r3, #1
 8001bc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bca:	f7ff fbe9 	bl	80013a0 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fbe5 	bl	80013a0 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e180      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x23a>
 8001bf0:	e01a      	b.n	8001c28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bf6:	4a08      	ldr	r2, [pc, #32]	; (8001c18 <HAL_RCC_OscConfig+0x280>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fbcf 	bl	80013a0 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c06:	f7ff fbcb 	bl	80013a0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d903      	bls.n	8001c1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e166      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
 8001c18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b92      	ldr	r3, [pc, #584]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1ee      	bne.n	8001c06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a4 	beq.w	8001d7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b8c      	ldr	r3, [pc, #560]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b89      	ldr	r3, [pc, #548]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c46:	4a88      	ldr	r2, [pc, #544]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4e:	4b86      	ldr	r3, [pc, #536]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5e:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_RCC_OscConfig+0x4d4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c6a:	4b80      	ldr	r3, [pc, #512]	; (8001e6c <HAL_RCC_OscConfig+0x4d4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7f      	ldr	r2, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x4d4>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fb93 	bl	80013a0 <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fb8f 	bl	80013a0 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e12a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x4d4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x31a>
 8001ca4:	4b70      	ldr	r3, [pc, #448]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca8:	4a6f      	ldr	r2, [pc, #444]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x33c>
 8001cba:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cbe:	4a6a      	ldr	r2, [pc, #424]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cc6:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a67      	ldr	r2, [pc, #412]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x35e>
 8001cdc:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	4a61      	ldr	r2, [pc, #388]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce8:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cec:	4a5e      	ldr	r2, [pc, #376]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x376>
 8001cf6:	4b5c      	ldr	r3, [pc, #368]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfa:	4a5b      	ldr	r2, [pc, #364]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6713      	str	r3, [r2, #112]	; 0x70
 8001d02:	4b59      	ldr	r3, [pc, #356]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d06:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb43 	bl	80013a0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fb3f 	bl	80013a0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0d8      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x386>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb2d 	bl	80013a0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb29 	bl	80013a0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e0c2      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b41      	ldr	r3, [pc, #260]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b3d      	ldr	r3, [pc, #244]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a3c      	ldr	r2, [pc, #240]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80ae 	beq.w	8001ee4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b37      	ldr	r3, [pc, #220]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d06d      	beq.n	8001e70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d14b      	bne.n	8001e34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fafa 	bl	80013a0 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7ff faf6 	bl	80013a0 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e091      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc2:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	019b      	lsls	r3, r3, #6
 8001dde:	431a      	orrs	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de4:	085b      	lsrs	r3, r3, #1
 8001de6:	3b01      	subs	r3, #1
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	071b      	lsls	r3, r3, #28
 8001dfa:	491b      	ldr	r1, [pc, #108]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fac8 	bl	80013a0 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff fac4 	bl	80013a0 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e05f      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0x47c>
 8001e32:	e057      	b.n	8001ee4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff faae 	bl	80013a0 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff faaa 	bl	80013a0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e045      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <HAL_RCC_OscConfig+0x4d0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4b0>
 8001e66:	e03d      	b.n	8001ee4 <HAL_RCC_OscConfig+0x54c>
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <HAL_RCC_OscConfig+0x558>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d030      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d129      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d122      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ea6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d119      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d10f      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0d0      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b6a      	ldr	r3, [pc, #424]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b67      	ldr	r3, [pc, #412]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	4965      	ldr	r1, [pc, #404]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b63      	ldr	r3, [pc, #396]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b8      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d020      	beq.n	8001f8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f54:	4b59      	ldr	r3, [pc, #356]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a58      	ldr	r2, [pc, #352]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f6c:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a52      	ldr	r2, [pc, #328]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f78:	4b50      	ldr	r3, [pc, #320]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	494d      	ldr	r1, [pc, #308]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d040      	beq.n	8002018 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d107      	bne.n	8001fae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9e:	4b47      	ldr	r3, [pc, #284]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d115      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e07f      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb6:	4b41      	ldr	r3, [pc, #260]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e073      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e06b      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f023 0203 	bic.w	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4936      	ldr	r1, [pc, #216]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe8:	f7ff f9da 	bl	80013a0 <HAL_GetTick>
 8001fec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ff0:	f7ff f9d6 	bl	80013a0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e053      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002006:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 020c 	and.w	r2, r3, #12
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	429a      	cmp	r2, r3
 8002016:	d1eb      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	429a      	cmp	r2, r3
 8002024:	d210      	bcs.n	8002048 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002026:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 020f 	bic.w	r2, r3, #15
 800202e:	4922      	ldr	r1, [pc, #136]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e032      	b.n	80020ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d008      	beq.n	8002066 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002054:	4b19      	ldr	r3, [pc, #100]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	4916      	ldr	r1, [pc, #88]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0308 	and.w	r3, r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	d009      	beq.n	8002086 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	490e      	ldr	r1, [pc, #56]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 8002082:	4313      	orrs	r3, r2
 8002084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002086:	f000 f821 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 800208a:	4601      	mov	r1, r0
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_ClockConfig+0x1c8>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	fa21 f303 	lsr.w	r3, r1, r3
 800209e:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_RCC_ClockConfig+0x1d0>)
 80020a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_RCC_ClockConfig+0x1d4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff f936 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023c00 	.word	0x40023c00
 80020bc:	40023800 	.word	0x40023800
 80020c0:	08003f18 	.word	0x08003f18
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000004 	.word	0x20000004

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	2300      	movs	r3, #0
 80020dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020e2:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_GetSysClockFreq+0x158>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d007      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x32>
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d008      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x38>
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 808d 	bne.w	8002212 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <HAL_RCC_GetSysClockFreq+0x15c>)
 80020fa:	60bb      	str	r3, [r7, #8]
      break;
 80020fc:	e08c      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020fe:	4b4b      	ldr	r3, [pc, #300]	; (800222c <HAL_RCC_GetSysClockFreq+0x160>)
 8002100:	60bb      	str	r3, [r7, #8]
      break;
 8002102:	e089      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002104:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_GetSysClockFreq+0x158>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800210c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800210e:	4b45      	ldr	r3, [pc, #276]	; (8002224 <HAL_RCC_GetSysClockFreq+0x158>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d023      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800211a:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_GetSysClockFreq+0x158>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	099b      	lsrs	r3, r3, #6
 8002120:	f04f 0400 	mov.w	r4, #0
 8002124:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	ea03 0501 	and.w	r5, r3, r1
 8002130:	ea04 0602 	and.w	r6, r4, r2
 8002134:	4a3d      	ldr	r2, [pc, #244]	; (800222c <HAL_RCC_GetSysClockFreq+0x160>)
 8002136:	fb02 f106 	mul.w	r1, r2, r6
 800213a:	2200      	movs	r2, #0
 800213c:	fb02 f205 	mul.w	r2, r2, r5
 8002140:	440a      	add	r2, r1
 8002142:	493a      	ldr	r1, [pc, #232]	; (800222c <HAL_RCC_GetSysClockFreq+0x160>)
 8002144:	fba5 0101 	umull	r0, r1, r5, r1
 8002148:	1853      	adds	r3, r2, r1
 800214a:	4619      	mov	r1, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f04f 0400 	mov.w	r4, #0
 8002152:	461a      	mov	r2, r3
 8002154:	4623      	mov	r3, r4
 8002156:	f7fe f86f 	bl	8000238 <__aeabi_uldivmod>
 800215a:	4603      	mov	r3, r0
 800215c:	460c      	mov	r4, r1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e049      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_GetSysClockFreq+0x158>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	ea03 0501 	and.w	r5, r3, r1
 8002178:	ea04 0602 	and.w	r6, r4, r2
 800217c:	4629      	mov	r1, r5
 800217e:	4632      	mov	r2, r6
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	f04f 0400 	mov.w	r4, #0
 8002188:	0154      	lsls	r4, r2, #5
 800218a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800218e:	014b      	lsls	r3, r1, #5
 8002190:	4619      	mov	r1, r3
 8002192:	4622      	mov	r2, r4
 8002194:	1b49      	subs	r1, r1, r5
 8002196:	eb62 0206 	sbc.w	r2, r2, r6
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f04f 0400 	mov.w	r4, #0
 80021a2:	0194      	lsls	r4, r2, #6
 80021a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80021a8:	018b      	lsls	r3, r1, #6
 80021aa:	1a5b      	subs	r3, r3, r1
 80021ac:	eb64 0402 	sbc.w	r4, r4, r2
 80021b0:	f04f 0100 	mov.w	r1, #0
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	00e2      	lsls	r2, r4, #3
 80021ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021be:	00d9      	lsls	r1, r3, #3
 80021c0:	460b      	mov	r3, r1
 80021c2:	4614      	mov	r4, r2
 80021c4:	195b      	adds	r3, r3, r5
 80021c6:	eb44 0406 	adc.w	r4, r4, r6
 80021ca:	f04f 0100 	mov.w	r1, #0
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	02a2      	lsls	r2, r4, #10
 80021d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021d8:	0299      	lsls	r1, r3, #10
 80021da:	460b      	mov	r3, r1
 80021dc:	4614      	mov	r4, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	4621      	mov	r1, r4
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f04f 0400 	mov.w	r4, #0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4623      	mov	r3, r4
 80021ec:	f7fe f824 	bl	8000238 <__aeabi_uldivmod>
 80021f0:	4603      	mov	r3, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0x158>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	3301      	adds	r3, #1
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	60bb      	str	r3, [r7, #8]
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002214:	60bb      	str	r3, [r7, #8]
      break;
 8002216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002218:	68bb      	ldr	r3, [r7, #8]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	017d7840 	.word	0x017d7840

08002230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e01d      	b.n	800227e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fe90 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	4619      	mov	r1, r3
 800226e:	4610      	mov	r0, r2
 8002270:	f000 fbc8 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_TIM_Base_Start_IT+0x50>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2b06      	cmp	r3, #6
 80022b0:	d00b      	beq.n	80022ca <HAL_TIM_Base_Start_IT+0x42>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b8:	d007      	beq.n	80022ca <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	00010007 	.word	0x00010007

080022dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e01d      	b.n	800232a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f815 	bl	8002332 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3304      	adds	r3, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4610      	mov	r0, r2
 800231c:	f000 fb72 	bl	8002a04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2201      	movs	r2, #1
 8002358:	6839      	ldr	r1, [r7, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f000 feea 	bl	8003134 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a17      	ldr	r2, [pc, #92]	; (80023c4 <HAL_TIM_PWM_Start+0x7c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d004      	beq.n	8002374 <HAL_TIM_PWM_Start+0x2c>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_TIM_PWM_Start+0x80>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_TIM_PWM_Start+0x30>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_TIM_PWM_Start+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800238c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <HAL_TIM_PWM_Start+0x84>)
 8002396:	4013      	ands	r3, r2
 8002398:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d00b      	beq.n	80023b8 <HAL_TIM_PWM_Start+0x70>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a6:	d007      	beq.n	80023b8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40010000 	.word	0x40010000
 80023c8:	40010400 	.word	0x40010400
 80023cc:	00010007 	.word	0x00010007

080023d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d122      	bne.n	800242c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d11b      	bne.n	800242c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f06f 0202 	mvn.w	r2, #2
 80023fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fad8 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 8002418:	e005      	b.n	8002426 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 faca 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 fadb 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d122      	bne.n	8002480 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b04      	cmp	r3, #4
 8002446:	d11b      	bne.n	8002480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f06f 0204 	mvn.w	r2, #4
 8002450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2202      	movs	r2, #2
 8002456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 faae 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 800246c:	e005      	b.n	800247a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 faa0 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fab1 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	f003 0308 	and.w	r3, r3, #8
 800248a:	2b08      	cmp	r3, #8
 800248c:	d122      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d11b      	bne.n	80024d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0208 	mvn.w	r2, #8
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2204      	movs	r2, #4
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fa84 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa76 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 fa87 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d122      	bne.n	8002528 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d11b      	bne.n	8002528 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0210 	mvn.w	r2, #16
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2208      	movs	r2, #8
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa5a 	bl	80029c8 <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fa4c 	bl	80029b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fa5d 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b01      	cmp	r3, #1
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0201 	mvn.w	r2, #1
 800254c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe f87e 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	2b80      	cmp	r3, #128	; 0x80
 8002560:	d10e      	bne.n	8002580 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d107      	bne.n	8002580 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 ff16 	bl	80033ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258e:	d10e      	bne.n	80025ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259a:	2b80      	cmp	r3, #128	; 0x80
 800259c:	d107      	bne.n	80025ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 ff09 	bl	80033c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d10e      	bne.n	80025da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d107      	bne.n	80025da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 fa0b 	bl	80029f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0220 	mvn.w	r2, #32
 80025fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fec9 	bl	8003398 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002626:	2302      	movs	r3, #2
 8002628:	e105      	b.n	8002836 <HAL_TIM_PWM_ConfigChannel+0x226>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b14      	cmp	r3, #20
 800263e:	f200 80f0 	bhi.w	8002822 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	0800269d 	.word	0x0800269d
 800264c:	08002823 	.word	0x08002823
 8002650:	08002823 	.word	0x08002823
 8002654:	08002823 	.word	0x08002823
 8002658:	080026dd 	.word	0x080026dd
 800265c:	08002823 	.word	0x08002823
 8002660:	08002823 	.word	0x08002823
 8002664:	08002823 	.word	0x08002823
 8002668:	0800271f 	.word	0x0800271f
 800266c:	08002823 	.word	0x08002823
 8002670:	08002823 	.word	0x08002823
 8002674:	08002823 	.word	0x08002823
 8002678:	0800275f 	.word	0x0800275f
 800267c:	08002823 	.word	0x08002823
 8002680:	08002823 	.word	0x08002823
 8002684:	08002823 	.word	0x08002823
 8002688:	080027a1 	.word	0x080027a1
 800268c:	08002823 	.word	0x08002823
 8002690:	08002823 	.word	0x08002823
 8002694:	08002823 	.word	0x08002823
 8002698:	080027e1 	.word	0x080027e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fa4e 	bl	8002b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699a      	ldr	r2, [r3, #24]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0208 	orr.w	r2, r2, #8
 80026b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699a      	ldr	r2, [r3, #24]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6999      	ldr	r1, [r3, #24]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	619a      	str	r2, [r3, #24]
      break;
 80026da:	e0a3      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68b9      	ldr	r1, [r7, #8]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 faa0 	bl	8002c28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699a      	ldr	r2, [r3, #24]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6999      	ldr	r1, [r3, #24]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	021a      	lsls	r2, r3, #8
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]
      break;
 800271c:	e082      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	4618      	mov	r0, r3
 8002726:	f000 faf7 	bl	8002d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0208 	orr.w	r2, r2, #8
 8002738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0204 	bic.w	r2, r2, #4
 8002748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69d9      	ldr	r1, [r3, #28]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	61da      	str	r2, [r3, #28]
      break;
 800275c:	e062      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68b9      	ldr	r1, [r7, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fb4d 	bl	8002e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69da      	ldr	r2, [r3, #28]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	61da      	str	r2, [r3, #28]
      break;
 800279e:	e041      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fb84 	bl	8002eb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0208 	orr.w	r2, r2, #8
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	430a      	orrs	r2, r1
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027de:	e021      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68b9      	ldr	r1, [r7, #8]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fbb6 	bl	8002f58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	021a      	lsls	r2, r3, #8
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002820:	e000      	b.n	8002824 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002822:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop

08002840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_TIM_ConfigClockSource+0x18>
 8002854:	2302      	movs	r3, #2
 8002856:	e0a6      	b.n	80029a6 <HAL_TIM_ConfigClockSource+0x166>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4b4f      	ldr	r3, [pc, #316]	; (80029b0 <HAL_TIM_ConfigClockSource+0x170>)
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800287e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b40      	cmp	r3, #64	; 0x40
 800288e:	d067      	beq.n	8002960 <HAL_TIM_ConfigClockSource+0x120>
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d80b      	bhi.n	80028ac <HAL_TIM_ConfigClockSource+0x6c>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d073      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0x140>
 8002898:	2b10      	cmp	r3, #16
 800289a:	d802      	bhi.n	80028a2 <HAL_TIM_ConfigClockSource+0x62>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d06f      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80028a0:	e078      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d06c      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0x140>
 80028a6:	2b30      	cmp	r3, #48	; 0x30
 80028a8:	d06a      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028aa:	e073      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d00d      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0x8c>
 80028b0:	2b70      	cmp	r3, #112	; 0x70
 80028b2:	d804      	bhi.n	80028be <HAL_TIM_ConfigClockSource+0x7e>
 80028b4:	2b50      	cmp	r3, #80	; 0x50
 80028b6:	d033      	beq.n	8002920 <HAL_TIM_ConfigClockSource+0xe0>
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d041      	beq.n	8002940 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028bc:	e06a      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c2:	d066      	beq.n	8002992 <HAL_TIM_ConfigClockSource+0x152>
 80028c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c8:	d017      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028ca:	e063      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6899      	ldr	r1, [r3, #8]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f000 fc0a 	bl	80030f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]
      break;
 80028f8:	e04c      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6899      	ldr	r1, [r3, #8]
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f000 fbf3 	bl	80030f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800291c:	609a      	str	r2, [r3, #8]
      break;
 800291e:	e039      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	6859      	ldr	r1, [r3, #4]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	461a      	mov	r2, r3
 800292e:	f000 fb67 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2150      	movs	r1, #80	; 0x50
 8002938:	4618      	mov	r0, r3
 800293a:	f000 fbc0 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 800293e:	e029      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	461a      	mov	r2, r3
 800294e:	f000 fb86 	bl	800305e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2160      	movs	r1, #96	; 0x60
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fbb0 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 800295e:	e019      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6859      	ldr	r1, [r3, #4]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	461a      	mov	r2, r3
 800296e:	f000 fb47 	bl	8003000 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	4618      	mov	r0, r3
 800297a:	f000 fba0 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 800297e:	e009      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f000 fb97 	bl	80030be <TIM_ITRx_SetConfig>
      break;
 8002990:	e000      	b.n	8002994 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002992:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	fffeff88 	.word	0xfffeff88

080029b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a40      	ldr	r2, [pc, #256]	; (8002b18 <TIM_Base_SetConfig+0x114>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a22:	d00f      	beq.n	8002a44 <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3d      	ldr	r2, [pc, #244]	; (8002b1c <TIM_Base_SetConfig+0x118>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00b      	beq.n	8002a44 <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3c      	ldr	r2, [pc, #240]	; (8002b20 <TIM_Base_SetConfig+0x11c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d007      	beq.n	8002a44 <TIM_Base_SetConfig+0x40>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a3b      	ldr	r2, [pc, #236]	; (8002b24 <TIM_Base_SetConfig+0x120>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <TIM_Base_SetConfig+0x40>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <TIM_Base_SetConfig+0x124>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d108      	bne.n	8002a56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2f      	ldr	r2, [pc, #188]	; (8002b18 <TIM_Base_SetConfig+0x114>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02b      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a64:	d027      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2c      	ldr	r2, [pc, #176]	; (8002b1c <TIM_Base_SetConfig+0x118>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d023      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a2b      	ldr	r2, [pc, #172]	; (8002b20 <TIM_Base_SetConfig+0x11c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01f      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a2a      	ldr	r2, [pc, #168]	; (8002b24 <TIM_Base_SetConfig+0x120>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01b      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a29      	ldr	r2, [pc, #164]	; (8002b28 <TIM_Base_SetConfig+0x124>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d017      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a28      	ldr	r2, [pc, #160]	; (8002b2c <TIM_Base_SetConfig+0x128>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a27      	ldr	r2, [pc, #156]	; (8002b30 <TIM_Base_SetConfig+0x12c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00f      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a26      	ldr	r2, [pc, #152]	; (8002b34 <TIM_Base_SetConfig+0x130>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <TIM_Base_SetConfig+0x134>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a24      	ldr	r2, [pc, #144]	; (8002b3c <TIM_Base_SetConfig+0x138>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <TIM_Base_SetConfig+0x13c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <TIM_Base_SetConfig+0x114>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0xf8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0c      	ldr	r2, [pc, #48]	; (8002b28 <TIM_Base_SetConfig+0x124>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d103      	bne.n	8002b04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	615a      	str	r2, [r3, #20]
}
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40010000 	.word	0x40010000
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	40000c00 	.word	0x40000c00
 8002b28:	40010400 	.word	0x40010400
 8002b2c:	40014000 	.word	0x40014000
 8002b30:	40014400 	.word	0x40014400
 8002b34:	40014800 	.word	0x40014800
 8002b38:	40001800 	.word	0x40001800
 8002b3c:	40001c00 	.word	0x40001c00
 8002b40:	40002000 	.word	0x40002000

08002b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	f023 0201 	bic.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4b2b      	ldr	r3, [pc, #172]	; (8002c1c <TIM_OC1_SetConfig+0xd8>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f023 0302 	bic.w	r3, r3, #2
 8002b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC1_SetConfig+0xdc>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_OC1_SetConfig+0x64>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <TIM_OC1_SetConfig+0xe0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d10c      	bne.n	8002bc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 0308 	bic.w	r3, r3, #8
 8002bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <TIM_OC1_SetConfig+0xdc>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_OC1_SetConfig+0x8e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <TIM_OC1_SetConfig+0xe0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d111      	bne.n	8002bf6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	621a      	str	r2, [r3, #32]
}
 8002c10:	bf00      	nop
 8002c12:	371c      	adds	r7, #28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	fffeff8f 	.word	0xfffeff8f
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40010400 	.word	0x40010400

08002c28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0210 	bic.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4b2e      	ldr	r3, [pc, #184]	; (8002d0c <TIM_OC2_SetConfig+0xe4>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0320 	bic.w	r3, r3, #32
 8002c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <TIM_OC2_SetConfig+0xe8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_OC2_SetConfig+0x68>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <TIM_OC2_SetConfig+0xec>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10d      	bne.n	8002cac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002caa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <TIM_OC2_SetConfig+0xe8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <TIM_OC2_SetConfig+0x94>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <TIM_OC2_SetConfig+0xec>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d113      	bne.n	8002ce4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	621a      	str	r2, [r3, #32]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	feff8fff 	.word	0xfeff8fff
 8002d10:	40010000 	.word	0x40010000
 8002d14:	40010400 	.word	0x40010400

08002d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <TIM_OC3_SetConfig+0xe0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a22      	ldr	r2, [pc, #136]	; (8002dfc <TIM_OC3_SetConfig+0xe4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_OC3_SetConfig+0x66>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a21      	ldr	r2, [pc, #132]	; (8002e00 <TIM_OC3_SetConfig+0xe8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d10d      	bne.n	8002d9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <TIM_OC3_SetConfig+0xe4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_OC3_SetConfig+0x92>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <TIM_OC3_SetConfig+0xe8>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d113      	bne.n	8002dd2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002db0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002db8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	621a      	str	r2, [r3, #32]
}
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	fffeff8f 	.word	0xfffeff8f
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40010400 	.word	0x40010400

08002e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <TIM_OC4_SetConfig+0xa4>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a13      	ldr	r2, [pc, #76]	; (8002eac <TIM_OC4_SetConfig+0xa8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d003      	beq.n	8002e6c <TIM_OC4_SetConfig+0x68>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <TIM_OC4_SetConfig+0xac>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d109      	bne.n	8002e80 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	621a      	str	r2, [r3, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	feff8fff 	.word	0xfeff8fff
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <TIM_OC5_SetConfig+0x98>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ef4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	041b      	lsls	r3, r3, #16
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <TIM_OC5_SetConfig+0x9c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d003      	beq.n	8002f12 <TIM_OC5_SetConfig+0x5e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a11      	ldr	r2, [pc, #68]	; (8002f54 <TIM_OC5_SetConfig+0xa0>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d109      	bne.n	8002f26 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	621a      	str	r2, [r3, #32]
}
 8002f40:	bf00      	nop
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	fffeff8f 	.word	0xfffeff8f
 8002f50:	40010000 	.word	0x40010000
 8002f54:	40010400 	.word	0x40010400

08002f58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <TIM_OC6_SetConfig+0x9c>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	051b      	lsls	r3, r3, #20
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a13      	ldr	r2, [pc, #76]	; (8002ff8 <TIM_OC6_SetConfig+0xa0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_OC6_SetConfig+0x60>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <TIM_OC6_SetConfig+0xa4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d109      	bne.n	8002fcc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	029b      	lsls	r3, r3, #10
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	621a      	str	r2, [r3, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	371c      	adds	r7, #28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	feff8fff 	.word	0xfeff8fff
 8002ff8:	40010000 	.word	0x40010000
 8002ffc:	40010400 	.word	0x40010400

08003000 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f023 0201 	bic.w	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 030a 	bic.w	r3, r3, #10
 800303c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	621a      	str	r2, [r3, #32]
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800305e:	b480      	push	{r7}
 8003060:	b087      	sub	sp, #28
 8003062:	af00      	add	r7, sp, #0
 8003064:	60f8      	str	r0, [r7, #12]
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0210 	bic.w	r2, r3, #16
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	031b      	lsls	r3, r3, #12
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800309a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	011b      	lsls	r3, r3, #4
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	621a      	str	r2, [r3, #32]
}
 80030b2:	bf00      	nop
 80030b4:	371c      	adds	r7, #28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
 80030c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4313      	orrs	r3, r2
 80030dc:	f043 0307 	orr.w	r3, r3, #7
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]
}
 80030e8:	bf00      	nop
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	021a      	lsls	r2, r3, #8
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	431a      	orrs	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f003 031f 	and.w	r3, r3, #31
 8003146:	2201      	movs	r2, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1a      	ldr	r2, [r3, #32]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	43db      	mvns	r3, r3
 8003156:	401a      	ands	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 031f 	and.w	r3, r3, #31
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	fa01 f303 	lsl.w	r3, r1, r3
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	bf00      	nop
 8003174:	371c      	adds	r7, #28
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
	...

08003180 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e06d      	b.n	8003274 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a30      	ldr	r2, [pc, #192]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d004      	beq.n	80031cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a2f      	ldr	r2, [pc, #188]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a20      	ldr	r2, [pc, #128]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d022      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800320a:	d01d      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d018      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1c      	ldr	r2, [pc, #112]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d013      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00e      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a15      	ldr	r2, [pc, #84]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d009      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a16      	ldr	r2, [pc, #88]	; (8003294 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d004      	beq.n	8003248 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a15      	ldr	r2, [pc, #84]	; (8003298 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d10c      	bne.n	8003262 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	4313      	orrs	r3, r2
 8003258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3714      	adds	r7, #20
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40010000 	.word	0x40010000
 8003284:	40010400 	.word	0x40010400
 8003288:	40000400 	.word	0x40000400
 800328c:	40000800 	.word	0x40000800
 8003290:	40000c00 	.word	0x40000c00
 8003294:	40014000 	.word	0x40014000
 8003298:	40001800 	.word	0x40001800

0800329c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e065      	b.n	8003384 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a16      	ldr	r2, [pc, #88]	; (8003390 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d004      	beq.n	8003346 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a14      	ldr	r2, [pc, #80]	; (8003394 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d115      	bne.n	8003372 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	051b      	lsls	r3, r3, #20
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4313      	orrs	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40010000 	.word	0x40010000
 8003394:	40010400 	.word	0x40010400

08003398 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <__errno>:
 80033d4:	4b01      	ldr	r3, [pc, #4]	; (80033dc <__errno+0x8>)
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <__libc_init_array>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	4e0d      	ldr	r6, [pc, #52]	; (8003418 <__libc_init_array+0x38>)
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <__libc_init_array+0x3c>)
 80033e6:	1ba4      	subs	r4, r4, r6
 80033e8:	10a4      	asrs	r4, r4, #2
 80033ea:	2500      	movs	r5, #0
 80033ec:	42a5      	cmp	r5, r4
 80033ee:	d109      	bne.n	8003404 <__libc_init_array+0x24>
 80033f0:	4e0b      	ldr	r6, [pc, #44]	; (8003420 <__libc_init_array+0x40>)
 80033f2:	4c0c      	ldr	r4, [pc, #48]	; (8003424 <__libc_init_array+0x44>)
 80033f4:	f000 fc88 	bl	8003d08 <_init>
 80033f8:	1ba4      	subs	r4, r4, r6
 80033fa:	10a4      	asrs	r4, r4, #2
 80033fc:	2500      	movs	r5, #0
 80033fe:	42a5      	cmp	r5, r4
 8003400:	d105      	bne.n	800340e <__libc_init_array+0x2e>
 8003402:	bd70      	pop	{r4, r5, r6, pc}
 8003404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003408:	4798      	blx	r3
 800340a:	3501      	adds	r5, #1
 800340c:	e7ee      	b.n	80033ec <__libc_init_array+0xc>
 800340e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003412:	4798      	blx	r3
 8003414:	3501      	adds	r5, #1
 8003416:	e7f2      	b.n	80033fe <__libc_init_array+0x1e>
 8003418:	08003f94 	.word	0x08003f94
 800341c:	08003f94 	.word	0x08003f94
 8003420:	08003f94 	.word	0x08003f94
 8003424:	08003f98 	.word	0x08003f98

08003428 <memset>:
 8003428:	4402      	add	r2, r0
 800342a:	4603      	mov	r3, r0
 800342c:	4293      	cmp	r3, r2
 800342e:	d100      	bne.n	8003432 <memset+0xa>
 8003430:	4770      	bx	lr
 8003432:	f803 1b01 	strb.w	r1, [r3], #1
 8003436:	e7f9      	b.n	800342c <memset+0x4>

08003438 <_puts_r>:
 8003438:	b570      	push	{r4, r5, r6, lr}
 800343a:	460e      	mov	r6, r1
 800343c:	4605      	mov	r5, r0
 800343e:	b118      	cbz	r0, 8003448 <_puts_r+0x10>
 8003440:	6983      	ldr	r3, [r0, #24]
 8003442:	b90b      	cbnz	r3, 8003448 <_puts_r+0x10>
 8003444:	f000 fa0c 	bl	8003860 <__sinit>
 8003448:	69ab      	ldr	r3, [r5, #24]
 800344a:	68ac      	ldr	r4, [r5, #8]
 800344c:	b913      	cbnz	r3, 8003454 <_puts_r+0x1c>
 800344e:	4628      	mov	r0, r5
 8003450:	f000 fa06 	bl	8003860 <__sinit>
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <_puts_r+0xac>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d117      	bne.n	800348a <_puts_r+0x52>
 800345a:	686c      	ldr	r4, [r5, #4]
 800345c:	89a3      	ldrh	r3, [r4, #12]
 800345e:	071b      	lsls	r3, r3, #28
 8003460:	d51d      	bpl.n	800349e <_puts_r+0x66>
 8003462:	6923      	ldr	r3, [r4, #16]
 8003464:	b1db      	cbz	r3, 800349e <_puts_r+0x66>
 8003466:	3e01      	subs	r6, #1
 8003468:	68a3      	ldr	r3, [r4, #8]
 800346a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800346e:	3b01      	subs	r3, #1
 8003470:	60a3      	str	r3, [r4, #8]
 8003472:	b9e9      	cbnz	r1, 80034b0 <_puts_r+0x78>
 8003474:	2b00      	cmp	r3, #0
 8003476:	da2e      	bge.n	80034d6 <_puts_r+0x9e>
 8003478:	4622      	mov	r2, r4
 800347a:	210a      	movs	r1, #10
 800347c:	4628      	mov	r0, r5
 800347e:	f000 f83f 	bl	8003500 <__swbuf_r>
 8003482:	3001      	adds	r0, #1
 8003484:	d011      	beq.n	80034aa <_puts_r+0x72>
 8003486:	200a      	movs	r0, #10
 8003488:	e011      	b.n	80034ae <_puts_r+0x76>
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <_puts_r+0xb0>)
 800348c:	429c      	cmp	r4, r3
 800348e:	d101      	bne.n	8003494 <_puts_r+0x5c>
 8003490:	68ac      	ldr	r4, [r5, #8]
 8003492:	e7e3      	b.n	800345c <_puts_r+0x24>
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <_puts_r+0xb4>)
 8003496:	429c      	cmp	r4, r3
 8003498:	bf08      	it	eq
 800349a:	68ec      	ldreq	r4, [r5, #12]
 800349c:	e7de      	b.n	800345c <_puts_r+0x24>
 800349e:	4621      	mov	r1, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	f000 f87f 	bl	80035a4 <__swsetup_r>
 80034a6:	2800      	cmp	r0, #0
 80034a8:	d0dd      	beq.n	8003466 <_puts_r+0x2e>
 80034aa:	f04f 30ff 	mov.w	r0, #4294967295
 80034ae:	bd70      	pop	{r4, r5, r6, pc}
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da04      	bge.n	80034be <_puts_r+0x86>
 80034b4:	69a2      	ldr	r2, [r4, #24]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	dc06      	bgt.n	80034c8 <_puts_r+0x90>
 80034ba:	290a      	cmp	r1, #10
 80034bc:	d004      	beq.n	80034c8 <_puts_r+0x90>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	1c5a      	adds	r2, r3, #1
 80034c2:	6022      	str	r2, [r4, #0]
 80034c4:	7019      	strb	r1, [r3, #0]
 80034c6:	e7cf      	b.n	8003468 <_puts_r+0x30>
 80034c8:	4622      	mov	r2, r4
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 f818 	bl	8003500 <__swbuf_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d1c9      	bne.n	8003468 <_puts_r+0x30>
 80034d4:	e7e9      	b.n	80034aa <_puts_r+0x72>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	200a      	movs	r0, #10
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	6022      	str	r2, [r4, #0]
 80034de:	7018      	strb	r0, [r3, #0]
 80034e0:	e7e5      	b.n	80034ae <_puts_r+0x76>
 80034e2:	bf00      	nop
 80034e4:	08003f4c 	.word	0x08003f4c
 80034e8:	08003f6c 	.word	0x08003f6c
 80034ec:	08003f2c 	.word	0x08003f2c

080034f0 <puts>:
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <puts+0xc>)
 80034f2:	4601      	mov	r1, r0
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	f7ff bf9f 	b.w	8003438 <_puts_r>
 80034fa:	bf00      	nop
 80034fc:	2000000c 	.word	0x2000000c

08003500 <__swbuf_r>:
 8003500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003502:	460e      	mov	r6, r1
 8003504:	4614      	mov	r4, r2
 8003506:	4605      	mov	r5, r0
 8003508:	b118      	cbz	r0, 8003512 <__swbuf_r+0x12>
 800350a:	6983      	ldr	r3, [r0, #24]
 800350c:	b90b      	cbnz	r3, 8003512 <__swbuf_r+0x12>
 800350e:	f000 f9a7 	bl	8003860 <__sinit>
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <__swbuf_r+0x98>)
 8003514:	429c      	cmp	r4, r3
 8003516:	d12a      	bne.n	800356e <__swbuf_r+0x6e>
 8003518:	686c      	ldr	r4, [r5, #4]
 800351a:	69a3      	ldr	r3, [r4, #24]
 800351c:	60a3      	str	r3, [r4, #8]
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	071a      	lsls	r2, r3, #28
 8003522:	d52e      	bpl.n	8003582 <__swbuf_r+0x82>
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	b363      	cbz	r3, 8003582 <__swbuf_r+0x82>
 8003528:	6923      	ldr	r3, [r4, #16]
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	1ac0      	subs	r0, r0, r3
 800352e:	6963      	ldr	r3, [r4, #20]
 8003530:	b2f6      	uxtb	r6, r6
 8003532:	4283      	cmp	r3, r0
 8003534:	4637      	mov	r7, r6
 8003536:	dc04      	bgt.n	8003542 <__swbuf_r+0x42>
 8003538:	4621      	mov	r1, r4
 800353a:	4628      	mov	r0, r5
 800353c:	f000 f926 	bl	800378c <_fflush_r>
 8003540:	bb28      	cbnz	r0, 800358e <__swbuf_r+0x8e>
 8003542:	68a3      	ldr	r3, [r4, #8]
 8003544:	3b01      	subs	r3, #1
 8003546:	60a3      	str	r3, [r4, #8]
 8003548:	6823      	ldr	r3, [r4, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	6022      	str	r2, [r4, #0]
 800354e:	701e      	strb	r6, [r3, #0]
 8003550:	6963      	ldr	r3, [r4, #20]
 8003552:	3001      	adds	r0, #1
 8003554:	4283      	cmp	r3, r0
 8003556:	d004      	beq.n	8003562 <__swbuf_r+0x62>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	07db      	lsls	r3, r3, #31
 800355c:	d519      	bpl.n	8003592 <__swbuf_r+0x92>
 800355e:	2e0a      	cmp	r6, #10
 8003560:	d117      	bne.n	8003592 <__swbuf_r+0x92>
 8003562:	4621      	mov	r1, r4
 8003564:	4628      	mov	r0, r5
 8003566:	f000 f911 	bl	800378c <_fflush_r>
 800356a:	b190      	cbz	r0, 8003592 <__swbuf_r+0x92>
 800356c:	e00f      	b.n	800358e <__swbuf_r+0x8e>
 800356e:	4b0b      	ldr	r3, [pc, #44]	; (800359c <__swbuf_r+0x9c>)
 8003570:	429c      	cmp	r4, r3
 8003572:	d101      	bne.n	8003578 <__swbuf_r+0x78>
 8003574:	68ac      	ldr	r4, [r5, #8]
 8003576:	e7d0      	b.n	800351a <__swbuf_r+0x1a>
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <__swbuf_r+0xa0>)
 800357a:	429c      	cmp	r4, r3
 800357c:	bf08      	it	eq
 800357e:	68ec      	ldreq	r4, [r5, #12]
 8003580:	e7cb      	b.n	800351a <__swbuf_r+0x1a>
 8003582:	4621      	mov	r1, r4
 8003584:	4628      	mov	r0, r5
 8003586:	f000 f80d 	bl	80035a4 <__swsetup_r>
 800358a:	2800      	cmp	r0, #0
 800358c:	d0cc      	beq.n	8003528 <__swbuf_r+0x28>
 800358e:	f04f 37ff 	mov.w	r7, #4294967295
 8003592:	4638      	mov	r0, r7
 8003594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003596:	bf00      	nop
 8003598:	08003f4c 	.word	0x08003f4c
 800359c:	08003f6c 	.word	0x08003f6c
 80035a0:	08003f2c 	.word	0x08003f2c

080035a4 <__swsetup_r>:
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <__swsetup_r+0xcc>)
 80035a6:	b570      	push	{r4, r5, r6, lr}
 80035a8:	681d      	ldr	r5, [r3, #0]
 80035aa:	4606      	mov	r6, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	b125      	cbz	r5, 80035ba <__swsetup_r+0x16>
 80035b0:	69ab      	ldr	r3, [r5, #24]
 80035b2:	b913      	cbnz	r3, 80035ba <__swsetup_r+0x16>
 80035b4:	4628      	mov	r0, r5
 80035b6:	f000 f953 	bl	8003860 <__sinit>
 80035ba:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <__swsetup_r+0xd0>)
 80035bc:	429c      	cmp	r4, r3
 80035be:	d10f      	bne.n	80035e0 <__swsetup_r+0x3c>
 80035c0:	686c      	ldr	r4, [r5, #4]
 80035c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	0715      	lsls	r5, r2, #28
 80035ca:	d42c      	bmi.n	8003626 <__swsetup_r+0x82>
 80035cc:	06d0      	lsls	r0, r2, #27
 80035ce:	d411      	bmi.n	80035f4 <__swsetup_r+0x50>
 80035d0:	2209      	movs	r2, #9
 80035d2:	6032      	str	r2, [r6, #0]
 80035d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035d8:	81a3      	strh	r3, [r4, #12]
 80035da:	f04f 30ff 	mov.w	r0, #4294967295
 80035de:	e03e      	b.n	800365e <__swsetup_r+0xba>
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <__swsetup_r+0xd4>)
 80035e2:	429c      	cmp	r4, r3
 80035e4:	d101      	bne.n	80035ea <__swsetup_r+0x46>
 80035e6:	68ac      	ldr	r4, [r5, #8]
 80035e8:	e7eb      	b.n	80035c2 <__swsetup_r+0x1e>
 80035ea:	4b24      	ldr	r3, [pc, #144]	; (800367c <__swsetup_r+0xd8>)
 80035ec:	429c      	cmp	r4, r3
 80035ee:	bf08      	it	eq
 80035f0:	68ec      	ldreq	r4, [r5, #12]
 80035f2:	e7e6      	b.n	80035c2 <__swsetup_r+0x1e>
 80035f4:	0751      	lsls	r1, r2, #29
 80035f6:	d512      	bpl.n	800361e <__swsetup_r+0x7a>
 80035f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035fa:	b141      	cbz	r1, 800360e <__swsetup_r+0x6a>
 80035fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003600:	4299      	cmp	r1, r3
 8003602:	d002      	beq.n	800360a <__swsetup_r+0x66>
 8003604:	4630      	mov	r0, r6
 8003606:	f000 fa19 	bl	8003a3c <_free_r>
 800360a:	2300      	movs	r3, #0
 800360c:	6363      	str	r3, [r4, #52]	; 0x34
 800360e:	89a3      	ldrh	r3, [r4, #12]
 8003610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003614:	81a3      	strh	r3, [r4, #12]
 8003616:	2300      	movs	r3, #0
 8003618:	6063      	str	r3, [r4, #4]
 800361a:	6923      	ldr	r3, [r4, #16]
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	89a3      	ldrh	r3, [r4, #12]
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	81a3      	strh	r3, [r4, #12]
 8003626:	6923      	ldr	r3, [r4, #16]
 8003628:	b94b      	cbnz	r3, 800363e <__swsetup_r+0x9a>
 800362a:	89a3      	ldrh	r3, [r4, #12]
 800362c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003634:	d003      	beq.n	800363e <__swsetup_r+0x9a>
 8003636:	4621      	mov	r1, r4
 8003638:	4630      	mov	r0, r6
 800363a:	f000 f9bf 	bl	80039bc <__smakebuf_r>
 800363e:	89a2      	ldrh	r2, [r4, #12]
 8003640:	f012 0301 	ands.w	r3, r2, #1
 8003644:	d00c      	beq.n	8003660 <__swsetup_r+0xbc>
 8003646:	2300      	movs	r3, #0
 8003648:	60a3      	str	r3, [r4, #8]
 800364a:	6963      	ldr	r3, [r4, #20]
 800364c:	425b      	negs	r3, r3
 800364e:	61a3      	str	r3, [r4, #24]
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	b953      	cbnz	r3, 800366a <__swsetup_r+0xc6>
 8003654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003658:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800365c:	d1ba      	bne.n	80035d4 <__swsetup_r+0x30>
 800365e:	bd70      	pop	{r4, r5, r6, pc}
 8003660:	0792      	lsls	r2, r2, #30
 8003662:	bf58      	it	pl
 8003664:	6963      	ldrpl	r3, [r4, #20]
 8003666:	60a3      	str	r3, [r4, #8]
 8003668:	e7f2      	b.n	8003650 <__swsetup_r+0xac>
 800366a:	2000      	movs	r0, #0
 800366c:	e7f7      	b.n	800365e <__swsetup_r+0xba>
 800366e:	bf00      	nop
 8003670:	2000000c 	.word	0x2000000c
 8003674:	08003f4c 	.word	0x08003f4c
 8003678:	08003f6c 	.word	0x08003f6c
 800367c:	08003f2c 	.word	0x08003f2c

08003680 <__sflush_r>:
 8003680:	898a      	ldrh	r2, [r1, #12]
 8003682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	4605      	mov	r5, r0
 8003688:	0710      	lsls	r0, r2, #28
 800368a:	460c      	mov	r4, r1
 800368c:	d458      	bmi.n	8003740 <__sflush_r+0xc0>
 800368e:	684b      	ldr	r3, [r1, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	dc05      	bgt.n	80036a0 <__sflush_r+0x20>
 8003694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	dc02      	bgt.n	80036a0 <__sflush_r+0x20>
 800369a:	2000      	movs	r0, #0
 800369c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	d0f9      	beq.n	800369a <__sflush_r+0x1a>
 80036a6:	2300      	movs	r3, #0
 80036a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036ac:	682f      	ldr	r7, [r5, #0]
 80036ae:	6a21      	ldr	r1, [r4, #32]
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	d032      	beq.n	800371a <__sflush_r+0x9a>
 80036b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036b6:	89a3      	ldrh	r3, [r4, #12]
 80036b8:	075a      	lsls	r2, r3, #29
 80036ba:	d505      	bpl.n	80036c8 <__sflush_r+0x48>
 80036bc:	6863      	ldr	r3, [r4, #4]
 80036be:	1ac0      	subs	r0, r0, r3
 80036c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036c2:	b10b      	cbz	r3, 80036c8 <__sflush_r+0x48>
 80036c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036c6:	1ac0      	subs	r0, r0, r3
 80036c8:	2300      	movs	r3, #0
 80036ca:	4602      	mov	r2, r0
 80036cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ce:	6a21      	ldr	r1, [r4, #32]
 80036d0:	4628      	mov	r0, r5
 80036d2:	47b0      	blx	r6
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	d106      	bne.n	80036e8 <__sflush_r+0x68>
 80036da:	6829      	ldr	r1, [r5, #0]
 80036dc:	291d      	cmp	r1, #29
 80036de:	d848      	bhi.n	8003772 <__sflush_r+0xf2>
 80036e0:	4a29      	ldr	r2, [pc, #164]	; (8003788 <__sflush_r+0x108>)
 80036e2:	40ca      	lsrs	r2, r1
 80036e4:	07d6      	lsls	r6, r2, #31
 80036e6:	d544      	bpl.n	8003772 <__sflush_r+0xf2>
 80036e8:	2200      	movs	r2, #0
 80036ea:	6062      	str	r2, [r4, #4]
 80036ec:	04d9      	lsls	r1, r3, #19
 80036ee:	6922      	ldr	r2, [r4, #16]
 80036f0:	6022      	str	r2, [r4, #0]
 80036f2:	d504      	bpl.n	80036fe <__sflush_r+0x7e>
 80036f4:	1c42      	adds	r2, r0, #1
 80036f6:	d101      	bne.n	80036fc <__sflush_r+0x7c>
 80036f8:	682b      	ldr	r3, [r5, #0]
 80036fa:	b903      	cbnz	r3, 80036fe <__sflush_r+0x7e>
 80036fc:	6560      	str	r0, [r4, #84]	; 0x54
 80036fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003700:	602f      	str	r7, [r5, #0]
 8003702:	2900      	cmp	r1, #0
 8003704:	d0c9      	beq.n	800369a <__sflush_r+0x1a>
 8003706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800370a:	4299      	cmp	r1, r3
 800370c:	d002      	beq.n	8003714 <__sflush_r+0x94>
 800370e:	4628      	mov	r0, r5
 8003710:	f000 f994 	bl	8003a3c <_free_r>
 8003714:	2000      	movs	r0, #0
 8003716:	6360      	str	r0, [r4, #52]	; 0x34
 8003718:	e7c0      	b.n	800369c <__sflush_r+0x1c>
 800371a:	2301      	movs	r3, #1
 800371c:	4628      	mov	r0, r5
 800371e:	47b0      	blx	r6
 8003720:	1c41      	adds	r1, r0, #1
 8003722:	d1c8      	bne.n	80036b6 <__sflush_r+0x36>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0c5      	beq.n	80036b6 <__sflush_r+0x36>
 800372a:	2b1d      	cmp	r3, #29
 800372c:	d001      	beq.n	8003732 <__sflush_r+0xb2>
 800372e:	2b16      	cmp	r3, #22
 8003730:	d101      	bne.n	8003736 <__sflush_r+0xb6>
 8003732:	602f      	str	r7, [r5, #0]
 8003734:	e7b1      	b.n	800369a <__sflush_r+0x1a>
 8003736:	89a3      	ldrh	r3, [r4, #12]
 8003738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800373c:	81a3      	strh	r3, [r4, #12]
 800373e:	e7ad      	b.n	800369c <__sflush_r+0x1c>
 8003740:	690f      	ldr	r7, [r1, #16]
 8003742:	2f00      	cmp	r7, #0
 8003744:	d0a9      	beq.n	800369a <__sflush_r+0x1a>
 8003746:	0793      	lsls	r3, r2, #30
 8003748:	680e      	ldr	r6, [r1, #0]
 800374a:	bf08      	it	eq
 800374c:	694b      	ldreq	r3, [r1, #20]
 800374e:	600f      	str	r7, [r1, #0]
 8003750:	bf18      	it	ne
 8003752:	2300      	movne	r3, #0
 8003754:	eba6 0807 	sub.w	r8, r6, r7
 8003758:	608b      	str	r3, [r1, #8]
 800375a:	f1b8 0f00 	cmp.w	r8, #0
 800375e:	dd9c      	ble.n	800369a <__sflush_r+0x1a>
 8003760:	4643      	mov	r3, r8
 8003762:	463a      	mov	r2, r7
 8003764:	6a21      	ldr	r1, [r4, #32]
 8003766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003768:	4628      	mov	r0, r5
 800376a:	47b0      	blx	r6
 800376c:	2800      	cmp	r0, #0
 800376e:	dc06      	bgt.n	800377e <__sflush_r+0xfe>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	f04f 30ff 	mov.w	r0, #4294967295
 800377c:	e78e      	b.n	800369c <__sflush_r+0x1c>
 800377e:	4407      	add	r7, r0
 8003780:	eba8 0800 	sub.w	r8, r8, r0
 8003784:	e7e9      	b.n	800375a <__sflush_r+0xda>
 8003786:	bf00      	nop
 8003788:	20400001 	.word	0x20400001

0800378c <_fflush_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	4605      	mov	r5, r0
 8003792:	460c      	mov	r4, r1
 8003794:	b1db      	cbz	r3, 80037ce <_fflush_r+0x42>
 8003796:	b118      	cbz	r0, 80037a0 <_fflush_r+0x14>
 8003798:	6983      	ldr	r3, [r0, #24]
 800379a:	b90b      	cbnz	r3, 80037a0 <_fflush_r+0x14>
 800379c:	f000 f860 	bl	8003860 <__sinit>
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <_fflush_r+0x48>)
 80037a2:	429c      	cmp	r4, r3
 80037a4:	d109      	bne.n	80037ba <_fflush_r+0x2e>
 80037a6:	686c      	ldr	r4, [r5, #4]
 80037a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ac:	b17b      	cbz	r3, 80037ce <_fflush_r+0x42>
 80037ae:	4621      	mov	r1, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037b6:	f7ff bf63 	b.w	8003680 <__sflush_r>
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <_fflush_r+0x4c>)
 80037bc:	429c      	cmp	r4, r3
 80037be:	d101      	bne.n	80037c4 <_fflush_r+0x38>
 80037c0:	68ac      	ldr	r4, [r5, #8]
 80037c2:	e7f1      	b.n	80037a8 <_fflush_r+0x1c>
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <_fflush_r+0x50>)
 80037c6:	429c      	cmp	r4, r3
 80037c8:	bf08      	it	eq
 80037ca:	68ec      	ldreq	r4, [r5, #12]
 80037cc:	e7ec      	b.n	80037a8 <_fflush_r+0x1c>
 80037ce:	2000      	movs	r0, #0
 80037d0:	bd38      	pop	{r3, r4, r5, pc}
 80037d2:	bf00      	nop
 80037d4:	08003f4c 	.word	0x08003f4c
 80037d8:	08003f6c 	.word	0x08003f6c
 80037dc:	08003f2c 	.word	0x08003f2c

080037e0 <std>:
 80037e0:	2300      	movs	r3, #0
 80037e2:	b510      	push	{r4, lr}
 80037e4:	4604      	mov	r4, r0
 80037e6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ea:	6083      	str	r3, [r0, #8]
 80037ec:	8181      	strh	r1, [r0, #12]
 80037ee:	6643      	str	r3, [r0, #100]	; 0x64
 80037f0:	81c2      	strh	r2, [r0, #14]
 80037f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037f6:	6183      	str	r3, [r0, #24]
 80037f8:	4619      	mov	r1, r3
 80037fa:	2208      	movs	r2, #8
 80037fc:	305c      	adds	r0, #92	; 0x5c
 80037fe:	f7ff fe13 	bl	8003428 <memset>
 8003802:	4b05      	ldr	r3, [pc, #20]	; (8003818 <std+0x38>)
 8003804:	6263      	str	r3, [r4, #36]	; 0x24
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <std+0x3c>)
 8003808:	62a3      	str	r3, [r4, #40]	; 0x28
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <std+0x40>)
 800380c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <std+0x44>)
 8003810:	6224      	str	r4, [r4, #32]
 8003812:	6323      	str	r3, [r4, #48]	; 0x30
 8003814:	bd10      	pop	{r4, pc}
 8003816:	bf00      	nop
 8003818:	08003bad 	.word	0x08003bad
 800381c:	08003bcf 	.word	0x08003bcf
 8003820:	08003c07 	.word	0x08003c07
 8003824:	08003c2b 	.word	0x08003c2b

08003828 <_cleanup_r>:
 8003828:	4901      	ldr	r1, [pc, #4]	; (8003830 <_cleanup_r+0x8>)
 800382a:	f000 b885 	b.w	8003938 <_fwalk_reent>
 800382e:	bf00      	nop
 8003830:	0800378d 	.word	0x0800378d

08003834 <__sfmoreglue>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	1e4a      	subs	r2, r1, #1
 8003838:	2568      	movs	r5, #104	; 0x68
 800383a:	4355      	muls	r5, r2
 800383c:	460e      	mov	r6, r1
 800383e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003842:	f000 f949 	bl	8003ad8 <_malloc_r>
 8003846:	4604      	mov	r4, r0
 8003848:	b140      	cbz	r0, 800385c <__sfmoreglue+0x28>
 800384a:	2100      	movs	r1, #0
 800384c:	e9c0 1600 	strd	r1, r6, [r0]
 8003850:	300c      	adds	r0, #12
 8003852:	60a0      	str	r0, [r4, #8]
 8003854:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003858:	f7ff fde6 	bl	8003428 <memset>
 800385c:	4620      	mov	r0, r4
 800385e:	bd70      	pop	{r4, r5, r6, pc}

08003860 <__sinit>:
 8003860:	6983      	ldr	r3, [r0, #24]
 8003862:	b510      	push	{r4, lr}
 8003864:	4604      	mov	r4, r0
 8003866:	bb33      	cbnz	r3, 80038b6 <__sinit+0x56>
 8003868:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800386c:	6503      	str	r3, [r0, #80]	; 0x50
 800386e:	4b12      	ldr	r3, [pc, #72]	; (80038b8 <__sinit+0x58>)
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <__sinit+0x5c>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6282      	str	r2, [r0, #40]	; 0x28
 8003876:	4298      	cmp	r0, r3
 8003878:	bf04      	itt	eq
 800387a:	2301      	moveq	r3, #1
 800387c:	6183      	streq	r3, [r0, #24]
 800387e:	f000 f81f 	bl	80038c0 <__sfp>
 8003882:	6060      	str	r0, [r4, #4]
 8003884:	4620      	mov	r0, r4
 8003886:	f000 f81b 	bl	80038c0 <__sfp>
 800388a:	60a0      	str	r0, [r4, #8]
 800388c:	4620      	mov	r0, r4
 800388e:	f000 f817 	bl	80038c0 <__sfp>
 8003892:	2200      	movs	r2, #0
 8003894:	60e0      	str	r0, [r4, #12]
 8003896:	2104      	movs	r1, #4
 8003898:	6860      	ldr	r0, [r4, #4]
 800389a:	f7ff ffa1 	bl	80037e0 <std>
 800389e:	2201      	movs	r2, #1
 80038a0:	2109      	movs	r1, #9
 80038a2:	68a0      	ldr	r0, [r4, #8]
 80038a4:	f7ff ff9c 	bl	80037e0 <std>
 80038a8:	2202      	movs	r2, #2
 80038aa:	2112      	movs	r1, #18
 80038ac:	68e0      	ldr	r0, [r4, #12]
 80038ae:	f7ff ff97 	bl	80037e0 <std>
 80038b2:	2301      	movs	r3, #1
 80038b4:	61a3      	str	r3, [r4, #24]
 80038b6:	bd10      	pop	{r4, pc}
 80038b8:	08003f28 	.word	0x08003f28
 80038bc:	08003829 	.word	0x08003829

080038c0 <__sfp>:
 80038c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c2:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <__sfp+0x70>)
 80038c4:	681e      	ldr	r6, [r3, #0]
 80038c6:	69b3      	ldr	r3, [r6, #24]
 80038c8:	4607      	mov	r7, r0
 80038ca:	b913      	cbnz	r3, 80038d2 <__sfp+0x12>
 80038cc:	4630      	mov	r0, r6
 80038ce:	f7ff ffc7 	bl	8003860 <__sinit>
 80038d2:	3648      	adds	r6, #72	; 0x48
 80038d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038d8:	3b01      	subs	r3, #1
 80038da:	d503      	bpl.n	80038e4 <__sfp+0x24>
 80038dc:	6833      	ldr	r3, [r6, #0]
 80038de:	b133      	cbz	r3, 80038ee <__sfp+0x2e>
 80038e0:	6836      	ldr	r6, [r6, #0]
 80038e2:	e7f7      	b.n	80038d4 <__sfp+0x14>
 80038e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038e8:	b16d      	cbz	r5, 8003906 <__sfp+0x46>
 80038ea:	3468      	adds	r4, #104	; 0x68
 80038ec:	e7f4      	b.n	80038d8 <__sfp+0x18>
 80038ee:	2104      	movs	r1, #4
 80038f0:	4638      	mov	r0, r7
 80038f2:	f7ff ff9f 	bl	8003834 <__sfmoreglue>
 80038f6:	6030      	str	r0, [r6, #0]
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d1f1      	bne.n	80038e0 <__sfp+0x20>
 80038fc:	230c      	movs	r3, #12
 80038fe:	603b      	str	r3, [r7, #0]
 8003900:	4604      	mov	r4, r0
 8003902:	4620      	mov	r0, r4
 8003904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <__sfp+0x74>)
 8003908:	6665      	str	r5, [r4, #100]	; 0x64
 800390a:	e9c4 5500 	strd	r5, r5, [r4]
 800390e:	60a5      	str	r5, [r4, #8]
 8003910:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003914:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003918:	2208      	movs	r2, #8
 800391a:	4629      	mov	r1, r5
 800391c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003920:	f7ff fd82 	bl	8003428 <memset>
 8003924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800392c:	e7e9      	b.n	8003902 <__sfp+0x42>
 800392e:	bf00      	nop
 8003930:	08003f28 	.word	0x08003f28
 8003934:	ffff0001 	.word	0xffff0001

08003938 <_fwalk_reent>:
 8003938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800393c:	4680      	mov	r8, r0
 800393e:	4689      	mov	r9, r1
 8003940:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003944:	2600      	movs	r6, #0
 8003946:	b914      	cbnz	r4, 800394e <_fwalk_reent+0x16>
 8003948:	4630      	mov	r0, r6
 800394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003952:	3f01      	subs	r7, #1
 8003954:	d501      	bpl.n	800395a <_fwalk_reent+0x22>
 8003956:	6824      	ldr	r4, [r4, #0]
 8003958:	e7f5      	b.n	8003946 <_fwalk_reent+0xe>
 800395a:	89ab      	ldrh	r3, [r5, #12]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d907      	bls.n	8003970 <_fwalk_reent+0x38>
 8003960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003964:	3301      	adds	r3, #1
 8003966:	d003      	beq.n	8003970 <_fwalk_reent+0x38>
 8003968:	4629      	mov	r1, r5
 800396a:	4640      	mov	r0, r8
 800396c:	47c8      	blx	r9
 800396e:	4306      	orrs	r6, r0
 8003970:	3568      	adds	r5, #104	; 0x68
 8003972:	e7ee      	b.n	8003952 <_fwalk_reent+0x1a>

08003974 <__swhatbuf_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	460e      	mov	r6, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	2900      	cmp	r1, #0
 800397e:	b096      	sub	sp, #88	; 0x58
 8003980:	4614      	mov	r4, r2
 8003982:	461d      	mov	r5, r3
 8003984:	da07      	bge.n	8003996 <__swhatbuf_r+0x22>
 8003986:	2300      	movs	r3, #0
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	89b3      	ldrh	r3, [r6, #12]
 800398c:	061a      	lsls	r2, r3, #24
 800398e:	d410      	bmi.n	80039b2 <__swhatbuf_r+0x3e>
 8003990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003994:	e00e      	b.n	80039b4 <__swhatbuf_r+0x40>
 8003996:	466a      	mov	r2, sp
 8003998:	f000 f96e 	bl	8003c78 <_fstat_r>
 800399c:	2800      	cmp	r0, #0
 800399e:	dbf2      	blt.n	8003986 <__swhatbuf_r+0x12>
 80039a0:	9a01      	ldr	r2, [sp, #4]
 80039a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039aa:	425a      	negs	r2, r3
 80039ac:	415a      	adcs	r2, r3
 80039ae:	602a      	str	r2, [r5, #0]
 80039b0:	e7ee      	b.n	8003990 <__swhatbuf_r+0x1c>
 80039b2:	2340      	movs	r3, #64	; 0x40
 80039b4:	2000      	movs	r0, #0
 80039b6:	6023      	str	r3, [r4, #0]
 80039b8:	b016      	add	sp, #88	; 0x58
 80039ba:	bd70      	pop	{r4, r5, r6, pc}

080039bc <__smakebuf_r>:
 80039bc:	898b      	ldrh	r3, [r1, #12]
 80039be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039c0:	079d      	lsls	r5, r3, #30
 80039c2:	4606      	mov	r6, r0
 80039c4:	460c      	mov	r4, r1
 80039c6:	d507      	bpl.n	80039d8 <__smakebuf_r+0x1c>
 80039c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	2301      	movs	r3, #1
 80039d2:	6163      	str	r3, [r4, #20]
 80039d4:	b002      	add	sp, #8
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	ab01      	add	r3, sp, #4
 80039da:	466a      	mov	r2, sp
 80039dc:	f7ff ffca 	bl	8003974 <__swhatbuf_r>
 80039e0:	9900      	ldr	r1, [sp, #0]
 80039e2:	4605      	mov	r5, r0
 80039e4:	4630      	mov	r0, r6
 80039e6:	f000 f877 	bl	8003ad8 <_malloc_r>
 80039ea:	b948      	cbnz	r0, 8003a00 <__smakebuf_r+0x44>
 80039ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f0:	059a      	lsls	r2, r3, #22
 80039f2:	d4ef      	bmi.n	80039d4 <__smakebuf_r+0x18>
 80039f4:	f023 0303 	bic.w	r3, r3, #3
 80039f8:	f043 0302 	orr.w	r3, r3, #2
 80039fc:	81a3      	strh	r3, [r4, #12]
 80039fe:	e7e3      	b.n	80039c8 <__smakebuf_r+0xc>
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <__smakebuf_r+0x7c>)
 8003a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	6020      	str	r0, [r4, #0]
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	81a3      	strh	r3, [r4, #12]
 8003a0e:	9b00      	ldr	r3, [sp, #0]
 8003a10:	6163      	str	r3, [r4, #20]
 8003a12:	9b01      	ldr	r3, [sp, #4]
 8003a14:	6120      	str	r0, [r4, #16]
 8003a16:	b15b      	cbz	r3, 8003a30 <__smakebuf_r+0x74>
 8003a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f000 f93d 	bl	8003c9c <_isatty_r>
 8003a22:	b128      	cbz	r0, 8003a30 <__smakebuf_r+0x74>
 8003a24:	89a3      	ldrh	r3, [r4, #12]
 8003a26:	f023 0303 	bic.w	r3, r3, #3
 8003a2a:	f043 0301 	orr.w	r3, r3, #1
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	431d      	orrs	r5, r3
 8003a34:	81a5      	strh	r5, [r4, #12]
 8003a36:	e7cd      	b.n	80039d4 <__smakebuf_r+0x18>
 8003a38:	08003829 	.word	0x08003829

08003a3c <_free_r>:
 8003a3c:	b538      	push	{r3, r4, r5, lr}
 8003a3e:	4605      	mov	r5, r0
 8003a40:	2900      	cmp	r1, #0
 8003a42:	d045      	beq.n	8003ad0 <_free_r+0x94>
 8003a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a48:	1f0c      	subs	r4, r1, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bfb8      	it	lt
 8003a4e:	18e4      	addlt	r4, r4, r3
 8003a50:	f000 f946 	bl	8003ce0 <__malloc_lock>
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <_free_r+0x98>)
 8003a56:	6813      	ldr	r3, [r2, #0]
 8003a58:	4610      	mov	r0, r2
 8003a5a:	b933      	cbnz	r3, 8003a6a <_free_r+0x2e>
 8003a5c:	6063      	str	r3, [r4, #4]
 8003a5e:	6014      	str	r4, [r2, #0]
 8003a60:	4628      	mov	r0, r5
 8003a62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a66:	f000 b93c 	b.w	8003ce2 <__malloc_unlock>
 8003a6a:	42a3      	cmp	r3, r4
 8003a6c:	d90c      	bls.n	8003a88 <_free_r+0x4c>
 8003a6e:	6821      	ldr	r1, [r4, #0]
 8003a70:	1862      	adds	r2, r4, r1
 8003a72:	4293      	cmp	r3, r2
 8003a74:	bf04      	itt	eq
 8003a76:	681a      	ldreq	r2, [r3, #0]
 8003a78:	685b      	ldreq	r3, [r3, #4]
 8003a7a:	6063      	str	r3, [r4, #4]
 8003a7c:	bf04      	itt	eq
 8003a7e:	1852      	addeq	r2, r2, r1
 8003a80:	6022      	streq	r2, [r4, #0]
 8003a82:	6004      	str	r4, [r0, #0]
 8003a84:	e7ec      	b.n	8003a60 <_free_r+0x24>
 8003a86:	4613      	mov	r3, r2
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	b10a      	cbz	r2, 8003a90 <_free_r+0x54>
 8003a8c:	42a2      	cmp	r2, r4
 8003a8e:	d9fa      	bls.n	8003a86 <_free_r+0x4a>
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	1858      	adds	r0, r3, r1
 8003a94:	42a0      	cmp	r0, r4
 8003a96:	d10b      	bne.n	8003ab0 <_free_r+0x74>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	4401      	add	r1, r0
 8003a9c:	1858      	adds	r0, r3, r1
 8003a9e:	4282      	cmp	r2, r0
 8003aa0:	6019      	str	r1, [r3, #0]
 8003aa2:	d1dd      	bne.n	8003a60 <_free_r+0x24>
 8003aa4:	6810      	ldr	r0, [r2, #0]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	605a      	str	r2, [r3, #4]
 8003aaa:	4401      	add	r1, r0
 8003aac:	6019      	str	r1, [r3, #0]
 8003aae:	e7d7      	b.n	8003a60 <_free_r+0x24>
 8003ab0:	d902      	bls.n	8003ab8 <_free_r+0x7c>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	e7d3      	b.n	8003a60 <_free_r+0x24>
 8003ab8:	6820      	ldr	r0, [r4, #0]
 8003aba:	1821      	adds	r1, r4, r0
 8003abc:	428a      	cmp	r2, r1
 8003abe:	bf04      	itt	eq
 8003ac0:	6811      	ldreq	r1, [r2, #0]
 8003ac2:	6852      	ldreq	r2, [r2, #4]
 8003ac4:	6062      	str	r2, [r4, #4]
 8003ac6:	bf04      	itt	eq
 8003ac8:	1809      	addeq	r1, r1, r0
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	605c      	str	r4, [r3, #4]
 8003ace:	e7c7      	b.n	8003a60 <_free_r+0x24>
 8003ad0:	bd38      	pop	{r3, r4, r5, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000094 	.word	0x20000094

08003ad8 <_malloc_r>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	1ccd      	adds	r5, r1, #3
 8003adc:	f025 0503 	bic.w	r5, r5, #3
 8003ae0:	3508      	adds	r5, #8
 8003ae2:	2d0c      	cmp	r5, #12
 8003ae4:	bf38      	it	cc
 8003ae6:	250c      	movcc	r5, #12
 8003ae8:	2d00      	cmp	r5, #0
 8003aea:	4606      	mov	r6, r0
 8003aec:	db01      	blt.n	8003af2 <_malloc_r+0x1a>
 8003aee:	42a9      	cmp	r1, r5
 8003af0:	d903      	bls.n	8003afa <_malloc_r+0x22>
 8003af2:	230c      	movs	r3, #12
 8003af4:	6033      	str	r3, [r6, #0]
 8003af6:	2000      	movs	r0, #0
 8003af8:	bd70      	pop	{r4, r5, r6, pc}
 8003afa:	f000 f8f1 	bl	8003ce0 <__malloc_lock>
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <_malloc_r+0xac>)
 8003b00:	6814      	ldr	r4, [r2, #0]
 8003b02:	4621      	mov	r1, r4
 8003b04:	b991      	cbnz	r1, 8003b2c <_malloc_r+0x54>
 8003b06:	4c20      	ldr	r4, [pc, #128]	; (8003b88 <_malloc_r+0xb0>)
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	b91b      	cbnz	r3, 8003b14 <_malloc_r+0x3c>
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	f000 f83d 	bl	8003b8c <_sbrk_r>
 8003b12:	6020      	str	r0, [r4, #0]
 8003b14:	4629      	mov	r1, r5
 8003b16:	4630      	mov	r0, r6
 8003b18:	f000 f838 	bl	8003b8c <_sbrk_r>
 8003b1c:	1c43      	adds	r3, r0, #1
 8003b1e:	d124      	bne.n	8003b6a <_malloc_r+0x92>
 8003b20:	230c      	movs	r3, #12
 8003b22:	6033      	str	r3, [r6, #0]
 8003b24:	4630      	mov	r0, r6
 8003b26:	f000 f8dc 	bl	8003ce2 <__malloc_unlock>
 8003b2a:	e7e4      	b.n	8003af6 <_malloc_r+0x1e>
 8003b2c:	680b      	ldr	r3, [r1, #0]
 8003b2e:	1b5b      	subs	r3, r3, r5
 8003b30:	d418      	bmi.n	8003b64 <_malloc_r+0x8c>
 8003b32:	2b0b      	cmp	r3, #11
 8003b34:	d90f      	bls.n	8003b56 <_malloc_r+0x7e>
 8003b36:	600b      	str	r3, [r1, #0]
 8003b38:	50cd      	str	r5, [r1, r3]
 8003b3a:	18cc      	adds	r4, r1, r3
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f000 f8d0 	bl	8003ce2 <__malloc_unlock>
 8003b42:	f104 000b 	add.w	r0, r4, #11
 8003b46:	1d23      	adds	r3, r4, #4
 8003b48:	f020 0007 	bic.w	r0, r0, #7
 8003b4c:	1ac3      	subs	r3, r0, r3
 8003b4e:	d0d3      	beq.n	8003af8 <_malloc_r+0x20>
 8003b50:	425a      	negs	r2, r3
 8003b52:	50e2      	str	r2, [r4, r3]
 8003b54:	e7d0      	b.n	8003af8 <_malloc_r+0x20>
 8003b56:	428c      	cmp	r4, r1
 8003b58:	684b      	ldr	r3, [r1, #4]
 8003b5a:	bf16      	itet	ne
 8003b5c:	6063      	strne	r3, [r4, #4]
 8003b5e:	6013      	streq	r3, [r2, #0]
 8003b60:	460c      	movne	r4, r1
 8003b62:	e7eb      	b.n	8003b3c <_malloc_r+0x64>
 8003b64:	460c      	mov	r4, r1
 8003b66:	6849      	ldr	r1, [r1, #4]
 8003b68:	e7cc      	b.n	8003b04 <_malloc_r+0x2c>
 8003b6a:	1cc4      	adds	r4, r0, #3
 8003b6c:	f024 0403 	bic.w	r4, r4, #3
 8003b70:	42a0      	cmp	r0, r4
 8003b72:	d005      	beq.n	8003b80 <_malloc_r+0xa8>
 8003b74:	1a21      	subs	r1, r4, r0
 8003b76:	4630      	mov	r0, r6
 8003b78:	f000 f808 	bl	8003b8c <_sbrk_r>
 8003b7c:	3001      	adds	r0, #1
 8003b7e:	d0cf      	beq.n	8003b20 <_malloc_r+0x48>
 8003b80:	6025      	str	r5, [r4, #0]
 8003b82:	e7db      	b.n	8003b3c <_malloc_r+0x64>
 8003b84:	20000094 	.word	0x20000094
 8003b88:	20000098 	.word	0x20000098

08003b8c <_sbrk_r>:
 8003b8c:	b538      	push	{r3, r4, r5, lr}
 8003b8e:	4c06      	ldr	r4, [pc, #24]	; (8003ba8 <_sbrk_r+0x1c>)
 8003b90:	2300      	movs	r3, #0
 8003b92:	4605      	mov	r5, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	f7fd fb3c 	bl	8001214 <_sbrk>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_sbrk_r+0x1a>
 8003ba0:	6823      	ldr	r3, [r4, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_sbrk_r+0x1a>
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20000128 	.word	0x20000128

08003bac <__sread>:
 8003bac:	b510      	push	{r4, lr}
 8003bae:	460c      	mov	r4, r1
 8003bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bb4:	f000 f896 	bl	8003ce4 <_read_r>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	bfab      	itete	ge
 8003bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8003bc0:	181b      	addge	r3, r3, r0
 8003bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bc6:	bfac      	ite	ge
 8003bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bca:	81a3      	strhlt	r3, [r4, #12]
 8003bcc:	bd10      	pop	{r4, pc}

08003bce <__swrite>:
 8003bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd2:	461f      	mov	r7, r3
 8003bd4:	898b      	ldrh	r3, [r1, #12]
 8003bd6:	05db      	lsls	r3, r3, #23
 8003bd8:	4605      	mov	r5, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	4616      	mov	r6, r2
 8003bde:	d505      	bpl.n	8003bec <__swrite+0x1e>
 8003be0:	2302      	movs	r3, #2
 8003be2:	2200      	movs	r2, #0
 8003be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003be8:	f000 f868 	bl	8003cbc <_lseek_r>
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	4632      	mov	r2, r6
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	4628      	mov	r0, r5
 8003bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c02:	f000 b817 	b.w	8003c34 <_write_r>

08003c06 <__sseek>:
 8003c06:	b510      	push	{r4, lr}
 8003c08:	460c      	mov	r4, r1
 8003c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0e:	f000 f855 	bl	8003cbc <_lseek_r>
 8003c12:	1c43      	adds	r3, r0, #1
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	bf15      	itete	ne
 8003c18:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c22:	81a3      	strheq	r3, [r4, #12]
 8003c24:	bf18      	it	ne
 8003c26:	81a3      	strhne	r3, [r4, #12]
 8003c28:	bd10      	pop	{r4, pc}

08003c2a <__sclose>:
 8003c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c2e:	f000 b813 	b.w	8003c58 <_close_r>
	...

08003c34 <_write_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4c07      	ldr	r4, [pc, #28]	; (8003c54 <_write_r+0x20>)
 8003c38:	4605      	mov	r5, r0
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	6022      	str	r2, [r4, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7fc fce6 	bl	8000614 <_write>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_write_r+0x1e>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_write_r+0x1e>
 8003c50:	602b      	str	r3, [r5, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20000128 	.word	0x20000128

08003c58 <_close_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4c06      	ldr	r4, [pc, #24]	; (8003c74 <_close_r+0x1c>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	f7fd faa1 	bl	80011aa <_close>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_close_r+0x1a>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_close_r+0x1a>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	20000128 	.word	0x20000128

08003c78 <_fstat_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4c07      	ldr	r4, [pc, #28]	; (8003c98 <_fstat_r+0x20>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4605      	mov	r5, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	6023      	str	r3, [r4, #0]
 8003c86:	f7fd fa9c 	bl	80011c2 <_fstat>
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	d102      	bne.n	8003c94 <_fstat_r+0x1c>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	b103      	cbz	r3, 8003c94 <_fstat_r+0x1c>
 8003c92:	602b      	str	r3, [r5, #0]
 8003c94:	bd38      	pop	{r3, r4, r5, pc}
 8003c96:	bf00      	nop
 8003c98:	20000128 	.word	0x20000128

08003c9c <_isatty_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4c06      	ldr	r4, [pc, #24]	; (8003cb8 <_isatty_r+0x1c>)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	6023      	str	r3, [r4, #0]
 8003ca8:	f7fd fa9b 	bl	80011e2 <_isatty>
 8003cac:	1c43      	adds	r3, r0, #1
 8003cae:	d102      	bne.n	8003cb6 <_isatty_r+0x1a>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	b103      	cbz	r3, 8003cb6 <_isatty_r+0x1a>
 8003cb4:	602b      	str	r3, [r5, #0]
 8003cb6:	bd38      	pop	{r3, r4, r5, pc}
 8003cb8:	20000128 	.word	0x20000128

08003cbc <_lseek_r>:
 8003cbc:	b538      	push	{r3, r4, r5, lr}
 8003cbe:	4c07      	ldr	r4, [pc, #28]	; (8003cdc <_lseek_r+0x20>)
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	4608      	mov	r0, r1
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	6022      	str	r2, [r4, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f7fd fa94 	bl	80011f8 <_lseek>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_lseek_r+0x1e>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_lseek_r+0x1e>
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000128 	.word	0x20000128

08003ce0 <__malloc_lock>:
 8003ce0:	4770      	bx	lr

08003ce2 <__malloc_unlock>:
 8003ce2:	4770      	bx	lr

08003ce4 <_read_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4c07      	ldr	r4, [pc, #28]	; (8003d04 <_read_r+0x20>)
 8003ce8:	4605      	mov	r5, r0
 8003cea:	4608      	mov	r0, r1
 8003cec:	4611      	mov	r1, r2
 8003cee:	2200      	movs	r2, #0
 8003cf0:	6022      	str	r2, [r4, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f7fd fa3c 	bl	8001170 <_read>
 8003cf8:	1c43      	adds	r3, r0, #1
 8003cfa:	d102      	bne.n	8003d02 <_read_r+0x1e>
 8003cfc:	6823      	ldr	r3, [r4, #0]
 8003cfe:	b103      	cbz	r3, 8003d02 <_read_r+0x1e>
 8003d00:	602b      	str	r3, [r5, #0]
 8003d02:	bd38      	pop	{r3, r4, r5, pc}
 8003d04:	20000128 	.word	0x20000128

08003d08 <_init>:
 8003d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0a:	bf00      	nop
 8003d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0e:	bc08      	pop	{r3}
 8003d10:	469e      	mov	lr, r3
 8003d12:	4770      	bx	lr

08003d14 <_fini>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr
