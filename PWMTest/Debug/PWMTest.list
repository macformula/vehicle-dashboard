
PWMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800445c  0800445c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800445c  0800445c  0001445c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004464  08004464  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004464  08004464  00014464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800446c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  080044dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080044dc  00020124  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6c7  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001901  00000000  00000000  0002b765  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002d068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002dae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b7a  00000000  00000000  0002e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a60  00000000  00000000  00056032  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f55d5  00000000  00000000  0005da92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153067  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  001530e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	080042ac 	.word	0x080042ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	080042ac 	.word	0x080042ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000600:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	e000      	b.n	800060c <ITM_SendChar+0x2c>
    {
      __NOP();
 800060a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800060c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <var_Timer_Init>:
}Timer_Init_args;


//Wrapper function that return default variables
static void var_Timer_Init(Timer_Init_args in)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b08d      	sub	sp, #52	; 0x34
 8000632:	af04      	add	r7, sp, #16
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t timer_out = in.timer;
 800063a:	793b      	ldrb	r3, [r7, #4]
 800063c:	77fb      	strb	r3, [r7, #31]
	uint16_t period_out = in.period;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	83bb      	strh	r3, [r7, #28]
	uint8_t do_trigger_ISR_out = in.do_trigger_ISR ? in.do_trigger_ISR :1;
 8000642:	7a3b      	ldrb	r3, [r7, #8]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <var_Timer_Init+0x1e>
 8000648:	7a3b      	ldrb	r3, [r7, #8]
 800064a:	e000      	b.n	800064e <var_Timer_Init+0x20>
 800064c:	2301      	movs	r3, #1
 800064e:	76fb      	strb	r3, [r7, #27]
	uint8_t channel_1_out = in.channel_1 ? in.channel_1 :1;
 8000650:	7a7b      	ldrb	r3, [r7, #9]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <var_Timer_Init+0x2c>
 8000656:	7a7b      	ldrb	r3, [r7, #9]
 8000658:	e000      	b.n	800065c <var_Timer_Init+0x2e>
 800065a:	2301      	movs	r3, #1
 800065c:	76bb      	strb	r3, [r7, #26]
	uint8_t channel_2_out = in.channel_2 ? in.channel_2 :1;
 800065e:	7abb      	ldrb	r3, [r7, #10]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <var_Timer_Init+0x3a>
 8000664:	7abb      	ldrb	r3, [r7, #10]
 8000666:	e000      	b.n	800066a <var_Timer_Init+0x3c>
 8000668:	2301      	movs	r3, #1
 800066a:	767b      	strb	r3, [r7, #25]
	uint8_t channel_3_out = in.channel_3 ? in.channel_3 :1;
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <var_Timer_Init+0x48>
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	e000      	b.n	8000678 <var_Timer_Init+0x4a>
 8000676:	2301      	movs	r3, #1
 8000678:	763b      	strb	r3, [r7, #24]
	uint8_t channel_4_out = in.channel_4 ? in.channel_4 :1;
 800067a:	7b3b      	ldrb	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <var_Timer_Init+0x56>
 8000680:	7b3b      	ldrb	r3, [r7, #12]
 8000682:	e000      	b.n	8000686 <var_Timer_Init+0x58>
 8000684:	2301      	movs	r3, #1
 8000686:	75fb      	strb	r3, [r7, #23]
	Timer_Init_Base(timer_out,period_out,do_trigger_ISR_out,channel_1_out,channel_2_out,channel_3_out,channel_4_out);
 8000688:	7ebc      	ldrb	r4, [r7, #26]
 800068a:	7efa      	ldrb	r2, [r7, #27]
 800068c:	8bb9      	ldrh	r1, [r7, #28]
 800068e:	7ff8      	ldrb	r0, [r7, #31]
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	7e3b      	ldrb	r3, [r7, #24]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	7e7b      	ldrb	r3, [r7, #25]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4623      	mov	r3, r4
 800069e:	f000 fb0d 	bl	8000cbc <Timer_Init_Base>
}
 80006a2:	bf00      	nop
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}

080006aa <_write>:


int _write(int file, char *ptr, int len) //printf to SWV ITM
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i<len ; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	e009      	b.n	80006d4 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff89 	bl	80005e0 <ITM_SendChar>
	for(i = 0 ; i<len ; i++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf1      	blt.n	80006c0 <_write+0x16>
	}
	return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_TIM_PeriodElapsedCallback>:

//ISR on timer overflow
uint16_t timer_1_repetition_counter = 0;
uint16_t timer_2_repetition_counter = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) //ISR triggered by timer overflow
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	//Change values below to desired multiplier
	uint16_t TIMER_1_PERIOD_MULTIPLIER = 0; //Timer period X TIMER_1_PERIOD_MULTIPLIER = period for timer 1 ISR
 80006f0:	2300      	movs	r3, #0
 80006f2:	81fb      	strh	r3, [r7, #14]
	uint16_t TIMER_2_PERIOD_MULTIPLIER = 0; //Timer period X TIMER_2_PERIOD_MULTIPLIER = period for timer 2 ISR
 80006f4:	2300      	movs	r3, #0
 80006f6:	81bb      	strh	r3, [r7, #12]


    if (htim == &htim1 && timer_1_repetition_counter == TIMER_1_PERIOD_MULTIPLIER)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d10c      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x32>
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	89fa      	ldrh	r2, [r7, #14]
 8000706:	429a      	cmp	r2, r3
 8000708:	d107      	bne.n	800071a <HAL_TIM_PeriodElapsedCallback+0x32>
    {
       //ISR for Timer 1
       //User code here

       HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800070a:	2101      	movs	r1, #1
 800070c:	481a      	ldr	r0, [pc, #104]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800070e:	f001 f91a 	bl	8001946 <HAL_GPIO_TogglePin>

       //User code ends
	   timer_1_repetition_counter = 0;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	801a      	strh	r2, [r3, #0]
 8000718:	e009      	b.n	800072e <HAL_TIM_PeriodElapsedCallback+0x46>
    }
    else if(htim == &htim1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d105      	bne.n	800072e <HAL_TIM_PeriodElapsedCallback+0x46>
    {
    	timer_1_repetition_counter++;
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b12      	ldr	r3, [pc, #72]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800072c:	801a      	strh	r2, [r3, #0]
    }

    if(htim == &htim2 && timer_2_repetition_counter == TIMER_2_PERIOD_MULTIPLIER)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a12      	ldr	r2, [pc, #72]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d10d      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000738:	881b      	ldrh	r3, [r3, #0]
 800073a:	89ba      	ldrh	r2, [r7, #12]
 800073c:	429a      	cmp	r2, r3
 800073e:	d108      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x6a>
    {
        //ISR for Timer 2
       //User code here

       HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000740:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000744:	480c      	ldr	r0, [pc, #48]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000746:	f001 f8fe 	bl	8001946 <HAL_GPIO_TogglePin>

       //User code ends
	   timer_2_repetition_counter = 0;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	801a      	strh	r2, [r3, #0]
    else if(htim == &htim2)
    {
    	timer_2_repetition_counter++;
    }

}
 8000750:	e009      	b.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x7e>
    else if(htim == &htim2)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a09      	ldr	r2, [pc, #36]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d105      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x7e>
    	timer_2_repetition_counter++;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800075c:	881b      	ldrh	r3, [r3, #0]
 800075e:	3301      	adds	r3, #1
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b07      	ldr	r3, [pc, #28]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000764:	801a      	strh	r2, [r3, #0]
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000009c 	.word	0x2000009c
 8000774:	2000008c 	.word	0x2000008c
 8000778:	40020400 	.word	0x40020400
 800077c:	200000dc 	.word	0x200000dc
 8000780:	2000008e 	.word	0x2000008e

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fdaa 	bl	80012e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f84b 	bl	8000828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 fa23 	bl	8000bdc <MX_GPIO_Init>
   * - Timer 1 period should be half of timer 2
   * - PWM should be running on all four channels for both timers
   * - After period is elapsed for each timer, two on-board LEDs should toggle On/Off (caused by the ISR)
   * - HAL_TIM_PeriodElapsedCallback(...) controls the ISR
   */
  Timer_Init(1, 500);
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	811a      	strh	r2, [r3, #8]
 80007a0:	2301      	movs	r3, #1
 80007a2:	703b      	strb	r3, [r7, #0]
 80007a4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007a8:	807b      	strh	r3, [r7, #2]
 80007aa:	463b      	mov	r3, r7
 80007ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007b0:	f7ff ff3d 	bl	800062e <var_Timer_Init>
  Timer_Init(2, 1000);
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	811a      	strh	r2, [r3, #8]
 80007c0:	2302      	movs	r3, #2
 80007c2:	733b      	strb	r3, [r7, #12]
 80007c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c8:	81fb      	strh	r3, [r7, #14]
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007d2:	f7ff ff2c 	bl	800062e <var_Timer_Init>

  PWM_Init(2,1,20);
 80007d6:	2214      	movs	r2, #20
 80007d8:	2101      	movs	r1, #1
 80007da:	2002      	movs	r0, #2
 80007dc:	f000 fafa 	bl	8000dd4 <PWM_Init>
  PWM_Init(2,2,40);
 80007e0:	2228      	movs	r2, #40	; 0x28
 80007e2:	2102      	movs	r1, #2
 80007e4:	2002      	movs	r0, #2
 80007e6:	f000 faf5 	bl	8000dd4 <PWM_Init>
  PWM_Init(2,3,60);
 80007ea:	223c      	movs	r2, #60	; 0x3c
 80007ec:	2103      	movs	r1, #3
 80007ee:	2002      	movs	r0, #2
 80007f0:	f000 faf0 	bl	8000dd4 <PWM_Init>
  PWM_Init(2,4,80);
 80007f4:	2250      	movs	r2, #80	; 0x50
 80007f6:	2104      	movs	r1, #4
 80007f8:	2002      	movs	r0, #2
 80007fa:	f000 faeb 	bl	8000dd4 <PWM_Init>

  PWM_Init(1,1,20);
 80007fe:	2214      	movs	r2, #20
 8000800:	2101      	movs	r1, #1
 8000802:	2001      	movs	r0, #1
 8000804:	f000 fae6 	bl	8000dd4 <PWM_Init>
  PWM_Init(1,2,40);
 8000808:	2228      	movs	r2, #40	; 0x28
 800080a:	2102      	movs	r1, #2
 800080c:	2001      	movs	r0, #1
 800080e:	f000 fae1 	bl	8000dd4 <PWM_Init>
  PWM_Init(1,3,60);
 8000812:	223c      	movs	r2, #60	; 0x3c
 8000814:	2103      	movs	r1, #3
 8000816:	2001      	movs	r0, #1
 8000818:	f000 fadc 	bl	8000dd4 <PWM_Init>
  PWM_Init(1,4,80);
 800081c:	2250      	movs	r2, #80	; 0x50
 800081e:	2104      	movs	r1, #4
 8000820:	2001      	movs	r0, #1
 8000822:	f000 fad7 	bl	8000dd4 <PWM_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000826:	e7fe      	b.n	8000826 <main+0xa2>

08000828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b094      	sub	sp, #80	; 0x50
 800082c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2234      	movs	r2, #52	; 0x34
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fde8 	bl	800340c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <SystemClock_Config+0xb0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <SystemClock_Config+0xb0>)
 8000852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <SystemClock_Config+0xb0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <SystemClock_Config+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800086c:	4a1b      	ldr	r2, [pc, #108]	; (80008dc <SystemClock_Config+0xb4>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	4b19      	ldr	r3, [pc, #100]	; (80008dc <SystemClock_Config+0xb4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000880:	2302      	movs	r3, #2
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2310      	movs	r3, #16
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800088c:	2300      	movs	r3, #0
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4618      	mov	r0, r3
 8000896:	f001 f871 	bl	800197c <HAL_RCC_OscConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80008a0:	f000 fb36 	bl	8000f10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a4:	230f      	movs	r3, #15
 80008a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fb0a 	bl	8001ed8 <HAL_RCC_ClockConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80008ca:	f000 fb21 	bl	8000f10 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	3750      	adds	r7, #80	; 0x50
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000

080008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param Prescaler, channel 1 init, channel 2 init, channel 3 init, channel 4 init,
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b09c      	sub	sp, #112	; 0x70
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	4608      	mov	r0, r1
 80008ea:	4611      	mov	r1, r2
 80008ec:	461a      	mov	r2, r3
 80008ee:	4603      	mov	r3, r0
 80008f0:	70fb      	strb	r3, [r7, #3]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70bb      	strb	r3, [r7, #2]
 80008f6:	4613      	mov	r3, r2
 80008f8:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
 8000924:	615a      	str	r2, [r3, #20]
 8000926:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	222c      	movs	r2, #44	; 0x2c
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f002 fd6b 	bl	800340c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Prescaler = prescaler;
 8000936:	4a57      	ldr	r2, [pc, #348]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6053      	str	r3, [r2, #4]
  htim1.Init.Period = COUNTER_PERIOD;
 800093c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000940:	461a      	mov	r2, r3
 8000942:	4b54      	ldr	r3, [pc, #336]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000944:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000946:	4b53      	ldr	r3, [pc, #332]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000948:	4a53      	ldr	r2, [pc, #332]	; (8000a98 <MX_TIM1_Init+0x1b8>)
 800094a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 800094c:	4a51      	ldr	r2, [pc, #324]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b50      	ldr	r3, [pc, #320]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD;
 8000958:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800095c:	461a      	mov	r2, r3
 800095e:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000960:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b4c      	ldr	r3, [pc, #304]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000968:	4b4a      	ldr	r3, [pc, #296]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 800096a:	2200      	movs	r2, #0
 800096c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096e:	4b49      	ldr	r3, [pc, #292]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000974:	4847      	ldr	r0, [pc, #284]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000976:	f001 fc4d 	bl	8002214 <HAL_TIM_Base_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000980:	f000 fac6 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800098a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800098e:	4619      	mov	r1, r3
 8000990:	4840      	ldr	r0, [pc, #256]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000992:	f001 ff47 	bl	8002824 <HAL_TIM_ConfigClockSource>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800099c:	f000 fab8 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009a0:	483c      	ldr	r0, [pc, #240]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 80009a2:	f001 fc8d 	bl	80022c0 <HAL_TIM_PWM_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80009ac:	f000 fab0 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b0:	2300      	movs	r3, #0
 80009b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009c0:	4619      	mov	r1, r3
 80009c2:	4834      	ldr	r0, [pc, #208]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 80009c4:	f002 fbce 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80009ce:	f000 fa9f 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d2:	2360      	movs	r3, #96	; 0x60
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009de:	2300      	movs	r3, #0
 80009e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009e6:	2300      	movs	r3, #0
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009ea:	2300      	movs	r3, #0
 80009ec:	653b      	str	r3, [r7, #80]	; 0x50
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }*/
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	481b      	ldr	r0, [pc, #108]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000a26:	f002 fc2b 	bl	8003280 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000a30:	f000 fa6e 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  //Channel configuration
  if (channel_1==1)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d106      	bne.n	8000a48 <MX_TIM1_Init+0x168>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000a3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a3e:	2200      	movs	r2, #0
 8000a40:	4619      	mov	r1, r3
 8000a42:	4814      	ldr	r0, [pc, #80]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000a44:	f001 fdd6 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 8000a48:	78bb      	ldrb	r3, [r7, #2]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d106      	bne.n	8000a5c <MX_TIM1_Init+0x17c>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 8000a4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000a58:	f001 fdcc 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 8000a5c:	787b      	ldrb	r3, [r7, #1]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d106      	bne.n	8000a70 <MX_TIM1_Init+0x190>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000a62:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a66:	2208      	movs	r2, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480a      	ldr	r0, [pc, #40]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000a6c:	f001 fdc2 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 8000a70:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d106      	bne.n	8000a86 <MX_TIM1_Init+0x1a6>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8000a78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000a82:	f001 fdb7 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <MX_TIM1_Init+0x1b4>)
 8000a88:	f000 faaa 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000a8c:	bf00      	nop
 8000a8e:	3770      	adds	r7, #112	; 0x70
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000009c 	.word	0x2000009c
 8000a98:	40010000 	.word	0x40010000

08000a9c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param Prescaler, channel 1 init, channel 2 init, channel 3 init, channel 4 init,
  * @retval None
  */
static void MX_TIM2_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	; 0x40
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4603      	mov	r3, r0
 8000aac:	70fb      	strb	r3, [r7, #3]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	70bb      	strb	r3, [r7, #2]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad0:	f107 0308 	add.w	r3, r7, #8
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
 8000ae0:	615a      	str	r2, [r3, #20]
 8000ae2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000ae6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 8000aec:	4a3a      	ldr	r2, [pc, #232]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af2:	4b39      	ldr	r3, [pc, #228]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_PERIOD;
 8000af8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b02:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b33      	ldr	r3, [pc, #204]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b0e:	4832      	ldr	r0, [pc, #200]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b10:	f001 fb80 	bl	8002214 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000b1a:	f000 f9f9 	bl	8000f10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b28:	4619      	mov	r1, r3
 8000b2a:	482b      	ldr	r0, [pc, #172]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b2c:	f001 fe7a 	bl	8002824 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b36:	f000 f9eb 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b3a:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b3c:	f001 fbc0 	bl	80022c0 <HAL_TIM_PWM_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000b46:	f000 f9e3 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b56:	4619      	mov	r1, r3
 8000b58:	481f      	ldr	r0, [pc, #124]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b5a:	f002 fb03 	bl	8003164 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000b64:	f000 f9d4 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b68:	2360      	movs	r3, #96	; 0x60
 8000b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b70:	2300      	movs	r3, #0
 8000b72:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61bb      	str	r3, [r7, #24]
    Error_Handler();
  }*/
  /* USER CODE BEGIN TIM2_Init 2 */

  //Channel configuration
  if (channel_1==1)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d106      	bne.n	8000b8c <MX_TIM2_Init+0xf0>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	2200      	movs	r2, #0
 8000b84:	4619      	mov	r1, r3
 8000b86:	4814      	ldr	r0, [pc, #80]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b88:	f001 fd34 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 8000b8c:	78bb      	ldrb	r3, [r7, #2]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d106      	bne.n	8000ba0 <MX_TIM2_Init+0x104>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	2204      	movs	r2, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000b9c:	f001 fd2a 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 8000ba0:	787b      	ldrb	r3, [r7, #1]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d106      	bne.n	8000bb4 <MX_TIM2_Init+0x118>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2208      	movs	r2, #8
 8000bac:	4619      	mov	r1, r3
 8000bae:	480a      	ldr	r0, [pc, #40]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000bb0:	f001 fd20 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 8000bb4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d106      	bne.n	8000bca <MX_TIM2_Init+0x12e>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000bbc:	f107 0308 	add.w	r3, r7, #8
 8000bc0:	220c      	movs	r2, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4804      	ldr	r0, [pc, #16]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000bc6:	f001 fd15 	bl	80025f4 <HAL_TIM_PWM_ConfigChannel>
  }
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bca:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM2_Init+0x13c>)
 8000bcc:	f000 fa08 	bl	8000fe0 <HAL_TIM_MspPostInit>

}
 8000bd0:	bf00      	nop
 8000bd2:	3740      	adds	r7, #64	; 0x40
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	200000dc 	.word	0x200000dc

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a28      	ldr	r2, [pc, #160]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a22      	ldr	r2, [pc, #136]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c28:	f043 0310 	orr.w	r3, r3, #16
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b20      	ldr	r3, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0310 	and.w	r3, r3, #16
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c40:	f043 0308 	orr.w	r3, r3, #8
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b1a      	ldr	r3, [pc, #104]	; (8000cb0 <MX_GPIO_Init+0xd4>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0308 	and.w	r3, r3, #8
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c58:	4816      	ldr	r0, [pc, #88]	; (8000cb4 <MX_GPIO_Init+0xd8>)
 8000c5a:	f000 fe5b 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c64:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000c66:	f000 fe55 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c6a:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <MX_GPIO_Init+0xd8>)
 8000c84:	f000 fc9c 	bl	80015c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 8000c88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_GPIO_Init+0xdc>)
 8000ca2:	f000 fc8d 	bl	80015c0 <HAL_GPIO_Init>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020400 	.word	0x40020400
 8000cb8:	40020c00 	.word	0x40020c00

08000cbc <Timer_Init_Base>:
  * @brief Initialize timer n on channel m for s milli seconds with ISR
  * @param Timer number, period (milliseconds), Trigger the Interrupt Service Routine(2=True 1=False), channel 1 init, channel 2 init, channel 3 init, channel 4 init
  * @retval None
  */
static void Timer_Init_Base(uint8_t timer, uint16_t period, uint8_t do_trigger_ISR, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b087      	sub	sp, #28
 8000cc0:	af02      	add	r7, sp, #8
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	4608      	mov	r0, r1
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4623      	mov	r3, r4
 8000ccc:	71fb      	strb	r3, [r7, #7]
 8000cce:	4603      	mov	r3, r0
 8000cd0:	80bb      	strh	r3, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	71bb      	strb	r3, [r7, #6]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	70fb      	strb	r3, [r7, #3]
	if (period > 0 && period <65536)
 8000cda:	88bb      	ldrh	r3, [r7, #4]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d034      	beq.n	8000d4a <Timer_Init_Base+0x8e>
	{
		uint32_t prescaler = Calculate_Prescaler(period); //max period value is 2^16-1
 8000ce0:	88bb      	ldrh	r3, [r7, #4]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f844 	bl	8000d70 <Calculate_Prescaler>
 8000ce8:	60f8      	str	r0, [r7, #12]

		switch (timer)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d002      	beq.n	8000cf6 <Timer_Init_Base+0x3a>
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d013      	beq.n	8000d1c <Timer_Init_Base+0x60>
 8000cf4:	e025      	b.n	8000d42 <Timer_Init_Base+0x86>
		{
			case (1):
				MX_TIM1_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 8000cf6:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000cfa:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cfe:	78f9      	ldrb	r1, [r7, #3]
 8000d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	4603      	mov	r3, r0
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fde9 	bl	80008e0 <MX_TIM1_Init>
				if(do_trigger_ISR==1)
 8000d0e:	79bb      	ldrb	r3, [r7, #6]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d11e      	bne.n	8000d52 <Timer_Init_Base+0x96>
				{
					HAL_TIM_Base_Start_IT(&htim1);
 8000d14:	4812      	ldr	r0, [pc, #72]	; (8000d60 <Timer_Init_Base+0xa4>)
 8000d16:	f001 faa9 	bl	800226c <HAL_TIM_Base_Start_IT>
				}
				break;
 8000d1a:	e01a      	b.n	8000d52 <Timer_Init_Base+0x96>
			case (2):
				MX_TIM2_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 8000d1c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000d20:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d24:	78f9      	ldrb	r1, [r7, #3]
 8000d26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	68f8      	ldr	r0, [r7, #12]
 8000d30:	f7ff feb4 	bl	8000a9c <MX_TIM2_Init>
				if(do_trigger_ISR==1)
 8000d34:	79bb      	ldrb	r3, [r7, #6]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10d      	bne.n	8000d56 <Timer_Init_Base+0x9a>
						{
							HAL_TIM_Base_Start_IT(&htim2);
 8000d3a:	480a      	ldr	r0, [pc, #40]	; (8000d64 <Timer_Init_Base+0xa8>)
 8000d3c:	f001 fa96 	bl	800226c <HAL_TIM_Base_Start_IT>
						}
				break;
 8000d40:	e009      	b.n	8000d56 <Timer_Init_Base+0x9a>
			default:
				printf("Invalid Timer argument. Should be either '1' or '2'.\n");
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <Timer_Init_Base+0xac>)
 8000d44:	f002 fbde 	bl	8003504 <puts>

	else
	{
		printf("Invalid Period argument. Should be >0 and <65536");
	}
}
 8000d48:	e006      	b.n	8000d58 <Timer_Init_Base+0x9c>
		printf("Invalid Period argument. Should be >0 and <65536");
 8000d4a:	4808      	ldr	r0, [pc, #32]	; (8000d6c <Timer_Init_Base+0xb0>)
 8000d4c:	f002 fb66 	bl	800341c <iprintf>
}
 8000d50:	e002      	b.n	8000d58 <Timer_Init_Base+0x9c>
				break;
 8000d52:	bf00      	nop
 8000d54:	e000      	b.n	8000d58 <Timer_Init_Base+0x9c>
				break;
 8000d56:	bf00      	nop
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd90      	pop	{r4, r7, pc}
 8000d60:	2000009c 	.word	0x2000009c
 8000d64:	200000dc 	.word	0x200000dc
 8000d68:	080042c4 	.word	0x080042c4
 8000d6c:	080042fc 	.word	0x080042fc

08000d70 <Calculate_Prescaler>:
  * @brief Calculate the prescaler necessary to operate desired PWM
  * @param period
  * @retval prescaler
  */
uint32_t Calculate_Prescaler(uint16_t period)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	uint32_t prescaler = ((HAL_RCC_GetSysClockFreq()*(float)period)/(COUNTER_PERIOD+1))-1;
 8000d7a:	f001 f999 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 8000d7e:	ee07 0a90 	vmov	s15, r0
 8000d82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	ee07 3a90 	vmov	s15, r3
 8000d8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d90:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d94:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000d98:	3301      	adds	r3, #1
 8000d9a:	ee07 3a90 	vmov	s15, r3
 8000d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000daa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000db2:	ee17 3a90 	vmov	r3, s15
 8000db6:	60fb      	str	r3, [r7, #12]
	prescaler /= 1000;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <Calculate_Prescaler+0x60>)
 8000dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc0:	099b      	lsrs	r3, r3, #6
 8000dc2:	60fb      	str	r3, [r7, #12]
	return prescaler;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	10624dd3 	.word	0x10624dd3

08000dd4 <PWM_Init>:
  * @brief Take initialized timer, channel and desired duty cycle and initialize PWM
  * @param Timer, channel, duty cycle
  * @retval None
  */
static void PWM_Init(uint8_t timer, uint8_t channel, uint8_t duty_cycle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	460b      	mov	r3, r1
 8000de0:	71bb      	strb	r3, [r7, #6]
 8000de2:	4613      	mov	r3, r2
 8000de4:	717b      	strb	r3, [r7, #5]

	TIM_HandleTypeDef* desired_timer;
	uint32_t desired_channel;

	//Calculate the pulse
	uint16_t ticks_on_per_cycle = Calculate_Ticks_On_Per_Cycle(duty_cycle);
 8000de6:	797b      	ldrb	r3, [r7, #5]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f86d 	bl	8000ec8 <Calculate_Ticks_On_Per_Cycle>
 8000dee:	4603      	mov	r3, r0
 8000df0:	81fb      	strh	r3, [r7, #14]

	//Find desired timer
	switch(timer)
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d002      	beq.n	8000dfe <PWM_Init+0x2a>
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d003      	beq.n	8000e04 <PWM_Init+0x30>
 8000dfc:	e005      	b.n	8000e0a <PWM_Init+0x36>
	{
		case(1):
			desired_timer = &htim1;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <PWM_Init+0xe4>)
 8000e00:	617b      	str	r3, [r7, #20]
			break;
 8000e02:	e005      	b.n	8000e10 <PWM_Init+0x3c>
		case(2):
			desired_timer = &htim2;
 8000e04:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <PWM_Init+0xe8>)
 8000e06:	617b      	str	r3, [r7, #20]
			break;
 8000e08:	e002      	b.n	8000e10 <PWM_Init+0x3c>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.\n");
 8000e0a:	482d      	ldr	r0, [pc, #180]	; (8000ec0 <PWM_Init+0xec>)
 8000e0c:	f002 fb7a 	bl	8003504 <puts>
	}

	//Find desired channel
	switch(channel)
 8000e10:	79bb      	ldrb	r3, [r7, #6]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d817      	bhi.n	8000e48 <PWM_Init+0x74>
 8000e18:	a201      	add	r2, pc, #4	; (adr r2, 8000e20 <PWM_Init+0x4c>)
 8000e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1e:	bf00      	nop
 8000e20:	08000e31 	.word	0x08000e31
 8000e24:	08000e37 	.word	0x08000e37
 8000e28:	08000e3d 	.word	0x08000e3d
 8000e2c:	08000e43 	.word	0x08000e43
	{
		case(1):
			desired_channel = TIM_CHANNEL_1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
			break;
 8000e34:	e00b      	b.n	8000e4e <PWM_Init+0x7a>
		case(2):
			desired_channel = TIM_CHANNEL_2;
 8000e36:	2304      	movs	r3, #4
 8000e38:	613b      	str	r3, [r7, #16]
			break;
 8000e3a:	e008      	b.n	8000e4e <PWM_Init+0x7a>
		case(3):
			desired_channel = TIM_CHANNEL_3;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	613b      	str	r3, [r7, #16]
			break;
 8000e40:	e005      	b.n	8000e4e <PWM_Init+0x7a>
		case(4):
			desired_channel = TIM_CHANNEL_4;
 8000e42:	230c      	movs	r3, #12
 8000e44:	613b      	str	r3, [r7, #16]
			break;
 8000e46:	e002      	b.n	8000e4e <PWM_Init+0x7a>
		default:
			printf("Invalid channel argument. Should be an integer within range [1,4].\n");
 8000e48:	481e      	ldr	r0, [pc, #120]	; (8000ec4 <PWM_Init+0xf0>)
 8000e4a:	f002 fb5b 	bl	8003504 <puts>
	}

	//Initiate the PWM and desired duty cycle
    HAL_TIM_PWM_Start(desired_timer, desired_channel);
 8000e4e:	6939      	ldr	r1, [r7, #16]
 8000e50:	6978      	ldr	r0, [r7, #20]
 8000e52:	f001 fa6b 	bl	800232c <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d104      	bne.n	8000e66 <PWM_Init+0x92>
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	89fa      	ldrh	r2, [r7, #14]
 8000e62:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e64:	e023      	b.n	8000eae <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	2b04      	cmp	r3, #4
 8000e6a:	d104      	bne.n	8000e76 <PWM_Init+0xa2>
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	89fa      	ldrh	r2, [r7, #14]
 8000e72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e74:	e01b      	b.n	8000eae <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	2b08      	cmp	r3, #8
 8000e7a:	d104      	bne.n	8000e86 <PWM_Init+0xb2>
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	89fa      	ldrh	r2, [r7, #14]
 8000e82:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e84:	e013      	b.n	8000eae <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	2b0c      	cmp	r3, #12
 8000e8a:	d104      	bne.n	8000e96 <PWM_Init+0xc2>
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	89fa      	ldrh	r2, [r7, #14]
 8000e92:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e94:	e00b      	b.n	8000eae <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	2b10      	cmp	r3, #16
 8000e9a:	d104      	bne.n	8000ea6 <PWM_Init+0xd2>
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	89fa      	ldrh	r2, [r7, #14]
 8000ea2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000ea4:	e003      	b.n	8000eae <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	89fa      	ldrh	r2, [r7, #14]
 8000eac:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000009c 	.word	0x2000009c
 8000ebc:	200000dc 	.word	0x200000dc
 8000ec0:	080042c4 	.word	0x080042c4
 8000ec4:	08004330 	.word	0x08004330

08000ec8 <Calculate_Ticks_On_Per_Cycle>:
  * @brief Calculate the duty cycle in ticks
  * @param duty cycle
  * @retval Ticks per cycle
  */
uint16_t Calculate_Ticks_On_Per_Cycle(uint8_t duty_cycle)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	uint16_t ticks_on_per_cycle;
	//CHECK TO MAKE SURE DUTY CYCLE IS WITHIN [0,100]
	if (duty_cycle>=0 && duty_cycle <=100)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b64      	cmp	r3, #100	; 0x64
 8000ed6:	d80c      	bhi.n	8000ef2 <Calculate_Ticks_On_Per_Cycle+0x2a>
	{
		ticks_on_per_cycle = (duty_cycle*COUNTER_PERIOD)/100;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4a09      	ldr	r2, [pc, #36]	; (8000f08 <Calculate_Ticks_On_Per_Cycle+0x40>)
 8000ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee8:	1152      	asrs	r2, r2, #5
 8000eea:	17db      	asrs	r3, r3, #31
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	81fb      	strh	r3, [r7, #14]
 8000ef0:	e004      	b.n	8000efc <Calculate_Ticks_On_Per_Cycle+0x34>
	}

	else
	{
		ticks_on_per_cycle = 0; //Default value
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	81fb      	strh	r3, [r7, #14]
		printf("Invalid Duty Cycle argument. Should be within range [0,100].\n");
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <Calculate_Ticks_On_Per_Cycle+0x44>)
 8000ef8:	f002 fb04 	bl	8003504 <puts>
	}
	return ticks_on_per_cycle;
 8000efc:	89fb      	ldrh	r3, [r7, #14]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	51eb851f 	.word	0x51eb851f
 8000f0c:	08004374 	.word	0x08004374

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <Error_Handler+0x6>

08000f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_MspInit+0x44>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a0e      	ldr	r2, [pc, #56]	; (8000f5c <HAL_MspInit+0x44>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_MspInit+0x44>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_MspInit+0x44>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x44>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x44>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_TIM_Base_MspInit+0x78>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d114      	bne.n	8000f9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2019      	movs	r0, #25
 8000f90:	f000 fadf 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f94:	2019      	movs	r0, #25
 8000f96:	f000 faf8 	bl	800158a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f9a:	e018      	b.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fa4:	d113      	bne.n	8000fce <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_TIM_Base_MspInit+0x7c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201c      	movs	r0, #28
 8000fc4:	f000 fac5 	bl	8001552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc8:	201c      	movs	r0, #28
 8000fca:	f000 fade 	bl	800158a <HAL_NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_TIM_MspPostInit+0xe4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d11d      	bne.n	800103e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0310 	and.w	r3, r3, #16
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 800101a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800102c:	2301      	movs	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <HAL_TIM_MspPostInit+0xec>)
 8001038:	f000 fac2 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800103c:	e03d      	b.n	80010ba <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001046:	d138      	bne.n	80010ba <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104c:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6313      	str	r3, [r2, #48]	; 0x30
 8001054:	4b1c      	ldr	r3, [pc, #112]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001058:	f003 0301 	and.w	r3, r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	4b19      	ldr	r3, [pc, #100]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001064:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	6313      	str	r3, [r2, #48]	; 0x30
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_TIM_MspPostInit+0xe8>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001078:	2320      	movs	r3, #32
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001088:	2301      	movs	r3, #1
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	4619      	mov	r1, r3
 8001092:	480f      	ldr	r0, [pc, #60]	; (80010d0 <HAL_TIM_MspPostInit+0xf0>)
 8001094:	f000 fa94 	bl	80015c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001098:	f640 4308 	movw	r3, #3080	; 0xc08
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010aa:	2301      	movs	r3, #1
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <HAL_TIM_MspPostInit+0xf4>)
 80010b6:	f000 fa83 	bl	80015c0 <HAL_GPIO_Init>
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010000 	.word	0x40010000
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400

080010d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <NMI_Handler+0x4>

080010de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <HardFault_Handler+0x4>

080010e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <MemManage_Handler+0x4>

080010ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001124:	f000 f91a 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001132:	f001 f93f 	bl	80023b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000009c 	.word	0x2000009c

08001140 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <TIM2_IRQHandler+0x10>)
 8001146:	f001 f935 	bl	80023b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	200000dc 	.word	0x200000dc

08001154 <_read>:
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	e00a      	b.n	800117c <_read+0x28>
 8001166:	f3af 8000 	nop.w
 800116a:	4601      	mov	r1, r0
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	60ba      	str	r2, [r7, #8]
 8001172:	b2ca      	uxtb	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	3301      	adds	r3, #1
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	429a      	cmp	r2, r3
 8001182:	dbf0      	blt.n	8001166 <_read+0x12>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <_close>:
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_fstat>:
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	6039      	str	r1, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	2300      	movs	r3, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_isatty>:
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	2301      	movs	r3, #1
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_lseek>:
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
 80011e8:	2300      	movs	r3, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_sbrk>:
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	4a14      	ldr	r2, [pc, #80]	; (8001254 <_sbrk+0x5c>)
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <_sbrk+0x60>)
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <_sbrk+0x64>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d102      	bne.n	800121a <_sbrk+0x22>
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <_sbrk+0x64>)
 8001216:	4a12      	ldr	r2, [pc, #72]	; (8001260 <_sbrk+0x68>)
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	429a      	cmp	r2, r3
 8001226:	d207      	bcs.n	8001238 <_sbrk+0x40>
 8001228:	f002 f8c6 	bl	80033b8 <__errno>
 800122c:	4602      	mov	r2, r0
 800122e:	230c      	movs	r3, #12
 8001230:	6013      	str	r3, [r2, #0]
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e009      	b.n	800124c <_sbrk+0x54>
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <_sbrk+0x64>)
 8001248:	6013      	str	r3, [r2, #0]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20080000 	.word	0x20080000
 8001258:	00000400 	.word	0x00000400
 800125c:	20000090 	.word	0x20000090
 8001260:	20000128 	.word	0x20000128

08001264 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <SystemInit+0x28>)
 800126a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <SystemInit+0x28>)
 8001270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <SystemInit+0x28>)
 800127a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800127e:	609a      	str	r2, [r3, #8]
#endif
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c8 <LoopFillZerobss+0x14>
 8001294:	2100      	movs	r1, #0
 8001296:	e003      	b.n	80012a0 <LoopCopyDataInit>

08001298 <CopyDataInit>:
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <LoopFillZerobss+0x18>)
 800129a:	585b      	ldr	r3, [r3, r1]
 800129c:	5043      	str	r3, [r0, r1]
 800129e:	3104      	adds	r1, #4

080012a0 <LoopCopyDataInit>:
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <LoopFillZerobss+0x1c>)
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <LoopFillZerobss+0x20>)
 80012a4:	1842      	adds	r2, r0, r1
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3f6      	bcc.n	8001298 <CopyDataInit>
 80012aa:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <LoopFillZerobss+0x24>)
 80012ac:	e002      	b.n	80012b4 <LoopFillZerobss>

080012ae <FillZerobss>:
 80012ae:	2300      	movs	r3, #0
 80012b0:	f842 3b04 	str.w	r3, [r2], #4

080012b4 <LoopFillZerobss>:
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <LoopFillZerobss+0x28>)
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3f9      	bcc.n	80012ae <FillZerobss>
 80012ba:	f7ff ffd3 	bl	8001264 <SystemInit>
 80012be:	f002 f881 	bl	80033c4 <__libc_init_array>
 80012c2:	f7ff fa5f 	bl	8000784 <main>
 80012c6:	4770      	bx	lr
 80012c8:	20080000 	.word	0x20080000
 80012cc:	0800446c 	.word	0x0800446c
 80012d0:	20000000 	.word	0x20000000
 80012d4:	20000070 	.word	0x20000070
 80012d8:	20000070 	.word	0x20000070
 80012dc:	20000124 	.word	0x20000124

080012e0 <ADC_IRQHandler>:
 80012e0:	e7fe      	b.n	80012e0 <ADC_IRQHandler>

080012e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f928 	bl	800153c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f805 	bl	80012fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012f2:	f7ff fe11 	bl	8000f18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x54>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x58>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f943 	bl	80015a6 <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f90b 	bl	8001552 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	; (8001358 <HAL_InitTick+0x5c>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000000 	.word	0x20000000
 8001354:	20000008 	.word	0x20000008
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008
 8001380:	2000011c 	.word	0x2000011c

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000011c 	.word	0x2000011c

0800139c <__NVIC_SetPriorityGrouping>:
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	68ba      	ldr	r2, [r7, #8]
 80013b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b8:	4013      	ands	r3, r2
 80013ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x40>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00
 80013e0:	05fa0000 	.word	0x05fa0000

080013e4 <__NVIC_GetPriorityGrouping>:
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e8:	4b04      	ldr	r3, [pc, #16]	; (80013fc <__NVIC_GetPriorityGrouping+0x18>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	f003 0307 	and.w	r3, r3, #7
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_EnableIRQ>:
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	db0b      	blt.n	800142a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	f003 021f 	and.w	r2, r3, #31
 8001418:	4907      	ldr	r1, [pc, #28]	; (8001438 <__NVIC_EnableIRQ+0x38>)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	2001      	movs	r0, #1
 8001422:	fa00 f202 	lsl.w	r2, r0, r2
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100

0800143c <__NVIC_SetPriority>:
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	6039      	str	r1, [r7, #0]
 8001446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b00      	cmp	r3, #0
 800144e:	db0a      	blt.n	8001466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	b2da      	uxtb	r2, r3
 8001454:	490c      	ldr	r1, [pc, #48]	; (8001488 <__NVIC_SetPriority+0x4c>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	0112      	lsls	r2, r2, #4
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	440b      	add	r3, r1
 8001460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001464:	e00a      	b.n	800147c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4908      	ldr	r1, [pc, #32]	; (800148c <__NVIC_SetPriority+0x50>)
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	3b04      	subs	r3, #4
 8001474:	0112      	lsls	r2, r2, #4
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	440b      	add	r3, r1
 800147a:	761a      	strb	r2, [r3, #24]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000e100 	.word	0xe000e100
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <NVIC_EncodePriority>:
{
 8001490:	b480      	push	{r7}
 8001492:	b089      	sub	sp, #36	; 0x24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f1c3 0307 	rsb	r3, r3, #7
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	bf28      	it	cs
 80014ae:	2304      	movcs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3304      	adds	r3, #4
 80014b6:	2b06      	cmp	r3, #6
 80014b8:	d902      	bls.n	80014c0 <NVIC_EncodePriority+0x30>
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3b03      	subs	r3, #3
 80014be:	e000      	b.n	80014c2 <NVIC_EncodePriority+0x32>
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	f04f 32ff 	mov.w	r2, #4294967295
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43da      	mvns	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	401a      	ands	r2, r3
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d8:	f04f 31ff 	mov.w	r1, #4294967295
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43d9      	mvns	r1, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e8:	4313      	orrs	r3, r2
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3724      	adds	r7, #36	; 0x24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <SysTick_Config>:
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001508:	d301      	bcc.n	800150e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e00f      	b.n	800152e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <SysTick_Config+0x40>)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3b01      	subs	r3, #1
 8001514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	210f      	movs	r1, #15
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	f7ff ff8e 	bl	800143c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <SysTick_Config+0x40>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001526:	4b04      	ldr	r3, [pc, #16]	; (8001538 <SysTick_Config+0x40>)
 8001528:	2207      	movs	r2, #7
 800152a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	e000e010 	.word	0xe000e010

0800153c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ff29 	bl	800139c <__NVIC_SetPriorityGrouping>
}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b580      	push	{r7, lr}
 8001554:	b086      	sub	sp, #24
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001564:	f7ff ff3e 	bl	80013e4 <__NVIC_GetPriorityGrouping>
 8001568:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	6978      	ldr	r0, [r7, #20]
 8001570:	f7ff ff8e 	bl	8001490 <NVIC_EncodePriority>
 8001574:	4602      	mov	r2, r0
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff5d 	bl	800143c <__NVIC_SetPriority>
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001594:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff31 	bl	8001400 <__NVIC_EnableIRQ>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ffa2 	bl	80014f8 <SysTick_Config>
 80015b4:	4603      	mov	r3, r0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	e175      	b.n	80018cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4013      	ands	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	f040 8164 	bne.w	80018c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d00b      	beq.n	800161e <HAL_GPIO_Init+0x5e>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001612:	2b11      	cmp	r3, #17
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b12      	cmp	r3, #18
 800161c:	d130      	bne.n	8001680 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	2203      	movs	r2, #3
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68da      	ldr	r2, [r3, #12]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	f003 0201 	and.w	r2, r3, #1
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	2203      	movs	r2, #3
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x100>
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b12      	cmp	r3, #18
 80016be:	d123      	bne.n	8001708 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	08da      	lsrs	r2, r3, #3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3208      	adds	r2, #8
 80016c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	220f      	movs	r2, #15
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691a      	ldr	r2, [r3, #16]
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	08da      	lsrs	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3208      	adds	r2, #8
 8001702:	69b9      	ldr	r1, [r7, #24]
 8001704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0203 	and.w	r2, r3, #3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 80be 	beq.w	80018c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_GPIO_Init+0x320>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a64      	ldr	r2, [pc, #400]	; (80018e0 <HAL_GPIO_Init+0x320>)
 8001750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b62      	ldr	r3, [pc, #392]	; (80018e0 <HAL_GPIO_Init+0x320>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001762:	4a60      	ldr	r2, [pc, #384]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	3302      	adds	r3, #2
 800176a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	220f      	movs	r2, #15
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a57      	ldr	r2, [pc, #348]	; (80018e8 <HAL_GPIO_Init+0x328>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d037      	beq.n	80017fe <HAL_GPIO_Init+0x23e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a56      	ldr	r2, [pc, #344]	; (80018ec <HAL_GPIO_Init+0x32c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d031      	beq.n	80017fa <HAL_GPIO_Init+0x23a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a55      	ldr	r2, [pc, #340]	; (80018f0 <HAL_GPIO_Init+0x330>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x236>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a54      	ldr	r2, [pc, #336]	; (80018f4 <HAL_GPIO_Init+0x334>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d025      	beq.n	80017f2 <HAL_GPIO_Init+0x232>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a53      	ldr	r2, [pc, #332]	; (80018f8 <HAL_GPIO_Init+0x338>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d01f      	beq.n	80017ee <HAL_GPIO_Init+0x22e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x33c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d019      	beq.n	80017ea <HAL_GPIO_Init+0x22a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_GPIO_Init+0x340>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0x226>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_GPIO_Init+0x344>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00d      	beq.n	80017e2 <HAL_GPIO_Init+0x222>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x348>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <HAL_GPIO_Init+0x21e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4e      	ldr	r2, [pc, #312]	; (800190c <HAL_GPIO_Init+0x34c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_GPIO_Init+0x21a>
 80017d6:	2309      	movs	r3, #9
 80017d8:	e012      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017da:	230a      	movs	r3, #10
 80017dc:	e010      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017de:	2308      	movs	r3, #8
 80017e0:	e00e      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017e2:	2307      	movs	r3, #7
 80017e4:	e00c      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017e6:	2306      	movs	r3, #6
 80017e8:	e00a      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e008      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x240>
 80017fe:	2300      	movs	r3, #0
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001810:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_GPIO_Init+0x324>)
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181e:	4b3c      	ldr	r3, [pc, #240]	; (8001910 <HAL_GPIO_Init+0x350>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	43db      	mvns	r3, r3
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	4013      	ands	r3, r2
 800182c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001842:	4a33      	ldr	r2, [pc, #204]	; (8001910 <HAL_GPIO_Init+0x350>)
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001848:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_GPIO_Init+0x350>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800186c:	4a28      	ldr	r2, [pc, #160]	; (8001910 <HAL_GPIO_Init+0x350>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001872:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_GPIO_Init+0x350>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001896:	4a1e      	ldr	r2, [pc, #120]	; (8001910 <HAL_GPIO_Init+0x350>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_GPIO_Init+0x350>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_GPIO_Init+0x350>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3301      	adds	r3, #1
 80018ca:	61fb      	str	r3, [r7, #28]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	2b0f      	cmp	r3, #15
 80018d0:	f67f ae86 	bls.w	80015e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018d4:	bf00      	nop
 80018d6:	3724      	adds	r7, #36	; 0x24
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40013800 	.word	0x40013800
 80018e8:	40020000 	.word	0x40020000
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40020800 	.word	0x40020800
 80018f4:	40020c00 	.word	0x40020c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40021400 	.word	0x40021400
 8001900:	40021800 	.word	0x40021800
 8001904:	40021c00 	.word	0x40021c00
 8001908:	40022000 	.word	0x40022000
 800190c:	40022400 	.word	0x40022400
 8001910:	40013c00 	.word	0x40013c00

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	619a      	str	r2, [r3, #24]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695a      	ldr	r2, [r3, #20]
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800195e:	887b      	ldrh	r3, [r7, #2]
 8001960:	041a      	lsls	r2, r3, #16
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001966:	e002      	b.n	800196e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	619a      	str	r2, [r3, #24]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e29b      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b96      	ldr	r3, [pc, #600]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ac:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x62>
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b8d      	ldr	r3, [pc, #564]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x130>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e275      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x7a>
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd8>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x9c>
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7e      	ldr	r2, [pc, #504]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a7b      	ldr	r2, [pc, #492]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xc0>
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a75      	ldr	r2, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd8>
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6e      	ldr	r2, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6b      	ldr	r2, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc92 	bl	8001384 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc8e 	bl	8001384 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e229      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe8>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc7e 	bl	8001384 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc7a 	bl	8001384 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e215      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x110>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d069      	beq.n	8001b8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x190>
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1e9      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	493d      	ldr	r1, [pc, #244]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e040      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a38      	ldr	r2, [pc, #224]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc30 	bl	8001384 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc2c 	bl	8001384 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1c7      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
 8001b5a:	e018      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fc0c 	bl	8001384 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fc08 	bl	8001384 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1a3      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d038      	beq.n	8001c0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d019      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fbe9 	bl	8001384 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fbe5 	bl	8001384 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e180      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x23a>
 8001bd4:	e01a      	b.n	8001c0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff fbcf 	bl	8001384 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bea:	f7ff fbcb 	bl	8001384 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d903      	bls.n	8001c00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e166      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
 8001bfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b92      	ldr	r3, [pc, #584]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a4 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b89      	ldr	r3, [pc, #548]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a88      	ldr	r2, [pc, #544]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b86      	ldr	r3, [pc, #536]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c42:	4b83      	ldr	r3, [pc, #524]	; (8001e50 <HAL_RCC_OscConfig+0x4d4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c4e:	4b80      	ldr	r3, [pc, #512]	; (8001e50 <HAL_RCC_OscConfig+0x4d4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7f      	ldr	r2, [pc, #508]	; (8001e50 <HAL_RCC_OscConfig+0x4d4>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb93 	bl	8001384 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff fb8f 	bl	8001384 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e12a      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	4b76      	ldr	r3, [pc, #472]	; (8001e50 <HAL_RCC_OscConfig+0x4d4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x31a>
 8001c88:	4b70      	ldr	r3, [pc, #448]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a6f      	ldr	r2, [pc, #444]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x33c>
 8001c9e:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a6a      	ldr	r2, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a67      	ldr	r2, [pc, #412]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x35e>
 8001cc0:	4b62      	ldr	r3, [pc, #392]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a61      	ldr	r2, [pc, #388]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a5e      	ldr	r2, [pc, #376]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
 8001cda:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5b      	ldr	r2, [pc, #364]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb43 	bl	8001384 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fb3f 	bl	8001384 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0d8      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x386>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb2d 	bl	8001384 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fb29 	bl	8001384 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0c2      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b41      	ldr	r3, [pc, #260]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b3d      	ldr	r3, [pc, #244]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a3c      	ldr	r2, [pc, #240]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80ae 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d06d      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d14b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fafa 	bl	8001384 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff faf6 	bl	8001384 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e091      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	071b      	lsls	r3, r3, #28
 8001dde:	491b      	ldr	r1, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fac8 	bl	8001384 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fac4 	bl	8001384 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e05f      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCC_OscConfig+0x47c>
 8001e16:	e057      	b.n	8001ec8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0b      	ldr	r2, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff faae 	bl	8001384 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff faaa 	bl	8001384 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e045      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3e:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x4b0>
 8001e4a:	e03d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x54c>
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <HAL_RCC_OscConfig+0x558>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d030      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d129      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d122      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e84:	4013      	ands	r3, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d119      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d10f      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0d0      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d910      	bls.n	8001f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 020f 	bic.w	r2, r3, #15
 8001f06:	4965      	ldr	r1, [pc, #404]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b63      	ldr	r3, [pc, #396]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0b8      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a58      	ldr	r2, [pc, #352]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	494d      	ldr	r1, [pc, #308]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d040      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e07f      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e073      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001faa:	4b3d      	ldr	r3, [pc, #244]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e06b      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b39      	ldr	r3, [pc, #228]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4936      	ldr	r1, [pc, #216]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f9da 	bl	8001384 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f9d6 	bl	8001384 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e053      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 030f 	and.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f023 020f 	bic.w	r2, r3, #15
 8002012:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e032      	b.n	8002092 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0304 	and.w	r3, r3, #4
 8002034:	2b00      	cmp	r3, #0
 8002036:	d008      	beq.n	800204a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4916      	ldr	r1, [pc, #88]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	490e      	ldr	r1, [pc, #56]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206a:	f000 f821 	bl	80020b0 <HAL_RCC_GetSysClockFreq>
 800206e:	4601      	mov	r1, r0
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <HAL_RCC_ClockConfig+0x1cc>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	fa21 f303 	lsr.w	r3, r1, r3
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <HAL_RCC_ClockConfig+0x1d4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff f936 	bl	80012fc <HAL_InitTick>

  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023c00 	.word	0x40023c00
 80020a0:	40023800 	.word	0x40023800
 80020a4:	080043b4 	.word	0x080043b4
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000004 	.word	0x20000004

080020b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	607b      	str	r3, [r7, #4]
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	2300      	movs	r3, #0
 80020c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020c6:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_GetSysClockFreq+0x158>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d007      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x32>
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d008      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x38>
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 808d 	bne.w	80021f6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020dc:	4b4b      	ldr	r3, [pc, #300]	; (800220c <HAL_RCC_GetSysClockFreq+0x15c>)
 80020de:	60bb      	str	r3, [r7, #8]
      break;
 80020e0:	e08c      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <HAL_RCC_GetSysClockFreq+0x160>)
 80020e4:	60bb      	str	r3, [r7, #8]
      break;
 80020e6:	e089      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020e8:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_GetSysClockFreq+0x158>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020f2:	4b45      	ldr	r3, [pc, #276]	; (8002208 <HAL_RCC_GetSysClockFreq+0x158>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d023      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020fe:	4b42      	ldr	r3, [pc, #264]	; (8002208 <HAL_RCC_GetSysClockFreq+0x158>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	099b      	lsrs	r3, r3, #6
 8002104:	f04f 0400 	mov.w	r4, #0
 8002108:	f240 11ff 	movw	r1, #511	; 0x1ff
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	ea03 0501 	and.w	r5, r3, r1
 8002114:	ea04 0602 	and.w	r6, r4, r2
 8002118:	4a3d      	ldr	r2, [pc, #244]	; (8002210 <HAL_RCC_GetSysClockFreq+0x160>)
 800211a:	fb02 f106 	mul.w	r1, r2, r6
 800211e:	2200      	movs	r2, #0
 8002120:	fb02 f205 	mul.w	r2, r2, r5
 8002124:	440a      	add	r2, r1
 8002126:	493a      	ldr	r1, [pc, #232]	; (8002210 <HAL_RCC_GetSysClockFreq+0x160>)
 8002128:	fba5 0101 	umull	r0, r1, r5, r1
 800212c:	1853      	adds	r3, r2, r1
 800212e:	4619      	mov	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f04f 0400 	mov.w	r4, #0
 8002136:	461a      	mov	r2, r3
 8002138:	4623      	mov	r3, r4
 800213a:	f7fe f8d1 	bl	80002e0 <__aeabi_uldivmod>
 800213e:	4603      	mov	r3, r0
 8002140:	460c      	mov	r4, r1
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e049      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_RCC_GetSysClockFreq+0x158>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	f04f 0400 	mov.w	r4, #0
 8002150:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002154:	f04f 0200 	mov.w	r2, #0
 8002158:	ea03 0501 	and.w	r5, r3, r1
 800215c:	ea04 0602 	and.w	r6, r4, r2
 8002160:	4629      	mov	r1, r5
 8002162:	4632      	mov	r2, r6
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	f04f 0400 	mov.w	r4, #0
 800216c:	0154      	lsls	r4, r2, #5
 800216e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002172:	014b      	lsls	r3, r1, #5
 8002174:	4619      	mov	r1, r3
 8002176:	4622      	mov	r2, r4
 8002178:	1b49      	subs	r1, r1, r5
 800217a:	eb62 0206 	sbc.w	r2, r2, r6
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	f04f 0400 	mov.w	r4, #0
 8002186:	0194      	lsls	r4, r2, #6
 8002188:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800218c:	018b      	lsls	r3, r1, #6
 800218e:	1a5b      	subs	r3, r3, r1
 8002190:	eb64 0402 	sbc.w	r4, r4, r2
 8002194:	f04f 0100 	mov.w	r1, #0
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	00e2      	lsls	r2, r4, #3
 800219e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021a2:	00d9      	lsls	r1, r3, #3
 80021a4:	460b      	mov	r3, r1
 80021a6:	4614      	mov	r4, r2
 80021a8:	195b      	adds	r3, r3, r5
 80021aa:	eb44 0406 	adc.w	r4, r4, r6
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	02a2      	lsls	r2, r4, #10
 80021b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80021bc:	0299      	lsls	r1, r3, #10
 80021be:	460b      	mov	r3, r1
 80021c0:	4614      	mov	r4, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	4621      	mov	r1, r4
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f04f 0400 	mov.w	r4, #0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	f7fe f886 	bl	80002e0 <__aeabi_uldivmod>
 80021d4:	4603      	mov	r3, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetSysClockFreq+0x158>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	3301      	adds	r3, #1
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	60bb      	str	r3, [r7, #8]
      break;
 80021f4:	e002      	b.n	80021fc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f6:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetSysClockFreq+0x15c>)
 80021f8:	60bb      	str	r3, [r7, #8]
      break;
 80021fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fc:	68bb      	ldr	r3, [r7, #8]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	00f42400 	.word	0x00f42400
 8002210:	017d7840 	.word	0x017d7840

08002214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e01d      	b.n	8002262 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fe90 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f000 fbc8 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
	...

0800226c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <HAL_TIM_Base_Start_IT+0x50>)
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2b06      	cmp	r3, #6
 8002294:	d00b      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0x42>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800229c:	d007      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	00010007 	.word	0x00010007

080022c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e01d      	b.n	800230e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d106      	bne.n	80022ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 f815 	bl	8002316 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3304      	adds	r3, #4
 80022fc:	4619      	mov	r1, r3
 80022fe:	4610      	mov	r0, r2
 8002300:	f000 fb72 	bl	80029e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
	...

0800232c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	6839      	ldr	r1, [r7, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 feea 	bl	8003118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <HAL_TIM_PWM_Start+0x7c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_TIM_PWM_Start+0x2c>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a16      	ldr	r2, [pc, #88]	; (80023ac <HAL_TIM_PWM_Start+0x80>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_TIM_PWM_Start+0x30>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <HAL_TIM_PWM_Start+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002370:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_TIM_PWM_Start+0x84>)
 800237a:	4013      	ands	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b06      	cmp	r3, #6
 8002382:	d00b      	beq.n	800239c <HAL_TIM_PWM_Start+0x70>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238a:	d007      	beq.n	800239c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40010400 	.word	0x40010400
 80023b0:	00010007 	.word	0x00010007

080023b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d122      	bne.n	8002410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d11b      	bne.n	8002410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f06f 0202 	mvn.w	r2, #2
 80023e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fad8 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 80023fc:	e005      	b.n	800240a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 faca 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 fadb 	bl	80029c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b04      	cmp	r3, #4
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b04      	cmp	r3, #4
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0204 	mvn.w	r2, #4
 8002434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2202      	movs	r2, #2
 800243a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 faae 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 faa0 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fab1 	bl	80029c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b08      	cmp	r3, #8
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b08      	cmp	r3, #8
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0208 	mvn.w	r2, #8
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2204      	movs	r2, #4
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fa84 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa76 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fa87 	bl	80029c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0210 	mvn.w	r2, #16
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2208      	movs	r2, #8
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa5a 	bl	80029ac <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa4c 	bl	8002998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fa5d 	bl	80029c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10e      	bne.n	8002538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b01      	cmp	r3, #1
 8002526:	d107      	bne.n	8002538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0201 	mvn.w	r2, #1
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe f8d8 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002542:	2b80      	cmp	r3, #128	; 0x80
 8002544:	d10e      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d107      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800255c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 ff16 	bl	8003390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002572:	d10e      	bne.n	8002592 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d107      	bne.n	8002592 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800258a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 ff09 	bl	80033a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d10e      	bne.n	80025be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d107      	bne.n	80025be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fa0b 	bl	80029d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0320 	and.w	r3, r3, #32
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	d10e      	bne.n	80025ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d107      	bne.n	80025ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0220 	mvn.w	r2, #32
 80025e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fec9 	bl	800337c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800260a:	2302      	movs	r3, #2
 800260c:	e105      	b.n	800281a <HAL_TIM_PWM_ConfigChannel+0x226>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2202      	movs	r2, #2
 800261a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2b14      	cmp	r3, #20
 8002622:	f200 80f0 	bhi.w	8002806 <HAL_TIM_PWM_ConfigChannel+0x212>
 8002626:	a201      	add	r2, pc, #4	; (adr r2, 800262c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262c:	08002681 	.word	0x08002681
 8002630:	08002807 	.word	0x08002807
 8002634:	08002807 	.word	0x08002807
 8002638:	08002807 	.word	0x08002807
 800263c:	080026c1 	.word	0x080026c1
 8002640:	08002807 	.word	0x08002807
 8002644:	08002807 	.word	0x08002807
 8002648:	08002807 	.word	0x08002807
 800264c:	08002703 	.word	0x08002703
 8002650:	08002807 	.word	0x08002807
 8002654:	08002807 	.word	0x08002807
 8002658:	08002807 	.word	0x08002807
 800265c:	08002743 	.word	0x08002743
 8002660:	08002807 	.word	0x08002807
 8002664:	08002807 	.word	0x08002807
 8002668:	08002807 	.word	0x08002807
 800266c:	08002785 	.word	0x08002785
 8002670:	08002807 	.word	0x08002807
 8002674:	08002807 	.word	0x08002807
 8002678:	08002807 	.word	0x08002807
 800267c:	080027c5 	.word	0x080027c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fa4e 	bl	8002b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6999      	ldr	r1, [r3, #24]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
      break;
 80026be:	e0a3      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 faa0 	bl	8002c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6999      	ldr	r1, [r3, #24]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	021a      	lsls	r2, r3, #8
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	619a      	str	r2, [r3, #24]
      break;
 8002700:	e082      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 faf7 	bl	8002cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0208 	orr.w	r2, r2, #8
 800271c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0204 	bic.w	r2, r2, #4
 800272c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69d9      	ldr	r1, [r3, #28]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
      break;
 8002740:	e062      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fb4d 	bl	8002de8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	61da      	str	r2, [r3, #28]
      break;
 8002782:	e041      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fb84 	bl	8002e98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0208 	orr.w	r2, r2, #8
 800279e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	430a      	orrs	r2, r1
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80027c2:	e021      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68b9      	ldr	r1, [r7, #8]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fbb6 	bl	8002f3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	021a      	lsls	r2, r3, #8
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002804:	e000      	b.n	8002808 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8002806:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop

08002824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_TIM_ConfigClockSource+0x18>
 8002838:	2302      	movs	r3, #2
 800283a:	e0a6      	b.n	800298a <HAL_TIM_ConfigClockSource+0x166>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <HAL_TIM_ConfigClockSource+0x170>)
 8002858:	4013      	ands	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002862:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d067      	beq.n	8002944 <HAL_TIM_ConfigClockSource+0x120>
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d80b      	bhi.n	8002890 <HAL_TIM_ConfigClockSource+0x6c>
 8002878:	2b10      	cmp	r3, #16
 800287a:	d073      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0x140>
 800287c:	2b10      	cmp	r3, #16
 800287e:	d802      	bhi.n	8002886 <HAL_TIM_ConfigClockSource+0x62>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d06f      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002884:	e078      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002886:	2b20      	cmp	r3, #32
 8002888:	d06c      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0x140>
 800288a:	2b30      	cmp	r3, #48	; 0x30
 800288c:	d06a      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800288e:	e073      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002890:	2b70      	cmp	r3, #112	; 0x70
 8002892:	d00d      	beq.n	80028b0 <HAL_TIM_ConfigClockSource+0x8c>
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d804      	bhi.n	80028a2 <HAL_TIM_ConfigClockSource+0x7e>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d033      	beq.n	8002904 <HAL_TIM_ConfigClockSource+0xe0>
 800289c:	2b60      	cmp	r3, #96	; 0x60
 800289e:	d041      	beq.n	8002924 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028a0:	e06a      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	d066      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x152>
 80028a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ac:	d017      	beq.n	80028de <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028ae:	e063      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6899      	ldr	r1, [r3, #8]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f000 fc0a 	bl	80030d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028d2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	609a      	str	r2, [r3, #8]
      break;
 80028dc:	e04c      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	6899      	ldr	r1, [r3, #8]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f000 fbf3 	bl	80030d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002900:	609a      	str	r2, [r3, #8]
      break;
 8002902:	e039      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6818      	ldr	r0, [r3, #0]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	461a      	mov	r2, r3
 8002912:	f000 fb67 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2150      	movs	r1, #80	; 0x50
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fbc0 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002922:	e029      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	461a      	mov	r2, r3
 8002932:	f000 fb86 	bl	8003042 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2160      	movs	r1, #96	; 0x60
 800293c:	4618      	mov	r0, r3
 800293e:	f000 fbb0 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002942:	e019      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	461a      	mov	r2, r3
 8002952:	f000 fb47 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2140      	movs	r1, #64	; 0x40
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fba0 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002962:	e009      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f000 fb97 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002974:	e000      	b.n	8002978 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	fffeff88 	.word	0xfffeff88

08002998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a40      	ldr	r2, [pc, #256]	; (8002afc <TIM_Base_SetConfig+0x114>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d013      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a06:	d00f      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3d      	ldr	r2, [pc, #244]	; (8002b00 <TIM_Base_SetConfig+0x118>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00b      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3c      	ldr	r2, [pc, #240]	; (8002b04 <TIM_Base_SetConfig+0x11c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3b      	ldr	r2, [pc, #236]	; (8002b08 <TIM_Base_SetConfig+0x120>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a3a      	ldr	r2, [pc, #232]	; (8002b0c <TIM_Base_SetConfig+0x124>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2f      	ldr	r2, [pc, #188]	; (8002afc <TIM_Base_SetConfig+0x114>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02b      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d027      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <TIM_Base_SetConfig+0x118>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d023      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <TIM_Base_SetConfig+0x11c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	; (8002b08 <TIM_Base_SetConfig+0x120>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01b      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a29      	ldr	r2, [pc, #164]	; (8002b0c <TIM_Base_SetConfig+0x124>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d017      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <TIM_Base_SetConfig+0x128>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a27      	ldr	r2, [pc, #156]	; (8002b14 <TIM_Base_SetConfig+0x12c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00f      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a26      	ldr	r2, [pc, #152]	; (8002b18 <TIM_Base_SetConfig+0x130>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d00b      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <TIM_Base_SetConfig+0x134>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a24      	ldr	r2, [pc, #144]	; (8002b20 <TIM_Base_SetConfig+0x138>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d003      	beq.n	8002a9a <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a23      	ldr	r2, [pc, #140]	; (8002b24 <TIM_Base_SetConfig+0x13c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d108      	bne.n	8002aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <TIM_Base_SetConfig+0x114>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0xf8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a0c      	ldr	r2, [pc, #48]	; (8002b0c <TIM_Base_SetConfig+0x124>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d103      	bne.n	8002ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	615a      	str	r2, [r3, #20]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40000400 	.word	0x40000400
 8002b04:	40000800 	.word	0x40000800
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40010400 	.word	0x40010400
 8002b10:	40014000 	.word	0x40014000
 8002b14:	40014400 	.word	0x40014400
 8002b18:	40014800 	.word	0x40014800
 8002b1c:	40001800 	.word	0x40001800
 8002b20:	40001c00 	.word	0x40001c00
 8002b24:	40002000 	.word	0x40002000

08002b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <TIM_OC1_SetConfig+0xd8>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f023 0302 	bic.w	r3, r3, #2
 8002b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a21      	ldr	r2, [pc, #132]	; (8002c04 <TIM_OC1_SetConfig+0xdc>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d003      	beq.n	8002b8c <TIM_OC1_SetConfig+0x64>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <TIM_OC1_SetConfig+0xe0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d10c      	bne.n	8002ba6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f023 0308 	bic.w	r3, r3, #8
 8002b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f023 0304 	bic.w	r3, r3, #4
 8002ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <TIM_OC1_SetConfig+0xdc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_OC1_SetConfig+0x8e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <TIM_OC1_SetConfig+0xe0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d111      	bne.n	8002bda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	fffeff8f 	.word	0xfffeff8f
 8002c04:	40010000 	.word	0x40010000
 8002c08:	40010400 	.word	0x40010400

08002c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f023 0210 	bic.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	4b2e      	ldr	r3, [pc, #184]	; (8002cf0 <TIM_OC2_SetConfig+0xe4>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f023 0320 	bic.w	r3, r3, #32
 8002c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a23      	ldr	r2, [pc, #140]	; (8002cf4 <TIM_OC2_SetConfig+0xe8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_OC2_SetConfig+0x68>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a22      	ldr	r2, [pc, #136]	; (8002cf8 <TIM_OC2_SetConfig+0xec>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d10d      	bne.n	8002c90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a18      	ldr	r2, [pc, #96]	; (8002cf4 <TIM_OC2_SetConfig+0xe8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_OC2_SetConfig+0x94>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <TIM_OC2_SetConfig+0xec>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d113      	bne.n	8002cc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	621a      	str	r2, [r3, #32]
}
 8002ce2:	bf00      	nop
 8002ce4:	371c      	adds	r7, #28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	feff8fff 	.word	0xfeff8fff
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	40010400 	.word	0x40010400

08002cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	4b2d      	ldr	r3, [pc, #180]	; (8002ddc <TIM_OC3_SetConfig+0xe0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0303 	bic.w	r3, r3, #3
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	021b      	lsls	r3, r3, #8
 8002d4c:	697a      	ldr	r2, [r7, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a22      	ldr	r2, [pc, #136]	; (8002de0 <TIM_OC3_SetConfig+0xe4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d003      	beq.n	8002d62 <TIM_OC3_SetConfig+0x66>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a21      	ldr	r2, [pc, #132]	; (8002de4 <TIM_OC3_SetConfig+0xe8>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10d      	bne.n	8002d7e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a17      	ldr	r2, [pc, #92]	; (8002de0 <TIM_OC3_SetConfig+0xe4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d003      	beq.n	8002d8e <TIM_OC3_SetConfig+0x92>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a16      	ldr	r2, [pc, #88]	; (8002de4 <TIM_OC3_SetConfig+0xe8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d113      	bne.n	8002db6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	697a      	ldr	r2, [r7, #20]
 8002dce:	621a      	str	r2, [r3, #32]
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	fffeff8f 	.word	0xfffeff8f
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40010400 	.word	0x40010400

08002de8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	4b1e      	ldr	r3, [pc, #120]	; (8002e8c <TIM_OC4_SetConfig+0xa4>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	021b      	lsls	r3, r3, #8
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	031b      	lsls	r3, r3, #12
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <TIM_OC4_SetConfig+0xa8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d003      	beq.n	8002e50 <TIM_OC4_SetConfig+0x68>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a12      	ldr	r2, [pc, #72]	; (8002e94 <TIM_OC4_SetConfig+0xac>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d109      	bne.n	8002e64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	019b      	lsls	r3, r3, #6
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	bf00      	nop
 8002e80:	371c      	adds	r7, #28
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	feff8fff 	.word	0xfeff8fff
 8002e90:	40010000 	.word	0x40010000
 8002e94:	40010400 	.word	0x40010400

08002e98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b087      	sub	sp, #28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <TIM_OC5_SetConfig+0x98>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ed8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <TIM_OC5_SetConfig+0x9c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_OC5_SetConfig+0x5e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <TIM_OC5_SetConfig+0xa0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d109      	bne.n	8002f0a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	621a      	str	r2, [r3, #32]
}
 8002f24:	bf00      	nop
 8002f26:	371c      	adds	r7, #28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	fffeff8f 	.word	0xfffeff8f
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40010400 	.word	0x40010400

08002f3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <TIM_OC6_SetConfig+0x9c>)
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	051b      	lsls	r3, r3, #20
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a13      	ldr	r2, [pc, #76]	; (8002fdc <TIM_OC6_SetConfig+0xa0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d003      	beq.n	8002f9c <TIM_OC6_SetConfig+0x60>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <TIM_OC6_SetConfig+0xa4>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d109      	bne.n	8002fb0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	029b      	lsls	r3, r3, #10
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	feff8fff 	.word	0xfeff8fff
 8002fdc:	40010000 	.word	0x40010000
 8002fe0:	40010400 	.word	0x40010400

08002fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f023 0201 	bic.w	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f023 0210 	bic.w	r2, r3, #16
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800306c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 0307 	orr.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	2201      	movs	r2, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a1a      	ldr	r2, [r3, #32]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	43db      	mvns	r3, r3
 800313a:	401a      	ands	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1a      	ldr	r2, [r3, #32]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003178:	2302      	movs	r3, #2
 800317a:	e06d      	b.n	8003258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a30      	ldr	r2, [pc, #192]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d004      	beq.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d108      	bne.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a20      	ldr	r2, [pc, #128]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d022      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d01d      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a1d      	ldr	r2, [pc, #116]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d018      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d013      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a1a      	ldr	r2, [pc, #104]	; (8003274 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00e      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a15      	ldr	r2, [pc, #84]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d009      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a15      	ldr	r2, [pc, #84]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d10c      	bne.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003232:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40010000 	.word	0x40010000
 8003268:	40010400 	.word	0x40010400
 800326c:	40000400 	.word	0x40000400
 8003270:	40000800 	.word	0x40000800
 8003274:	40000c00 	.word	0x40000c00
 8003278:	40014000 	.word	0x40014000
 800327c:	40001800 	.word	0x40001800

08003280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003298:	2302      	movs	r3, #2
 800329a:	e065      	b.n	8003368 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4313      	orrs	r3, r2
 80032be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d004      	beq.n	800332a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a14      	ldr	r2, [pc, #80]	; (8003378 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d115      	bne.n	8003356 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	051b      	lsls	r3, r3, #20
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000
 8003378:	40010400 	.word	0x40010400

0800337c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <__errno>:
 80033b8:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <__errno+0x8>)
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c

080033c4 <__libc_init_array>:
 80033c4:	b570      	push	{r4, r5, r6, lr}
 80033c6:	4e0d      	ldr	r6, [pc, #52]	; (80033fc <__libc_init_array+0x38>)
 80033c8:	4c0d      	ldr	r4, [pc, #52]	; (8003400 <__libc_init_array+0x3c>)
 80033ca:	1ba4      	subs	r4, r4, r6
 80033cc:	10a4      	asrs	r4, r4, #2
 80033ce:	2500      	movs	r5, #0
 80033d0:	42a5      	cmp	r5, r4
 80033d2:	d109      	bne.n	80033e8 <__libc_init_array+0x24>
 80033d4:	4e0b      	ldr	r6, [pc, #44]	; (8003404 <__libc_init_array+0x40>)
 80033d6:	4c0c      	ldr	r4, [pc, #48]	; (8003408 <__libc_init_array+0x44>)
 80033d8:	f000 ff68 	bl	80042ac <_init>
 80033dc:	1ba4      	subs	r4, r4, r6
 80033de:	10a4      	asrs	r4, r4, #2
 80033e0:	2500      	movs	r5, #0
 80033e2:	42a5      	cmp	r5, r4
 80033e4:	d105      	bne.n	80033f2 <__libc_init_array+0x2e>
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ec:	4798      	blx	r3
 80033ee:	3501      	adds	r5, #1
 80033f0:	e7ee      	b.n	80033d0 <__libc_init_array+0xc>
 80033f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033f6:	4798      	blx	r3
 80033f8:	3501      	adds	r5, #1
 80033fa:	e7f2      	b.n	80033e2 <__libc_init_array+0x1e>
 80033fc:	08004464 	.word	0x08004464
 8003400:	08004464 	.word	0x08004464
 8003404:	08004464 	.word	0x08004464
 8003408:	08004468 	.word	0x08004468

0800340c <memset>:
 800340c:	4402      	add	r2, r0
 800340e:	4603      	mov	r3, r0
 8003410:	4293      	cmp	r3, r2
 8003412:	d100      	bne.n	8003416 <memset+0xa>
 8003414:	4770      	bx	lr
 8003416:	f803 1b01 	strb.w	r1, [r3], #1
 800341a:	e7f9      	b.n	8003410 <memset+0x4>

0800341c <iprintf>:
 800341c:	b40f      	push	{r0, r1, r2, r3}
 800341e:	4b0a      	ldr	r3, [pc, #40]	; (8003448 <iprintf+0x2c>)
 8003420:	b513      	push	{r0, r1, r4, lr}
 8003422:	681c      	ldr	r4, [r3, #0]
 8003424:	b124      	cbz	r4, 8003430 <iprintf+0x14>
 8003426:	69a3      	ldr	r3, [r4, #24]
 8003428:	b913      	cbnz	r3, 8003430 <iprintf+0x14>
 800342a:	4620      	mov	r0, r4
 800342c:	f000 fa22 	bl	8003874 <__sinit>
 8003430:	ab05      	add	r3, sp, #20
 8003432:	9a04      	ldr	r2, [sp, #16]
 8003434:	68a1      	ldr	r1, [r4, #8]
 8003436:	9301      	str	r3, [sp, #4]
 8003438:	4620      	mov	r0, r4
 800343a:	f000 fbdb 	bl	8003bf4 <_vfiprintf_r>
 800343e:	b002      	add	sp, #8
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003444:	b004      	add	sp, #16
 8003446:	4770      	bx	lr
 8003448:	2000000c 	.word	0x2000000c

0800344c <_puts_r>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	460e      	mov	r6, r1
 8003450:	4605      	mov	r5, r0
 8003452:	b118      	cbz	r0, 800345c <_puts_r+0x10>
 8003454:	6983      	ldr	r3, [r0, #24]
 8003456:	b90b      	cbnz	r3, 800345c <_puts_r+0x10>
 8003458:	f000 fa0c 	bl	8003874 <__sinit>
 800345c:	69ab      	ldr	r3, [r5, #24]
 800345e:	68ac      	ldr	r4, [r5, #8]
 8003460:	b913      	cbnz	r3, 8003468 <_puts_r+0x1c>
 8003462:	4628      	mov	r0, r5
 8003464:	f000 fa06 	bl	8003874 <__sinit>
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <_puts_r+0xac>)
 800346a:	429c      	cmp	r4, r3
 800346c:	d117      	bne.n	800349e <_puts_r+0x52>
 800346e:	686c      	ldr	r4, [r5, #4]
 8003470:	89a3      	ldrh	r3, [r4, #12]
 8003472:	071b      	lsls	r3, r3, #28
 8003474:	d51d      	bpl.n	80034b2 <_puts_r+0x66>
 8003476:	6923      	ldr	r3, [r4, #16]
 8003478:	b1db      	cbz	r3, 80034b2 <_puts_r+0x66>
 800347a:	3e01      	subs	r6, #1
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003482:	3b01      	subs	r3, #1
 8003484:	60a3      	str	r3, [r4, #8]
 8003486:	b9e9      	cbnz	r1, 80034c4 <_puts_r+0x78>
 8003488:	2b00      	cmp	r3, #0
 800348a:	da2e      	bge.n	80034ea <_puts_r+0x9e>
 800348c:	4622      	mov	r2, r4
 800348e:	210a      	movs	r1, #10
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f83f 	bl	8003514 <__swbuf_r>
 8003496:	3001      	adds	r0, #1
 8003498:	d011      	beq.n	80034be <_puts_r+0x72>
 800349a:	200a      	movs	r0, #10
 800349c:	e011      	b.n	80034c2 <_puts_r+0x76>
 800349e:	4b17      	ldr	r3, [pc, #92]	; (80034fc <_puts_r+0xb0>)
 80034a0:	429c      	cmp	r4, r3
 80034a2:	d101      	bne.n	80034a8 <_puts_r+0x5c>
 80034a4:	68ac      	ldr	r4, [r5, #8]
 80034a6:	e7e3      	b.n	8003470 <_puts_r+0x24>
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <_puts_r+0xb4>)
 80034aa:	429c      	cmp	r4, r3
 80034ac:	bf08      	it	eq
 80034ae:	68ec      	ldreq	r4, [r5, #12]
 80034b0:	e7de      	b.n	8003470 <_puts_r+0x24>
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 f87f 	bl	80035b8 <__swsetup_r>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d0dd      	beq.n	800347a <_puts_r+0x2e>
 80034be:	f04f 30ff 	mov.w	r0, #4294967295
 80034c2:	bd70      	pop	{r4, r5, r6, pc}
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da04      	bge.n	80034d2 <_puts_r+0x86>
 80034c8:	69a2      	ldr	r2, [r4, #24]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	dc06      	bgt.n	80034dc <_puts_r+0x90>
 80034ce:	290a      	cmp	r1, #10
 80034d0:	d004      	beq.n	80034dc <_puts_r+0x90>
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	6022      	str	r2, [r4, #0]
 80034d8:	7019      	strb	r1, [r3, #0]
 80034da:	e7cf      	b.n	800347c <_puts_r+0x30>
 80034dc:	4622      	mov	r2, r4
 80034de:	4628      	mov	r0, r5
 80034e0:	f000 f818 	bl	8003514 <__swbuf_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d1c9      	bne.n	800347c <_puts_r+0x30>
 80034e8:	e7e9      	b.n	80034be <_puts_r+0x72>
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	200a      	movs	r0, #10
 80034ee:	1c5a      	adds	r2, r3, #1
 80034f0:	6022      	str	r2, [r4, #0]
 80034f2:	7018      	strb	r0, [r3, #0]
 80034f4:	e7e5      	b.n	80034c2 <_puts_r+0x76>
 80034f6:	bf00      	nop
 80034f8:	080043e8 	.word	0x080043e8
 80034fc:	08004408 	.word	0x08004408
 8003500:	080043c8 	.word	0x080043c8

08003504 <puts>:
 8003504:	4b02      	ldr	r3, [pc, #8]	; (8003510 <puts+0xc>)
 8003506:	4601      	mov	r1, r0
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	f7ff bf9f 	b.w	800344c <_puts_r>
 800350e:	bf00      	nop
 8003510:	2000000c 	.word	0x2000000c

08003514 <__swbuf_r>:
 8003514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003516:	460e      	mov	r6, r1
 8003518:	4614      	mov	r4, r2
 800351a:	4605      	mov	r5, r0
 800351c:	b118      	cbz	r0, 8003526 <__swbuf_r+0x12>
 800351e:	6983      	ldr	r3, [r0, #24]
 8003520:	b90b      	cbnz	r3, 8003526 <__swbuf_r+0x12>
 8003522:	f000 f9a7 	bl	8003874 <__sinit>
 8003526:	4b21      	ldr	r3, [pc, #132]	; (80035ac <__swbuf_r+0x98>)
 8003528:	429c      	cmp	r4, r3
 800352a:	d12a      	bne.n	8003582 <__swbuf_r+0x6e>
 800352c:	686c      	ldr	r4, [r5, #4]
 800352e:	69a3      	ldr	r3, [r4, #24]
 8003530:	60a3      	str	r3, [r4, #8]
 8003532:	89a3      	ldrh	r3, [r4, #12]
 8003534:	071a      	lsls	r2, r3, #28
 8003536:	d52e      	bpl.n	8003596 <__swbuf_r+0x82>
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	b363      	cbz	r3, 8003596 <__swbuf_r+0x82>
 800353c:	6923      	ldr	r3, [r4, #16]
 800353e:	6820      	ldr	r0, [r4, #0]
 8003540:	1ac0      	subs	r0, r0, r3
 8003542:	6963      	ldr	r3, [r4, #20]
 8003544:	b2f6      	uxtb	r6, r6
 8003546:	4283      	cmp	r3, r0
 8003548:	4637      	mov	r7, r6
 800354a:	dc04      	bgt.n	8003556 <__swbuf_r+0x42>
 800354c:	4621      	mov	r1, r4
 800354e:	4628      	mov	r0, r5
 8003550:	f000 f926 	bl	80037a0 <_fflush_r>
 8003554:	bb28      	cbnz	r0, 80035a2 <__swbuf_r+0x8e>
 8003556:	68a3      	ldr	r3, [r4, #8]
 8003558:	3b01      	subs	r3, #1
 800355a:	60a3      	str	r3, [r4, #8]
 800355c:	6823      	ldr	r3, [r4, #0]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	6022      	str	r2, [r4, #0]
 8003562:	701e      	strb	r6, [r3, #0]
 8003564:	6963      	ldr	r3, [r4, #20]
 8003566:	3001      	adds	r0, #1
 8003568:	4283      	cmp	r3, r0
 800356a:	d004      	beq.n	8003576 <__swbuf_r+0x62>
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	07db      	lsls	r3, r3, #31
 8003570:	d519      	bpl.n	80035a6 <__swbuf_r+0x92>
 8003572:	2e0a      	cmp	r6, #10
 8003574:	d117      	bne.n	80035a6 <__swbuf_r+0x92>
 8003576:	4621      	mov	r1, r4
 8003578:	4628      	mov	r0, r5
 800357a:	f000 f911 	bl	80037a0 <_fflush_r>
 800357e:	b190      	cbz	r0, 80035a6 <__swbuf_r+0x92>
 8003580:	e00f      	b.n	80035a2 <__swbuf_r+0x8e>
 8003582:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <__swbuf_r+0x9c>)
 8003584:	429c      	cmp	r4, r3
 8003586:	d101      	bne.n	800358c <__swbuf_r+0x78>
 8003588:	68ac      	ldr	r4, [r5, #8]
 800358a:	e7d0      	b.n	800352e <__swbuf_r+0x1a>
 800358c:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <__swbuf_r+0xa0>)
 800358e:	429c      	cmp	r4, r3
 8003590:	bf08      	it	eq
 8003592:	68ec      	ldreq	r4, [r5, #12]
 8003594:	e7cb      	b.n	800352e <__swbuf_r+0x1a>
 8003596:	4621      	mov	r1, r4
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f80d 	bl	80035b8 <__swsetup_r>
 800359e:	2800      	cmp	r0, #0
 80035a0:	d0cc      	beq.n	800353c <__swbuf_r+0x28>
 80035a2:	f04f 37ff 	mov.w	r7, #4294967295
 80035a6:	4638      	mov	r0, r7
 80035a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035aa:	bf00      	nop
 80035ac:	080043e8 	.word	0x080043e8
 80035b0:	08004408 	.word	0x08004408
 80035b4:	080043c8 	.word	0x080043c8

080035b8 <__swsetup_r>:
 80035b8:	4b32      	ldr	r3, [pc, #200]	; (8003684 <__swsetup_r+0xcc>)
 80035ba:	b570      	push	{r4, r5, r6, lr}
 80035bc:	681d      	ldr	r5, [r3, #0]
 80035be:	4606      	mov	r6, r0
 80035c0:	460c      	mov	r4, r1
 80035c2:	b125      	cbz	r5, 80035ce <__swsetup_r+0x16>
 80035c4:	69ab      	ldr	r3, [r5, #24]
 80035c6:	b913      	cbnz	r3, 80035ce <__swsetup_r+0x16>
 80035c8:	4628      	mov	r0, r5
 80035ca:	f000 f953 	bl	8003874 <__sinit>
 80035ce:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <__swsetup_r+0xd0>)
 80035d0:	429c      	cmp	r4, r3
 80035d2:	d10f      	bne.n	80035f4 <__swsetup_r+0x3c>
 80035d4:	686c      	ldr	r4, [r5, #4]
 80035d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	0715      	lsls	r5, r2, #28
 80035de:	d42c      	bmi.n	800363a <__swsetup_r+0x82>
 80035e0:	06d0      	lsls	r0, r2, #27
 80035e2:	d411      	bmi.n	8003608 <__swsetup_r+0x50>
 80035e4:	2209      	movs	r2, #9
 80035e6:	6032      	str	r2, [r6, #0]
 80035e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	f04f 30ff 	mov.w	r0, #4294967295
 80035f2:	e03e      	b.n	8003672 <__swsetup_r+0xba>
 80035f4:	4b25      	ldr	r3, [pc, #148]	; (800368c <__swsetup_r+0xd4>)
 80035f6:	429c      	cmp	r4, r3
 80035f8:	d101      	bne.n	80035fe <__swsetup_r+0x46>
 80035fa:	68ac      	ldr	r4, [r5, #8]
 80035fc:	e7eb      	b.n	80035d6 <__swsetup_r+0x1e>
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <__swsetup_r+0xd8>)
 8003600:	429c      	cmp	r4, r3
 8003602:	bf08      	it	eq
 8003604:	68ec      	ldreq	r4, [r5, #12]
 8003606:	e7e6      	b.n	80035d6 <__swsetup_r+0x1e>
 8003608:	0751      	lsls	r1, r2, #29
 800360a:	d512      	bpl.n	8003632 <__swsetup_r+0x7a>
 800360c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800360e:	b141      	cbz	r1, 8003622 <__swsetup_r+0x6a>
 8003610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003614:	4299      	cmp	r1, r3
 8003616:	d002      	beq.n	800361e <__swsetup_r+0x66>
 8003618:	4630      	mov	r0, r6
 800361a:	f000 fa19 	bl	8003a50 <_free_r>
 800361e:	2300      	movs	r3, #0
 8003620:	6363      	str	r3, [r4, #52]	; 0x34
 8003622:	89a3      	ldrh	r3, [r4, #12]
 8003624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	6063      	str	r3, [r4, #4]
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	6023      	str	r3, [r4, #0]
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f043 0308 	orr.w	r3, r3, #8
 8003638:	81a3      	strh	r3, [r4, #12]
 800363a:	6923      	ldr	r3, [r4, #16]
 800363c:	b94b      	cbnz	r3, 8003652 <__swsetup_r+0x9a>
 800363e:	89a3      	ldrh	r3, [r4, #12]
 8003640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003648:	d003      	beq.n	8003652 <__swsetup_r+0x9a>
 800364a:	4621      	mov	r1, r4
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f9bf 	bl	80039d0 <__smakebuf_r>
 8003652:	89a2      	ldrh	r2, [r4, #12]
 8003654:	f012 0301 	ands.w	r3, r2, #1
 8003658:	d00c      	beq.n	8003674 <__swsetup_r+0xbc>
 800365a:	2300      	movs	r3, #0
 800365c:	60a3      	str	r3, [r4, #8]
 800365e:	6963      	ldr	r3, [r4, #20]
 8003660:	425b      	negs	r3, r3
 8003662:	61a3      	str	r3, [r4, #24]
 8003664:	6923      	ldr	r3, [r4, #16]
 8003666:	b953      	cbnz	r3, 800367e <__swsetup_r+0xc6>
 8003668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003670:	d1ba      	bne.n	80035e8 <__swsetup_r+0x30>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	0792      	lsls	r2, r2, #30
 8003676:	bf58      	it	pl
 8003678:	6963      	ldrpl	r3, [r4, #20]
 800367a:	60a3      	str	r3, [r4, #8]
 800367c:	e7f2      	b.n	8003664 <__swsetup_r+0xac>
 800367e:	2000      	movs	r0, #0
 8003680:	e7f7      	b.n	8003672 <__swsetup_r+0xba>
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c
 8003688:	080043e8 	.word	0x080043e8
 800368c:	08004408 	.word	0x08004408
 8003690:	080043c8 	.word	0x080043c8

08003694 <__sflush_r>:
 8003694:	898a      	ldrh	r2, [r1, #12]
 8003696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	4605      	mov	r5, r0
 800369c:	0710      	lsls	r0, r2, #28
 800369e:	460c      	mov	r4, r1
 80036a0:	d458      	bmi.n	8003754 <__sflush_r+0xc0>
 80036a2:	684b      	ldr	r3, [r1, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	dc05      	bgt.n	80036b4 <__sflush_r+0x20>
 80036a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dc02      	bgt.n	80036b4 <__sflush_r+0x20>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	d0f9      	beq.n	80036ae <__sflush_r+0x1a>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c0:	682f      	ldr	r7, [r5, #0]
 80036c2:	6a21      	ldr	r1, [r4, #32]
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	d032      	beq.n	800372e <__sflush_r+0x9a>
 80036c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	075a      	lsls	r2, r3, #29
 80036ce:	d505      	bpl.n	80036dc <__sflush_r+0x48>
 80036d0:	6863      	ldr	r3, [r4, #4]
 80036d2:	1ac0      	subs	r0, r0, r3
 80036d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d6:	b10b      	cbz	r3, 80036dc <__sflush_r+0x48>
 80036d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036da:	1ac0      	subs	r0, r0, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	4602      	mov	r2, r0
 80036e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e2:	6a21      	ldr	r1, [r4, #32]
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	d106      	bne.n	80036fc <__sflush_r+0x68>
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	291d      	cmp	r1, #29
 80036f2:	d848      	bhi.n	8003786 <__sflush_r+0xf2>
 80036f4:	4a29      	ldr	r2, [pc, #164]	; (800379c <__sflush_r+0x108>)
 80036f6:	40ca      	lsrs	r2, r1
 80036f8:	07d6      	lsls	r6, r2, #31
 80036fa:	d544      	bpl.n	8003786 <__sflush_r+0xf2>
 80036fc:	2200      	movs	r2, #0
 80036fe:	6062      	str	r2, [r4, #4]
 8003700:	04d9      	lsls	r1, r3, #19
 8003702:	6922      	ldr	r2, [r4, #16]
 8003704:	6022      	str	r2, [r4, #0]
 8003706:	d504      	bpl.n	8003712 <__sflush_r+0x7e>
 8003708:	1c42      	adds	r2, r0, #1
 800370a:	d101      	bne.n	8003710 <__sflush_r+0x7c>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b903      	cbnz	r3, 8003712 <__sflush_r+0x7e>
 8003710:	6560      	str	r0, [r4, #84]	; 0x54
 8003712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003714:	602f      	str	r7, [r5, #0]
 8003716:	2900      	cmp	r1, #0
 8003718:	d0c9      	beq.n	80036ae <__sflush_r+0x1a>
 800371a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800371e:	4299      	cmp	r1, r3
 8003720:	d002      	beq.n	8003728 <__sflush_r+0x94>
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f994 	bl	8003a50 <_free_r>
 8003728:	2000      	movs	r0, #0
 800372a:	6360      	str	r0, [r4, #52]	; 0x34
 800372c:	e7c0      	b.n	80036b0 <__sflush_r+0x1c>
 800372e:	2301      	movs	r3, #1
 8003730:	4628      	mov	r0, r5
 8003732:	47b0      	blx	r6
 8003734:	1c41      	adds	r1, r0, #1
 8003736:	d1c8      	bne.n	80036ca <__sflush_r+0x36>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0c5      	beq.n	80036ca <__sflush_r+0x36>
 800373e:	2b1d      	cmp	r3, #29
 8003740:	d001      	beq.n	8003746 <__sflush_r+0xb2>
 8003742:	2b16      	cmp	r3, #22
 8003744:	d101      	bne.n	800374a <__sflush_r+0xb6>
 8003746:	602f      	str	r7, [r5, #0]
 8003748:	e7b1      	b.n	80036ae <__sflush_r+0x1a>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	e7ad      	b.n	80036b0 <__sflush_r+0x1c>
 8003754:	690f      	ldr	r7, [r1, #16]
 8003756:	2f00      	cmp	r7, #0
 8003758:	d0a9      	beq.n	80036ae <__sflush_r+0x1a>
 800375a:	0793      	lsls	r3, r2, #30
 800375c:	680e      	ldr	r6, [r1, #0]
 800375e:	bf08      	it	eq
 8003760:	694b      	ldreq	r3, [r1, #20]
 8003762:	600f      	str	r7, [r1, #0]
 8003764:	bf18      	it	ne
 8003766:	2300      	movne	r3, #0
 8003768:	eba6 0807 	sub.w	r8, r6, r7
 800376c:	608b      	str	r3, [r1, #8]
 800376e:	f1b8 0f00 	cmp.w	r8, #0
 8003772:	dd9c      	ble.n	80036ae <__sflush_r+0x1a>
 8003774:	4643      	mov	r3, r8
 8003776:	463a      	mov	r2, r7
 8003778:	6a21      	ldr	r1, [r4, #32]
 800377a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800377c:	4628      	mov	r0, r5
 800377e:	47b0      	blx	r6
 8003780:	2800      	cmp	r0, #0
 8003782:	dc06      	bgt.n	8003792 <__sflush_r+0xfe>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	e78e      	b.n	80036b0 <__sflush_r+0x1c>
 8003792:	4407      	add	r7, r0
 8003794:	eba8 0800 	sub.w	r8, r8, r0
 8003798:	e7e9      	b.n	800376e <__sflush_r+0xda>
 800379a:	bf00      	nop
 800379c:	20400001 	.word	0x20400001

080037a0 <_fflush_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	4605      	mov	r5, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	b1db      	cbz	r3, 80037e2 <_fflush_r+0x42>
 80037aa:	b118      	cbz	r0, 80037b4 <_fflush_r+0x14>
 80037ac:	6983      	ldr	r3, [r0, #24]
 80037ae:	b90b      	cbnz	r3, 80037b4 <_fflush_r+0x14>
 80037b0:	f000 f860 	bl	8003874 <__sinit>
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <_fflush_r+0x48>)
 80037b6:	429c      	cmp	r4, r3
 80037b8:	d109      	bne.n	80037ce <_fflush_r+0x2e>
 80037ba:	686c      	ldr	r4, [r5, #4]
 80037bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c0:	b17b      	cbz	r3, 80037e2 <_fflush_r+0x42>
 80037c2:	4621      	mov	r1, r4
 80037c4:	4628      	mov	r0, r5
 80037c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ca:	f7ff bf63 	b.w	8003694 <__sflush_r>
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <_fflush_r+0x4c>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d101      	bne.n	80037d8 <_fflush_r+0x38>
 80037d4:	68ac      	ldr	r4, [r5, #8]
 80037d6:	e7f1      	b.n	80037bc <_fflush_r+0x1c>
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <_fflush_r+0x50>)
 80037da:	429c      	cmp	r4, r3
 80037dc:	bf08      	it	eq
 80037de:	68ec      	ldreq	r4, [r5, #12]
 80037e0:	e7ec      	b.n	80037bc <_fflush_r+0x1c>
 80037e2:	2000      	movs	r0, #0
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
 80037e6:	bf00      	nop
 80037e8:	080043e8 	.word	0x080043e8
 80037ec:	08004408 	.word	0x08004408
 80037f0:	080043c8 	.word	0x080043c8

080037f4 <std>:
 80037f4:	2300      	movs	r3, #0
 80037f6:	b510      	push	{r4, lr}
 80037f8:	4604      	mov	r4, r0
 80037fa:	e9c0 3300 	strd	r3, r3, [r0]
 80037fe:	6083      	str	r3, [r0, #8]
 8003800:	8181      	strh	r1, [r0, #12]
 8003802:	6643      	str	r3, [r0, #100]	; 0x64
 8003804:	81c2      	strh	r2, [r0, #14]
 8003806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800380a:	6183      	str	r3, [r0, #24]
 800380c:	4619      	mov	r1, r3
 800380e:	2208      	movs	r2, #8
 8003810:	305c      	adds	r0, #92	; 0x5c
 8003812:	f7ff fdfb 	bl	800340c <memset>
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <std+0x38>)
 8003818:	6263      	str	r3, [r4, #36]	; 0x24
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <std+0x3c>)
 800381c:	62a3      	str	r3, [r4, #40]	; 0x28
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <std+0x40>)
 8003820:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <std+0x44>)
 8003824:	6224      	str	r4, [r4, #32]
 8003826:	6323      	str	r3, [r4, #48]	; 0x30
 8003828:	bd10      	pop	{r4, pc}
 800382a:	bf00      	nop
 800382c:	08004151 	.word	0x08004151
 8003830:	08004173 	.word	0x08004173
 8003834:	080041ab 	.word	0x080041ab
 8003838:	080041cf 	.word	0x080041cf

0800383c <_cleanup_r>:
 800383c:	4901      	ldr	r1, [pc, #4]	; (8003844 <_cleanup_r+0x8>)
 800383e:	f000 b885 	b.w	800394c <_fwalk_reent>
 8003842:	bf00      	nop
 8003844:	080037a1 	.word	0x080037a1

08003848 <__sfmoreglue>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	1e4a      	subs	r2, r1, #1
 800384c:	2568      	movs	r5, #104	; 0x68
 800384e:	4355      	muls	r5, r2
 8003850:	460e      	mov	r6, r1
 8003852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003856:	f000 f949 	bl	8003aec <_malloc_r>
 800385a:	4604      	mov	r4, r0
 800385c:	b140      	cbz	r0, 8003870 <__sfmoreglue+0x28>
 800385e:	2100      	movs	r1, #0
 8003860:	e9c0 1600 	strd	r1, r6, [r0]
 8003864:	300c      	adds	r0, #12
 8003866:	60a0      	str	r0, [r4, #8]
 8003868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800386c:	f7ff fdce 	bl	800340c <memset>
 8003870:	4620      	mov	r0, r4
 8003872:	bd70      	pop	{r4, r5, r6, pc}

08003874 <__sinit>:
 8003874:	6983      	ldr	r3, [r0, #24]
 8003876:	b510      	push	{r4, lr}
 8003878:	4604      	mov	r4, r0
 800387a:	bb33      	cbnz	r3, 80038ca <__sinit+0x56>
 800387c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003880:	6503      	str	r3, [r0, #80]	; 0x50
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <__sinit+0x58>)
 8003884:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <__sinit+0x5c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6282      	str	r2, [r0, #40]	; 0x28
 800388a:	4298      	cmp	r0, r3
 800388c:	bf04      	itt	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	6183      	streq	r3, [r0, #24]
 8003892:	f000 f81f 	bl	80038d4 <__sfp>
 8003896:	6060      	str	r0, [r4, #4]
 8003898:	4620      	mov	r0, r4
 800389a:	f000 f81b 	bl	80038d4 <__sfp>
 800389e:	60a0      	str	r0, [r4, #8]
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 f817 	bl	80038d4 <__sfp>
 80038a6:	2200      	movs	r2, #0
 80038a8:	60e0      	str	r0, [r4, #12]
 80038aa:	2104      	movs	r1, #4
 80038ac:	6860      	ldr	r0, [r4, #4]
 80038ae:	f7ff ffa1 	bl	80037f4 <std>
 80038b2:	2201      	movs	r2, #1
 80038b4:	2109      	movs	r1, #9
 80038b6:	68a0      	ldr	r0, [r4, #8]
 80038b8:	f7ff ff9c 	bl	80037f4 <std>
 80038bc:	2202      	movs	r2, #2
 80038be:	2112      	movs	r1, #18
 80038c0:	68e0      	ldr	r0, [r4, #12]
 80038c2:	f7ff ff97 	bl	80037f4 <std>
 80038c6:	2301      	movs	r3, #1
 80038c8:	61a3      	str	r3, [r4, #24]
 80038ca:	bd10      	pop	{r4, pc}
 80038cc:	080043c4 	.word	0x080043c4
 80038d0:	0800383d 	.word	0x0800383d

080038d4 <__sfp>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <__sfp+0x70>)
 80038d8:	681e      	ldr	r6, [r3, #0]
 80038da:	69b3      	ldr	r3, [r6, #24]
 80038dc:	4607      	mov	r7, r0
 80038de:	b913      	cbnz	r3, 80038e6 <__sfp+0x12>
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7ff ffc7 	bl	8003874 <__sinit>
 80038e6:	3648      	adds	r6, #72	; 0x48
 80038e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	d503      	bpl.n	80038f8 <__sfp+0x24>
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	b133      	cbz	r3, 8003902 <__sfp+0x2e>
 80038f4:	6836      	ldr	r6, [r6, #0]
 80038f6:	e7f7      	b.n	80038e8 <__sfp+0x14>
 80038f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038fc:	b16d      	cbz	r5, 800391a <__sfp+0x46>
 80038fe:	3468      	adds	r4, #104	; 0x68
 8003900:	e7f4      	b.n	80038ec <__sfp+0x18>
 8003902:	2104      	movs	r1, #4
 8003904:	4638      	mov	r0, r7
 8003906:	f7ff ff9f 	bl	8003848 <__sfmoreglue>
 800390a:	6030      	str	r0, [r6, #0]
 800390c:	2800      	cmp	r0, #0
 800390e:	d1f1      	bne.n	80038f4 <__sfp+0x20>
 8003910:	230c      	movs	r3, #12
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	4604      	mov	r4, r0
 8003916:	4620      	mov	r0, r4
 8003918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <__sfp+0x74>)
 800391c:	6665      	str	r5, [r4, #100]	; 0x64
 800391e:	e9c4 5500 	strd	r5, r5, [r4]
 8003922:	60a5      	str	r5, [r4, #8]
 8003924:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003928:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800392c:	2208      	movs	r2, #8
 800392e:	4629      	mov	r1, r5
 8003930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003934:	f7ff fd6a 	bl	800340c <memset>
 8003938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800393c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003940:	e7e9      	b.n	8003916 <__sfp+0x42>
 8003942:	bf00      	nop
 8003944:	080043c4 	.word	0x080043c4
 8003948:	ffff0001 	.word	0xffff0001

0800394c <_fwalk_reent>:
 800394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003950:	4680      	mov	r8, r0
 8003952:	4689      	mov	r9, r1
 8003954:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003958:	2600      	movs	r6, #0
 800395a:	b914      	cbnz	r4, 8003962 <_fwalk_reent+0x16>
 800395c:	4630      	mov	r0, r6
 800395e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003962:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003966:	3f01      	subs	r7, #1
 8003968:	d501      	bpl.n	800396e <_fwalk_reent+0x22>
 800396a:	6824      	ldr	r4, [r4, #0]
 800396c:	e7f5      	b.n	800395a <_fwalk_reent+0xe>
 800396e:	89ab      	ldrh	r3, [r5, #12]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d907      	bls.n	8003984 <_fwalk_reent+0x38>
 8003974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003978:	3301      	adds	r3, #1
 800397a:	d003      	beq.n	8003984 <_fwalk_reent+0x38>
 800397c:	4629      	mov	r1, r5
 800397e:	4640      	mov	r0, r8
 8003980:	47c8      	blx	r9
 8003982:	4306      	orrs	r6, r0
 8003984:	3568      	adds	r5, #104	; 0x68
 8003986:	e7ee      	b.n	8003966 <_fwalk_reent+0x1a>

08003988 <__swhatbuf_r>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	460e      	mov	r6, r1
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	2900      	cmp	r1, #0
 8003992:	b096      	sub	sp, #88	; 0x58
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	da07      	bge.n	80039aa <__swhatbuf_r+0x22>
 800399a:	2300      	movs	r3, #0
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	89b3      	ldrh	r3, [r6, #12]
 80039a0:	061a      	lsls	r2, r3, #24
 80039a2:	d410      	bmi.n	80039c6 <__swhatbuf_r+0x3e>
 80039a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a8:	e00e      	b.n	80039c8 <__swhatbuf_r+0x40>
 80039aa:	466a      	mov	r2, sp
 80039ac:	f000 fc36 	bl	800421c <_fstat_r>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	dbf2      	blt.n	800399a <__swhatbuf_r+0x12>
 80039b4:	9a01      	ldr	r2, [sp, #4]
 80039b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039be:	425a      	negs	r2, r3
 80039c0:	415a      	adcs	r2, r3
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	e7ee      	b.n	80039a4 <__swhatbuf_r+0x1c>
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	2000      	movs	r0, #0
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	b016      	add	sp, #88	; 0x58
 80039ce:	bd70      	pop	{r4, r5, r6, pc}

080039d0 <__smakebuf_r>:
 80039d0:	898b      	ldrh	r3, [r1, #12]
 80039d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039d4:	079d      	lsls	r5, r3, #30
 80039d6:	4606      	mov	r6, r0
 80039d8:	460c      	mov	r4, r1
 80039da:	d507      	bpl.n	80039ec <__smakebuf_r+0x1c>
 80039dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	2301      	movs	r3, #1
 80039e6:	6163      	str	r3, [r4, #20]
 80039e8:	b002      	add	sp, #8
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	ab01      	add	r3, sp, #4
 80039ee:	466a      	mov	r2, sp
 80039f0:	f7ff ffca 	bl	8003988 <__swhatbuf_r>
 80039f4:	9900      	ldr	r1, [sp, #0]
 80039f6:	4605      	mov	r5, r0
 80039f8:	4630      	mov	r0, r6
 80039fa:	f000 f877 	bl	8003aec <_malloc_r>
 80039fe:	b948      	cbnz	r0, 8003a14 <__smakebuf_r+0x44>
 8003a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a04:	059a      	lsls	r2, r3, #22
 8003a06:	d4ef      	bmi.n	80039e8 <__smakebuf_r+0x18>
 8003a08:	f023 0303 	bic.w	r3, r3, #3
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	e7e3      	b.n	80039dc <__smakebuf_r+0xc>
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <__smakebuf_r+0x7c>)
 8003a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	6020      	str	r0, [r4, #0]
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	9b00      	ldr	r3, [sp, #0]
 8003a24:	6163      	str	r3, [r4, #20]
 8003a26:	9b01      	ldr	r3, [sp, #4]
 8003a28:	6120      	str	r0, [r4, #16]
 8003a2a:	b15b      	cbz	r3, 8003a44 <__smakebuf_r+0x74>
 8003a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a30:	4630      	mov	r0, r6
 8003a32:	f000 fc05 	bl	8004240 <_isatty_r>
 8003a36:	b128      	cbz	r0, 8003a44 <__smakebuf_r+0x74>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	431d      	orrs	r5, r3
 8003a48:	81a5      	strh	r5, [r4, #12]
 8003a4a:	e7cd      	b.n	80039e8 <__smakebuf_r+0x18>
 8003a4c:	0800383d 	.word	0x0800383d

08003a50 <_free_r>:
 8003a50:	b538      	push	{r3, r4, r5, lr}
 8003a52:	4605      	mov	r5, r0
 8003a54:	2900      	cmp	r1, #0
 8003a56:	d045      	beq.n	8003ae4 <_free_r+0x94>
 8003a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a5c:	1f0c      	subs	r4, r1, #4
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bfb8      	it	lt
 8003a62:	18e4      	addlt	r4, r4, r3
 8003a64:	f000 fc0e 	bl	8004284 <__malloc_lock>
 8003a68:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <_free_r+0x98>)
 8003a6a:	6813      	ldr	r3, [r2, #0]
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	b933      	cbnz	r3, 8003a7e <_free_r+0x2e>
 8003a70:	6063      	str	r3, [r4, #4]
 8003a72:	6014      	str	r4, [r2, #0]
 8003a74:	4628      	mov	r0, r5
 8003a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a7a:	f000 bc04 	b.w	8004286 <__malloc_unlock>
 8003a7e:	42a3      	cmp	r3, r4
 8003a80:	d90c      	bls.n	8003a9c <_free_r+0x4c>
 8003a82:	6821      	ldr	r1, [r4, #0]
 8003a84:	1862      	adds	r2, r4, r1
 8003a86:	4293      	cmp	r3, r2
 8003a88:	bf04      	itt	eq
 8003a8a:	681a      	ldreq	r2, [r3, #0]
 8003a8c:	685b      	ldreq	r3, [r3, #4]
 8003a8e:	6063      	str	r3, [r4, #4]
 8003a90:	bf04      	itt	eq
 8003a92:	1852      	addeq	r2, r2, r1
 8003a94:	6022      	streq	r2, [r4, #0]
 8003a96:	6004      	str	r4, [r0, #0]
 8003a98:	e7ec      	b.n	8003a74 <_free_r+0x24>
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	b10a      	cbz	r2, 8003aa4 <_free_r+0x54>
 8003aa0:	42a2      	cmp	r2, r4
 8003aa2:	d9fa      	bls.n	8003a9a <_free_r+0x4a>
 8003aa4:	6819      	ldr	r1, [r3, #0]
 8003aa6:	1858      	adds	r0, r3, r1
 8003aa8:	42a0      	cmp	r0, r4
 8003aaa:	d10b      	bne.n	8003ac4 <_free_r+0x74>
 8003aac:	6820      	ldr	r0, [r4, #0]
 8003aae:	4401      	add	r1, r0
 8003ab0:	1858      	adds	r0, r3, r1
 8003ab2:	4282      	cmp	r2, r0
 8003ab4:	6019      	str	r1, [r3, #0]
 8003ab6:	d1dd      	bne.n	8003a74 <_free_r+0x24>
 8003ab8:	6810      	ldr	r0, [r2, #0]
 8003aba:	6852      	ldr	r2, [r2, #4]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	4401      	add	r1, r0
 8003ac0:	6019      	str	r1, [r3, #0]
 8003ac2:	e7d7      	b.n	8003a74 <_free_r+0x24>
 8003ac4:	d902      	bls.n	8003acc <_free_r+0x7c>
 8003ac6:	230c      	movs	r3, #12
 8003ac8:	602b      	str	r3, [r5, #0]
 8003aca:	e7d3      	b.n	8003a74 <_free_r+0x24>
 8003acc:	6820      	ldr	r0, [r4, #0]
 8003ace:	1821      	adds	r1, r4, r0
 8003ad0:	428a      	cmp	r2, r1
 8003ad2:	bf04      	itt	eq
 8003ad4:	6811      	ldreq	r1, [r2, #0]
 8003ad6:	6852      	ldreq	r2, [r2, #4]
 8003ad8:	6062      	str	r2, [r4, #4]
 8003ada:	bf04      	itt	eq
 8003adc:	1809      	addeq	r1, r1, r0
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	605c      	str	r4, [r3, #4]
 8003ae2:	e7c7      	b.n	8003a74 <_free_r+0x24>
 8003ae4:	bd38      	pop	{r3, r4, r5, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000094 	.word	0x20000094

08003aec <_malloc_r>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	1ccd      	adds	r5, r1, #3
 8003af0:	f025 0503 	bic.w	r5, r5, #3
 8003af4:	3508      	adds	r5, #8
 8003af6:	2d0c      	cmp	r5, #12
 8003af8:	bf38      	it	cc
 8003afa:	250c      	movcc	r5, #12
 8003afc:	2d00      	cmp	r5, #0
 8003afe:	4606      	mov	r6, r0
 8003b00:	db01      	blt.n	8003b06 <_malloc_r+0x1a>
 8003b02:	42a9      	cmp	r1, r5
 8003b04:	d903      	bls.n	8003b0e <_malloc_r+0x22>
 8003b06:	230c      	movs	r3, #12
 8003b08:	6033      	str	r3, [r6, #0]
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	bd70      	pop	{r4, r5, r6, pc}
 8003b0e:	f000 fbb9 	bl	8004284 <__malloc_lock>
 8003b12:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <_malloc_r+0xac>)
 8003b14:	6814      	ldr	r4, [r2, #0]
 8003b16:	4621      	mov	r1, r4
 8003b18:	b991      	cbnz	r1, 8003b40 <_malloc_r+0x54>
 8003b1a:	4c20      	ldr	r4, [pc, #128]	; (8003b9c <_malloc_r+0xb0>)
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	b91b      	cbnz	r3, 8003b28 <_malloc_r+0x3c>
 8003b20:	4630      	mov	r0, r6
 8003b22:	f000 fb05 	bl	8004130 <_sbrk_r>
 8003b26:	6020      	str	r0, [r4, #0]
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	f000 fb00 	bl	8004130 <_sbrk_r>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d124      	bne.n	8003b7e <_malloc_r+0x92>
 8003b34:	230c      	movs	r3, #12
 8003b36:	6033      	str	r3, [r6, #0]
 8003b38:	4630      	mov	r0, r6
 8003b3a:	f000 fba4 	bl	8004286 <__malloc_unlock>
 8003b3e:	e7e4      	b.n	8003b0a <_malloc_r+0x1e>
 8003b40:	680b      	ldr	r3, [r1, #0]
 8003b42:	1b5b      	subs	r3, r3, r5
 8003b44:	d418      	bmi.n	8003b78 <_malloc_r+0x8c>
 8003b46:	2b0b      	cmp	r3, #11
 8003b48:	d90f      	bls.n	8003b6a <_malloc_r+0x7e>
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	50cd      	str	r5, [r1, r3]
 8003b4e:	18cc      	adds	r4, r1, r3
 8003b50:	4630      	mov	r0, r6
 8003b52:	f000 fb98 	bl	8004286 <__malloc_unlock>
 8003b56:	f104 000b 	add.w	r0, r4, #11
 8003b5a:	1d23      	adds	r3, r4, #4
 8003b5c:	f020 0007 	bic.w	r0, r0, #7
 8003b60:	1ac3      	subs	r3, r0, r3
 8003b62:	d0d3      	beq.n	8003b0c <_malloc_r+0x20>
 8003b64:	425a      	negs	r2, r3
 8003b66:	50e2      	str	r2, [r4, r3]
 8003b68:	e7d0      	b.n	8003b0c <_malloc_r+0x20>
 8003b6a:	428c      	cmp	r4, r1
 8003b6c:	684b      	ldr	r3, [r1, #4]
 8003b6e:	bf16      	itet	ne
 8003b70:	6063      	strne	r3, [r4, #4]
 8003b72:	6013      	streq	r3, [r2, #0]
 8003b74:	460c      	movne	r4, r1
 8003b76:	e7eb      	b.n	8003b50 <_malloc_r+0x64>
 8003b78:	460c      	mov	r4, r1
 8003b7a:	6849      	ldr	r1, [r1, #4]
 8003b7c:	e7cc      	b.n	8003b18 <_malloc_r+0x2c>
 8003b7e:	1cc4      	adds	r4, r0, #3
 8003b80:	f024 0403 	bic.w	r4, r4, #3
 8003b84:	42a0      	cmp	r0, r4
 8003b86:	d005      	beq.n	8003b94 <_malloc_r+0xa8>
 8003b88:	1a21      	subs	r1, r4, r0
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	f000 fad0 	bl	8004130 <_sbrk_r>
 8003b90:	3001      	adds	r0, #1
 8003b92:	d0cf      	beq.n	8003b34 <_malloc_r+0x48>
 8003b94:	6025      	str	r5, [r4, #0]
 8003b96:	e7db      	b.n	8003b50 <_malloc_r+0x64>
 8003b98:	20000094 	.word	0x20000094
 8003b9c:	20000098 	.word	0x20000098

08003ba0 <__sfputc_r>:
 8003ba0:	6893      	ldr	r3, [r2, #8]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	b410      	push	{r4}
 8003ba8:	6093      	str	r3, [r2, #8]
 8003baa:	da08      	bge.n	8003bbe <__sfputc_r+0x1e>
 8003bac:	6994      	ldr	r4, [r2, #24]
 8003bae:	42a3      	cmp	r3, r4
 8003bb0:	db01      	blt.n	8003bb6 <__sfputc_r+0x16>
 8003bb2:	290a      	cmp	r1, #10
 8003bb4:	d103      	bne.n	8003bbe <__sfputc_r+0x1e>
 8003bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bba:	f7ff bcab 	b.w	8003514 <__swbuf_r>
 8003bbe:	6813      	ldr	r3, [r2, #0]
 8003bc0:	1c58      	adds	r0, r3, #1
 8003bc2:	6010      	str	r0, [r2, #0]
 8003bc4:	7019      	strb	r1, [r3, #0]
 8003bc6:	4608      	mov	r0, r1
 8003bc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <__sfputs_r>:
 8003bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd0:	4606      	mov	r6, r0
 8003bd2:	460f      	mov	r7, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	18d5      	adds	r5, r2, r3
 8003bd8:	42ac      	cmp	r4, r5
 8003bda:	d101      	bne.n	8003be0 <__sfputs_r+0x12>
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e007      	b.n	8003bf0 <__sfputs_r+0x22>
 8003be0:	463a      	mov	r2, r7
 8003be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffda 	bl	8003ba0 <__sfputc_r>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d1f3      	bne.n	8003bd8 <__sfputs_r+0xa>
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bf4 <_vfiprintf_r>:
 8003bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	b09d      	sub	sp, #116	; 0x74
 8003bfc:	4617      	mov	r7, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4606      	mov	r6, r0
 8003c02:	b118      	cbz	r0, 8003c0c <_vfiprintf_r+0x18>
 8003c04:	6983      	ldr	r3, [r0, #24]
 8003c06:	b90b      	cbnz	r3, 8003c0c <_vfiprintf_r+0x18>
 8003c08:	f7ff fe34 	bl	8003874 <__sinit>
 8003c0c:	4b7c      	ldr	r3, [pc, #496]	; (8003e00 <_vfiprintf_r+0x20c>)
 8003c0e:	429c      	cmp	r4, r3
 8003c10:	d158      	bne.n	8003cc4 <_vfiprintf_r+0xd0>
 8003c12:	6874      	ldr	r4, [r6, #4]
 8003c14:	89a3      	ldrh	r3, [r4, #12]
 8003c16:	0718      	lsls	r0, r3, #28
 8003c18:	d55e      	bpl.n	8003cd8 <_vfiprintf_r+0xe4>
 8003c1a:	6923      	ldr	r3, [r4, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <_vfiprintf_r+0xe4>
 8003c20:	2300      	movs	r3, #0
 8003c22:	9309      	str	r3, [sp, #36]	; 0x24
 8003c24:	2320      	movs	r3, #32
 8003c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c2a:	2330      	movs	r3, #48	; 0x30
 8003c2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c30:	9503      	str	r5, [sp, #12]
 8003c32:	f04f 0b01 	mov.w	fp, #1
 8003c36:	46b8      	mov	r8, r7
 8003c38:	4645      	mov	r5, r8
 8003c3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c3e:	b10b      	cbz	r3, 8003c44 <_vfiprintf_r+0x50>
 8003c40:	2b25      	cmp	r3, #37	; 0x25
 8003c42:	d154      	bne.n	8003cee <_vfiprintf_r+0xfa>
 8003c44:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c48:	d00b      	beq.n	8003c62 <_vfiprintf_r+0x6e>
 8003c4a:	4653      	mov	r3, sl
 8003c4c:	463a      	mov	r2, r7
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff ffbc 	bl	8003bce <__sfputs_r>
 8003c56:	3001      	adds	r0, #1
 8003c58:	f000 80c2 	beq.w	8003de0 <_vfiprintf_r+0x1ec>
 8003c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5e:	4453      	add	r3, sl
 8003c60:	9309      	str	r3, [sp, #36]	; 0x24
 8003c62:	f898 3000 	ldrb.w	r3, [r8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80ba 	beq.w	8003de0 <_vfiprintf_r+0x1ec>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c76:	9304      	str	r3, [sp, #16]
 8003c78:	9307      	str	r3, [sp, #28]
 8003c7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c7e:	931a      	str	r3, [sp, #104]	; 0x68
 8003c80:	46a8      	mov	r8, r5
 8003c82:	2205      	movs	r2, #5
 8003c84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c88:	485e      	ldr	r0, [pc, #376]	; (8003e04 <_vfiprintf_r+0x210>)
 8003c8a:	f7fc fad9 	bl	8000240 <memchr>
 8003c8e:	9b04      	ldr	r3, [sp, #16]
 8003c90:	bb78      	cbnz	r0, 8003cf2 <_vfiprintf_r+0xfe>
 8003c92:	06d9      	lsls	r1, r3, #27
 8003c94:	bf44      	itt	mi
 8003c96:	2220      	movmi	r2, #32
 8003c98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c9c:	071a      	lsls	r2, r3, #28
 8003c9e:	bf44      	itt	mi
 8003ca0:	222b      	movmi	r2, #43	; 0x2b
 8003ca2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ca6:	782a      	ldrb	r2, [r5, #0]
 8003ca8:	2a2a      	cmp	r2, #42	; 0x2a
 8003caa:	d02a      	beq.n	8003d02 <_vfiprintf_r+0x10e>
 8003cac:	9a07      	ldr	r2, [sp, #28]
 8003cae:	46a8      	mov	r8, r5
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	250a      	movs	r5, #10
 8003cb4:	4641      	mov	r1, r8
 8003cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cba:	3b30      	subs	r3, #48	; 0x30
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d969      	bls.n	8003d94 <_vfiprintf_r+0x1a0>
 8003cc0:	b360      	cbz	r0, 8003d1c <_vfiprintf_r+0x128>
 8003cc2:	e024      	b.n	8003d0e <_vfiprintf_r+0x11a>
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <_vfiprintf_r+0x214>)
 8003cc6:	429c      	cmp	r4, r3
 8003cc8:	d101      	bne.n	8003cce <_vfiprintf_r+0xda>
 8003cca:	68b4      	ldr	r4, [r6, #8]
 8003ccc:	e7a2      	b.n	8003c14 <_vfiprintf_r+0x20>
 8003cce:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <_vfiprintf_r+0x218>)
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	bf08      	it	eq
 8003cd4:	68f4      	ldreq	r4, [r6, #12]
 8003cd6:	e79d      	b.n	8003c14 <_vfiprintf_r+0x20>
 8003cd8:	4621      	mov	r1, r4
 8003cda:	4630      	mov	r0, r6
 8003cdc:	f7ff fc6c 	bl	80035b8 <__swsetup_r>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d09d      	beq.n	8003c20 <_vfiprintf_r+0x2c>
 8003ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce8:	b01d      	add	sp, #116	; 0x74
 8003cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cee:	46a8      	mov	r8, r5
 8003cf0:	e7a2      	b.n	8003c38 <_vfiprintf_r+0x44>
 8003cf2:	4a44      	ldr	r2, [pc, #272]	; (8003e04 <_vfiprintf_r+0x210>)
 8003cf4:	1a80      	subs	r0, r0, r2
 8003cf6:	fa0b f000 	lsl.w	r0, fp, r0
 8003cfa:	4318      	orrs	r0, r3
 8003cfc:	9004      	str	r0, [sp, #16]
 8003cfe:	4645      	mov	r5, r8
 8003d00:	e7be      	b.n	8003c80 <_vfiprintf_r+0x8c>
 8003d02:	9a03      	ldr	r2, [sp, #12]
 8003d04:	1d11      	adds	r1, r2, #4
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	9103      	str	r1, [sp, #12]
 8003d0a:	2a00      	cmp	r2, #0
 8003d0c:	db01      	blt.n	8003d12 <_vfiprintf_r+0x11e>
 8003d0e:	9207      	str	r2, [sp, #28]
 8003d10:	e004      	b.n	8003d1c <_vfiprintf_r+0x128>
 8003d12:	4252      	negs	r2, r2
 8003d14:	f043 0302 	orr.w	r3, r3, #2
 8003d18:	9207      	str	r2, [sp, #28]
 8003d1a:	9304      	str	r3, [sp, #16]
 8003d1c:	f898 3000 	ldrb.w	r3, [r8]
 8003d20:	2b2e      	cmp	r3, #46	; 0x2e
 8003d22:	d10e      	bne.n	8003d42 <_vfiprintf_r+0x14e>
 8003d24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d28:	2b2a      	cmp	r3, #42	; 0x2a
 8003d2a:	d138      	bne.n	8003d9e <_vfiprintf_r+0x1aa>
 8003d2c:	9b03      	ldr	r3, [sp, #12]
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	9203      	str	r2, [sp, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfb8      	it	lt
 8003d38:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d3c:	f108 0802 	add.w	r8, r8, #2
 8003d40:	9305      	str	r3, [sp, #20]
 8003d42:	4d33      	ldr	r5, [pc, #204]	; (8003e10 <_vfiprintf_r+0x21c>)
 8003d44:	f898 1000 	ldrb.w	r1, [r8]
 8003d48:	2203      	movs	r2, #3
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7fc fa78 	bl	8000240 <memchr>
 8003d50:	b140      	cbz	r0, 8003d64 <_vfiprintf_r+0x170>
 8003d52:	2340      	movs	r3, #64	; 0x40
 8003d54:	1b40      	subs	r0, r0, r5
 8003d56:	fa03 f000 	lsl.w	r0, r3, r0
 8003d5a:	9b04      	ldr	r3, [sp, #16]
 8003d5c:	4303      	orrs	r3, r0
 8003d5e:	f108 0801 	add.w	r8, r8, #1
 8003d62:	9304      	str	r3, [sp, #16]
 8003d64:	f898 1000 	ldrb.w	r1, [r8]
 8003d68:	482a      	ldr	r0, [pc, #168]	; (8003e14 <_vfiprintf_r+0x220>)
 8003d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d6e:	2206      	movs	r2, #6
 8003d70:	f108 0701 	add.w	r7, r8, #1
 8003d74:	f7fc fa64 	bl	8000240 <memchr>
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	d037      	beq.n	8003dec <_vfiprintf_r+0x1f8>
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <_vfiprintf_r+0x224>)
 8003d7e:	bb1b      	cbnz	r3, 8003dc8 <_vfiprintf_r+0x1d4>
 8003d80:	9b03      	ldr	r3, [sp, #12]
 8003d82:	3307      	adds	r3, #7
 8003d84:	f023 0307 	bic.w	r3, r3, #7
 8003d88:	3308      	adds	r3, #8
 8003d8a:	9303      	str	r3, [sp, #12]
 8003d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d8e:	444b      	add	r3, r9
 8003d90:	9309      	str	r3, [sp, #36]	; 0x24
 8003d92:	e750      	b.n	8003c36 <_vfiprintf_r+0x42>
 8003d94:	fb05 3202 	mla	r2, r5, r2, r3
 8003d98:	2001      	movs	r0, #1
 8003d9a:	4688      	mov	r8, r1
 8003d9c:	e78a      	b.n	8003cb4 <_vfiprintf_r+0xc0>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f108 0801 	add.w	r8, r8, #1
 8003da4:	9305      	str	r3, [sp, #20]
 8003da6:	4619      	mov	r1, r3
 8003da8:	250a      	movs	r5, #10
 8003daa:	4640      	mov	r0, r8
 8003dac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db0:	3a30      	subs	r2, #48	; 0x30
 8003db2:	2a09      	cmp	r2, #9
 8003db4:	d903      	bls.n	8003dbe <_vfiprintf_r+0x1ca>
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0c3      	beq.n	8003d42 <_vfiprintf_r+0x14e>
 8003dba:	9105      	str	r1, [sp, #20]
 8003dbc:	e7c1      	b.n	8003d42 <_vfiprintf_r+0x14e>
 8003dbe:	fb05 2101 	mla	r1, r5, r1, r2
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	4680      	mov	r8, r0
 8003dc6:	e7f0      	b.n	8003daa <_vfiprintf_r+0x1b6>
 8003dc8:	ab03      	add	r3, sp, #12
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	4622      	mov	r2, r4
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <_vfiprintf_r+0x228>)
 8003dd0:	a904      	add	r1, sp, #16
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f3af 8000 	nop.w
 8003dd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ddc:	4681      	mov	r9, r0
 8003dde:	d1d5      	bne.n	8003d8c <_vfiprintf_r+0x198>
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	065b      	lsls	r3, r3, #25
 8003de4:	f53f af7e 	bmi.w	8003ce4 <_vfiprintf_r+0xf0>
 8003de8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dea:	e77d      	b.n	8003ce8 <_vfiprintf_r+0xf4>
 8003dec:	ab03      	add	r3, sp, #12
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	4622      	mov	r2, r4
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <_vfiprintf_r+0x228>)
 8003df4:	a904      	add	r1, sp, #16
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 f888 	bl	8003f0c <_printf_i>
 8003dfc:	e7ec      	b.n	8003dd8 <_vfiprintf_r+0x1e4>
 8003dfe:	bf00      	nop
 8003e00:	080043e8 	.word	0x080043e8
 8003e04:	08004428 	.word	0x08004428
 8003e08:	08004408 	.word	0x08004408
 8003e0c:	080043c8 	.word	0x080043c8
 8003e10:	0800442e 	.word	0x0800442e
 8003e14:	08004432 	.word	0x08004432
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	08003bcf 	.word	0x08003bcf

08003e20 <_printf_common>:
 8003e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e24:	4691      	mov	r9, r2
 8003e26:	461f      	mov	r7, r3
 8003e28:	688a      	ldr	r2, [r1, #8]
 8003e2a:	690b      	ldr	r3, [r1, #16]
 8003e2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	bfb8      	it	lt
 8003e34:	4613      	movlt	r3, r2
 8003e36:	f8c9 3000 	str.w	r3, [r9]
 8003e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e3e:	4606      	mov	r6, r0
 8003e40:	460c      	mov	r4, r1
 8003e42:	b112      	cbz	r2, 8003e4a <_printf_common+0x2a>
 8003e44:	3301      	adds	r3, #1
 8003e46:	f8c9 3000 	str.w	r3, [r9]
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	0699      	lsls	r1, r3, #26
 8003e4e:	bf42      	ittt	mi
 8003e50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e54:	3302      	addmi	r3, #2
 8003e56:	f8c9 3000 	strmi.w	r3, [r9]
 8003e5a:	6825      	ldr	r5, [r4, #0]
 8003e5c:	f015 0506 	ands.w	r5, r5, #6
 8003e60:	d107      	bne.n	8003e72 <_printf_common+0x52>
 8003e62:	f104 0a19 	add.w	sl, r4, #25
 8003e66:	68e3      	ldr	r3, [r4, #12]
 8003e68:	f8d9 2000 	ldr.w	r2, [r9]
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	42ab      	cmp	r3, r5
 8003e70:	dc28      	bgt.n	8003ec4 <_printf_common+0xa4>
 8003e72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e76:	6822      	ldr	r2, [r4, #0]
 8003e78:	3300      	adds	r3, #0
 8003e7a:	bf18      	it	ne
 8003e7c:	2301      	movne	r3, #1
 8003e7e:	0692      	lsls	r2, r2, #26
 8003e80:	d42d      	bmi.n	8003ede <_printf_common+0xbe>
 8003e82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e86:	4639      	mov	r1, r7
 8003e88:	4630      	mov	r0, r6
 8003e8a:	47c0      	blx	r8
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d020      	beq.n	8003ed2 <_printf_common+0xb2>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	68e5      	ldr	r5, [r4, #12]
 8003e94:	f8d9 2000 	ldr.w	r2, [r9]
 8003e98:	f003 0306 	and.w	r3, r3, #6
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	bf08      	it	eq
 8003ea0:	1aad      	subeq	r5, r5, r2
 8003ea2:	68a3      	ldr	r3, [r4, #8]
 8003ea4:	6922      	ldr	r2, [r4, #16]
 8003ea6:	bf0c      	ite	eq
 8003ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eac:	2500      	movne	r5, #0
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	bfc4      	itt	gt
 8003eb2:	1a9b      	subgt	r3, r3, r2
 8003eb4:	18ed      	addgt	r5, r5, r3
 8003eb6:	f04f 0900 	mov.w	r9, #0
 8003eba:	341a      	adds	r4, #26
 8003ebc:	454d      	cmp	r5, r9
 8003ebe:	d11a      	bne.n	8003ef6 <_printf_common+0xd6>
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e008      	b.n	8003ed6 <_printf_common+0xb6>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4652      	mov	r2, sl
 8003ec8:	4639      	mov	r1, r7
 8003eca:	4630      	mov	r0, r6
 8003ecc:	47c0      	blx	r8
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d103      	bne.n	8003eda <_printf_common+0xba>
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eda:	3501      	adds	r5, #1
 8003edc:	e7c3      	b.n	8003e66 <_printf_common+0x46>
 8003ede:	18e1      	adds	r1, r4, r3
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	2030      	movs	r0, #48	; 0x30
 8003ee4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee8:	4422      	add	r2, r4
 8003eea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	e7c5      	b.n	8003e82 <_printf_common+0x62>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4622      	mov	r2, r4
 8003efa:	4639      	mov	r1, r7
 8003efc:	4630      	mov	r0, r6
 8003efe:	47c0      	blx	r8
 8003f00:	3001      	adds	r0, #1
 8003f02:	d0e6      	beq.n	8003ed2 <_printf_common+0xb2>
 8003f04:	f109 0901 	add.w	r9, r9, #1
 8003f08:	e7d8      	b.n	8003ebc <_printf_common+0x9c>
	...

08003f0c <_printf_i>:
 8003f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f14:	460c      	mov	r4, r1
 8003f16:	7e09      	ldrb	r1, [r1, #24]
 8003f18:	b085      	sub	sp, #20
 8003f1a:	296e      	cmp	r1, #110	; 0x6e
 8003f1c:	4617      	mov	r7, r2
 8003f1e:	4606      	mov	r6, r0
 8003f20:	4698      	mov	r8, r3
 8003f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f24:	f000 80b3 	beq.w	800408e <_printf_i+0x182>
 8003f28:	d822      	bhi.n	8003f70 <_printf_i+0x64>
 8003f2a:	2963      	cmp	r1, #99	; 0x63
 8003f2c:	d036      	beq.n	8003f9c <_printf_i+0x90>
 8003f2e:	d80a      	bhi.n	8003f46 <_printf_i+0x3a>
 8003f30:	2900      	cmp	r1, #0
 8003f32:	f000 80b9 	beq.w	80040a8 <_printf_i+0x19c>
 8003f36:	2958      	cmp	r1, #88	; 0x58
 8003f38:	f000 8083 	beq.w	8004042 <_printf_i+0x136>
 8003f3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f44:	e032      	b.n	8003fac <_printf_i+0xa0>
 8003f46:	2964      	cmp	r1, #100	; 0x64
 8003f48:	d001      	beq.n	8003f4e <_printf_i+0x42>
 8003f4a:	2969      	cmp	r1, #105	; 0x69
 8003f4c:	d1f6      	bne.n	8003f3c <_printf_i+0x30>
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	6813      	ldr	r3, [r2, #0]
 8003f52:	0605      	lsls	r5, r0, #24
 8003f54:	f103 0104 	add.w	r1, r3, #4
 8003f58:	d52a      	bpl.n	8003fb0 <_printf_i+0xa4>
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6011      	str	r1, [r2, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	da03      	bge.n	8003f6a <_printf_i+0x5e>
 8003f62:	222d      	movs	r2, #45	; 0x2d
 8003f64:	425b      	negs	r3, r3
 8003f66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f6a:	486f      	ldr	r0, [pc, #444]	; (8004128 <_printf_i+0x21c>)
 8003f6c:	220a      	movs	r2, #10
 8003f6e:	e039      	b.n	8003fe4 <_printf_i+0xd8>
 8003f70:	2973      	cmp	r1, #115	; 0x73
 8003f72:	f000 809d 	beq.w	80040b0 <_printf_i+0x1a4>
 8003f76:	d808      	bhi.n	8003f8a <_printf_i+0x7e>
 8003f78:	296f      	cmp	r1, #111	; 0x6f
 8003f7a:	d020      	beq.n	8003fbe <_printf_i+0xb2>
 8003f7c:	2970      	cmp	r1, #112	; 0x70
 8003f7e:	d1dd      	bne.n	8003f3c <_printf_i+0x30>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	f043 0320 	orr.w	r3, r3, #32
 8003f86:	6023      	str	r3, [r4, #0]
 8003f88:	e003      	b.n	8003f92 <_printf_i+0x86>
 8003f8a:	2975      	cmp	r1, #117	; 0x75
 8003f8c:	d017      	beq.n	8003fbe <_printf_i+0xb2>
 8003f8e:	2978      	cmp	r1, #120	; 0x78
 8003f90:	d1d4      	bne.n	8003f3c <_printf_i+0x30>
 8003f92:	2378      	movs	r3, #120	; 0x78
 8003f94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f98:	4864      	ldr	r0, [pc, #400]	; (800412c <_printf_i+0x220>)
 8003f9a:	e055      	b.n	8004048 <_printf_i+0x13c>
 8003f9c:	6813      	ldr	r3, [r2, #0]
 8003f9e:	1d19      	adds	r1, r3, #4
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6011      	str	r1, [r2, #0]
 8003fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fac:	2301      	movs	r3, #1
 8003fae:	e08c      	b.n	80040ca <_printf_i+0x1be>
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6011      	str	r1, [r2, #0]
 8003fb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fb8:	bf18      	it	ne
 8003fba:	b21b      	sxthne	r3, r3
 8003fbc:	e7cf      	b.n	8003f5e <_printf_i+0x52>
 8003fbe:	6813      	ldr	r3, [r2, #0]
 8003fc0:	6825      	ldr	r5, [r4, #0]
 8003fc2:	1d18      	adds	r0, r3, #4
 8003fc4:	6010      	str	r0, [r2, #0]
 8003fc6:	0628      	lsls	r0, r5, #24
 8003fc8:	d501      	bpl.n	8003fce <_printf_i+0xc2>
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	e002      	b.n	8003fd4 <_printf_i+0xc8>
 8003fce:	0668      	lsls	r0, r5, #25
 8003fd0:	d5fb      	bpl.n	8003fca <_printf_i+0xbe>
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	4854      	ldr	r0, [pc, #336]	; (8004128 <_printf_i+0x21c>)
 8003fd6:	296f      	cmp	r1, #111	; 0x6f
 8003fd8:	bf14      	ite	ne
 8003fda:	220a      	movne	r2, #10
 8003fdc:	2208      	moveq	r2, #8
 8003fde:	2100      	movs	r1, #0
 8003fe0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fe4:	6865      	ldr	r5, [r4, #4]
 8003fe6:	60a5      	str	r5, [r4, #8]
 8003fe8:	2d00      	cmp	r5, #0
 8003fea:	f2c0 8095 	blt.w	8004118 <_printf_i+0x20c>
 8003fee:	6821      	ldr	r1, [r4, #0]
 8003ff0:	f021 0104 	bic.w	r1, r1, #4
 8003ff4:	6021      	str	r1, [r4, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d13d      	bne.n	8004076 <_printf_i+0x16a>
 8003ffa:	2d00      	cmp	r5, #0
 8003ffc:	f040 808e 	bne.w	800411c <_printf_i+0x210>
 8004000:	4665      	mov	r5, ip
 8004002:	2a08      	cmp	r2, #8
 8004004:	d10b      	bne.n	800401e <_printf_i+0x112>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	07db      	lsls	r3, r3, #31
 800400a:	d508      	bpl.n	800401e <_printf_i+0x112>
 800400c:	6923      	ldr	r3, [r4, #16]
 800400e:	6862      	ldr	r2, [r4, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	bfde      	ittt	le
 8004014:	2330      	movle	r3, #48	; 0x30
 8004016:	f805 3c01 	strble.w	r3, [r5, #-1]
 800401a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800401e:	ebac 0305 	sub.w	r3, ip, r5
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	f8cd 8000 	str.w	r8, [sp]
 8004028:	463b      	mov	r3, r7
 800402a:	aa03      	add	r2, sp, #12
 800402c:	4621      	mov	r1, r4
 800402e:	4630      	mov	r0, r6
 8004030:	f7ff fef6 	bl	8003e20 <_printf_common>
 8004034:	3001      	adds	r0, #1
 8004036:	d14d      	bne.n	80040d4 <_printf_i+0x1c8>
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	b005      	add	sp, #20
 800403e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004042:	4839      	ldr	r0, [pc, #228]	; (8004128 <_printf_i+0x21c>)
 8004044:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004048:	6813      	ldr	r3, [r2, #0]
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	1d1d      	adds	r5, r3, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6015      	str	r5, [r2, #0]
 8004052:	060a      	lsls	r2, r1, #24
 8004054:	d50b      	bpl.n	800406e <_printf_i+0x162>
 8004056:	07ca      	lsls	r2, r1, #31
 8004058:	bf44      	itt	mi
 800405a:	f041 0120 	orrmi.w	r1, r1, #32
 800405e:	6021      	strmi	r1, [r4, #0]
 8004060:	b91b      	cbnz	r3, 800406a <_printf_i+0x15e>
 8004062:	6822      	ldr	r2, [r4, #0]
 8004064:	f022 0220 	bic.w	r2, r2, #32
 8004068:	6022      	str	r2, [r4, #0]
 800406a:	2210      	movs	r2, #16
 800406c:	e7b7      	b.n	8003fde <_printf_i+0xd2>
 800406e:	064d      	lsls	r5, r1, #25
 8004070:	bf48      	it	mi
 8004072:	b29b      	uxthmi	r3, r3
 8004074:	e7ef      	b.n	8004056 <_printf_i+0x14a>
 8004076:	4665      	mov	r5, ip
 8004078:	fbb3 f1f2 	udiv	r1, r3, r2
 800407c:	fb02 3311 	mls	r3, r2, r1, r3
 8004080:	5cc3      	ldrb	r3, [r0, r3]
 8004082:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004086:	460b      	mov	r3, r1
 8004088:	2900      	cmp	r1, #0
 800408a:	d1f5      	bne.n	8004078 <_printf_i+0x16c>
 800408c:	e7b9      	b.n	8004002 <_printf_i+0xf6>
 800408e:	6813      	ldr	r3, [r2, #0]
 8004090:	6825      	ldr	r5, [r4, #0]
 8004092:	6961      	ldr	r1, [r4, #20]
 8004094:	1d18      	adds	r0, r3, #4
 8004096:	6010      	str	r0, [r2, #0]
 8004098:	0628      	lsls	r0, r5, #24
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	d501      	bpl.n	80040a2 <_printf_i+0x196>
 800409e:	6019      	str	r1, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <_printf_i+0x19c>
 80040a2:	066a      	lsls	r2, r5, #25
 80040a4:	d5fb      	bpl.n	800409e <_printf_i+0x192>
 80040a6:	8019      	strh	r1, [r3, #0]
 80040a8:	2300      	movs	r3, #0
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	4665      	mov	r5, ip
 80040ae:	e7b9      	b.n	8004024 <_printf_i+0x118>
 80040b0:	6813      	ldr	r3, [r2, #0]
 80040b2:	1d19      	adds	r1, r3, #4
 80040b4:	6011      	str	r1, [r2, #0]
 80040b6:	681d      	ldr	r5, [r3, #0]
 80040b8:	6862      	ldr	r2, [r4, #4]
 80040ba:	2100      	movs	r1, #0
 80040bc:	4628      	mov	r0, r5
 80040be:	f7fc f8bf 	bl	8000240 <memchr>
 80040c2:	b108      	cbz	r0, 80040c8 <_printf_i+0x1bc>
 80040c4:	1b40      	subs	r0, r0, r5
 80040c6:	6060      	str	r0, [r4, #4]
 80040c8:	6863      	ldr	r3, [r4, #4]
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	2300      	movs	r3, #0
 80040ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d2:	e7a7      	b.n	8004024 <_printf_i+0x118>
 80040d4:	6923      	ldr	r3, [r4, #16]
 80040d6:	462a      	mov	r2, r5
 80040d8:	4639      	mov	r1, r7
 80040da:	4630      	mov	r0, r6
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d0aa      	beq.n	8004038 <_printf_i+0x12c>
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	079b      	lsls	r3, r3, #30
 80040e6:	d413      	bmi.n	8004110 <_printf_i+0x204>
 80040e8:	68e0      	ldr	r0, [r4, #12]
 80040ea:	9b03      	ldr	r3, [sp, #12]
 80040ec:	4298      	cmp	r0, r3
 80040ee:	bfb8      	it	lt
 80040f0:	4618      	movlt	r0, r3
 80040f2:	e7a3      	b.n	800403c <_printf_i+0x130>
 80040f4:	2301      	movs	r3, #1
 80040f6:	464a      	mov	r2, r9
 80040f8:	4639      	mov	r1, r7
 80040fa:	4630      	mov	r0, r6
 80040fc:	47c0      	blx	r8
 80040fe:	3001      	adds	r0, #1
 8004100:	d09a      	beq.n	8004038 <_printf_i+0x12c>
 8004102:	3501      	adds	r5, #1
 8004104:	68e3      	ldr	r3, [r4, #12]
 8004106:	9a03      	ldr	r2, [sp, #12]
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	42ab      	cmp	r3, r5
 800410c:	dcf2      	bgt.n	80040f4 <_printf_i+0x1e8>
 800410e:	e7eb      	b.n	80040e8 <_printf_i+0x1dc>
 8004110:	2500      	movs	r5, #0
 8004112:	f104 0919 	add.w	r9, r4, #25
 8004116:	e7f5      	b.n	8004104 <_printf_i+0x1f8>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1ac      	bne.n	8004076 <_printf_i+0x16a>
 800411c:	7803      	ldrb	r3, [r0, #0]
 800411e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004122:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004126:	e76c      	b.n	8004002 <_printf_i+0xf6>
 8004128:	08004439 	.word	0x08004439
 800412c:	0800444a 	.word	0x0800444a

08004130 <_sbrk_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4c06      	ldr	r4, [pc, #24]	; (800414c <_sbrk_r+0x1c>)
 8004134:	2300      	movs	r3, #0
 8004136:	4605      	mov	r5, r0
 8004138:	4608      	mov	r0, r1
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	f7fd f85c 	bl	80011f8 <_sbrk>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_sbrk_r+0x1a>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	b103      	cbz	r3, 800414a <_sbrk_r+0x1a>
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000120 	.word	0x20000120

08004150 <__sread>:
 8004150:	b510      	push	{r4, lr}
 8004152:	460c      	mov	r4, r1
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	f000 f896 	bl	8004288 <_read_r>
 800415c:	2800      	cmp	r0, #0
 800415e:	bfab      	itete	ge
 8004160:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004162:	89a3      	ldrhlt	r3, [r4, #12]
 8004164:	181b      	addge	r3, r3, r0
 8004166:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800416a:	bfac      	ite	ge
 800416c:	6563      	strge	r3, [r4, #84]	; 0x54
 800416e:	81a3      	strhlt	r3, [r4, #12]
 8004170:	bd10      	pop	{r4, pc}

08004172 <__swrite>:
 8004172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	461f      	mov	r7, r3
 8004178:	898b      	ldrh	r3, [r1, #12]
 800417a:	05db      	lsls	r3, r3, #23
 800417c:	4605      	mov	r5, r0
 800417e:	460c      	mov	r4, r1
 8004180:	4616      	mov	r6, r2
 8004182:	d505      	bpl.n	8004190 <__swrite+0x1e>
 8004184:	2302      	movs	r3, #2
 8004186:	2200      	movs	r2, #0
 8004188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800418c:	f000 f868 	bl	8004260 <_lseek_r>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800419a:	81a3      	strh	r3, [r4, #12]
 800419c:	4632      	mov	r2, r6
 800419e:	463b      	mov	r3, r7
 80041a0:	4628      	mov	r0, r5
 80041a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a6:	f000 b817 	b.w	80041d8 <_write_r>

080041aa <__sseek>:
 80041aa:	b510      	push	{r4, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b2:	f000 f855 	bl	8004260 <_lseek_r>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	bf15      	itete	ne
 80041bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80041be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041c6:	81a3      	strheq	r3, [r4, #12]
 80041c8:	bf18      	it	ne
 80041ca:	81a3      	strhne	r3, [r4, #12]
 80041cc:	bd10      	pop	{r4, pc}

080041ce <__sclose>:
 80041ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d2:	f000 b813 	b.w	80041fc <_close_r>
	...

080041d8 <_write_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4c07      	ldr	r4, [pc, #28]	; (80041f8 <_write_r+0x20>)
 80041dc:	4605      	mov	r5, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	6022      	str	r2, [r4, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7fc fa5f 	bl	80006aa <_write>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_write_r+0x1e>
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_write_r+0x1e>
 80041f4:	602b      	str	r3, [r5, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000120 	.word	0x20000120

080041fc <_close_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4c06      	ldr	r4, [pc, #24]	; (8004218 <_close_r+0x1c>)
 8004200:	2300      	movs	r3, #0
 8004202:	4605      	mov	r5, r0
 8004204:	4608      	mov	r0, r1
 8004206:	6023      	str	r3, [r4, #0]
 8004208:	f7fc ffc1 	bl	800118e <_close>
 800420c:	1c43      	adds	r3, r0, #1
 800420e:	d102      	bne.n	8004216 <_close_r+0x1a>
 8004210:	6823      	ldr	r3, [r4, #0]
 8004212:	b103      	cbz	r3, 8004216 <_close_r+0x1a>
 8004214:	602b      	str	r3, [r5, #0]
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	20000120 	.word	0x20000120

0800421c <_fstat_r>:
 800421c:	b538      	push	{r3, r4, r5, lr}
 800421e:	4c07      	ldr	r4, [pc, #28]	; (800423c <_fstat_r+0x20>)
 8004220:	2300      	movs	r3, #0
 8004222:	4605      	mov	r5, r0
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	f7fc ffbc 	bl	80011a6 <_fstat>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	d102      	bne.n	8004238 <_fstat_r+0x1c>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	b103      	cbz	r3, 8004238 <_fstat_r+0x1c>
 8004236:	602b      	str	r3, [r5, #0]
 8004238:	bd38      	pop	{r3, r4, r5, pc}
 800423a:	bf00      	nop
 800423c:	20000120 	.word	0x20000120

08004240 <_isatty_r>:
 8004240:	b538      	push	{r3, r4, r5, lr}
 8004242:	4c06      	ldr	r4, [pc, #24]	; (800425c <_isatty_r+0x1c>)
 8004244:	2300      	movs	r3, #0
 8004246:	4605      	mov	r5, r0
 8004248:	4608      	mov	r0, r1
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	f7fc ffbb 	bl	80011c6 <_isatty>
 8004250:	1c43      	adds	r3, r0, #1
 8004252:	d102      	bne.n	800425a <_isatty_r+0x1a>
 8004254:	6823      	ldr	r3, [r4, #0]
 8004256:	b103      	cbz	r3, 800425a <_isatty_r+0x1a>
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	bd38      	pop	{r3, r4, r5, pc}
 800425c:	20000120 	.word	0x20000120

08004260 <_lseek_r>:
 8004260:	b538      	push	{r3, r4, r5, lr}
 8004262:	4c07      	ldr	r4, [pc, #28]	; (8004280 <_lseek_r+0x20>)
 8004264:	4605      	mov	r5, r0
 8004266:	4608      	mov	r0, r1
 8004268:	4611      	mov	r1, r2
 800426a:	2200      	movs	r2, #0
 800426c:	6022      	str	r2, [r4, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f7fc ffb4 	bl	80011dc <_lseek>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d102      	bne.n	800427e <_lseek_r+0x1e>
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	b103      	cbz	r3, 800427e <_lseek_r+0x1e>
 800427c:	602b      	str	r3, [r5, #0]
 800427e:	bd38      	pop	{r3, r4, r5, pc}
 8004280:	20000120 	.word	0x20000120

08004284 <__malloc_lock>:
 8004284:	4770      	bx	lr

08004286 <__malloc_unlock>:
 8004286:	4770      	bx	lr

08004288 <_read_r>:
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4c07      	ldr	r4, [pc, #28]	; (80042a8 <_read_r+0x20>)
 800428c:	4605      	mov	r5, r0
 800428e:	4608      	mov	r0, r1
 8004290:	4611      	mov	r1, r2
 8004292:	2200      	movs	r2, #0
 8004294:	6022      	str	r2, [r4, #0]
 8004296:	461a      	mov	r2, r3
 8004298:	f7fc ff5c 	bl	8001154 <_read>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_read_r+0x1e>
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_read_r+0x1e>
 80042a4:	602b      	str	r3, [r5, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000120 	.word	0x20000120

080042ac <_init>:
 80042ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ae:	bf00      	nop
 80042b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b2:	bc08      	pop	{r3}
 80042b4:	469e      	mov	lr, r3
 80042b6:	4770      	bx	lr

080042b8 <_fini>:
 80042b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ba:	bf00      	nop
 80042bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042be:	bc08      	pop	{r3}
 80042c0:	469e      	mov	lr, r3
 80042c2:	4770      	bx	lr
