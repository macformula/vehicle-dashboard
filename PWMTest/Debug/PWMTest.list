
PWMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb8  08003fb8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003fb8  08003fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fc0  08003fc0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fc0  08003fc0  00013fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  08004038  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08004038  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac1a  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188f  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002c548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000998  00000000  00000000  0002cfa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b3d  00000000  00000000  0002d940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007968  00000000  00000000  0005547d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f5396  00000000  00000000  0005cde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015217b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c8  00000000  00000000  001521f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08003e3c 	.word	0x08003e3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08003e3c 	.word	0x08003e3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000600:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	e000      	b.n	800060c <ITM_SendChar+0x2c>
    {
      __NOP();
 800060a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800060c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) //printf to SWV ITM .Wiggam55
{
 800062e:	b580      	push	{r7, lr}
 8000630:	b086      	sub	sp, #24
 8000632:	af00      	add	r7, sp, #0
 8000634:	60f8      	str	r0, [r7, #12]
 8000636:	60b9      	str	r1, [r7, #8]
 8000638:	607a      	str	r2, [r7, #4]
	int i = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i<len ; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	e009      	b.n	8000658 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	1c5a      	adds	r2, r3, #1
 8000648:	60ba      	str	r2, [r7, #8]
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ffc7 	bl	80005e0 <ITM_SendChar>
	for(i = 0 ; i<len ; i++)
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	3301      	adds	r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697a      	ldr	r2, [r7, #20]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	429a      	cmp	r2, r3
 800065e:	dbf1      	blt.n	8000644 <_write+0x16>
	}
	return len;
 8000660:	687b      	ldr	r3, [r7, #4]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fdaf 	bl	80011d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f872 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fa40 	bl	8000afc <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */

  Timer_Init(2,10, 1, 1, 1, 1);
 800067c:	2301      	movs	r3, #1
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2301      	movs	r3, #1
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2301      	movs	r3, #1
 8000686:	2201      	movs	r2, #1
 8000688:	210a      	movs	r1, #10
 800068a:	2002      	movs	r0, #2
 800068c:	f000 fa66 	bl	8000b5c <Timer_Init>
  PWM_Init(2,1,10);
 8000690:	220a      	movs	r2, #10
 8000692:	2101      	movs	r1, #1
 8000694:	2002      	movs	r0, #2
 8000696:	f000 facf 	bl	8000c38 <PWM_Init>
  PWM_Init(2,2,40);
 800069a:	2228      	movs	r2, #40	; 0x28
 800069c:	2102      	movs	r1, #2
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 faca 	bl	8000c38 <PWM_Init>
  PWM_Init(2,3,70);
 80006a4:	2246      	movs	r2, #70	; 0x46
 80006a6:	2103      	movs	r1, #3
 80006a8:	2002      	movs	r0, #2
 80006aa:	f000 fac5 	bl	8000c38 <PWM_Init>
  PWM_Init(2,4,98);
 80006ae:	2262      	movs	r2, #98	; 0x62
 80006b0:	2104      	movs	r1, #4
 80006b2:	2002      	movs	r0, #2
 80006b4:	f000 fac0 	bl	8000c38 <PWM_Init>


  Timer_Init(1,10, 1, 1, 1, 1);
 80006b8:	2301      	movs	r3, #1
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	2301      	movs	r3, #1
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	2301      	movs	r3, #1
 80006c2:	2201      	movs	r2, #1
 80006c4:	210a      	movs	r1, #10
 80006c6:	2001      	movs	r0, #1
 80006c8:	f000 fa48 	bl	8000b5c <Timer_Init>
  PWM_Init(1,1,10);
 80006cc:	220a      	movs	r2, #10
 80006ce:	2101      	movs	r1, #1
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 fab1 	bl	8000c38 <PWM_Init>
  PWM_Init(1,2,40);
 80006d6:	2228      	movs	r2, #40	; 0x28
 80006d8:	2102      	movs	r1, #2
 80006da:	2001      	movs	r0, #1
 80006dc:	f000 faac 	bl	8000c38 <PWM_Init>
  PWM_Init(1,3,70);
 80006e0:	2246      	movs	r2, #70	; 0x46
 80006e2:	2103      	movs	r1, #3
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 faa7 	bl	8000c38 <PWM_Init>
  PWM_Init(1,4,98);
 80006ea:	2262      	movs	r2, #98	; 0x62
 80006ec:	2104      	movs	r1, #4
 80006ee:	2001      	movs	r0, #1
 80006f0:	f000 faa2 	bl	8000c38 <PWM_Init>

  HAL_Delay(1000);
 80006f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f8:	f000 fdc8 	bl	800128c <HAL_Delay>

  PWM_Stop(1, 1);
 80006fc:	2101      	movs	r1, #1
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 fb38 	bl	8000d74 <PWM_Stop>

  HAL_Delay(1000);
 8000704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000708:	f000 fdc0 	bl	800128c <HAL_Delay>

  PWM_Stop(1, 2);
 800070c:	2102      	movs	r1, #2
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fb30 	bl	8000d74 <PWM_Stop>

  HAL_Delay(1000);
 8000714:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000718:	f000 fdb8 	bl	800128c <HAL_Delay>

  PWM_Stop(1, 3);
 800071c:	2103      	movs	r1, #3
 800071e:	2001      	movs	r0, #1
 8000720:	f000 fb28 	bl	8000d74 <PWM_Stop>

  HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000728:	f000 fdb0 	bl	800128c <HAL_Delay>

  PWM_Stop(1, 4);
 800072c:	2104      	movs	r1, #4
 800072e:	2001      	movs	r0, #1
 8000730:	f000 fb20 	bl	8000d74 <PWM_Stop>

  HAL_Delay(2000);
 8000734:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000738:	f000 fda8 	bl	800128c <HAL_Delay>

  Timer_Init(1,1000, 1, 1, 1, 1);
 800073c:	2301      	movs	r3, #1
 800073e:	9301      	str	r3, [sp, #4]
 8000740:	2301      	movs	r3, #1
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2301      	movs	r3, #1
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800074c:	2001      	movs	r0, #1
 800074e:	f000 fa05 	bl	8000b5c <Timer_Init>

  Timer_Stop(2);
 8000752:	2002      	movs	r0, #2
 8000754:	f000 fb54 	bl	8000e00 <Timer_Stop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0xee>
	...

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b094      	sub	sp, #80	; 0x50
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	2234      	movs	r2, #52	; 0x34
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fc7a 	bl	8003064 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	f107 0308 	add.w	r3, r7, #8
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <SystemClock_Config+0xb0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <SystemClock_Config+0xb0>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <SystemClock_Config+0xb0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000798:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <SystemClock_Config+0xb4>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <SystemClock_Config+0xb4>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <SystemClock_Config+0xb4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f811 	bl	80017f0 <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007d4:	f000 fb36 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 faaa 	bl	8001d4c <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007fe:	f000 fb21 	bl	8000e44 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescalar, _Bool Channel_1, _Bool Channel_2, _Bool Channel_3, _Bool Channel_4)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b09c      	sub	sp, #112	; 0x70
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	4608      	mov	r0, r1
 800081e:	4611      	mov	r1, r2
 8000820:	461a      	mov	r2, r3
 8000822:	4603      	mov	r3, r0
 8000824:	70fb      	strb	r3, [r7, #3]
 8000826:	460b      	mov	r3, r1
 8000828:	70bb      	strb	r3, [r7, #2]
 800082a:	4613      	mov	r3, r2
 800082c:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000848:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
 8000858:	615a      	str	r2, [r3, #20]
 800085a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	222c      	movs	r2, #44	; 0x2c
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fbfd 	bl	8003064 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Prescaler = prescalar;
 800086a:	4a52      	ldr	r2, [pc, #328]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6053      	str	r3, [r2, #4]
  htim1.Init.Period = COUNTER_PERIOD;
 8000870:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000874:	461a      	mov	r2, r3
 8000876:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000878:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800087a:	4b4e      	ldr	r3, [pc, #312]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 800087c:	4a4e      	ldr	r2, [pc, #312]	; (80009b8 <MX_TIM1_Init+0x1a4>)
 800087e:	601a      	str	r2, [r3, #0]
  //htim1.Init.Prescaler = prescalar;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000880:	4b4c      	ldr	r3, [pc, #304]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  //htim1.Init.Period = 19999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  //htim1.Init.RepetitionCounter = 65535;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b49      	ldr	r3, [pc, #292]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000892:	4848      	ldr	r0, [pc, #288]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000894:	f001 fbf8 	bl	8002088 <HAL_TIM_Base_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800089e:	f000 fad1 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ac:	4619      	mov	r1, r3
 80008ae:	4841      	ldr	r0, [pc, #260]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 80008b0:	f001 fe2a 	bl	8002508 <HAL_TIM_ConfigClockSource>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80008ba:	f000 fac3 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008be:	483d      	ldr	r0, [pc, #244]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 80008c0:	f001 fc38 	bl	8002134 <HAL_TIM_PWM_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80008ca:	f000 fabb 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ce:	2300      	movs	r3, #0
 80008d0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008d2:	2300      	movs	r3, #0
 80008d4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008de:	4619      	mov	r1, r3
 80008e0:	4834      	ldr	r0, [pc, #208]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 80008e2:	f002 fa89 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80008ec:	f000 faaa 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f0:	2360      	movs	r3, #96	; 0x60
 80008f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f8:	2300      	movs	r3, #0
 80008fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000904:	2300      	movs	r3, #0
 8000906:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	653b      	str	r3, [r7, #80]	; 0x50
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }*/
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000924:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800092e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800093c:	f107 030c 	add.w	r3, r7, #12
 8000940:	4619      	mov	r1, r3
 8000942:	481c      	ldr	r0, [pc, #112]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000944:	f002 fae6 	bl	8002f14 <HAL_TIMEx_ConfigBreakDeadTime>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800094e:	f000 fa79 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */


  if (Channel_1)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d006      	beq.n	8000966 <MX_TIM1_Init+0x152>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4814      	ldr	r0, [pc, #80]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000962:	f001 fcb9 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_2)
 8000966:	78bb      	ldrb	r3, [r7, #2]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <MX_TIM1_Init+0x166>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800096c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000970:	2204      	movs	r2, #4
 8000972:	4619      	mov	r1, r3
 8000974:	480f      	ldr	r0, [pc, #60]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 8000976:	f001 fcaf 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_3)
 800097a:	787b      	ldrb	r3, [r7, #1]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d006      	beq.n	800098e <MX_TIM1_Init+0x17a>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000980:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000984:	2208      	movs	r2, #8
 8000986:	4619      	mov	r1, r3
 8000988:	480a      	ldr	r0, [pc, #40]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 800098a:	f001 fca5 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_4)
 800098e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000992:	2b00      	cmp	r3, #0
 8000994:	d006      	beq.n	80009a4 <MX_TIM1_Init+0x190>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8000996:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800099a:	220c      	movs	r2, #12
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 80009a0:	f001 fc9a 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <MX_TIM1_Init+0x1a0>)
 80009a6:	f000 faa7 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 80009aa:	bf00      	nop
 80009ac:	3770      	adds	r7, #112	; 0x70
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000098 	.word	0x20000098
 80009b8:	40010000 	.word	0x40010000

080009bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(uint32_t prescalar, _Bool Channel_1, _Bool Channel_2, _Bool Channel_3, _Bool Channel_4)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	4608      	mov	r0, r1
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	4603      	mov	r3, r0
 80009cc:	70fb      	strb	r3, [r7, #3]
 80009ce:	460b      	mov	r3, r1
 80009d0:	70bb      	strb	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  htim2.Init.Prescaler = prescalar;
 8000a04:	4a3c      	ldr	r2, [pc, #240]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6053      	str	r3, [r2, #4]
  htim2.Init.Period = COUNTER_PERIOD;
 8000a0a:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a12:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 1 */

  htim2.Instance = TIM2;
 8000a14:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1a:	601a      	str	r2, [r3, #0]
  //htim2.Init.Prescaler = prescalar;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b36      	ldr	r3, [pc, #216]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  //htim2.Init.Period = 19999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a2e:	4832      	ldr	r0, [pc, #200]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a30:	f001 fb2a 	bl	8002088 <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a3a:	f000 fa03 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a48:	4619      	mov	r1, r3
 8000a4a:	482b      	ldr	r0, [pc, #172]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a4c:	f001 fd5c 	bl	8002508 <HAL_TIM_ConfigClockSource>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a56:	f000 f9f5 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a5a:	4827      	ldr	r0, [pc, #156]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a5c:	f001 fb6a 	bl	8002134 <HAL_TIM_PWM_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000a66:	f000 f9ed 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	481f      	ldr	r0, [pc, #124]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000a7a:	f002 f9bd 	bl	8002df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000a84:	f000 f9de 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a88:	2360      	movs	r3, #96	; 0x60
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  {
    Error_Handler();
  }*/
  /* USER CODE BEGIN TIM2_Init 2 */

  if (Channel_1)
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d006      	beq.n	8000aac <MX_TIM2_Init+0xf0>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000a9e:	f107 0308 	add.w	r3, r7, #8
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4814      	ldr	r0, [pc, #80]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000aa8:	f001 fc16 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_2)
 8000aac:	78bb      	ldrb	r3, [r7, #2]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d006      	beq.n	8000ac0 <MX_TIM2_Init+0x104>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000abc:	f001 fc0c 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_3)
 8000ac0:	787b      	ldrb	r3, [r7, #1]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d006      	beq.n	8000ad4 <MX_TIM2_Init+0x118>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	2208      	movs	r2, #8
 8000acc:	4619      	mov	r1, r3
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000ad0:	f001 fc02 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_4)
 8000ad4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d006      	beq.n	8000aea <MX_TIM2_Init+0x12e>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000ae6:	f001 fbf7 	bl	80022d8 <HAL_TIM_PWM_ConfigChannel>
  }
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM2_Init+0x13c>)
 8000aec:	f000 fa04 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000af0:	bf00      	nop
 8000af2:	3740      	adds	r7, #64	; 0x40
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200000d8 	.word	0x200000d8

08000afc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <MX_GPIO_Init+0x5c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <Timer_Init>:
  * @brief Initialize timer 1 or 2
  * @param Timer number, period (milliseconds)
  * @retval None
  */
static void Timer_Init(uint8_t num, uint16_t period, _Bool Channel_1, _Bool Channel_2, _Bool Channel_3, _Bool Channel_4)
{
 8000b5c:	b590      	push	{r4, r7, lr}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	4604      	mov	r4, r0
 8000b64:	4608      	mov	r0, r1
 8000b66:	4611      	mov	r1, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	4603      	mov	r3, r0
 8000b70:	80bb      	strh	r3, [r7, #4]
 8000b72:	460b      	mov	r3, r1
 8000b74:	71bb      	strb	r3, [r7, #6]
 8000b76:	4613      	mov	r3, r2
 8000b78:	70fb      	strb	r3, [r7, #3]
	uint32_t prescalar = Calculate_Prescalar(period); //max period value is 2^16-1
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f829 	bl	8000bd4 <Calculate_Prescalar>
 8000b82:	60f8      	str	r0, [r7, #12]

	switch (num)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d002      	beq.n	8000b90 <Timer_Init+0x34>
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d00c      	beq.n	8000ba8 <Timer_Init+0x4c>
 8000b8e:	e017      	b.n	8000bc0 <Timer_Init+0x64>
	{
		case (1):
			MX_TIM1_Init(prescalar,Channel_1,Channel_2,Channel_3,Channel_4);
 8000b90:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000b94:	78fa      	ldrb	r2, [r7, #3]
 8000b96:	79b9      	ldrb	r1, [r7, #6]
 8000b98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff fe37 	bl	8000814 <MX_TIM1_Init>
			break;
 8000ba6:	e00f      	b.n	8000bc8 <Timer_Init+0x6c>
		case (2):
			MX_TIM2_Init(prescalar,Channel_1,Channel_2,Channel_3,Channel_4);
 8000ba8:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000bac:	78fa      	ldrb	r2, [r7, #3]
 8000bae:	79b9      	ldrb	r1, [r7, #6]
 8000bb0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff feff 	bl	80009bc <MX_TIM2_Init>
			break;
 8000bbe:	e003      	b.n	8000bc8 <Timer_Init+0x6c>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.");
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <Timer_Init+0x74>)
 8000bc2:	f002 fa57 	bl	8003074 <iprintf>
			break;
 8000bc6:	bf00      	nop
	}
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd90      	pop	{r4, r7, pc}
 8000bd0:	08003e54 	.word	0x08003e54

08000bd4 <Calculate_Prescalar>:
  * @brief Calculate the prescalar necessary to operate desired PWM
  * @param period
  * @retval prescalar
  */
uint32_t Calculate_Prescalar(uint16_t period)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
	uint32_t prescalar = ((HAL_RCC_GetSysClockFreq()*(float)period)/(COUNTER_PERIOD+1))-1;
 8000bde:	f001 f9a1 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8000be2:	ee07 0a90 	vmov	s15, r0
 8000be6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bea:	88fb      	ldrh	r3, [r7, #6]
 8000bec:	ee07 3a90 	vmov	s15, r3
 8000bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bf4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000bf8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	ee07 3a90 	vmov	s15, r3
 8000c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c16:	ee17 3a90 	vmov	r3, s15
 8000c1a:	60fb      	str	r3, [r7, #12]
	prescalar /= 1000;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <Calculate_Prescalar+0x60>)
 8000c20:	fba2 2303 	umull	r2, r3, r2, r3
 8000c24:	099b      	lsrs	r3, r3, #6
 8000c26:	60fb      	str	r3, [r7, #12]
	return prescalar;
 8000c28:	68fb      	ldr	r3, [r7, #12]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	10624dd3 	.word	0x10624dd3

08000c38 <PWM_Init>:
  * @brief Take initialized timer, channel and desired duty cycle and initialize PWM
  * @param Timer, channel, duty cycle
  * @retval None
  */
static void PWM_Init(uint8_t timer, uint8_t channel, uint8_t duty_cycle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
 8000c42:	460b      	mov	r3, r1
 8000c44:	71bb      	strb	r3, [r7, #6]
 8000c46:	4613      	mov	r3, r2
 8000c48:	717b      	strb	r3, [r7, #5]

	TIM_HandleTypeDef* desired_timer;
	uint32_t desired_channel;

	uint16_t ticks_percycle = Calculate_DutyCycle(duty_cycle);
 8000c4a:	797b      	ldrb	r3, [r7, #5]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 f86d 	bl	8000d2c <Calculate_DutyCycle>
 8000c52:	4603      	mov	r3, r0
 8000c54:	81fb      	strh	r3, [r7, #14]

	//Initiate the PWM and desired duty cycle
	switch(timer)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d002      	beq.n	8000c62 <PWM_Init+0x2a>
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d003      	beq.n	8000c68 <PWM_Init+0x30>
 8000c60:	e005      	b.n	8000c6e <PWM_Init+0x36>
	{
		case(1):
			desired_timer = &htim1;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <PWM_Init+0xe4>)
 8000c64:	617b      	str	r3, [r7, #20]
			break;
 8000c66:	e005      	b.n	8000c74 <PWM_Init+0x3c>
		case(2):
			desired_timer = &htim2;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <PWM_Init+0xe8>)
 8000c6a:	617b      	str	r3, [r7, #20]
			break;
 8000c6c:	e002      	b.n	8000c74 <PWM_Init+0x3c>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.");
 8000c6e:	482d      	ldr	r0, [pc, #180]	; (8000d24 <PWM_Init+0xec>)
 8000c70:	f002 fa00 	bl	8003074 <iprintf>
	}

	switch(channel)
 8000c74:	79bb      	ldrb	r3, [r7, #6]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	2b03      	cmp	r3, #3
 8000c7a:	d817      	bhi.n	8000cac <PWM_Init+0x74>
 8000c7c:	a201      	add	r2, pc, #4	; (adr r2, 8000c84 <PWM_Init+0x4c>)
 8000c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c82:	bf00      	nop
 8000c84:	08000c95 	.word	0x08000c95
 8000c88:	08000c9b 	.word	0x08000c9b
 8000c8c:	08000ca1 	.word	0x08000ca1
 8000c90:	08000ca7 	.word	0x08000ca7
	{
		case(1):
			desired_channel = TIM_CHANNEL_1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
			break;
 8000c98:	e00b      	b.n	8000cb2 <PWM_Init+0x7a>
		case(2):
			desired_channel = TIM_CHANNEL_2;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	613b      	str	r3, [r7, #16]
			break;
 8000c9e:	e008      	b.n	8000cb2 <PWM_Init+0x7a>
		case(3):
			desired_channel = TIM_CHANNEL_3;
 8000ca0:	2308      	movs	r3, #8
 8000ca2:	613b      	str	r3, [r7, #16]
			break;
 8000ca4:	e005      	b.n	8000cb2 <PWM_Init+0x7a>
		case(4):
			desired_channel = TIM_CHANNEL_4;
 8000ca6:	230c      	movs	r3, #12
 8000ca8:	613b      	str	r3, [r7, #16]
			break;
 8000caa:	e002      	b.n	8000cb2 <PWM_Init+0x7a>
		default:
			printf("Invalid Channel argument. Should be an integer within range [1,4].");
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <PWM_Init+0xf0>)
 8000cae:	f002 f9e1 	bl	8003074 <iprintf>
	}


    HAL_TIM_PWM_Start(desired_timer, desired_channel);
 8000cb2:	6939      	ldr	r1, [r7, #16]
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f001 fa73 	bl	80021a0 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d104      	bne.n	8000cca <PWM_Init+0x92>
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	89fa      	ldrh	r2, [r7, #14]
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cc8:	e023      	b.n	8000d12 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d104      	bne.n	8000cda <PWM_Init+0xa2>
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	89fa      	ldrh	r2, [r7, #14]
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cd8:	e01b      	b.n	8000d12 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	2b08      	cmp	r3, #8
 8000cde:	d104      	bne.n	8000cea <PWM_Init+0xb2>
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	89fa      	ldrh	r2, [r7, #14]
 8000ce6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ce8:	e013      	b.n	8000d12 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	2b0c      	cmp	r3, #12
 8000cee:	d104      	bne.n	8000cfa <PWM_Init+0xc2>
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	89fa      	ldrh	r2, [r7, #14]
 8000cf6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cf8:	e00b      	b.n	8000d12 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	2b10      	cmp	r3, #16
 8000cfe:	d104      	bne.n	8000d0a <PWM_Init+0xd2>
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	89fa      	ldrh	r2, [r7, #14]
 8000d06:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000d08:	e003      	b.n	8000d12 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	89fa      	ldrh	r2, [r7, #14]
 8000d10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000098 	.word	0x20000098
 8000d20:	200000d8 	.word	0x200000d8
 8000d24:	08003e54 	.word	0x08003e54
 8000d28:	08003e8c 	.word	0x08003e8c

08000d2c <Calculate_DutyCycle>:

uint16_t Calculate_DutyCycle(uint8_t duty_cycle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint16_t ticks_percycle;
	//CHECK TO MAKE SURE DUTY CYCLE IS WITHING [0,100]
	if (duty_cycle>=0 && duty_cycle <=100)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	2b64      	cmp	r3, #100	; 0x64
 8000d3a:	d80c      	bhi.n	8000d56 <Calculate_DutyCycle+0x2a>
	{
		ticks_percycle = (duty_cycle*COUNTER_PERIOD)/100;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <Calculate_DutyCycle+0x40>)
 8000d48:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4c:	1152      	asrs	r2, r2, #5
 8000d4e:	17db      	asrs	r3, r3, #31
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	81fb      	strh	r3, [r7, #14]
 8000d54:	e004      	b.n	8000d60 <Calculate_DutyCycle+0x34>
	}

	else
	{
		ticks_percycle = 0; //Default value
 8000d56:	2300      	movs	r3, #0
 8000d58:	81fb      	strh	r3, [r7, #14]
		printf("Invalid Duty Cycle argument. Should be within range [0,100].");
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <Calculate_DutyCycle+0x44>)
 8000d5c:	f002 f98a 	bl	8003074 <iprintf>
	}
	return ticks_percycle;
 8000d60:	89fb      	ldrh	r3, [r7, #14]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	51eb851f 	.word	0x51eb851f
 8000d70:	08003ed0 	.word	0x08003ed0

08000d74 <PWM_Stop>:

static void PWM_Stop(uint8_t timer, uint8_t channel)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	460a      	mov	r2, r1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	4613      	mov	r3, r2
 8000d82:	71bb      	strb	r3, [r7, #6]
	TIM_HandleTypeDef* desired_timer;
	uint32_t desired_channel;
	switch(timer)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d002      	beq.n	8000d90 <PWM_Stop+0x1c>
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d003      	beq.n	8000d96 <PWM_Stop+0x22>
 8000d8e:	e005      	b.n	8000d9c <PWM_Stop+0x28>
	{
		case(1):
			desired_timer = &htim1;
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <PWM_Stop+0x7c>)
 8000d92:	60fb      	str	r3, [r7, #12]
			break;
 8000d94:	e005      	b.n	8000da2 <PWM_Stop+0x2e>
		case(2):
			desired_timer = &htim2;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <PWM_Stop+0x80>)
 8000d98:	60fb      	str	r3, [r7, #12]
			break;
 8000d9a:	e002      	b.n	8000da2 <PWM_Stop+0x2e>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.");
 8000d9c:	4816      	ldr	r0, [pc, #88]	; (8000df8 <PWM_Stop+0x84>)
 8000d9e:	f002 f969 	bl	8003074 <iprintf>
	}

	switch(channel)
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	2b03      	cmp	r3, #3
 8000da8:	d816      	bhi.n	8000dd8 <PWM_Stop+0x64>
 8000daa:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <PWM_Stop+0x3c>)
 8000dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db0:	08000dc1 	.word	0x08000dc1
 8000db4:	08000dc7 	.word	0x08000dc7
 8000db8:	08000dcd 	.word	0x08000dcd
 8000dbc:	08000dd3 	.word	0x08000dd3
	{
		case(1):
			desired_channel = TIM_CHANNEL_1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
			break;
 8000dc4:	e00b      	b.n	8000dde <PWM_Stop+0x6a>
		case(2):
			desired_channel = TIM_CHANNEL_2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	60bb      	str	r3, [r7, #8]
			break;
 8000dca:	e008      	b.n	8000dde <PWM_Stop+0x6a>
		case(3):
			desired_channel = TIM_CHANNEL_3;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	60bb      	str	r3, [r7, #8]
			break;
 8000dd0:	e005      	b.n	8000dde <PWM_Stop+0x6a>
		case(4):
			desired_channel = TIM_CHANNEL_4;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	60bb      	str	r3, [r7, #8]
			break;
 8000dd6:	e002      	b.n	8000dde <PWM_Stop+0x6a>
		default:
			printf("Invalid Channel argument. Should be an integer within range [1,4].");
 8000dd8:	4808      	ldr	r0, [pc, #32]	; (8000dfc <PWM_Stop+0x88>)
 8000dda:	f002 f94b 	bl	8003074 <iprintf>
	}
	HAL_TIM_PWM_Stop(desired_timer, desired_channel);
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f001 fa21 	bl	8002228 <HAL_TIM_PWM_Stop>
}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000098 	.word	0x20000098
 8000df4:	200000d8 	.word	0x200000d8
 8000df8:	08003e54 	.word	0x08003e54
 8000dfc:	08003e8c 	.word	0x08003e8c

08000e00 <Timer_Stop>:
static void Timer_Stop(uint8_t timer)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	TIM_HandleTypeDef* desired_timer;

	switch(timer)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d002      	beq.n	8000e16 <Timer_Stop+0x16>
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d003      	beq.n	8000e1c <Timer_Stop+0x1c>
 8000e14:	e005      	b.n	8000e22 <Timer_Stop+0x22>
	{
		case(1):
			desired_timer = &htim1;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <Timer_Stop+0x38>)
 8000e18:	60fb      	str	r3, [r7, #12]
			break;
 8000e1a:	e005      	b.n	8000e28 <Timer_Stop+0x28>
		case(2):
			desired_timer = &htim2;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <Timer_Stop+0x3c>)
 8000e1e:	60fb      	str	r3, [r7, #12]
			break;
 8000e20:	e002      	b.n	8000e28 <Timer_Stop+0x28>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.");
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <Timer_Stop+0x40>)
 8000e24:	f002 f926 	bl	8003074 <iprintf>
	}

	HAL_TIM_Base_Stop(desired_timer);
 8000e28:	68f8      	ldr	r0, [r7, #12]
 8000e2a:	f001 f958 	bl	80020de <HAL_TIM_Base_Stop>
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000098 	.word	0x20000098
 8000e3c:	200000d8 	.word	0x200000d8
 8000e40:	08003e54 	.word	0x08003e54

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <Error_Handler+0x6>

08000e4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x44>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x44>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x44>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x44>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x44>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x44>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800

08000e94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <HAL_TIM_Base_MspInit+0x5c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d10c      	bne.n	8000ec0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_TIM_Base_MspInit+0x60>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_TIM_Base_MspInit+0x60>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_TIM_Base_MspInit+0x60>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ebe:	e010      	b.n	8000ee2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec8:	d10b      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <HAL_TIM_Base_MspInit+0x60>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	4a09      	ldr	r2, [pc, #36]	; (8000ef4 <HAL_TIM_Base_MspInit+0x60>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed6:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <HAL_TIM_Base_MspInit+0x60>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	68bb      	ldr	r3, [r7, #8]
}
 8000ee2:	bf00      	nop
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	40023800 	.word	0x40023800

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a31      	ldr	r2, [pc, #196]	; (8000fdc <HAL_TIM_MspPostInit+0xe4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d11d      	bne.n	8000f56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f20:	f043 0310 	orr.w	r3, r3, #16
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000f32:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4825      	ldr	r0, [pc, #148]	; (8000fe4 <HAL_TIM_MspPostInit+0xec>)
 8000f50:	f000 faa4 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f54:	e03d      	b.n	8000fd2 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f5e:	d138      	bne.n	8000fd2 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7c:	4a18      	ldr	r2, [pc, #96]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	6313      	str	r3, [r2, #48]	; 0x30
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_TIM_MspPostInit+0xe8>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f90:	2320      	movs	r3, #32
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <HAL_TIM_MspPostInit+0xf0>)
 8000fac:	f000 fa76 	bl	800149c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8000fb0:	f640 4308 	movw	r3, #3080	; 0xc08
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4807      	ldr	r0, [pc, #28]	; (8000fec <HAL_TIM_MspPostInit+0xf4>)
 8000fce:	f000 fa65 	bl	800149c <HAL_GPIO_Init>
}
 8000fd2:	bf00      	nop
 8000fd4:	3728      	adds	r7, #40	; 0x28
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40020000 	.word	0x40020000
 8000fec:	40020400 	.word	0x40020400

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800103c:	f000 f906 	bl	800124c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}

08001044 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e00a      	b.n	800106c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001056:	f3af 8000 	nop.w
 800105a:	4601      	mov	r1, r0
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	60ba      	str	r2, [r7, #8]
 8001062:	b2ca      	uxtb	r2, r1
 8001064:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697a      	ldr	r2, [r7, #20]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	429a      	cmp	r2, r3
 8001072:	dbf0      	blt.n	8001056 <_read+0x12>
	}

return len;
 8001074:	687b      	ldr	r3, [r7, #4]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <_close>:
	}
	return len;
}

int _close(int file)
{
 800107e:	b480      	push	{r7}
 8001080:	b083      	sub	sp, #12
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
	return -1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010a6:	605a      	str	r2, [r3, #4]
	return 0;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <_isatty>:

int _isatty(int file)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	return 1;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <_sbrk+0x5c>)
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_sbrk+0x60>)
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010fc:	4b13      	ldr	r3, [pc, #76]	; (800114c <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d102      	bne.n	800110a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <_sbrk+0x64>)
 8001106:	4a12      	ldr	r2, [pc, #72]	; (8001150 <_sbrk+0x68>)
 8001108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	429a      	cmp	r2, r3
 8001116:	d207      	bcs.n	8001128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001118:	f001 ff7a 	bl	8003010 <__errno>
 800111c:	4602      	mov	r2, r0
 800111e:	230c      	movs	r3, #12
 8001120:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	e009      	b.n	800113c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <_sbrk+0x64>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <_sbrk+0x64>)
 8001138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800113a:	68fb      	ldr	r3, [r7, #12]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3718      	adds	r7, #24
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20080000 	.word	0x20080000
 8001148:	00000400 	.word	0x00000400
 800114c:	2000008c 	.word	0x2000008c
 8001150:	20000120 	.word	0x20000120

08001154 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <SystemInit+0x28>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <SystemInit+0x28>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <SystemInit+0x28>)
 800116a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800116e:	609a      	str	r2, [r3, #8]
#endif
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001184:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001186:	e003      	b.n	8001190 <LoopCopyDataInit>

08001188 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800118a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800118c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800118e:	3104      	adds	r1, #4

08001190 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001190:	480b      	ldr	r0, [pc, #44]	; (80011c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001194:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001196:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001198:	d3f6      	bcc.n	8001188 <CopyDataInit>
  ldr  r2, =_sbss
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800119c:	e002      	b.n	80011a4 <LoopFillZerobss>

0800119e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800119e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80011a0:	f842 3b04 	str.w	r3, [r2], #4

080011a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80011a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80011a8:	d3f9      	bcc.n	800119e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011aa:	f7ff ffd3 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f001 ff35 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fa5a 	bl	800066a <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80011bc:	08003fc8 	.word	0x08003fc8
  ldr  r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80011c4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80011c8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80011cc:	20000120 	.word	0x20000120

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>

080011d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 f92c 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011dc:	2000      	movs	r0, #0
 80011de:	f000 f805 	bl	80011ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80011e2:	f7ff fe33 	bl	8000e4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_InitTick+0x54>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_InitTick+0x58>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f000 f939 	bl	8001482 <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e00e      	b.n	8001238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b0f      	cmp	r3, #15
 800121e:	d80a      	bhi.n	8001236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001220:	2200      	movs	r2, #0
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	f04f 30ff 	mov.w	r0, #4294967295
 8001228:	f000 f90f 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800122c:	4a06      	ldr	r2, [pc, #24]	; (8001248 <HAL_InitTick+0x5c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000000 	.word	0x20000000
 8001244:	20000008 	.word	0x20000008
 8001248:	20000004 	.word	0x20000004

0800124c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x20>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_IncTick+0x24>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a04      	ldr	r2, [pc, #16]	; (8001270 <HAL_IncTick+0x24>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008
 8001270:	20000118 	.word	0x20000118

08001274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return uwTick;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <HAL_GetTick+0x14>)
 800127a:	681b      	ldr	r3, [r3, #0]
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000118 	.word	0x20000118

0800128c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001294:	f7ff ffee 	bl	8001274 <HAL_GetTick>
 8001298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a4:	d005      	beq.n	80012b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_Delay+0x40>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	461a      	mov	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4413      	add	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012b2:	bf00      	nop
 80012b4:	f7ff ffde 	bl	8001274 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d8f7      	bhi.n	80012b4 <HAL_Delay+0x28>
  {
  }
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000008 	.word	0x20000008

080012d0 <__NVIC_SetPriorityGrouping>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ec:	4013      	ands	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <__NVIC_SetPriorityGrouping+0x44>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fe:	4a04      	ldr	r2, [pc, #16]	; (8001310 <__NVIC_SetPriorityGrouping+0x40>)
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	60d3      	str	r3, [r2, #12]
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	e000ed00 	.word	0xe000ed00
 8001314:	05fa0000 	.word	0x05fa0000

08001318 <__NVIC_GetPriorityGrouping>:
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <__NVIC_GetPriorityGrouping+0x18>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	0a1b      	lsrs	r3, r3, #8
 8001322:	f003 0307 	and.w	r3, r3, #7
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <__NVIC_SetPriority>:
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff47 	bl	80012d0 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff5c 	bl	8001318 <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffb0 	bl	80013f0 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
 80014ba:	e175      	b.n	80017a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f040 8164 	bne.w	80017a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d00b      	beq.n	80014fa <HAL_GPIO_Init+0x5e>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d007      	beq.n	80014fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014ee:	2b11      	cmp	r3, #17
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2b12      	cmp	r3, #18
 80014f8:	d130      	bne.n	800155c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001530:	2201      	movs	r2, #1
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	091b      	lsrs	r3, r3, #4
 8001546:	f003 0201 	and.w	r2, r3, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x100>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b12      	cmp	r3, #18
 800159a:	d123      	bne.n	80015e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	691a      	ldr	r2, [r3, #16]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	08da      	lsrs	r2, r3, #3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3208      	adds	r2, #8
 80015de:	69b9      	ldr	r1, [r7, #24]
 80015e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80be 	beq.w	80017a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001626:	4b65      	ldr	r3, [pc, #404]	; (80017bc <HAL_GPIO_Init+0x320>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a64      	ldr	r2, [pc, #400]	; (80017bc <HAL_GPIO_Init+0x320>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b62      	ldr	r3, [pc, #392]	; (80017bc <HAL_GPIO_Init+0x320>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800163e:	4a60      	ldr	r2, [pc, #384]	; (80017c0 <HAL_GPIO_Init+0x324>)
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	220f      	movs	r2, #15
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43db      	mvns	r3, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4013      	ands	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a57      	ldr	r2, [pc, #348]	; (80017c4 <HAL_GPIO_Init+0x328>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d037      	beq.n	80016da <HAL_GPIO_Init+0x23e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a56      	ldr	r2, [pc, #344]	; (80017c8 <HAL_GPIO_Init+0x32c>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d031      	beq.n	80016d6 <HAL_GPIO_Init+0x23a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a55      	ldr	r2, [pc, #340]	; (80017cc <HAL_GPIO_Init+0x330>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d02b      	beq.n	80016d2 <HAL_GPIO_Init+0x236>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a54      	ldr	r2, [pc, #336]	; (80017d0 <HAL_GPIO_Init+0x334>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d025      	beq.n	80016ce <HAL_GPIO_Init+0x232>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a53      	ldr	r2, [pc, #332]	; (80017d4 <HAL_GPIO_Init+0x338>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d01f      	beq.n	80016ca <HAL_GPIO_Init+0x22e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a52      	ldr	r2, [pc, #328]	; (80017d8 <HAL_GPIO_Init+0x33c>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d019      	beq.n	80016c6 <HAL_GPIO_Init+0x22a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a51      	ldr	r2, [pc, #324]	; (80017dc <HAL_GPIO_Init+0x340>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0x226>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a50      	ldr	r2, [pc, #320]	; (80017e0 <HAL_GPIO_Init+0x344>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00d      	beq.n	80016be <HAL_GPIO_Init+0x222>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4f      	ldr	r2, [pc, #316]	; (80017e4 <HAL_GPIO_Init+0x348>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d007      	beq.n	80016ba <HAL_GPIO_Init+0x21e>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_GPIO_Init+0x34c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d101      	bne.n	80016b6 <HAL_GPIO_Init+0x21a>
 80016b2:	2309      	movs	r3, #9
 80016b4:	e012      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016b6:	230a      	movs	r3, #10
 80016b8:	e010      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016ba:	2308      	movs	r3, #8
 80016bc:	e00e      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016be:	2307      	movs	r3, #7
 80016c0:	e00c      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016c2:	2306      	movs	r3, #6
 80016c4:	e00a      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016c6:	2305      	movs	r3, #5
 80016c8:	e008      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016ca:	2304      	movs	r3, #4
 80016cc:	e006      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016ce:	2303      	movs	r3, #3
 80016d0:	e004      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016d2:	2302      	movs	r3, #2
 80016d4:	e002      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <HAL_GPIO_Init+0x240>
 80016da:	2300      	movs	r3, #0
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f002 0203 	and.w	r2, r2, #3
 80016e2:	0092      	lsls	r2, r2, #2
 80016e4:	4093      	lsls	r3, r2
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016ec:	4934      	ldr	r1, [pc, #208]	; (80017c0 <HAL_GPIO_Init+0x324>)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <HAL_GPIO_Init+0x350>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	43db      	mvns	r3, r3
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4013      	ands	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d003      	beq.n	800171e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800171e:	4a33      	ldr	r2, [pc, #204]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001724:	4b31      	ldr	r3, [pc, #196]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	43db      	mvns	r3, r3
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <HAL_GPIO_Init+0x350>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001772:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_GPIO_Init+0x350>)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_GPIO_Init+0x350>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800179c:	4a13      	ldr	r2, [pc, #76]	; (80017ec <HAL_GPIO_Init+0x350>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	f67f ae86 	bls.w	80014bc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017b0:	bf00      	nop
 80017b2:	3724      	adds	r7, #36	; 0x24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40022400 	.word	0x40022400
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e29b      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001820:	4b93      	ldr	r3, [pc, #588]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x62>
 800182c:	4b90      	ldr	r3, [pc, #576]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001834:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b8d      	ldr	r3, [pc, #564]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x130>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e275      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x7a>
 800185c:	4b84      	ldr	r3, [pc, #528]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a83      	ldr	r2, [pc, #524]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x9c>
 8001872:	4b7f      	ldr	r3, [pc, #508]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7e      	ldr	r2, [pc, #504]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b7c      	ldr	r3, [pc, #496]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a7b      	ldr	r2, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xc0>
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd8>
 80018b0:	4b6f      	ldr	r3, [pc, #444]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6e      	ldr	r2, [pc, #440]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b6c      	ldr	r3, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a6b      	ldr	r2, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fcd0 	bl	8001274 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff fccc 	bl	8001274 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e229      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b61      	ldr	r3, [pc, #388]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe8>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff fcbc 	bl	8001274 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff fcb8 	bl	8001274 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e215      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x110>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d069      	beq.n	8001a02 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x190>
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x17a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1e9      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	493d      	ldr	r1, [pc, #244]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e040      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d023      	beq.n	80019d0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fc6e 	bl	8001274 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199c:	f7ff fc6a 	bl	8001274 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1c7      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4929      	ldr	r1, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]
 80019ce:	e018      	b.n	8001a02 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d0:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a26      	ldr	r2, [pc, #152]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff fc4a 	bl	8001274 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff fc46 	bl	8001274 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e1a3      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d038      	beq.n	8001a80 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1a:	4a15      	ldr	r2, [pc, #84]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff fc27 	bl	8001274 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fc23 	bl	8001274 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e180      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d0f0      	beq.n	8001a2a <HAL_RCC_OscConfig+0x23a>
 8001a48:	e01a      	b.n	8001a80 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a4e:	4a08      	ldr	r2, [pc, #32]	; (8001a70 <HAL_RCC_OscConfig+0x280>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff fc0d 	bl	8001274 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff fc09 	bl	8001274 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d903      	bls.n	8001a74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e166      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
 8001a70:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1ee      	bne.n	8001a5e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a4 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8e:	4b8c      	ldr	r3, [pc, #560]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10d      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9a:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a88      	ldr	r2, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b86      	ldr	r3, [pc, #536]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab6:	4b83      	ldr	r3, [pc, #524]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001ac2:	4b80      	ldr	r3, [pc, #512]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7f      	ldr	r2, [pc, #508]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff fbd1 	bl	8001274 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff fbcd 	bl	8001274 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b64      	cmp	r3, #100	; 0x64
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e12a      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae8:	4b76      	ldr	r3, [pc, #472]	; (8001cc4 <HAL_RCC_OscConfig+0x4d4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x31a>
 8001afc:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b00:	4a6f      	ldr	r2, [pc, #444]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	; 0x70
 8001b08:	e02d      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x33c>
 8001b12:	4b6b      	ldr	r3, [pc, #428]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a6a      	ldr	r2, [pc, #424]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b18:	f023 0301 	bic.w	r3, r3, #1
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b22:	4a67      	ldr	r2, [pc, #412]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	6713      	str	r3, [r2, #112]	; 0x70
 8001b2a:	e01c      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d10c      	bne.n	8001b4e <HAL_RCC_OscConfig+0x35e>
 8001b34:	4b62      	ldr	r3, [pc, #392]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a61      	ldr	r2, [pc, #388]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	4b5f      	ldr	r3, [pc, #380]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b44:	4a5e      	ldr	r2, [pc, #376]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4c:	e00b      	b.n	8001b66 <HAL_RCC_OscConfig+0x376>
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a5b      	ldr	r2, [pc, #364]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5e:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b60:	f023 0304 	bic.w	r3, r3, #4
 8001b64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d015      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb81 	bl	8001274 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fb7d 	bl	8001274 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e0d8      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ee      	beq.n	8001b76 <HAL_RCC_OscConfig+0x386>
 8001b98:	e014      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff fb6b 	bl	8001274 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff fb67 	bl	8001274 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0c2      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d105      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bca:	4b3d      	ldr	r3, [pc, #244]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a3c      	ldr	r2, [pc, #240]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80ae 	beq.w	8001d3c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d06d      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d14b      	bne.n	8001c8c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff fb38 	bl	8001274 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c08:	f7ff fb34 	bl	8001274 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e091      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69da      	ldr	r2, [r3, #28]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	019b      	lsls	r3, r3, #6
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	041b      	lsls	r3, r3, #16
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	071b      	lsls	r3, r3, #28
 8001c52:	491b      	ldr	r1, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7ff fb06 	bl	8001274 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fb02 	bl	8001274 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e05f      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x47c>
 8001c8a:	e057      	b.n	8001d3c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c98:	f7ff faec 	bl	8001274 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fae8 	bl	8001274 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e045      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_OscConfig+0x4d0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x4b0>
 8001cbe:	e03d      	b.n	8001d3c <HAL_RCC_OscConfig+0x54c>
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <HAL_RCC_OscConfig+0x558>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d030      	beq.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d129      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d122      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cfe:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d119      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0e:	085b      	lsrs	r3, r3, #1
 8001d10:	3b01      	subs	r3, #1
 8001d12:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d10f      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d107      	bne.n	8001d38 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0d0      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 020f 	bic.w	r2, r3, #15
 8001d7a:	4965      	ldr	r1, [pc, #404]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4a58      	ldr	r2, [pc, #352]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e073      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4936      	ldr	r1, [pc, #216]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7ff fa18 	bl	8001274 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7ff fa14 	bl	8001274 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e053      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d210      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 020f 	bic.w	r2, r3, #15
 8001e86:	4922      	ldr	r1, [pc, #136]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x1cc>)
 8001ef0:	5cd3      	ldrb	r3, [r2, r3]
 8001ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <HAL_RCC_ClockConfig+0x1d0>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <HAL_RCC_ClockConfig+0x1d4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f974 	bl	80011ec <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023c00 	.word	0x40023c00
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08003f10 	.word	0x08003f10
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004

08001f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	2300      	movs	r3, #0
 8001f34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d007      	beq.n	8001f56 <HAL_RCC_GetSysClockFreq+0x32>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d008      	beq.n	8001f5c <HAL_RCC_GetSysClockFreq+0x38>
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f040 808d 	bne.w	800206a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f50:	4b4b      	ldr	r3, [pc, #300]	; (8002080 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f52:	60bb      	str	r3, [r7, #8]
      break;
 8001f54:	e08c      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f58:	60bb      	str	r3, [r7, #8]
      break;
 8001f5a:	e089      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f5c:	4b47      	ldr	r3, [pc, #284]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001f66:	4b45      	ldr	r3, [pc, #276]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d023      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f04f 0400 	mov.w	r4, #0
 8001f7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	ea03 0501 	and.w	r5, r3, r1
 8001f88:	ea04 0602 	and.w	r6, r4, r2
 8001f8c:	4a3d      	ldr	r2, [pc, #244]	; (8002084 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f8e:	fb02 f106 	mul.w	r1, r2, r6
 8001f92:	2200      	movs	r2, #0
 8001f94:	fb02 f205 	mul.w	r2, r2, r5
 8001f98:	440a      	add	r2, r1
 8001f9a:	493a      	ldr	r1, [pc, #232]	; (8002084 <HAL_RCC_GetSysClockFreq+0x160>)
 8001f9c:	fba5 0101 	umull	r0, r1, r5, r1
 8001fa0:	1853      	adds	r3, r2, r1
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f04f 0400 	mov.w	r4, #0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	f7fe f997 	bl	80002e0 <__aeabi_uldivmod>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e049      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fba:	4b30      	ldr	r3, [pc, #192]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	099b      	lsrs	r3, r3, #6
 8001fc0:	f04f 0400 	mov.w	r4, #0
 8001fc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	ea03 0501 	and.w	r5, r3, r1
 8001fd0:	ea04 0602 	and.w	r6, r4, r2
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	4632      	mov	r2, r6
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	f04f 0400 	mov.w	r4, #0
 8001fe0:	0154      	lsls	r4, r2, #5
 8001fe2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fe6:	014b      	lsls	r3, r1, #5
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4622      	mov	r2, r4
 8001fec:	1b49      	subs	r1, r1, r5
 8001fee:	eb62 0206 	sbc.w	r2, r2, r6
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	f04f 0400 	mov.w	r4, #0
 8001ffa:	0194      	lsls	r4, r2, #6
 8001ffc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002000:	018b      	lsls	r3, r1, #6
 8002002:	1a5b      	subs	r3, r3, r1
 8002004:	eb64 0402 	sbc.w	r4, r4, r2
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	00e2      	lsls	r2, r4, #3
 8002012:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002016:	00d9      	lsls	r1, r3, #3
 8002018:	460b      	mov	r3, r1
 800201a:	4614      	mov	r4, r2
 800201c:	195b      	adds	r3, r3, r5
 800201e:	eb44 0406 	adc.w	r4, r4, r6
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	02a2      	lsls	r2, r4, #10
 800202c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002030:	0299      	lsls	r1, r3, #10
 8002032:	460b      	mov	r3, r1
 8002034:	4614      	mov	r4, r2
 8002036:	4618      	mov	r0, r3
 8002038:	4621      	mov	r1, r4
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f04f 0400 	mov.w	r4, #0
 8002040:	461a      	mov	r2, r3
 8002042:	4623      	mov	r3, r4
 8002044:	f7fe f94c 	bl	80002e0 <__aeabi_uldivmod>
 8002048:	4603      	mov	r3, r0
 800204a:	460c      	mov	r4, r1
 800204c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_GetSysClockFreq+0x158>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	3301      	adds	r3, #1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	fbb2 f3f3 	udiv	r3, r2, r3
 8002066:	60bb      	str	r3, [r7, #8]
      break;
 8002068:	e002      	b.n	8002070 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0x15c>)
 800206c:	60bb      	str	r3, [r7, #8]
      break;
 800206e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002070:	68bb      	ldr	r3, [r7, #8]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	017d7840 	.word	0x017d7840

08002088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e01d      	b.n	80020d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d106      	bne.n	80020b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7fe fef0 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	4619      	mov	r1, r3
 80020c6:	4610      	mov	r0, r2
 80020c8:	f000 fad8 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a1a      	ldr	r2, [r3, #32]
 80020f4:	f241 1311 	movw	r3, #4369	; 0x1111
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10f      	bne.n	800211e <HAL_TIM_Base_Stop+0x40>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1a      	ldr	r2, [r3, #32]
 8002104:	f240 4344 	movw	r3, #1092	; 0x444
 8002108:	4013      	ands	r3, r2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d107      	bne.n	800211e <HAL_TIM_Base_Stop+0x40>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e01d      	b.n	8002182 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f815 	bl	800218a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 fa82 	bl	800267c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fdfa 	bl	8002dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a17      	ldr	r2, [pc, #92]	; (800221c <HAL_TIM_PWM_Start+0x7c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d004      	beq.n	80021cc <HAL_TIM_PWM_Start+0x2c>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <HAL_TIM_PWM_Start+0x80>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d101      	bne.n	80021d0 <HAL_TIM_PWM_Start+0x30>
 80021cc:	2301      	movs	r3, #1
 80021ce:	e000      	b.n	80021d2 <HAL_TIM_PWM_Start+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d007      	beq.n	80021e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_TIM_PWM_Start+0x84>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b06      	cmp	r3, #6
 80021f6:	d00b      	beq.n	8002210 <HAL_TIM_PWM_Start+0x70>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fe:	d007      	beq.n	8002210 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40010000 	.word	0x40010000
 8002220:	40010400 	.word	0x40010400
 8002224:	00010007 	.word	0x00010007

08002228 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	6839      	ldr	r1, [r7, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fdb6 	bl	8002dac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a22      	ldr	r2, [pc, #136]	; (80022d0 <HAL_TIM_PWM_Stop+0xa8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_TIM_PWM_Stop+0x2c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a21      	ldr	r2, [pc, #132]	; (80022d4 <HAL_TIM_PWM_Stop+0xac>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d101      	bne.n	8002258 <HAL_TIM_PWM_Stop+0x30>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <HAL_TIM_PWM_Stop+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d017      	beq.n	800228e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6a1a      	ldr	r2, [r3, #32]
 8002264:	f241 1311 	movw	r3, #4369	; 0x1111
 8002268:	4013      	ands	r3, r2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10f      	bne.n	800228e <HAL_TIM_PWM_Stop+0x66>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1a      	ldr	r2, [r3, #32]
 8002274:	f240 4344 	movw	r3, #1092	; 0x444
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d107      	bne.n	800228e <HAL_TIM_PWM_Stop+0x66>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a1a      	ldr	r2, [r3, #32]
 8002294:	f241 1311 	movw	r3, #4369	; 0x1111
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10f      	bne.n	80022be <HAL_TIM_PWM_Stop+0x96>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6a1a      	ldr	r2, [r3, #32]
 80022a4:	f240 4344 	movw	r3, #1092	; 0x444
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_TIM_PWM_Stop+0x96>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 0201 	bic.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40010000 	.word	0x40010000
 80022d4:	40010400 	.word	0x40010400

080022d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e105      	b.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x226>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2201      	movs	r2, #1
 80022f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b14      	cmp	r3, #20
 8002306:	f200 80f0 	bhi.w	80024ea <HAL_TIM_PWM_ConfigChannel+0x212>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002365 	.word	0x08002365
 8002314:	080024eb 	.word	0x080024eb
 8002318:	080024eb 	.word	0x080024eb
 800231c:	080024eb 	.word	0x080024eb
 8002320:	080023a5 	.word	0x080023a5
 8002324:	080024eb 	.word	0x080024eb
 8002328:	080024eb 	.word	0x080024eb
 800232c:	080024eb 	.word	0x080024eb
 8002330:	080023e7 	.word	0x080023e7
 8002334:	080024eb 	.word	0x080024eb
 8002338:	080024eb 	.word	0x080024eb
 800233c:	080024eb 	.word	0x080024eb
 8002340:	08002427 	.word	0x08002427
 8002344:	080024eb 	.word	0x080024eb
 8002348:	080024eb 	.word	0x080024eb
 800234c:	080024eb 	.word	0x080024eb
 8002350:	08002469 	.word	0x08002469
 8002354:	080024eb 	.word	0x080024eb
 8002358:	080024eb 	.word	0x080024eb
 800235c:	080024eb 	.word	0x080024eb
 8002360:	080024a9 	.word	0x080024a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fa26 	bl	80027bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699a      	ldr	r2, [r3, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0208 	orr.w	r2, r2, #8
 800237e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6999      	ldr	r1, [r3, #24]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	691a      	ldr	r2, [r3, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]
      break;
 80023a2:	e0a3      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68b9      	ldr	r1, [r7, #8]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fa78 	bl	80028a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	699a      	ldr	r2, [r3, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6999      	ldr	r1, [r3, #24]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	021a      	lsls	r2, r3, #8
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	619a      	str	r2, [r3, #24]
      break;
 80023e4:	e082      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 facf 	bl	8002990 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0208 	orr.w	r2, r2, #8
 8002400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0204 	bic.w	r2, r2, #4
 8002410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69d9      	ldr	r1, [r3, #28]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	61da      	str	r2, [r3, #28]
      break;
 8002424:	e062      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fb25 	bl	8002a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69da      	ldr	r2, [r3, #28]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69da      	ldr	r2, [r3, #28]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69d9      	ldr	r1, [r3, #28]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	021a      	lsls	r2, r3, #8
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	61da      	str	r2, [r3, #28]
      break;
 8002466:	e041      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fb5c 	bl	8002b2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0208 	orr.w	r2, r2, #8
 8002482:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024a6:	e021      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fb8e 	bl	8002bd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024e8:	e000      	b.n	80024ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80024ea:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop

08002508 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIM_ConfigClockSource+0x18>
 800251c:	2302      	movs	r3, #2
 800251e:	e0a6      	b.n	800266e <HAL_TIM_ConfigClockSource+0x166>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_TIM_ConfigClockSource+0x170>)
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002546:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d067      	beq.n	8002628 <HAL_TIM_ConfigClockSource+0x120>
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d80b      	bhi.n	8002574 <HAL_TIM_ConfigClockSource+0x6c>
 800255c:	2b10      	cmp	r3, #16
 800255e:	d073      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x140>
 8002560:	2b10      	cmp	r3, #16
 8002562:	d802      	bhi.n	800256a <HAL_TIM_ConfigClockSource+0x62>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06f      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002568:	e078      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800256a:	2b20      	cmp	r3, #32
 800256c:	d06c      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x140>
 800256e:	2b30      	cmp	r3, #48	; 0x30
 8002570:	d06a      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002572:	e073      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002574:	2b70      	cmp	r3, #112	; 0x70
 8002576:	d00d      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0x8c>
 8002578:	2b70      	cmp	r3, #112	; 0x70
 800257a:	d804      	bhi.n	8002586 <HAL_TIM_ConfigClockSource+0x7e>
 800257c:	2b50      	cmp	r3, #80	; 0x50
 800257e:	d033      	beq.n	80025e8 <HAL_TIM_ConfigClockSource+0xe0>
 8002580:	2b60      	cmp	r3, #96	; 0x60
 8002582:	d041      	beq.n	8002608 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002584:	e06a      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d066      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x152>
 800258c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002590:	d017      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002592:	e063      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f000 fbe2 	bl	8002d6c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	609a      	str	r2, [r3, #8]
      break;
 80025c0:	e04c      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f000 fbcb 	bl	8002d6c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025e4:	609a      	str	r2, [r3, #8]
      break;
 80025e6:	e039      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f000 fb3f 	bl	8002c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2150      	movs	r1, #80	; 0x50
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fb98 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002606:	e029      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	461a      	mov	r2, r3
 8002616:	f000 fb5e 	bl	8002cd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2160      	movs	r1, #96	; 0x60
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fb88 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002626:	e019      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6818      	ldr	r0, [r3, #0]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	6859      	ldr	r1, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	461a      	mov	r2, r3
 8002636:	f000 fb1f 	bl	8002c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	4618      	mov	r0, r3
 8002642:	f000 fb78 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002646:	e009      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fb6f 	bl	8002d36 <TIM_ITRx_SetConfig>
      break;
 8002658:	e000      	b.n	800265c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800265a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	fffeff88 	.word	0xfffeff88

0800267c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a40      	ldr	r2, [pc, #256]	; (8002790 <TIM_Base_SetConfig+0x114>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d013      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d00f      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3d      	ldr	r2, [pc, #244]	; (8002794 <TIM_Base_SetConfig+0x118>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00b      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a3c      	ldr	r2, [pc, #240]	; (8002798 <TIM_Base_SetConfig+0x11c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3b      	ldr	r2, [pc, #236]	; (800279c <TIM_Base_SetConfig+0x120>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0x40>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a3a      	ldr	r2, [pc, #232]	; (80027a0 <TIM_Base_SetConfig+0x124>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <TIM_Base_SetConfig+0x114>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d027      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a2c      	ldr	r2, [pc, #176]	; (8002794 <TIM_Base_SetConfig+0x118>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d023      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <TIM_Base_SetConfig+0x11c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a2a      	ldr	r2, [pc, #168]	; (800279c <TIM_Base_SetConfig+0x120>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01b      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <TIM_Base_SetConfig+0x124>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d017      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <TIM_Base_SetConfig+0x128>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a27      	ldr	r2, [pc, #156]	; (80027a8 <TIM_Base_SetConfig+0x12c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a26      	ldr	r2, [pc, #152]	; (80027ac <TIM_Base_SetConfig+0x130>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <TIM_Base_SetConfig+0x134>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <TIM_Base_SetConfig+0x138>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0xb2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a23      	ldr	r2, [pc, #140]	; (80027b8 <TIM_Base_SetConfig+0x13c>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0a      	ldr	r2, [pc, #40]	; (8002790 <TIM_Base_SetConfig+0x114>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0xf8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a0c      	ldr	r2, [pc, #48]	; (80027a0 <TIM_Base_SetConfig+0x124>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40010400 	.word	0x40010400
 80027a4:	40014000 	.word	0x40014000
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40014800 	.word	0x40014800
 80027b0:	40001800 	.word	0x40001800
 80027b4:	40001c00 	.word	0x40001c00
 80027b8:	40002000 	.word	0x40002000

080027bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <TIM_OC1_SetConfig+0xd8>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0303 	bic.w	r3, r3, #3
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 0302 	bic.w	r3, r3, #2
 8002804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a21      	ldr	r2, [pc, #132]	; (8002898 <TIM_OC1_SetConfig+0xdc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d003      	beq.n	8002820 <TIM_OC1_SetConfig+0x64>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a20      	ldr	r2, [pc, #128]	; (800289c <TIM_OC1_SetConfig+0xe0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10c      	bne.n	800283a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f023 0308 	bic.w	r3, r3, #8
 8002826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 0304 	bic.w	r3, r3, #4
 8002838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a16      	ldr	r2, [pc, #88]	; (8002898 <TIM_OC1_SetConfig+0xdc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <TIM_OC1_SetConfig+0x8e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <TIM_OC1_SetConfig+0xe0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d111      	bne.n	800286e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	621a      	str	r2, [r3, #32]
}
 8002888:	bf00      	nop
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	fffeff8f 	.word	0xfffeff8f
 8002898:	40010000 	.word	0x40010000
 800289c:	40010400 	.word	0x40010400

080028a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	f023 0210 	bic.w	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4b2e      	ldr	r3, [pc, #184]	; (8002984 <TIM_OC2_SetConfig+0xe4>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	021b      	lsls	r3, r3, #8
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f023 0320 	bic.w	r3, r3, #32
 80028ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a23      	ldr	r2, [pc, #140]	; (8002988 <TIM_OC2_SetConfig+0xe8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_OC2_SetConfig+0x68>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a22      	ldr	r2, [pc, #136]	; (800298c <TIM_OC2_SetConfig+0xec>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d10d      	bne.n	8002924 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800290e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002922:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a18      	ldr	r2, [pc, #96]	; (8002988 <TIM_OC2_SetConfig+0xe8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d003      	beq.n	8002934 <TIM_OC2_SetConfig+0x94>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a17      	ldr	r2, [pc, #92]	; (800298c <TIM_OC2_SetConfig+0xec>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d113      	bne.n	800295c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800293a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002942:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	621a      	str	r2, [r3, #32]
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	feff8fff 	.word	0xfeff8fff
 8002988:	40010000 	.word	0x40010000
 800298c:	40010400 	.word	0x40010400

08002990 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <TIM_OC3_SetConfig+0xe0>)
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	021b      	lsls	r3, r3, #8
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a22      	ldr	r2, [pc, #136]	; (8002a74 <TIM_OC3_SetConfig+0xe4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d003      	beq.n	80029f6 <TIM_OC3_SetConfig+0x66>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a21      	ldr	r2, [pc, #132]	; (8002a78 <TIM_OC3_SetConfig+0xe8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10d      	bne.n	8002a12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <TIM_OC3_SetConfig+0xe4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_OC3_SetConfig+0x92>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a16      	ldr	r2, [pc, #88]	; (8002a78 <TIM_OC3_SetConfig+0xe8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d113      	bne.n	8002a4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	621a      	str	r2, [r3, #32]
}
 8002a64:	bf00      	nop
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	fffeff8f 	.word	0xfffeff8f
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40010400 	.word	0x40010400

08002a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b087      	sub	sp, #28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a1b      	ldr	r3, [r3, #32]
 8002a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <TIM_OC4_SetConfig+0xa4>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	031b      	lsls	r3, r3, #12
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <TIM_OC4_SetConfig+0xa8>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d003      	beq.n	8002ae4 <TIM_OC4_SetConfig+0x68>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <TIM_OC4_SetConfig+0xac>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d109      	bne.n	8002af8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	621a      	str	r2, [r3, #32]
}
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	feff8fff 	.word	0xfeff8fff
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40010400 	.word	0x40010400

08002b2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <TIM_OC5_SetConfig+0x98>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002b6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <TIM_OC5_SetConfig+0x9c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d003      	beq.n	8002b8a <TIM_OC5_SetConfig+0x5e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <TIM_OC5_SetConfig+0xa0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d109      	bne.n	8002b9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	621a      	str	r2, [r3, #32]
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	fffeff8f 	.word	0xfffeff8f
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40010400 	.word	0x40010400

08002bd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4b1c      	ldr	r3, [pc, #112]	; (8002c6c <TIM_OC6_SetConfig+0x9c>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	051b      	lsls	r3, r3, #20
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <TIM_OC6_SetConfig+0xa0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d003      	beq.n	8002c30 <TIM_OC6_SetConfig+0x60>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <TIM_OC6_SetConfig+0xa4>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d109      	bne.n	8002c44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	621a      	str	r2, [r3, #32]
}
 8002c5e:	bf00      	nop
 8002c60:	371c      	adds	r7, #28
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	feff8fff 	.word	0xfeff8fff
 8002c70:	40010000 	.word	0x40010000
 8002c74:	40010400 	.word	0x40010400

08002c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0201 	bic.w	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	011b      	lsls	r3, r3, #4
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f023 030a 	bic.w	r3, r3, #10
 8002cb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b087      	sub	sp, #28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	bf00      	nop
 8002d2c:	371c      	adds	r7, #28
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	f043 0307 	orr.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	bf00      	nop
 8002d62:	3714      	adds	r7, #20
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	bf00      	nop
 8002da2:	371c      	adds	r7, #28
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b087      	sub	sp, #28
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 031f 	and.w	r3, r3, #31
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	401a      	ands	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	fa01 f303 	lsl.w	r3, r1, r3
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e06d      	b.n	8002eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2f      	ldr	r2, [pc, #188]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d108      	bne.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d022      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e82:	d01d      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a1d      	ldr	r2, [pc, #116]	; (8002f00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d018      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d013      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1a      	ldr	r2, [pc, #104]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00e      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d009      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d004      	beq.n	8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d10c      	bne.n	8002eda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40010000 	.word	0x40010000
 8002efc:	40010400 	.word	0x40010400
 8002f00:	40000400 	.word	0x40000400
 8002f04:	40000800 	.word	0x40000800
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	40014000 	.word	0x40014000
 8002f10:	40001800 	.word	0x40001800

08002f14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e065      	b.n	8002ffc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a16      	ldr	r2, [pc, #88]	; (8003008 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d115      	bne.n	8002fea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	051b      	lsls	r3, r3, #20
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40010000 	.word	0x40010000
 800300c:	40010400 	.word	0x40010400

08003010 <__errno>:
 8003010:	4b01      	ldr	r3, [pc, #4]	; (8003018 <__errno+0x8>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	2000000c 	.word	0x2000000c

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	4e0d      	ldr	r6, [pc, #52]	; (8003054 <__libc_init_array+0x38>)
 8003020:	4c0d      	ldr	r4, [pc, #52]	; (8003058 <__libc_init_array+0x3c>)
 8003022:	1ba4      	subs	r4, r4, r6
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	2500      	movs	r5, #0
 8003028:	42a5      	cmp	r5, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	4e0b      	ldr	r6, [pc, #44]	; (800305c <__libc_init_array+0x40>)
 800302e:	4c0c      	ldr	r4, [pc, #48]	; (8003060 <__libc_init_array+0x44>)
 8003030:	f000 ff04 	bl	8003e3c <_init>
 8003034:	1ba4      	subs	r4, r4, r6
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	2500      	movs	r5, #0
 800303a:	42a5      	cmp	r5, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003044:	4798      	blx	r3
 8003046:	3501      	adds	r5, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800304e:	4798      	blx	r3
 8003050:	3501      	adds	r5, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	08003fc0 	.word	0x08003fc0
 8003058:	08003fc0 	.word	0x08003fc0
 800305c:	08003fc0 	.word	0x08003fc0
 8003060:	08003fc4 	.word	0x08003fc4

08003064 <memset>:
 8003064:	4402      	add	r2, r0
 8003066:	4603      	mov	r3, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	d100      	bne.n	800306e <memset+0xa>
 800306c:	4770      	bx	lr
 800306e:	f803 1b01 	strb.w	r1, [r3], #1
 8003072:	e7f9      	b.n	8003068 <memset+0x4>

08003074 <iprintf>:
 8003074:	b40f      	push	{r0, r1, r2, r3}
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <iprintf+0x2c>)
 8003078:	b513      	push	{r0, r1, r4, lr}
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	b124      	cbz	r4, 8003088 <iprintf+0x14>
 800307e:	69a3      	ldr	r3, [r4, #24]
 8003080:	b913      	cbnz	r3, 8003088 <iprintf+0x14>
 8003082:	4620      	mov	r0, r4
 8003084:	f000 f84e 	bl	8003124 <__sinit>
 8003088:	ab05      	add	r3, sp, #20
 800308a:	9a04      	ldr	r2, [sp, #16]
 800308c:	68a1      	ldr	r1, [r4, #8]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	4620      	mov	r0, r4
 8003092:	f000 f955 	bl	8003340 <_vfiprintf_r>
 8003096:	b002      	add	sp, #8
 8003098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309c:	b004      	add	sp, #16
 800309e:	4770      	bx	lr
 80030a0:	2000000c 	.word	0x2000000c

080030a4 <std>:
 80030a4:	2300      	movs	r3, #0
 80030a6:	b510      	push	{r4, lr}
 80030a8:	4604      	mov	r4, r0
 80030aa:	e9c0 3300 	strd	r3, r3, [r0]
 80030ae:	6083      	str	r3, [r0, #8]
 80030b0:	8181      	strh	r1, [r0, #12]
 80030b2:	6643      	str	r3, [r0, #100]	; 0x64
 80030b4:	81c2      	strh	r2, [r0, #14]
 80030b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030ba:	6183      	str	r3, [r0, #24]
 80030bc:	4619      	mov	r1, r3
 80030be:	2208      	movs	r2, #8
 80030c0:	305c      	adds	r0, #92	; 0x5c
 80030c2:	f7ff ffcf 	bl	8003064 <memset>
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <std+0x38>)
 80030c8:	6263      	str	r3, [r4, #36]	; 0x24
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <std+0x3c>)
 80030cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <std+0x40>)
 80030d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030d2:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <std+0x44>)
 80030d4:	6224      	str	r4, [r4, #32]
 80030d6:	6323      	str	r3, [r4, #48]	; 0x30
 80030d8:	bd10      	pop	{r4, pc}
 80030da:	bf00      	nop
 80030dc:	0800389d 	.word	0x0800389d
 80030e0:	080038bf 	.word	0x080038bf
 80030e4:	080038f7 	.word	0x080038f7
 80030e8:	0800391b 	.word	0x0800391b

080030ec <_cleanup_r>:
 80030ec:	4901      	ldr	r1, [pc, #4]	; (80030f4 <_cleanup_r+0x8>)
 80030ee:	f000 b885 	b.w	80031fc <_fwalk_reent>
 80030f2:	bf00      	nop
 80030f4:	08003bf5 	.word	0x08003bf5

080030f8 <__sfmoreglue>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	1e4a      	subs	r2, r1, #1
 80030fc:	2568      	movs	r5, #104	; 0x68
 80030fe:	4355      	muls	r5, r2
 8003100:	460e      	mov	r6, r1
 8003102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003106:	f000 f897 	bl	8003238 <_malloc_r>
 800310a:	4604      	mov	r4, r0
 800310c:	b140      	cbz	r0, 8003120 <__sfmoreglue+0x28>
 800310e:	2100      	movs	r1, #0
 8003110:	e9c0 1600 	strd	r1, r6, [r0]
 8003114:	300c      	adds	r0, #12
 8003116:	60a0      	str	r0, [r4, #8]
 8003118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800311c:	f7ff ffa2 	bl	8003064 <memset>
 8003120:	4620      	mov	r0, r4
 8003122:	bd70      	pop	{r4, r5, r6, pc}

08003124 <__sinit>:
 8003124:	6983      	ldr	r3, [r0, #24]
 8003126:	b510      	push	{r4, lr}
 8003128:	4604      	mov	r4, r0
 800312a:	bb33      	cbnz	r3, 800317a <__sinit+0x56>
 800312c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003130:	6503      	str	r3, [r0, #80]	; 0x50
 8003132:	4b12      	ldr	r3, [pc, #72]	; (800317c <__sinit+0x58>)
 8003134:	4a12      	ldr	r2, [pc, #72]	; (8003180 <__sinit+0x5c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6282      	str	r2, [r0, #40]	; 0x28
 800313a:	4298      	cmp	r0, r3
 800313c:	bf04      	itt	eq
 800313e:	2301      	moveq	r3, #1
 8003140:	6183      	streq	r3, [r0, #24]
 8003142:	f000 f81f 	bl	8003184 <__sfp>
 8003146:	6060      	str	r0, [r4, #4]
 8003148:	4620      	mov	r0, r4
 800314a:	f000 f81b 	bl	8003184 <__sfp>
 800314e:	60a0      	str	r0, [r4, #8]
 8003150:	4620      	mov	r0, r4
 8003152:	f000 f817 	bl	8003184 <__sfp>
 8003156:	2200      	movs	r2, #0
 8003158:	60e0      	str	r0, [r4, #12]
 800315a:	2104      	movs	r1, #4
 800315c:	6860      	ldr	r0, [r4, #4]
 800315e:	f7ff ffa1 	bl	80030a4 <std>
 8003162:	2201      	movs	r2, #1
 8003164:	2109      	movs	r1, #9
 8003166:	68a0      	ldr	r0, [r4, #8]
 8003168:	f7ff ff9c 	bl	80030a4 <std>
 800316c:	2202      	movs	r2, #2
 800316e:	2112      	movs	r1, #18
 8003170:	68e0      	ldr	r0, [r4, #12]
 8003172:	f7ff ff97 	bl	80030a4 <std>
 8003176:	2301      	movs	r3, #1
 8003178:	61a3      	str	r3, [r4, #24]
 800317a:	bd10      	pop	{r4, pc}
 800317c:	08003f20 	.word	0x08003f20
 8003180:	080030ed 	.word	0x080030ed

08003184 <__sfp>:
 8003184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <__sfp+0x70>)
 8003188:	681e      	ldr	r6, [r3, #0]
 800318a:	69b3      	ldr	r3, [r6, #24]
 800318c:	4607      	mov	r7, r0
 800318e:	b913      	cbnz	r3, 8003196 <__sfp+0x12>
 8003190:	4630      	mov	r0, r6
 8003192:	f7ff ffc7 	bl	8003124 <__sinit>
 8003196:	3648      	adds	r6, #72	; 0x48
 8003198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800319c:	3b01      	subs	r3, #1
 800319e:	d503      	bpl.n	80031a8 <__sfp+0x24>
 80031a0:	6833      	ldr	r3, [r6, #0]
 80031a2:	b133      	cbz	r3, 80031b2 <__sfp+0x2e>
 80031a4:	6836      	ldr	r6, [r6, #0]
 80031a6:	e7f7      	b.n	8003198 <__sfp+0x14>
 80031a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031ac:	b16d      	cbz	r5, 80031ca <__sfp+0x46>
 80031ae:	3468      	adds	r4, #104	; 0x68
 80031b0:	e7f4      	b.n	800319c <__sfp+0x18>
 80031b2:	2104      	movs	r1, #4
 80031b4:	4638      	mov	r0, r7
 80031b6:	f7ff ff9f 	bl	80030f8 <__sfmoreglue>
 80031ba:	6030      	str	r0, [r6, #0]
 80031bc:	2800      	cmp	r0, #0
 80031be:	d1f1      	bne.n	80031a4 <__sfp+0x20>
 80031c0:	230c      	movs	r3, #12
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	4604      	mov	r4, r0
 80031c6:	4620      	mov	r0, r4
 80031c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <__sfp+0x74>)
 80031cc:	6665      	str	r5, [r4, #100]	; 0x64
 80031ce:	e9c4 5500 	strd	r5, r5, [r4]
 80031d2:	60a5      	str	r5, [r4, #8]
 80031d4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80031d8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80031dc:	2208      	movs	r2, #8
 80031de:	4629      	mov	r1, r5
 80031e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031e4:	f7ff ff3e 	bl	8003064 <memset>
 80031e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031f0:	e7e9      	b.n	80031c6 <__sfp+0x42>
 80031f2:	bf00      	nop
 80031f4:	08003f20 	.word	0x08003f20
 80031f8:	ffff0001 	.word	0xffff0001

080031fc <_fwalk_reent>:
 80031fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003200:	4680      	mov	r8, r0
 8003202:	4689      	mov	r9, r1
 8003204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003208:	2600      	movs	r6, #0
 800320a:	b914      	cbnz	r4, 8003212 <_fwalk_reent+0x16>
 800320c:	4630      	mov	r0, r6
 800320e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003212:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003216:	3f01      	subs	r7, #1
 8003218:	d501      	bpl.n	800321e <_fwalk_reent+0x22>
 800321a:	6824      	ldr	r4, [r4, #0]
 800321c:	e7f5      	b.n	800320a <_fwalk_reent+0xe>
 800321e:	89ab      	ldrh	r3, [r5, #12]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d907      	bls.n	8003234 <_fwalk_reent+0x38>
 8003224:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003228:	3301      	adds	r3, #1
 800322a:	d003      	beq.n	8003234 <_fwalk_reent+0x38>
 800322c:	4629      	mov	r1, r5
 800322e:	4640      	mov	r0, r8
 8003230:	47c8      	blx	r9
 8003232:	4306      	orrs	r6, r0
 8003234:	3568      	adds	r5, #104	; 0x68
 8003236:	e7ee      	b.n	8003216 <_fwalk_reent+0x1a>

08003238 <_malloc_r>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	1ccd      	adds	r5, r1, #3
 800323c:	f025 0503 	bic.w	r5, r5, #3
 8003240:	3508      	adds	r5, #8
 8003242:	2d0c      	cmp	r5, #12
 8003244:	bf38      	it	cc
 8003246:	250c      	movcc	r5, #12
 8003248:	2d00      	cmp	r5, #0
 800324a:	4606      	mov	r6, r0
 800324c:	db01      	blt.n	8003252 <_malloc_r+0x1a>
 800324e:	42a9      	cmp	r1, r5
 8003250:	d903      	bls.n	800325a <_malloc_r+0x22>
 8003252:	230c      	movs	r3, #12
 8003254:	6033      	str	r3, [r6, #0]
 8003256:	2000      	movs	r0, #0
 8003258:	bd70      	pop	{r4, r5, r6, pc}
 800325a:	f000 fd6b 	bl	8003d34 <__malloc_lock>
 800325e:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <_malloc_r+0xac>)
 8003260:	6814      	ldr	r4, [r2, #0]
 8003262:	4621      	mov	r1, r4
 8003264:	b991      	cbnz	r1, 800328c <_malloc_r+0x54>
 8003266:	4c20      	ldr	r4, [pc, #128]	; (80032e8 <_malloc_r+0xb0>)
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	b91b      	cbnz	r3, 8003274 <_malloc_r+0x3c>
 800326c:	4630      	mov	r0, r6
 800326e:	f000 fb05 	bl	800387c <_sbrk_r>
 8003272:	6020      	str	r0, [r4, #0]
 8003274:	4629      	mov	r1, r5
 8003276:	4630      	mov	r0, r6
 8003278:	f000 fb00 	bl	800387c <_sbrk_r>
 800327c:	1c43      	adds	r3, r0, #1
 800327e:	d124      	bne.n	80032ca <_malloc_r+0x92>
 8003280:	230c      	movs	r3, #12
 8003282:	6033      	str	r3, [r6, #0]
 8003284:	4630      	mov	r0, r6
 8003286:	f000 fd56 	bl	8003d36 <__malloc_unlock>
 800328a:	e7e4      	b.n	8003256 <_malloc_r+0x1e>
 800328c:	680b      	ldr	r3, [r1, #0]
 800328e:	1b5b      	subs	r3, r3, r5
 8003290:	d418      	bmi.n	80032c4 <_malloc_r+0x8c>
 8003292:	2b0b      	cmp	r3, #11
 8003294:	d90f      	bls.n	80032b6 <_malloc_r+0x7e>
 8003296:	600b      	str	r3, [r1, #0]
 8003298:	50cd      	str	r5, [r1, r3]
 800329a:	18cc      	adds	r4, r1, r3
 800329c:	4630      	mov	r0, r6
 800329e:	f000 fd4a 	bl	8003d36 <__malloc_unlock>
 80032a2:	f104 000b 	add.w	r0, r4, #11
 80032a6:	1d23      	adds	r3, r4, #4
 80032a8:	f020 0007 	bic.w	r0, r0, #7
 80032ac:	1ac3      	subs	r3, r0, r3
 80032ae:	d0d3      	beq.n	8003258 <_malloc_r+0x20>
 80032b0:	425a      	negs	r2, r3
 80032b2:	50e2      	str	r2, [r4, r3]
 80032b4:	e7d0      	b.n	8003258 <_malloc_r+0x20>
 80032b6:	428c      	cmp	r4, r1
 80032b8:	684b      	ldr	r3, [r1, #4]
 80032ba:	bf16      	itet	ne
 80032bc:	6063      	strne	r3, [r4, #4]
 80032be:	6013      	streq	r3, [r2, #0]
 80032c0:	460c      	movne	r4, r1
 80032c2:	e7eb      	b.n	800329c <_malloc_r+0x64>
 80032c4:	460c      	mov	r4, r1
 80032c6:	6849      	ldr	r1, [r1, #4]
 80032c8:	e7cc      	b.n	8003264 <_malloc_r+0x2c>
 80032ca:	1cc4      	adds	r4, r0, #3
 80032cc:	f024 0403 	bic.w	r4, r4, #3
 80032d0:	42a0      	cmp	r0, r4
 80032d2:	d005      	beq.n	80032e0 <_malloc_r+0xa8>
 80032d4:	1a21      	subs	r1, r4, r0
 80032d6:	4630      	mov	r0, r6
 80032d8:	f000 fad0 	bl	800387c <_sbrk_r>
 80032dc:	3001      	adds	r0, #1
 80032de:	d0cf      	beq.n	8003280 <_malloc_r+0x48>
 80032e0:	6025      	str	r5, [r4, #0]
 80032e2:	e7db      	b.n	800329c <_malloc_r+0x64>
 80032e4:	20000090 	.word	0x20000090
 80032e8:	20000094 	.word	0x20000094

080032ec <__sfputc_r>:
 80032ec:	6893      	ldr	r3, [r2, #8]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	b410      	push	{r4}
 80032f4:	6093      	str	r3, [r2, #8]
 80032f6:	da08      	bge.n	800330a <__sfputc_r+0x1e>
 80032f8:	6994      	ldr	r4, [r2, #24]
 80032fa:	42a3      	cmp	r3, r4
 80032fc:	db01      	blt.n	8003302 <__sfputc_r+0x16>
 80032fe:	290a      	cmp	r1, #10
 8003300:	d103      	bne.n	800330a <__sfputc_r+0x1e>
 8003302:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003306:	f000 bb0d 	b.w	8003924 <__swbuf_r>
 800330a:	6813      	ldr	r3, [r2, #0]
 800330c:	1c58      	adds	r0, r3, #1
 800330e:	6010      	str	r0, [r2, #0]
 8003310:	7019      	strb	r1, [r3, #0]
 8003312:	4608      	mov	r0, r1
 8003314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003318:	4770      	bx	lr

0800331a <__sfputs_r>:
 800331a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331c:	4606      	mov	r6, r0
 800331e:	460f      	mov	r7, r1
 8003320:	4614      	mov	r4, r2
 8003322:	18d5      	adds	r5, r2, r3
 8003324:	42ac      	cmp	r4, r5
 8003326:	d101      	bne.n	800332c <__sfputs_r+0x12>
 8003328:	2000      	movs	r0, #0
 800332a:	e007      	b.n	800333c <__sfputs_r+0x22>
 800332c:	463a      	mov	r2, r7
 800332e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003332:	4630      	mov	r0, r6
 8003334:	f7ff ffda 	bl	80032ec <__sfputc_r>
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	d1f3      	bne.n	8003324 <__sfputs_r+0xa>
 800333c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003340 <_vfiprintf_r>:
 8003340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003344:	460c      	mov	r4, r1
 8003346:	b09d      	sub	sp, #116	; 0x74
 8003348:	4617      	mov	r7, r2
 800334a:	461d      	mov	r5, r3
 800334c:	4606      	mov	r6, r0
 800334e:	b118      	cbz	r0, 8003358 <_vfiprintf_r+0x18>
 8003350:	6983      	ldr	r3, [r0, #24]
 8003352:	b90b      	cbnz	r3, 8003358 <_vfiprintf_r+0x18>
 8003354:	f7ff fee6 	bl	8003124 <__sinit>
 8003358:	4b7c      	ldr	r3, [pc, #496]	; (800354c <_vfiprintf_r+0x20c>)
 800335a:	429c      	cmp	r4, r3
 800335c:	d158      	bne.n	8003410 <_vfiprintf_r+0xd0>
 800335e:	6874      	ldr	r4, [r6, #4]
 8003360:	89a3      	ldrh	r3, [r4, #12]
 8003362:	0718      	lsls	r0, r3, #28
 8003364:	d55e      	bpl.n	8003424 <_vfiprintf_r+0xe4>
 8003366:	6923      	ldr	r3, [r4, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d05b      	beq.n	8003424 <_vfiprintf_r+0xe4>
 800336c:	2300      	movs	r3, #0
 800336e:	9309      	str	r3, [sp, #36]	; 0x24
 8003370:	2320      	movs	r3, #32
 8003372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003376:	2330      	movs	r3, #48	; 0x30
 8003378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800337c:	9503      	str	r5, [sp, #12]
 800337e:	f04f 0b01 	mov.w	fp, #1
 8003382:	46b8      	mov	r8, r7
 8003384:	4645      	mov	r5, r8
 8003386:	f815 3b01 	ldrb.w	r3, [r5], #1
 800338a:	b10b      	cbz	r3, 8003390 <_vfiprintf_r+0x50>
 800338c:	2b25      	cmp	r3, #37	; 0x25
 800338e:	d154      	bne.n	800343a <_vfiprintf_r+0xfa>
 8003390:	ebb8 0a07 	subs.w	sl, r8, r7
 8003394:	d00b      	beq.n	80033ae <_vfiprintf_r+0x6e>
 8003396:	4653      	mov	r3, sl
 8003398:	463a      	mov	r2, r7
 800339a:	4621      	mov	r1, r4
 800339c:	4630      	mov	r0, r6
 800339e:	f7ff ffbc 	bl	800331a <__sfputs_r>
 80033a2:	3001      	adds	r0, #1
 80033a4:	f000 80c2 	beq.w	800352c <_vfiprintf_r+0x1ec>
 80033a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033aa:	4453      	add	r3, sl
 80033ac:	9309      	str	r3, [sp, #36]	; 0x24
 80033ae:	f898 3000 	ldrb.w	r3, [r8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 80ba 	beq.w	800352c <_vfiprintf_r+0x1ec>
 80033b8:	2300      	movs	r3, #0
 80033ba:	f04f 32ff 	mov.w	r2, #4294967295
 80033be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033c2:	9304      	str	r3, [sp, #16]
 80033c4:	9307      	str	r3, [sp, #28]
 80033c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033ca:	931a      	str	r3, [sp, #104]	; 0x68
 80033cc:	46a8      	mov	r8, r5
 80033ce:	2205      	movs	r2, #5
 80033d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80033d4:	485e      	ldr	r0, [pc, #376]	; (8003550 <_vfiprintf_r+0x210>)
 80033d6:	f7fc ff33 	bl	8000240 <memchr>
 80033da:	9b04      	ldr	r3, [sp, #16]
 80033dc:	bb78      	cbnz	r0, 800343e <_vfiprintf_r+0xfe>
 80033de:	06d9      	lsls	r1, r3, #27
 80033e0:	bf44      	itt	mi
 80033e2:	2220      	movmi	r2, #32
 80033e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033e8:	071a      	lsls	r2, r3, #28
 80033ea:	bf44      	itt	mi
 80033ec:	222b      	movmi	r2, #43	; 0x2b
 80033ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033f2:	782a      	ldrb	r2, [r5, #0]
 80033f4:	2a2a      	cmp	r2, #42	; 0x2a
 80033f6:	d02a      	beq.n	800344e <_vfiprintf_r+0x10e>
 80033f8:	9a07      	ldr	r2, [sp, #28]
 80033fa:	46a8      	mov	r8, r5
 80033fc:	2000      	movs	r0, #0
 80033fe:	250a      	movs	r5, #10
 8003400:	4641      	mov	r1, r8
 8003402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003406:	3b30      	subs	r3, #48	; 0x30
 8003408:	2b09      	cmp	r3, #9
 800340a:	d969      	bls.n	80034e0 <_vfiprintf_r+0x1a0>
 800340c:	b360      	cbz	r0, 8003468 <_vfiprintf_r+0x128>
 800340e:	e024      	b.n	800345a <_vfiprintf_r+0x11a>
 8003410:	4b50      	ldr	r3, [pc, #320]	; (8003554 <_vfiprintf_r+0x214>)
 8003412:	429c      	cmp	r4, r3
 8003414:	d101      	bne.n	800341a <_vfiprintf_r+0xda>
 8003416:	68b4      	ldr	r4, [r6, #8]
 8003418:	e7a2      	b.n	8003360 <_vfiprintf_r+0x20>
 800341a:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <_vfiprintf_r+0x218>)
 800341c:	429c      	cmp	r4, r3
 800341e:	bf08      	it	eq
 8003420:	68f4      	ldreq	r4, [r6, #12]
 8003422:	e79d      	b.n	8003360 <_vfiprintf_r+0x20>
 8003424:	4621      	mov	r1, r4
 8003426:	4630      	mov	r0, r6
 8003428:	f000 fae0 	bl	80039ec <__swsetup_r>
 800342c:	2800      	cmp	r0, #0
 800342e:	d09d      	beq.n	800336c <_vfiprintf_r+0x2c>
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	b01d      	add	sp, #116	; 0x74
 8003436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343a:	46a8      	mov	r8, r5
 800343c:	e7a2      	b.n	8003384 <_vfiprintf_r+0x44>
 800343e:	4a44      	ldr	r2, [pc, #272]	; (8003550 <_vfiprintf_r+0x210>)
 8003440:	1a80      	subs	r0, r0, r2
 8003442:	fa0b f000 	lsl.w	r0, fp, r0
 8003446:	4318      	orrs	r0, r3
 8003448:	9004      	str	r0, [sp, #16]
 800344a:	4645      	mov	r5, r8
 800344c:	e7be      	b.n	80033cc <_vfiprintf_r+0x8c>
 800344e:	9a03      	ldr	r2, [sp, #12]
 8003450:	1d11      	adds	r1, r2, #4
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	9103      	str	r1, [sp, #12]
 8003456:	2a00      	cmp	r2, #0
 8003458:	db01      	blt.n	800345e <_vfiprintf_r+0x11e>
 800345a:	9207      	str	r2, [sp, #28]
 800345c:	e004      	b.n	8003468 <_vfiprintf_r+0x128>
 800345e:	4252      	negs	r2, r2
 8003460:	f043 0302 	orr.w	r3, r3, #2
 8003464:	9207      	str	r2, [sp, #28]
 8003466:	9304      	str	r3, [sp, #16]
 8003468:	f898 3000 	ldrb.w	r3, [r8]
 800346c:	2b2e      	cmp	r3, #46	; 0x2e
 800346e:	d10e      	bne.n	800348e <_vfiprintf_r+0x14e>
 8003470:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003474:	2b2a      	cmp	r3, #42	; 0x2a
 8003476:	d138      	bne.n	80034ea <_vfiprintf_r+0x1aa>
 8003478:	9b03      	ldr	r3, [sp, #12]
 800347a:	1d1a      	adds	r2, r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	9203      	str	r2, [sp, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	bfb8      	it	lt
 8003484:	f04f 33ff 	movlt.w	r3, #4294967295
 8003488:	f108 0802 	add.w	r8, r8, #2
 800348c:	9305      	str	r3, [sp, #20]
 800348e:	4d33      	ldr	r5, [pc, #204]	; (800355c <_vfiprintf_r+0x21c>)
 8003490:	f898 1000 	ldrb.w	r1, [r8]
 8003494:	2203      	movs	r2, #3
 8003496:	4628      	mov	r0, r5
 8003498:	f7fc fed2 	bl	8000240 <memchr>
 800349c:	b140      	cbz	r0, 80034b0 <_vfiprintf_r+0x170>
 800349e:	2340      	movs	r3, #64	; 0x40
 80034a0:	1b40      	subs	r0, r0, r5
 80034a2:	fa03 f000 	lsl.w	r0, r3, r0
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	4303      	orrs	r3, r0
 80034aa:	f108 0801 	add.w	r8, r8, #1
 80034ae:	9304      	str	r3, [sp, #16]
 80034b0:	f898 1000 	ldrb.w	r1, [r8]
 80034b4:	482a      	ldr	r0, [pc, #168]	; (8003560 <_vfiprintf_r+0x220>)
 80034b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ba:	2206      	movs	r2, #6
 80034bc:	f108 0701 	add.w	r7, r8, #1
 80034c0:	f7fc febe 	bl	8000240 <memchr>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d037      	beq.n	8003538 <_vfiprintf_r+0x1f8>
 80034c8:	4b26      	ldr	r3, [pc, #152]	; (8003564 <_vfiprintf_r+0x224>)
 80034ca:	bb1b      	cbnz	r3, 8003514 <_vfiprintf_r+0x1d4>
 80034cc:	9b03      	ldr	r3, [sp, #12]
 80034ce:	3307      	adds	r3, #7
 80034d0:	f023 0307 	bic.w	r3, r3, #7
 80034d4:	3308      	adds	r3, #8
 80034d6:	9303      	str	r3, [sp, #12]
 80034d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034da:	444b      	add	r3, r9
 80034dc:	9309      	str	r3, [sp, #36]	; 0x24
 80034de:	e750      	b.n	8003382 <_vfiprintf_r+0x42>
 80034e0:	fb05 3202 	mla	r2, r5, r2, r3
 80034e4:	2001      	movs	r0, #1
 80034e6:	4688      	mov	r8, r1
 80034e8:	e78a      	b.n	8003400 <_vfiprintf_r+0xc0>
 80034ea:	2300      	movs	r3, #0
 80034ec:	f108 0801 	add.w	r8, r8, #1
 80034f0:	9305      	str	r3, [sp, #20]
 80034f2:	4619      	mov	r1, r3
 80034f4:	250a      	movs	r5, #10
 80034f6:	4640      	mov	r0, r8
 80034f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034fc:	3a30      	subs	r2, #48	; 0x30
 80034fe:	2a09      	cmp	r2, #9
 8003500:	d903      	bls.n	800350a <_vfiprintf_r+0x1ca>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0c3      	beq.n	800348e <_vfiprintf_r+0x14e>
 8003506:	9105      	str	r1, [sp, #20]
 8003508:	e7c1      	b.n	800348e <_vfiprintf_r+0x14e>
 800350a:	fb05 2101 	mla	r1, r5, r1, r2
 800350e:	2301      	movs	r3, #1
 8003510:	4680      	mov	r8, r0
 8003512:	e7f0      	b.n	80034f6 <_vfiprintf_r+0x1b6>
 8003514:	ab03      	add	r3, sp, #12
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4622      	mov	r2, r4
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <_vfiprintf_r+0x228>)
 800351c:	a904      	add	r1, sp, #16
 800351e:	4630      	mov	r0, r6
 8003520:	f3af 8000 	nop.w
 8003524:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003528:	4681      	mov	r9, r0
 800352a:	d1d5      	bne.n	80034d8 <_vfiprintf_r+0x198>
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	065b      	lsls	r3, r3, #25
 8003530:	f53f af7e 	bmi.w	8003430 <_vfiprintf_r+0xf0>
 8003534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003536:	e77d      	b.n	8003434 <_vfiprintf_r+0xf4>
 8003538:	ab03      	add	r3, sp, #12
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	4622      	mov	r2, r4
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <_vfiprintf_r+0x228>)
 8003540:	a904      	add	r1, sp, #16
 8003542:	4630      	mov	r0, r6
 8003544:	f000 f888 	bl	8003658 <_printf_i>
 8003548:	e7ec      	b.n	8003524 <_vfiprintf_r+0x1e4>
 800354a:	bf00      	nop
 800354c:	08003f44 	.word	0x08003f44
 8003550:	08003f84 	.word	0x08003f84
 8003554:	08003f64 	.word	0x08003f64
 8003558:	08003f24 	.word	0x08003f24
 800355c:	08003f8a 	.word	0x08003f8a
 8003560:	08003f8e 	.word	0x08003f8e
 8003564:	00000000 	.word	0x00000000
 8003568:	0800331b 	.word	0x0800331b

0800356c <_printf_common>:
 800356c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003570:	4691      	mov	r9, r2
 8003572:	461f      	mov	r7, r3
 8003574:	688a      	ldr	r2, [r1, #8]
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800357c:	4293      	cmp	r3, r2
 800357e:	bfb8      	it	lt
 8003580:	4613      	movlt	r3, r2
 8003582:	f8c9 3000 	str.w	r3, [r9]
 8003586:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800358a:	4606      	mov	r6, r0
 800358c:	460c      	mov	r4, r1
 800358e:	b112      	cbz	r2, 8003596 <_printf_common+0x2a>
 8003590:	3301      	adds	r3, #1
 8003592:	f8c9 3000 	str.w	r3, [r9]
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	0699      	lsls	r1, r3, #26
 800359a:	bf42      	ittt	mi
 800359c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80035a0:	3302      	addmi	r3, #2
 80035a2:	f8c9 3000 	strmi.w	r3, [r9]
 80035a6:	6825      	ldr	r5, [r4, #0]
 80035a8:	f015 0506 	ands.w	r5, r5, #6
 80035ac:	d107      	bne.n	80035be <_printf_common+0x52>
 80035ae:	f104 0a19 	add.w	sl, r4, #25
 80035b2:	68e3      	ldr	r3, [r4, #12]
 80035b4:	f8d9 2000 	ldr.w	r2, [r9]
 80035b8:	1a9b      	subs	r3, r3, r2
 80035ba:	42ab      	cmp	r3, r5
 80035bc:	dc28      	bgt.n	8003610 <_printf_common+0xa4>
 80035be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	3300      	adds	r3, #0
 80035c6:	bf18      	it	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	0692      	lsls	r2, r2, #26
 80035cc:	d42d      	bmi.n	800362a <_printf_common+0xbe>
 80035ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035d2:	4639      	mov	r1, r7
 80035d4:	4630      	mov	r0, r6
 80035d6:	47c0      	blx	r8
 80035d8:	3001      	adds	r0, #1
 80035da:	d020      	beq.n	800361e <_printf_common+0xb2>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	68e5      	ldr	r5, [r4, #12]
 80035e0:	f8d9 2000 	ldr.w	r2, [r9]
 80035e4:	f003 0306 	and.w	r3, r3, #6
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	bf08      	it	eq
 80035ec:	1aad      	subeq	r5, r5, r2
 80035ee:	68a3      	ldr	r3, [r4, #8]
 80035f0:	6922      	ldr	r2, [r4, #16]
 80035f2:	bf0c      	ite	eq
 80035f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f8:	2500      	movne	r5, #0
 80035fa:	4293      	cmp	r3, r2
 80035fc:	bfc4      	itt	gt
 80035fe:	1a9b      	subgt	r3, r3, r2
 8003600:	18ed      	addgt	r5, r5, r3
 8003602:	f04f 0900 	mov.w	r9, #0
 8003606:	341a      	adds	r4, #26
 8003608:	454d      	cmp	r5, r9
 800360a:	d11a      	bne.n	8003642 <_printf_common+0xd6>
 800360c:	2000      	movs	r0, #0
 800360e:	e008      	b.n	8003622 <_printf_common+0xb6>
 8003610:	2301      	movs	r3, #1
 8003612:	4652      	mov	r2, sl
 8003614:	4639      	mov	r1, r7
 8003616:	4630      	mov	r0, r6
 8003618:	47c0      	blx	r8
 800361a:	3001      	adds	r0, #1
 800361c:	d103      	bne.n	8003626 <_printf_common+0xba>
 800361e:	f04f 30ff 	mov.w	r0, #4294967295
 8003622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003626:	3501      	adds	r5, #1
 8003628:	e7c3      	b.n	80035b2 <_printf_common+0x46>
 800362a:	18e1      	adds	r1, r4, r3
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	2030      	movs	r0, #48	; 0x30
 8003630:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003634:	4422      	add	r2, r4
 8003636:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800363a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800363e:	3302      	adds	r3, #2
 8003640:	e7c5      	b.n	80035ce <_printf_common+0x62>
 8003642:	2301      	movs	r3, #1
 8003644:	4622      	mov	r2, r4
 8003646:	4639      	mov	r1, r7
 8003648:	4630      	mov	r0, r6
 800364a:	47c0      	blx	r8
 800364c:	3001      	adds	r0, #1
 800364e:	d0e6      	beq.n	800361e <_printf_common+0xb2>
 8003650:	f109 0901 	add.w	r9, r9, #1
 8003654:	e7d8      	b.n	8003608 <_printf_common+0x9c>
	...

08003658 <_printf_i>:
 8003658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800365c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003660:	460c      	mov	r4, r1
 8003662:	7e09      	ldrb	r1, [r1, #24]
 8003664:	b085      	sub	sp, #20
 8003666:	296e      	cmp	r1, #110	; 0x6e
 8003668:	4617      	mov	r7, r2
 800366a:	4606      	mov	r6, r0
 800366c:	4698      	mov	r8, r3
 800366e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003670:	f000 80b3 	beq.w	80037da <_printf_i+0x182>
 8003674:	d822      	bhi.n	80036bc <_printf_i+0x64>
 8003676:	2963      	cmp	r1, #99	; 0x63
 8003678:	d036      	beq.n	80036e8 <_printf_i+0x90>
 800367a:	d80a      	bhi.n	8003692 <_printf_i+0x3a>
 800367c:	2900      	cmp	r1, #0
 800367e:	f000 80b9 	beq.w	80037f4 <_printf_i+0x19c>
 8003682:	2958      	cmp	r1, #88	; 0x58
 8003684:	f000 8083 	beq.w	800378e <_printf_i+0x136>
 8003688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800368c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003690:	e032      	b.n	80036f8 <_printf_i+0xa0>
 8003692:	2964      	cmp	r1, #100	; 0x64
 8003694:	d001      	beq.n	800369a <_printf_i+0x42>
 8003696:	2969      	cmp	r1, #105	; 0x69
 8003698:	d1f6      	bne.n	8003688 <_printf_i+0x30>
 800369a:	6820      	ldr	r0, [r4, #0]
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	0605      	lsls	r5, r0, #24
 80036a0:	f103 0104 	add.w	r1, r3, #4
 80036a4:	d52a      	bpl.n	80036fc <_printf_i+0xa4>
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6011      	str	r1, [r2, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	da03      	bge.n	80036b6 <_printf_i+0x5e>
 80036ae:	222d      	movs	r2, #45	; 0x2d
 80036b0:	425b      	negs	r3, r3
 80036b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80036b6:	486f      	ldr	r0, [pc, #444]	; (8003874 <_printf_i+0x21c>)
 80036b8:	220a      	movs	r2, #10
 80036ba:	e039      	b.n	8003730 <_printf_i+0xd8>
 80036bc:	2973      	cmp	r1, #115	; 0x73
 80036be:	f000 809d 	beq.w	80037fc <_printf_i+0x1a4>
 80036c2:	d808      	bhi.n	80036d6 <_printf_i+0x7e>
 80036c4:	296f      	cmp	r1, #111	; 0x6f
 80036c6:	d020      	beq.n	800370a <_printf_i+0xb2>
 80036c8:	2970      	cmp	r1, #112	; 0x70
 80036ca:	d1dd      	bne.n	8003688 <_printf_i+0x30>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	f043 0320 	orr.w	r3, r3, #32
 80036d2:	6023      	str	r3, [r4, #0]
 80036d4:	e003      	b.n	80036de <_printf_i+0x86>
 80036d6:	2975      	cmp	r1, #117	; 0x75
 80036d8:	d017      	beq.n	800370a <_printf_i+0xb2>
 80036da:	2978      	cmp	r1, #120	; 0x78
 80036dc:	d1d4      	bne.n	8003688 <_printf_i+0x30>
 80036de:	2378      	movs	r3, #120	; 0x78
 80036e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036e4:	4864      	ldr	r0, [pc, #400]	; (8003878 <_printf_i+0x220>)
 80036e6:	e055      	b.n	8003794 <_printf_i+0x13c>
 80036e8:	6813      	ldr	r3, [r2, #0]
 80036ea:	1d19      	adds	r1, r3, #4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6011      	str	r1, [r2, #0]
 80036f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f8:	2301      	movs	r3, #1
 80036fa:	e08c      	b.n	8003816 <_printf_i+0x1be>
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6011      	str	r1, [r2, #0]
 8003700:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003704:	bf18      	it	ne
 8003706:	b21b      	sxthne	r3, r3
 8003708:	e7cf      	b.n	80036aa <_printf_i+0x52>
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	6825      	ldr	r5, [r4, #0]
 800370e:	1d18      	adds	r0, r3, #4
 8003710:	6010      	str	r0, [r2, #0]
 8003712:	0628      	lsls	r0, r5, #24
 8003714:	d501      	bpl.n	800371a <_printf_i+0xc2>
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	e002      	b.n	8003720 <_printf_i+0xc8>
 800371a:	0668      	lsls	r0, r5, #25
 800371c:	d5fb      	bpl.n	8003716 <_printf_i+0xbe>
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	4854      	ldr	r0, [pc, #336]	; (8003874 <_printf_i+0x21c>)
 8003722:	296f      	cmp	r1, #111	; 0x6f
 8003724:	bf14      	ite	ne
 8003726:	220a      	movne	r2, #10
 8003728:	2208      	moveq	r2, #8
 800372a:	2100      	movs	r1, #0
 800372c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003730:	6865      	ldr	r5, [r4, #4]
 8003732:	60a5      	str	r5, [r4, #8]
 8003734:	2d00      	cmp	r5, #0
 8003736:	f2c0 8095 	blt.w	8003864 <_printf_i+0x20c>
 800373a:	6821      	ldr	r1, [r4, #0]
 800373c:	f021 0104 	bic.w	r1, r1, #4
 8003740:	6021      	str	r1, [r4, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d13d      	bne.n	80037c2 <_printf_i+0x16a>
 8003746:	2d00      	cmp	r5, #0
 8003748:	f040 808e 	bne.w	8003868 <_printf_i+0x210>
 800374c:	4665      	mov	r5, ip
 800374e:	2a08      	cmp	r2, #8
 8003750:	d10b      	bne.n	800376a <_printf_i+0x112>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	07db      	lsls	r3, r3, #31
 8003756:	d508      	bpl.n	800376a <_printf_i+0x112>
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	6862      	ldr	r2, [r4, #4]
 800375c:	429a      	cmp	r2, r3
 800375e:	bfde      	ittt	le
 8003760:	2330      	movle	r3, #48	; 0x30
 8003762:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003766:	f105 35ff 	addle.w	r5, r5, #4294967295
 800376a:	ebac 0305 	sub.w	r3, ip, r5
 800376e:	6123      	str	r3, [r4, #16]
 8003770:	f8cd 8000 	str.w	r8, [sp]
 8003774:	463b      	mov	r3, r7
 8003776:	aa03      	add	r2, sp, #12
 8003778:	4621      	mov	r1, r4
 800377a:	4630      	mov	r0, r6
 800377c:	f7ff fef6 	bl	800356c <_printf_common>
 8003780:	3001      	adds	r0, #1
 8003782:	d14d      	bne.n	8003820 <_printf_i+0x1c8>
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	b005      	add	sp, #20
 800378a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800378e:	4839      	ldr	r0, [pc, #228]	; (8003874 <_printf_i+0x21c>)
 8003790:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003794:	6813      	ldr	r3, [r2, #0]
 8003796:	6821      	ldr	r1, [r4, #0]
 8003798:	1d1d      	adds	r5, r3, #4
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6015      	str	r5, [r2, #0]
 800379e:	060a      	lsls	r2, r1, #24
 80037a0:	d50b      	bpl.n	80037ba <_printf_i+0x162>
 80037a2:	07ca      	lsls	r2, r1, #31
 80037a4:	bf44      	itt	mi
 80037a6:	f041 0120 	orrmi.w	r1, r1, #32
 80037aa:	6021      	strmi	r1, [r4, #0]
 80037ac:	b91b      	cbnz	r3, 80037b6 <_printf_i+0x15e>
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	f022 0220 	bic.w	r2, r2, #32
 80037b4:	6022      	str	r2, [r4, #0]
 80037b6:	2210      	movs	r2, #16
 80037b8:	e7b7      	b.n	800372a <_printf_i+0xd2>
 80037ba:	064d      	lsls	r5, r1, #25
 80037bc:	bf48      	it	mi
 80037be:	b29b      	uxthmi	r3, r3
 80037c0:	e7ef      	b.n	80037a2 <_printf_i+0x14a>
 80037c2:	4665      	mov	r5, ip
 80037c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80037c8:	fb02 3311 	mls	r3, r2, r1, r3
 80037cc:	5cc3      	ldrb	r3, [r0, r3]
 80037ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037d2:	460b      	mov	r3, r1
 80037d4:	2900      	cmp	r1, #0
 80037d6:	d1f5      	bne.n	80037c4 <_printf_i+0x16c>
 80037d8:	e7b9      	b.n	800374e <_printf_i+0xf6>
 80037da:	6813      	ldr	r3, [r2, #0]
 80037dc:	6825      	ldr	r5, [r4, #0]
 80037de:	6961      	ldr	r1, [r4, #20]
 80037e0:	1d18      	adds	r0, r3, #4
 80037e2:	6010      	str	r0, [r2, #0]
 80037e4:	0628      	lsls	r0, r5, #24
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	d501      	bpl.n	80037ee <_printf_i+0x196>
 80037ea:	6019      	str	r1, [r3, #0]
 80037ec:	e002      	b.n	80037f4 <_printf_i+0x19c>
 80037ee:	066a      	lsls	r2, r5, #25
 80037f0:	d5fb      	bpl.n	80037ea <_printf_i+0x192>
 80037f2:	8019      	strh	r1, [r3, #0]
 80037f4:	2300      	movs	r3, #0
 80037f6:	6123      	str	r3, [r4, #16]
 80037f8:	4665      	mov	r5, ip
 80037fa:	e7b9      	b.n	8003770 <_printf_i+0x118>
 80037fc:	6813      	ldr	r3, [r2, #0]
 80037fe:	1d19      	adds	r1, r3, #4
 8003800:	6011      	str	r1, [r2, #0]
 8003802:	681d      	ldr	r5, [r3, #0]
 8003804:	6862      	ldr	r2, [r4, #4]
 8003806:	2100      	movs	r1, #0
 8003808:	4628      	mov	r0, r5
 800380a:	f7fc fd19 	bl	8000240 <memchr>
 800380e:	b108      	cbz	r0, 8003814 <_printf_i+0x1bc>
 8003810:	1b40      	subs	r0, r0, r5
 8003812:	6060      	str	r0, [r4, #4]
 8003814:	6863      	ldr	r3, [r4, #4]
 8003816:	6123      	str	r3, [r4, #16]
 8003818:	2300      	movs	r3, #0
 800381a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800381e:	e7a7      	b.n	8003770 <_printf_i+0x118>
 8003820:	6923      	ldr	r3, [r4, #16]
 8003822:	462a      	mov	r2, r5
 8003824:	4639      	mov	r1, r7
 8003826:	4630      	mov	r0, r6
 8003828:	47c0      	blx	r8
 800382a:	3001      	adds	r0, #1
 800382c:	d0aa      	beq.n	8003784 <_printf_i+0x12c>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	079b      	lsls	r3, r3, #30
 8003832:	d413      	bmi.n	800385c <_printf_i+0x204>
 8003834:	68e0      	ldr	r0, [r4, #12]
 8003836:	9b03      	ldr	r3, [sp, #12]
 8003838:	4298      	cmp	r0, r3
 800383a:	bfb8      	it	lt
 800383c:	4618      	movlt	r0, r3
 800383e:	e7a3      	b.n	8003788 <_printf_i+0x130>
 8003840:	2301      	movs	r3, #1
 8003842:	464a      	mov	r2, r9
 8003844:	4639      	mov	r1, r7
 8003846:	4630      	mov	r0, r6
 8003848:	47c0      	blx	r8
 800384a:	3001      	adds	r0, #1
 800384c:	d09a      	beq.n	8003784 <_printf_i+0x12c>
 800384e:	3501      	adds	r5, #1
 8003850:	68e3      	ldr	r3, [r4, #12]
 8003852:	9a03      	ldr	r2, [sp, #12]
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	42ab      	cmp	r3, r5
 8003858:	dcf2      	bgt.n	8003840 <_printf_i+0x1e8>
 800385a:	e7eb      	b.n	8003834 <_printf_i+0x1dc>
 800385c:	2500      	movs	r5, #0
 800385e:	f104 0919 	add.w	r9, r4, #25
 8003862:	e7f5      	b.n	8003850 <_printf_i+0x1f8>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ac      	bne.n	80037c2 <_printf_i+0x16a>
 8003868:	7803      	ldrb	r3, [r0, #0]
 800386a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800386e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003872:	e76c      	b.n	800374e <_printf_i+0xf6>
 8003874:	08003f95 	.word	0x08003f95
 8003878:	08003fa6 	.word	0x08003fa6

0800387c <_sbrk_r>:
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4c06      	ldr	r4, [pc, #24]	; (8003898 <_sbrk_r+0x1c>)
 8003880:	2300      	movs	r3, #0
 8003882:	4605      	mov	r5, r0
 8003884:	4608      	mov	r0, r1
 8003886:	6023      	str	r3, [r4, #0]
 8003888:	f7fd fc2e 	bl	80010e8 <_sbrk>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d102      	bne.n	8003896 <_sbrk_r+0x1a>
 8003890:	6823      	ldr	r3, [r4, #0]
 8003892:	b103      	cbz	r3, 8003896 <_sbrk_r+0x1a>
 8003894:	602b      	str	r3, [r5, #0]
 8003896:	bd38      	pop	{r3, r4, r5, pc}
 8003898:	2000011c 	.word	0x2000011c

0800389c <__sread>:
 800389c:	b510      	push	{r4, lr}
 800389e:	460c      	mov	r4, r1
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	f000 fa96 	bl	8003dd4 <_read_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	bfab      	itete	ge
 80038ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038ae:	89a3      	ldrhlt	r3, [r4, #12]
 80038b0:	181b      	addge	r3, r3, r0
 80038b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038b6:	bfac      	ite	ge
 80038b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80038ba:	81a3      	strhlt	r3, [r4, #12]
 80038bc:	bd10      	pop	{r4, pc}

080038be <__swrite>:
 80038be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c2:	461f      	mov	r7, r3
 80038c4:	898b      	ldrh	r3, [r1, #12]
 80038c6:	05db      	lsls	r3, r3, #23
 80038c8:	4605      	mov	r5, r0
 80038ca:	460c      	mov	r4, r1
 80038cc:	4616      	mov	r6, r2
 80038ce:	d505      	bpl.n	80038dc <__swrite+0x1e>
 80038d0:	2302      	movs	r3, #2
 80038d2:	2200      	movs	r2, #0
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	f000 f9b6 	bl	8003c48 <_lseek_r>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	4632      	mov	r2, r6
 80038ea:	463b      	mov	r3, r7
 80038ec:	4628      	mov	r0, r5
 80038ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f2:	f000 b869 	b.w	80039c8 <_write_r>

080038f6 <__sseek>:
 80038f6:	b510      	push	{r4, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fe:	f000 f9a3 	bl	8003c48 <_lseek_r>
 8003902:	1c43      	adds	r3, r0, #1
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	bf15      	itete	ne
 8003908:	6560      	strne	r0, [r4, #84]	; 0x54
 800390a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800390e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003912:	81a3      	strheq	r3, [r4, #12]
 8003914:	bf18      	it	ne
 8003916:	81a3      	strhne	r3, [r4, #12]
 8003918:	bd10      	pop	{r4, pc}

0800391a <__sclose>:
 800391a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391e:	f000 b8d3 	b.w	8003ac8 <_close_r>
	...

08003924 <__swbuf_r>:
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	460e      	mov	r6, r1
 8003928:	4614      	mov	r4, r2
 800392a:	4605      	mov	r5, r0
 800392c:	b118      	cbz	r0, 8003936 <__swbuf_r+0x12>
 800392e:	6983      	ldr	r3, [r0, #24]
 8003930:	b90b      	cbnz	r3, 8003936 <__swbuf_r+0x12>
 8003932:	f7ff fbf7 	bl	8003124 <__sinit>
 8003936:	4b21      	ldr	r3, [pc, #132]	; (80039bc <__swbuf_r+0x98>)
 8003938:	429c      	cmp	r4, r3
 800393a:	d12a      	bne.n	8003992 <__swbuf_r+0x6e>
 800393c:	686c      	ldr	r4, [r5, #4]
 800393e:	69a3      	ldr	r3, [r4, #24]
 8003940:	60a3      	str	r3, [r4, #8]
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	071a      	lsls	r2, r3, #28
 8003946:	d52e      	bpl.n	80039a6 <__swbuf_r+0x82>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	b363      	cbz	r3, 80039a6 <__swbuf_r+0x82>
 800394c:	6923      	ldr	r3, [r4, #16]
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	1ac0      	subs	r0, r0, r3
 8003952:	6963      	ldr	r3, [r4, #20]
 8003954:	b2f6      	uxtb	r6, r6
 8003956:	4283      	cmp	r3, r0
 8003958:	4637      	mov	r7, r6
 800395a:	dc04      	bgt.n	8003966 <__swbuf_r+0x42>
 800395c:	4621      	mov	r1, r4
 800395e:	4628      	mov	r0, r5
 8003960:	f000 f948 	bl	8003bf4 <_fflush_r>
 8003964:	bb28      	cbnz	r0, 80039b2 <__swbuf_r+0x8e>
 8003966:	68a3      	ldr	r3, [r4, #8]
 8003968:	3b01      	subs	r3, #1
 800396a:	60a3      	str	r3, [r4, #8]
 800396c:	6823      	ldr	r3, [r4, #0]
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	6022      	str	r2, [r4, #0]
 8003972:	701e      	strb	r6, [r3, #0]
 8003974:	6963      	ldr	r3, [r4, #20]
 8003976:	3001      	adds	r0, #1
 8003978:	4283      	cmp	r3, r0
 800397a:	d004      	beq.n	8003986 <__swbuf_r+0x62>
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	07db      	lsls	r3, r3, #31
 8003980:	d519      	bpl.n	80039b6 <__swbuf_r+0x92>
 8003982:	2e0a      	cmp	r6, #10
 8003984:	d117      	bne.n	80039b6 <__swbuf_r+0x92>
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f000 f933 	bl	8003bf4 <_fflush_r>
 800398e:	b190      	cbz	r0, 80039b6 <__swbuf_r+0x92>
 8003990:	e00f      	b.n	80039b2 <__swbuf_r+0x8e>
 8003992:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <__swbuf_r+0x9c>)
 8003994:	429c      	cmp	r4, r3
 8003996:	d101      	bne.n	800399c <__swbuf_r+0x78>
 8003998:	68ac      	ldr	r4, [r5, #8]
 800399a:	e7d0      	b.n	800393e <__swbuf_r+0x1a>
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <__swbuf_r+0xa0>)
 800399e:	429c      	cmp	r4, r3
 80039a0:	bf08      	it	eq
 80039a2:	68ec      	ldreq	r4, [r5, #12]
 80039a4:	e7cb      	b.n	800393e <__swbuf_r+0x1a>
 80039a6:	4621      	mov	r1, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	f000 f81f 	bl	80039ec <__swsetup_r>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	d0cc      	beq.n	800394c <__swbuf_r+0x28>
 80039b2:	f04f 37ff 	mov.w	r7, #4294967295
 80039b6:	4638      	mov	r0, r7
 80039b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	08003f44 	.word	0x08003f44
 80039c0:	08003f64 	.word	0x08003f64
 80039c4:	08003f24 	.word	0x08003f24

080039c8 <_write_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	4c07      	ldr	r4, [pc, #28]	; (80039e8 <_write_r+0x20>)
 80039cc:	4605      	mov	r5, r0
 80039ce:	4608      	mov	r0, r1
 80039d0:	4611      	mov	r1, r2
 80039d2:	2200      	movs	r2, #0
 80039d4:	6022      	str	r2, [r4, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	f7fc fe29 	bl	800062e <_write>
 80039dc:	1c43      	adds	r3, r0, #1
 80039de:	d102      	bne.n	80039e6 <_write_r+0x1e>
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	b103      	cbz	r3, 80039e6 <_write_r+0x1e>
 80039e4:	602b      	str	r3, [r5, #0]
 80039e6:	bd38      	pop	{r3, r4, r5, pc}
 80039e8:	2000011c 	.word	0x2000011c

080039ec <__swsetup_r>:
 80039ec:	4b32      	ldr	r3, [pc, #200]	; (8003ab8 <__swsetup_r+0xcc>)
 80039ee:	b570      	push	{r4, r5, r6, lr}
 80039f0:	681d      	ldr	r5, [r3, #0]
 80039f2:	4606      	mov	r6, r0
 80039f4:	460c      	mov	r4, r1
 80039f6:	b125      	cbz	r5, 8003a02 <__swsetup_r+0x16>
 80039f8:	69ab      	ldr	r3, [r5, #24]
 80039fa:	b913      	cbnz	r3, 8003a02 <__swsetup_r+0x16>
 80039fc:	4628      	mov	r0, r5
 80039fe:	f7ff fb91 	bl	8003124 <__sinit>
 8003a02:	4b2e      	ldr	r3, [pc, #184]	; (8003abc <__swsetup_r+0xd0>)
 8003a04:	429c      	cmp	r4, r3
 8003a06:	d10f      	bne.n	8003a28 <__swsetup_r+0x3c>
 8003a08:	686c      	ldr	r4, [r5, #4]
 8003a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	0715      	lsls	r5, r2, #28
 8003a12:	d42c      	bmi.n	8003a6e <__swsetup_r+0x82>
 8003a14:	06d0      	lsls	r0, r2, #27
 8003a16:	d411      	bmi.n	8003a3c <__swsetup_r+0x50>
 8003a18:	2209      	movs	r2, #9
 8003a1a:	6032      	str	r2, [r6, #0]
 8003a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	f04f 30ff 	mov.w	r0, #4294967295
 8003a26:	e03e      	b.n	8003aa6 <__swsetup_r+0xba>
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <__swsetup_r+0xd4>)
 8003a2a:	429c      	cmp	r4, r3
 8003a2c:	d101      	bne.n	8003a32 <__swsetup_r+0x46>
 8003a2e:	68ac      	ldr	r4, [r5, #8]
 8003a30:	e7eb      	b.n	8003a0a <__swsetup_r+0x1e>
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <__swsetup_r+0xd8>)
 8003a34:	429c      	cmp	r4, r3
 8003a36:	bf08      	it	eq
 8003a38:	68ec      	ldreq	r4, [r5, #12]
 8003a3a:	e7e6      	b.n	8003a0a <__swsetup_r+0x1e>
 8003a3c:	0751      	lsls	r1, r2, #29
 8003a3e:	d512      	bpl.n	8003a66 <__swsetup_r+0x7a>
 8003a40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a42:	b141      	cbz	r1, 8003a56 <__swsetup_r+0x6a>
 8003a44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a48:	4299      	cmp	r1, r3
 8003a4a:	d002      	beq.n	8003a52 <__swsetup_r+0x66>
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f000 f973 	bl	8003d38 <_free_r>
 8003a52:	2300      	movs	r3, #0
 8003a54:	6363      	str	r3, [r4, #52]	; 0x34
 8003a56:	89a3      	ldrh	r3, [r4, #12]
 8003a58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a5c:	81a3      	strh	r3, [r4, #12]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6063      	str	r3, [r4, #4]
 8003a62:	6923      	ldr	r3, [r4, #16]
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	89a3      	ldrh	r3, [r4, #12]
 8003a68:	f043 0308 	orr.w	r3, r3, #8
 8003a6c:	81a3      	strh	r3, [r4, #12]
 8003a6e:	6923      	ldr	r3, [r4, #16]
 8003a70:	b94b      	cbnz	r3, 8003a86 <__swsetup_r+0x9a>
 8003a72:	89a3      	ldrh	r3, [r4, #12]
 8003a74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7c:	d003      	beq.n	8003a86 <__swsetup_r+0x9a>
 8003a7e:	4621      	mov	r1, r4
 8003a80:	4630      	mov	r0, r6
 8003a82:	f000 f917 	bl	8003cb4 <__smakebuf_r>
 8003a86:	89a2      	ldrh	r2, [r4, #12]
 8003a88:	f012 0301 	ands.w	r3, r2, #1
 8003a8c:	d00c      	beq.n	8003aa8 <__swsetup_r+0xbc>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60a3      	str	r3, [r4, #8]
 8003a92:	6963      	ldr	r3, [r4, #20]
 8003a94:	425b      	negs	r3, r3
 8003a96:	61a3      	str	r3, [r4, #24]
 8003a98:	6923      	ldr	r3, [r4, #16]
 8003a9a:	b953      	cbnz	r3, 8003ab2 <__swsetup_r+0xc6>
 8003a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aa0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003aa4:	d1ba      	bne.n	8003a1c <__swsetup_r+0x30>
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	0792      	lsls	r2, r2, #30
 8003aaa:	bf58      	it	pl
 8003aac:	6963      	ldrpl	r3, [r4, #20]
 8003aae:	60a3      	str	r3, [r4, #8]
 8003ab0:	e7f2      	b.n	8003a98 <__swsetup_r+0xac>
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	e7f7      	b.n	8003aa6 <__swsetup_r+0xba>
 8003ab6:	bf00      	nop
 8003ab8:	2000000c 	.word	0x2000000c
 8003abc:	08003f44 	.word	0x08003f44
 8003ac0:	08003f64 	.word	0x08003f64
 8003ac4:	08003f24 	.word	0x08003f24

08003ac8 <_close_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	4c06      	ldr	r4, [pc, #24]	; (8003ae4 <_close_r+0x1c>)
 8003acc:	2300      	movs	r3, #0
 8003ace:	4605      	mov	r5, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	f7fd fad3 	bl	800107e <_close>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_close_r+0x1a>
 8003adc:	6823      	ldr	r3, [r4, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_close_r+0x1a>
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	2000011c 	.word	0x2000011c

08003ae8 <__sflush_r>:
 8003ae8:	898a      	ldrh	r2, [r1, #12]
 8003aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aee:	4605      	mov	r5, r0
 8003af0:	0710      	lsls	r0, r2, #28
 8003af2:	460c      	mov	r4, r1
 8003af4:	d458      	bmi.n	8003ba8 <__sflush_r+0xc0>
 8003af6:	684b      	ldr	r3, [r1, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dc05      	bgt.n	8003b08 <__sflush_r+0x20>
 8003afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	dc02      	bgt.n	8003b08 <__sflush_r+0x20>
 8003b02:	2000      	movs	r0, #0
 8003b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b0a:	2e00      	cmp	r6, #0
 8003b0c:	d0f9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003b14:	682f      	ldr	r7, [r5, #0]
 8003b16:	6a21      	ldr	r1, [r4, #32]
 8003b18:	602b      	str	r3, [r5, #0]
 8003b1a:	d032      	beq.n	8003b82 <__sflush_r+0x9a>
 8003b1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	075a      	lsls	r2, r3, #29
 8003b22:	d505      	bpl.n	8003b30 <__sflush_r+0x48>
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	1ac0      	subs	r0, r0, r3
 8003b28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b2a:	b10b      	cbz	r3, 8003b30 <__sflush_r+0x48>
 8003b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b2e:	1ac0      	subs	r0, r0, r3
 8003b30:	2300      	movs	r3, #0
 8003b32:	4602      	mov	r2, r0
 8003b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003b36:	6a21      	ldr	r1, [r4, #32]
 8003b38:	4628      	mov	r0, r5
 8003b3a:	47b0      	blx	r6
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	89a3      	ldrh	r3, [r4, #12]
 8003b40:	d106      	bne.n	8003b50 <__sflush_r+0x68>
 8003b42:	6829      	ldr	r1, [r5, #0]
 8003b44:	291d      	cmp	r1, #29
 8003b46:	d848      	bhi.n	8003bda <__sflush_r+0xf2>
 8003b48:	4a29      	ldr	r2, [pc, #164]	; (8003bf0 <__sflush_r+0x108>)
 8003b4a:	40ca      	lsrs	r2, r1
 8003b4c:	07d6      	lsls	r6, r2, #31
 8003b4e:	d544      	bpl.n	8003bda <__sflush_r+0xf2>
 8003b50:	2200      	movs	r2, #0
 8003b52:	6062      	str	r2, [r4, #4]
 8003b54:	04d9      	lsls	r1, r3, #19
 8003b56:	6922      	ldr	r2, [r4, #16]
 8003b58:	6022      	str	r2, [r4, #0]
 8003b5a:	d504      	bpl.n	8003b66 <__sflush_r+0x7e>
 8003b5c:	1c42      	adds	r2, r0, #1
 8003b5e:	d101      	bne.n	8003b64 <__sflush_r+0x7c>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	b903      	cbnz	r3, 8003b66 <__sflush_r+0x7e>
 8003b64:	6560      	str	r0, [r4, #84]	; 0x54
 8003b66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b68:	602f      	str	r7, [r5, #0]
 8003b6a:	2900      	cmp	r1, #0
 8003b6c:	d0c9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003b6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b72:	4299      	cmp	r1, r3
 8003b74:	d002      	beq.n	8003b7c <__sflush_r+0x94>
 8003b76:	4628      	mov	r0, r5
 8003b78:	f000 f8de 	bl	8003d38 <_free_r>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	6360      	str	r0, [r4, #52]	; 0x34
 8003b80:	e7c0      	b.n	8003b04 <__sflush_r+0x1c>
 8003b82:	2301      	movs	r3, #1
 8003b84:	4628      	mov	r0, r5
 8003b86:	47b0      	blx	r6
 8003b88:	1c41      	adds	r1, r0, #1
 8003b8a:	d1c8      	bne.n	8003b1e <__sflush_r+0x36>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0c5      	beq.n	8003b1e <__sflush_r+0x36>
 8003b92:	2b1d      	cmp	r3, #29
 8003b94:	d001      	beq.n	8003b9a <__sflush_r+0xb2>
 8003b96:	2b16      	cmp	r3, #22
 8003b98:	d101      	bne.n	8003b9e <__sflush_r+0xb6>
 8003b9a:	602f      	str	r7, [r5, #0]
 8003b9c:	e7b1      	b.n	8003b02 <__sflush_r+0x1a>
 8003b9e:	89a3      	ldrh	r3, [r4, #12]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	e7ad      	b.n	8003b04 <__sflush_r+0x1c>
 8003ba8:	690f      	ldr	r7, [r1, #16]
 8003baa:	2f00      	cmp	r7, #0
 8003bac:	d0a9      	beq.n	8003b02 <__sflush_r+0x1a>
 8003bae:	0793      	lsls	r3, r2, #30
 8003bb0:	680e      	ldr	r6, [r1, #0]
 8003bb2:	bf08      	it	eq
 8003bb4:	694b      	ldreq	r3, [r1, #20]
 8003bb6:	600f      	str	r7, [r1, #0]
 8003bb8:	bf18      	it	ne
 8003bba:	2300      	movne	r3, #0
 8003bbc:	eba6 0807 	sub.w	r8, r6, r7
 8003bc0:	608b      	str	r3, [r1, #8]
 8003bc2:	f1b8 0f00 	cmp.w	r8, #0
 8003bc6:	dd9c      	ble.n	8003b02 <__sflush_r+0x1a>
 8003bc8:	4643      	mov	r3, r8
 8003bca:	463a      	mov	r2, r7
 8003bcc:	6a21      	ldr	r1, [r4, #32]
 8003bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003bd0:	4628      	mov	r0, r5
 8003bd2:	47b0      	blx	r6
 8003bd4:	2800      	cmp	r0, #0
 8003bd6:	dc06      	bgt.n	8003be6 <__sflush_r+0xfe>
 8003bd8:	89a3      	ldrh	r3, [r4, #12]
 8003bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bde:	81a3      	strh	r3, [r4, #12]
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	e78e      	b.n	8003b04 <__sflush_r+0x1c>
 8003be6:	4407      	add	r7, r0
 8003be8:	eba8 0800 	sub.w	r8, r8, r0
 8003bec:	e7e9      	b.n	8003bc2 <__sflush_r+0xda>
 8003bee:	bf00      	nop
 8003bf0:	20400001 	.word	0x20400001

08003bf4 <_fflush_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	4605      	mov	r5, r0
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	b1db      	cbz	r3, 8003c36 <_fflush_r+0x42>
 8003bfe:	b118      	cbz	r0, 8003c08 <_fflush_r+0x14>
 8003c00:	6983      	ldr	r3, [r0, #24]
 8003c02:	b90b      	cbnz	r3, 8003c08 <_fflush_r+0x14>
 8003c04:	f7ff fa8e 	bl	8003124 <__sinit>
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <_fflush_r+0x48>)
 8003c0a:	429c      	cmp	r4, r3
 8003c0c:	d109      	bne.n	8003c22 <_fflush_r+0x2e>
 8003c0e:	686c      	ldr	r4, [r5, #4]
 8003c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c14:	b17b      	cbz	r3, 8003c36 <_fflush_r+0x42>
 8003c16:	4621      	mov	r1, r4
 8003c18:	4628      	mov	r0, r5
 8003c1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c1e:	f7ff bf63 	b.w	8003ae8 <__sflush_r>
 8003c22:	4b07      	ldr	r3, [pc, #28]	; (8003c40 <_fflush_r+0x4c>)
 8003c24:	429c      	cmp	r4, r3
 8003c26:	d101      	bne.n	8003c2c <_fflush_r+0x38>
 8003c28:	68ac      	ldr	r4, [r5, #8]
 8003c2a:	e7f1      	b.n	8003c10 <_fflush_r+0x1c>
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <_fflush_r+0x50>)
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	bf08      	it	eq
 8003c32:	68ec      	ldreq	r4, [r5, #12]
 8003c34:	e7ec      	b.n	8003c10 <_fflush_r+0x1c>
 8003c36:	2000      	movs	r0, #0
 8003c38:	bd38      	pop	{r3, r4, r5, pc}
 8003c3a:	bf00      	nop
 8003c3c:	08003f44 	.word	0x08003f44
 8003c40:	08003f64 	.word	0x08003f64
 8003c44:	08003f24 	.word	0x08003f24

08003c48 <_lseek_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4c07      	ldr	r4, [pc, #28]	; (8003c68 <_lseek_r+0x20>)
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	4608      	mov	r0, r1
 8003c50:	4611      	mov	r1, r2
 8003c52:	2200      	movs	r2, #0
 8003c54:	6022      	str	r2, [r4, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f7fd fa38 	bl	80010cc <_lseek>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_lseek_r+0x1e>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_lseek_r+0x1e>
 8003c64:	602b      	str	r3, [r5, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	2000011c 	.word	0x2000011c

08003c6c <__swhatbuf_r>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	460e      	mov	r6, r1
 8003c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c74:	2900      	cmp	r1, #0
 8003c76:	b096      	sub	sp, #88	; 0x58
 8003c78:	4614      	mov	r4, r2
 8003c7a:	461d      	mov	r5, r3
 8003c7c:	da07      	bge.n	8003c8e <__swhatbuf_r+0x22>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	602b      	str	r3, [r5, #0]
 8003c82:	89b3      	ldrh	r3, [r6, #12]
 8003c84:	061a      	lsls	r2, r3, #24
 8003c86:	d410      	bmi.n	8003caa <__swhatbuf_r+0x3e>
 8003c88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c8c:	e00e      	b.n	8003cac <__swhatbuf_r+0x40>
 8003c8e:	466a      	mov	r2, sp
 8003c90:	f000 f8b2 	bl	8003df8 <_fstat_r>
 8003c94:	2800      	cmp	r0, #0
 8003c96:	dbf2      	blt.n	8003c7e <__swhatbuf_r+0x12>
 8003c98:	9a01      	ldr	r2, [sp, #4]
 8003c9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003c9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003ca2:	425a      	negs	r2, r3
 8003ca4:	415a      	adcs	r2, r3
 8003ca6:	602a      	str	r2, [r5, #0]
 8003ca8:	e7ee      	b.n	8003c88 <__swhatbuf_r+0x1c>
 8003caa:	2340      	movs	r3, #64	; 0x40
 8003cac:	2000      	movs	r0, #0
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	b016      	add	sp, #88	; 0x58
 8003cb2:	bd70      	pop	{r4, r5, r6, pc}

08003cb4 <__smakebuf_r>:
 8003cb4:	898b      	ldrh	r3, [r1, #12]
 8003cb6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cb8:	079d      	lsls	r5, r3, #30
 8003cba:	4606      	mov	r6, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	d507      	bpl.n	8003cd0 <__smakebuf_r+0x1c>
 8003cc0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	6123      	str	r3, [r4, #16]
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6163      	str	r3, [r4, #20]
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
 8003cd0:	ab01      	add	r3, sp, #4
 8003cd2:	466a      	mov	r2, sp
 8003cd4:	f7ff ffca 	bl	8003c6c <__swhatbuf_r>
 8003cd8:	9900      	ldr	r1, [sp, #0]
 8003cda:	4605      	mov	r5, r0
 8003cdc:	4630      	mov	r0, r6
 8003cde:	f7ff faab 	bl	8003238 <_malloc_r>
 8003ce2:	b948      	cbnz	r0, 8003cf8 <__smakebuf_r+0x44>
 8003ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ce8:	059a      	lsls	r2, r3, #22
 8003cea:	d4ef      	bmi.n	8003ccc <__smakebuf_r+0x18>
 8003cec:	f023 0303 	bic.w	r3, r3, #3
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	81a3      	strh	r3, [r4, #12]
 8003cf6:	e7e3      	b.n	8003cc0 <__smakebuf_r+0xc>
 8003cf8:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <__smakebuf_r+0x7c>)
 8003cfa:	62b3      	str	r3, [r6, #40]	; 0x28
 8003cfc:	89a3      	ldrh	r3, [r4, #12]
 8003cfe:	6020      	str	r0, [r4, #0]
 8003d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	9b00      	ldr	r3, [sp, #0]
 8003d08:	6163      	str	r3, [r4, #20]
 8003d0a:	9b01      	ldr	r3, [sp, #4]
 8003d0c:	6120      	str	r0, [r4, #16]
 8003d0e:	b15b      	cbz	r3, 8003d28 <__smakebuf_r+0x74>
 8003d10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 f881 	bl	8003e1c <_isatty_r>
 8003d1a:	b128      	cbz	r0, 8003d28 <__smakebuf_r+0x74>
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	f023 0303 	bic.w	r3, r3, #3
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	81a3      	strh	r3, [r4, #12]
 8003d28:	89a3      	ldrh	r3, [r4, #12]
 8003d2a:	431d      	orrs	r5, r3
 8003d2c:	81a5      	strh	r5, [r4, #12]
 8003d2e:	e7cd      	b.n	8003ccc <__smakebuf_r+0x18>
 8003d30:	080030ed 	.word	0x080030ed

08003d34 <__malloc_lock>:
 8003d34:	4770      	bx	lr

08003d36 <__malloc_unlock>:
 8003d36:	4770      	bx	lr

08003d38 <_free_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4605      	mov	r5, r0
 8003d3c:	2900      	cmp	r1, #0
 8003d3e:	d045      	beq.n	8003dcc <_free_r+0x94>
 8003d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d44:	1f0c      	subs	r4, r1, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bfb8      	it	lt
 8003d4a:	18e4      	addlt	r4, r4, r3
 8003d4c:	f7ff fff2 	bl	8003d34 <__malloc_lock>
 8003d50:	4a1f      	ldr	r2, [pc, #124]	; (8003dd0 <_free_r+0x98>)
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	4610      	mov	r0, r2
 8003d56:	b933      	cbnz	r3, 8003d66 <_free_r+0x2e>
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	6014      	str	r4, [r2, #0]
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d62:	f7ff bfe8 	b.w	8003d36 <__malloc_unlock>
 8003d66:	42a3      	cmp	r3, r4
 8003d68:	d90c      	bls.n	8003d84 <_free_r+0x4c>
 8003d6a:	6821      	ldr	r1, [r4, #0]
 8003d6c:	1862      	adds	r2, r4, r1
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	bf04      	itt	eq
 8003d72:	681a      	ldreq	r2, [r3, #0]
 8003d74:	685b      	ldreq	r3, [r3, #4]
 8003d76:	6063      	str	r3, [r4, #4]
 8003d78:	bf04      	itt	eq
 8003d7a:	1852      	addeq	r2, r2, r1
 8003d7c:	6022      	streq	r2, [r4, #0]
 8003d7e:	6004      	str	r4, [r0, #0]
 8003d80:	e7ec      	b.n	8003d5c <_free_r+0x24>
 8003d82:	4613      	mov	r3, r2
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	b10a      	cbz	r2, 8003d8c <_free_r+0x54>
 8003d88:	42a2      	cmp	r2, r4
 8003d8a:	d9fa      	bls.n	8003d82 <_free_r+0x4a>
 8003d8c:	6819      	ldr	r1, [r3, #0]
 8003d8e:	1858      	adds	r0, r3, r1
 8003d90:	42a0      	cmp	r0, r4
 8003d92:	d10b      	bne.n	8003dac <_free_r+0x74>
 8003d94:	6820      	ldr	r0, [r4, #0]
 8003d96:	4401      	add	r1, r0
 8003d98:	1858      	adds	r0, r3, r1
 8003d9a:	4282      	cmp	r2, r0
 8003d9c:	6019      	str	r1, [r3, #0]
 8003d9e:	d1dd      	bne.n	8003d5c <_free_r+0x24>
 8003da0:	6810      	ldr	r0, [r2, #0]
 8003da2:	6852      	ldr	r2, [r2, #4]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	4401      	add	r1, r0
 8003da8:	6019      	str	r1, [r3, #0]
 8003daa:	e7d7      	b.n	8003d5c <_free_r+0x24>
 8003dac:	d902      	bls.n	8003db4 <_free_r+0x7c>
 8003dae:	230c      	movs	r3, #12
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	e7d3      	b.n	8003d5c <_free_r+0x24>
 8003db4:	6820      	ldr	r0, [r4, #0]
 8003db6:	1821      	adds	r1, r4, r0
 8003db8:	428a      	cmp	r2, r1
 8003dba:	bf04      	itt	eq
 8003dbc:	6811      	ldreq	r1, [r2, #0]
 8003dbe:	6852      	ldreq	r2, [r2, #4]
 8003dc0:	6062      	str	r2, [r4, #4]
 8003dc2:	bf04      	itt	eq
 8003dc4:	1809      	addeq	r1, r1, r0
 8003dc6:	6021      	streq	r1, [r4, #0]
 8003dc8:	605c      	str	r4, [r3, #4]
 8003dca:	e7c7      	b.n	8003d5c <_free_r+0x24>
 8003dcc:	bd38      	pop	{r3, r4, r5, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000090 	.word	0x20000090

08003dd4 <_read_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4c07      	ldr	r4, [pc, #28]	; (8003df4 <_read_r+0x20>)
 8003dd8:	4605      	mov	r5, r0
 8003dda:	4608      	mov	r0, r1
 8003ddc:	4611      	mov	r1, r2
 8003dde:	2200      	movs	r2, #0
 8003de0:	6022      	str	r2, [r4, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fd f92e 	bl	8001044 <_read>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_read_r+0x1e>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_read_r+0x1e>
 8003df0:	602b      	str	r3, [r5, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	2000011c 	.word	0x2000011c

08003df8 <_fstat_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4c07      	ldr	r4, [pc, #28]	; (8003e18 <_fstat_r+0x20>)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4605      	mov	r5, r0
 8003e00:	4608      	mov	r0, r1
 8003e02:	4611      	mov	r1, r2
 8003e04:	6023      	str	r3, [r4, #0]
 8003e06:	f7fd f946 	bl	8001096 <_fstat>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d102      	bne.n	8003e14 <_fstat_r+0x1c>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	b103      	cbz	r3, 8003e14 <_fstat_r+0x1c>
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	bd38      	pop	{r3, r4, r5, pc}
 8003e16:	bf00      	nop
 8003e18:	2000011c 	.word	0x2000011c

08003e1c <_isatty_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4c06      	ldr	r4, [pc, #24]	; (8003e38 <_isatty_r+0x1c>)
 8003e20:	2300      	movs	r3, #0
 8003e22:	4605      	mov	r5, r0
 8003e24:	4608      	mov	r0, r1
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	f7fd f945 	bl	80010b6 <_isatty>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d102      	bne.n	8003e36 <_isatty_r+0x1a>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	b103      	cbz	r3, 8003e36 <_isatty_r+0x1a>
 8003e34:	602b      	str	r3, [r5, #0]
 8003e36:	bd38      	pop	{r3, r4, r5, pc}
 8003e38:	2000011c 	.word	0x2000011c

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
