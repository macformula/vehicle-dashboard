
PWMTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000404c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800424c  0800424c  0001424c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004444  08004444  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800444c  0800444c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800444c  0800444c  0001444c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004450  08004450  00014450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000070  080044c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080044c4  00020120  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b67f  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001901  00000000  00000000  0002b71d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002d020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002daa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027b7a  00000000  00000000  0002e470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007a4c  00000000  00000000  00055fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f555b  00000000  00000000  0005da36  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152f91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000327c  00000000  00000000  0015300c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004234 	.word	0x08004234

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004234 	.word	0x08004234

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005f0:	f003 0301 	and.w	r3, r3, #1
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d013      	beq.n	8000620 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000600:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00b      	beq.n	8000620 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	e000      	b.n	800060c <ITM_SendChar+0x2c>
    {
      __NOP();
 800060a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800060c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <var_Timer_Init>:
}Timer_Init_args;


//Wrapper function that return default variables
static void var_Timer_Init(Timer_Init_args in)
{
 800062e:	b590      	push	{r4, r7, lr}
 8000630:	b08d      	sub	sp, #52	; 0x34
 8000632:	af04      	add	r7, sp, #16
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t timer_out = in.timer;
 800063a:	793b      	ldrb	r3, [r7, #4]
 800063c:	77fb      	strb	r3, [r7, #31]
	uint16_t period_out = in.period;
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	83bb      	strh	r3, [r7, #28]
	uint8_t doTriggerISR_out = in.doTriggerISR ? in.doTriggerISR :2;
 8000642:	7a3b      	ldrb	r3, [r7, #8]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <var_Timer_Init+0x1e>
 8000648:	7a3b      	ldrb	r3, [r7, #8]
 800064a:	e000      	b.n	800064e <var_Timer_Init+0x20>
 800064c:	2302      	movs	r3, #2
 800064e:	76fb      	strb	r3, [r7, #27]
	uint8_t Channel_1_out = in.Channel_1 ? in.Channel_1 :2;
 8000650:	7a7b      	ldrb	r3, [r7, #9]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <var_Timer_Init+0x2c>
 8000656:	7a7b      	ldrb	r3, [r7, #9]
 8000658:	e000      	b.n	800065c <var_Timer_Init+0x2e>
 800065a:	2302      	movs	r3, #2
 800065c:	76bb      	strb	r3, [r7, #26]
	uint8_t Channel_2_out = in.Channel_2 ? in.Channel_2 :2;
 800065e:	7abb      	ldrb	r3, [r7, #10]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <var_Timer_Init+0x3a>
 8000664:	7abb      	ldrb	r3, [r7, #10]
 8000666:	e000      	b.n	800066a <var_Timer_Init+0x3c>
 8000668:	2302      	movs	r3, #2
 800066a:	767b      	strb	r3, [r7, #25]
	uint8_t Channel_3_out = in.Channel_3 ? in.Channel_3 :2;
 800066c:	7afb      	ldrb	r3, [r7, #11]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <var_Timer_Init+0x48>
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	e000      	b.n	8000678 <var_Timer_Init+0x4a>
 8000676:	2302      	movs	r3, #2
 8000678:	763b      	strb	r3, [r7, #24]
	uint8_t Channel_4_out = in.Channel_4 ? in.Channel_4 :2;
 800067a:	7b3b      	ldrb	r3, [r7, #12]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <var_Timer_Init+0x56>
 8000680:	7b3b      	ldrb	r3, [r7, #12]
 8000682:	e000      	b.n	8000686 <var_Timer_Init+0x58>
 8000684:	2302      	movs	r3, #2
 8000686:	75fb      	strb	r3, [r7, #23]
	Timer_Init_base(timer_out,period_out,doTriggerISR_out,Channel_1_out,Channel_2_out,Channel_3_out,Channel_4_out);
 8000688:	7ebc      	ldrb	r4, [r7, #26]
 800068a:	7efa      	ldrb	r2, [r7, #27]
 800068c:	8bb9      	ldrh	r1, [r7, #28]
 800068e:	7ff8      	ldrb	r0, [r7, #31]
 8000690:	7dfb      	ldrb	r3, [r7, #23]
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	7e3b      	ldrb	r3, [r7, #24]
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	7e7b      	ldrb	r3, [r7, #25]
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	4623      	mov	r3, r4
 800069e:	f000 fad1 	bl	8000c44 <Timer_Init_base>
}
 80006a2:	bf00      	nop
 80006a4:	3724      	adds	r7, #36	; 0x24
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd90      	pop	{r4, r7, pc}

080006aa <_write>:


int _write(int file, char *ptr, int len) //printf to SWV ITM
{
 80006aa:	b580      	push	{r7, lr}
 80006ac:	b086      	sub	sp, #24
 80006ae:	af00      	add	r7, sp, #0
 80006b0:	60f8      	str	r0, [r7, #12]
 80006b2:	60b9      	str	r1, [r7, #8]
 80006b4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
	for(i = 0 ; i<len ; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	e009      	b.n	80006d4 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	1c5a      	adds	r2, r3, #1
 80006c4:	60ba      	str	r2, [r7, #8]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ff89 	bl	80005e0 <ITM_SendChar>
	for(i = 0 ; i<len ; i++)
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	3301      	adds	r3, #1
 80006d2:	617b      	str	r3, [r7, #20]
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	429a      	cmp	r2, r3
 80006da:	dbf1      	blt.n	80006c0 <_write+0x16>
	}
	return len;
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3718      	adds	r7, #24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) //ISR triggered by timer overflow
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
    if (htim == &htim1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d105      	bne.n	8000704 <HAL_TIM_PeriodElapsedCallback+0x1c>
    {
       /*Timer 1*/
    	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80006f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006fc:	480a      	ldr	r0, [pc, #40]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80006fe:	f001 f8e6 	bl	80018ce <HAL_GPIO_TogglePin>
    else
    {
    	//very unlikely to see this error message
        printf("Error triggering correct ISR by timer overflow. Check HAL_TIM_PeriodElapsedCallback() function.\n");
    }
}
 8000702:	e00b      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x34>
    else if(htim == &htim2)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a09      	ldr	r2, [pc, #36]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d104      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x2e>
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800070c:	2101      	movs	r1, #1
 800070e:	4806      	ldr	r0, [pc, #24]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000710:	f001 f8dd 	bl	80018ce <HAL_GPIO_TogglePin>
}
 8000714:	e002      	b.n	800071c <HAL_TIM_PeriodElapsedCallback+0x34>
        printf("Error triggering correct ISR by timer overflow. Check HAL_TIM_PeriodElapsedCallback() function.\n");
 8000716:	4806      	ldr	r0, [pc, #24]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000718:	f002 feb8 	bl	800348c <puts>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000098 	.word	0x20000098
 8000728:	40020400 	.word	0x40020400
 800072c:	200000d8 	.word	0x200000d8
 8000730:	0800424c 	.word	0x0800424c

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f000 fd96 	bl	800126a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f837 	bl	80007b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 fa0f 	bl	8000b64 <MX_GPIO_Init>


  /* USER CODE BEGIN 2 */
  Timer_Init(1, 500);
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	811a      	strh	r2, [r3, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	703b      	strb	r3, [r7, #0]
 8000754:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000758:	807b      	strh	r3, [r7, #2]
 800075a:	463b      	mov	r3, r7
 800075c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000760:	f7ff ff65 	bl	800062e <var_Timer_Init>
  Timer_Init(2, 1000);
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	811a      	strh	r2, [r3, #8]
 8000770:	2302      	movs	r3, #2
 8000772:	733b      	strb	r3, [r7, #12]
 8000774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000778:	81fb      	strh	r3, [r7, #14]
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000782:	f7ff ff54 	bl	800062e <var_Timer_Init>
  PWM_Init(2,1,50);
 8000786:	2232      	movs	r2, #50	; 0x32
 8000788:	2101      	movs	r1, #1
 800078a:	2002      	movs	r0, #2
 800078c:	f000 fae6 	bl	8000d5c <PWM_Init>
  PWM_Init(2,2,75);
 8000790:	224b      	movs	r2, #75	; 0x4b
 8000792:	2102      	movs	r1, #2
 8000794:	2002      	movs	r0, #2
 8000796:	f000 fae1 	bl	8000d5c <PWM_Init>
  PWM_Init(1,1,50);
 800079a:	2232      	movs	r2, #50	; 0x32
 800079c:	2101      	movs	r1, #1
 800079e:	2001      	movs	r0, #1
 80007a0:	f000 fadc 	bl	8000d5c <PWM_Init>
  PWM_Init(1,2,75);
 80007a4:	224b      	movs	r2, #75	; 0x4b
 80007a6:	2102      	movs	r1, #2
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fad7 	bl	8000d5c <PWM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <main+0x7a>

080007b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b094      	sub	sp, #80	; 0x50
 80007b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2234      	movs	r2, #52	; 0x34
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f002 fde8 	bl	8003394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xb0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xb0>)
 80007da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007de:	6413      	str	r3, [r2, #64]	; 0x40
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xb0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <SystemClock_Config+0xb4>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <SystemClock_Config+0xb4>)
 80007f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007fa:	6013      	str	r3, [r2, #0]
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <SystemClock_Config+0xb4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2310      	movs	r3, #16
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4618      	mov	r0, r3
 800081e:	f001 f871 	bl	8001904 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000828:	f000 fb36 	bl	8000e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	230f      	movs	r3, #15
 800082e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fb0a 	bl	8001e60 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000852:	f000 fb21 	bl	8000e98 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param Prescaler, Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init,
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescaler, uint8_t Channel_1, uint8_t Channel_2, uint8_t Channel_3, uint8_t Channel_4)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b09c      	sub	sp, #112	; 0x70
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	4608      	mov	r0, r1
 8000872:	4611      	mov	r1, r2
 8000874:	461a      	mov	r2, r3
 8000876:	4603      	mov	r3, r0
 8000878:	70fb      	strb	r3, [r7, #3]
 800087a:	460b      	mov	r3, r1
 800087c:	70bb      	strb	r3, [r7, #2]
 800087e:	4613      	mov	r3, r2
 8000880:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000882:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000890:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]
 80008ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	222c      	movs	r2, #44	; 0x2c
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 fd6b 	bl	8003394 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Prescaler = prescaler;
 80008be:	4a57      	ldr	r2, [pc, #348]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6053      	str	r3, [r2, #4]
  htim1.Init.Period = COUNTER_PERIOD;
 80008c4:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008cc:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008ce:	4b53      	ldr	r3, [pc, #332]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008d0:	4a53      	ldr	r2, [pc, #332]	; (8000a20 <MX_TIM1_Init+0x1b8>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008da:	4b50      	ldr	r3, [pc, #320]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD;
 80008e0:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b4d      	ldr	r3, [pc, #308]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b4c      	ldr	r3, [pc, #304]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b49      	ldr	r3, [pc, #292]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008fc:	4847      	ldr	r0, [pc, #284]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80008fe:	f001 fc4d 	bl	800219c <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000908:	f000 fac6 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000916:	4619      	mov	r1, r3
 8000918:	4840      	ldr	r0, [pc, #256]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 800091a:	f001 ff47 	bl	80027ac <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000924:	f000 fab8 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000928:	483c      	ldr	r0, [pc, #240]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 800092a:	f001 fc8d 	bl	8002248 <HAL_TIM_PWM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8000934:	f000 fab0 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000944:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000948:	4619      	mov	r1, r3
 800094a:	4834      	ldr	r0, [pc, #208]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 800094c:	f002 fbce 	bl	80030ec <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000956:	f000 fa9f 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	; 0x60
 800095c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000966:	2300      	movs	r3, #0
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
  {
    Error_Handler();
  }*/
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000998:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	481b      	ldr	r0, [pc, #108]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80009ae:	f002 fc2b 	bl	8003208 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80009b8:	f000 fa6e 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  //Channel configuration
  if (Channel_1==2)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b02      	cmp	r3, #2
 80009c0:	d106      	bne.n	80009d0 <MX_TIM1_Init+0x168>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 80009c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009c6:	2200      	movs	r2, #0
 80009c8:	4619      	mov	r1, r3
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80009cc:	f001 fdd6 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_2==2)
 80009d0:	78bb      	ldrb	r3, [r7, #2]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d106      	bne.n	80009e4 <MX_TIM1_Init+0x17c>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 80009d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009da:	2204      	movs	r2, #4
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80009e0:	f001 fdcc 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_3==2)
 80009e4:	787b      	ldrb	r3, [r7, #1]
 80009e6:	2b02      	cmp	r3, #2
 80009e8:	d106      	bne.n	80009f8 <MX_TIM1_Init+0x190>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 80009ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009ee:	2208      	movs	r2, #8
 80009f0:	4619      	mov	r1, r3
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 80009f4:	f001 fdc2 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_4==2)
 80009f8:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d106      	bne.n	8000a0e <MX_TIM1_Init+0x1a6>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8000a00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a04:	220c      	movs	r2, #12
 8000a06:	4619      	mov	r1, r3
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 8000a0a:	f001 fdb7 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM1_Init+0x1b4>)
 8000a10:	f000 faaa 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000a14:	bf00      	nop
 8000a16:	3770      	adds	r7, #112	; 0x70
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	40010000 	.word	0x40010000

08000a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param Prescaler, Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init,
  * @retval None
  */
static void MX_TIM2_Init(uint32_t prescaler, uint8_t Channel_1, uint8_t Channel_2, uint8_t Channel_3, uint8_t Channel_4)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b090      	sub	sp, #64	; 0x40
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	4611      	mov	r1, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	4603      	mov	r3, r0
 8000a34:	70fb      	strb	r3, [r7, #3]
 8000a36:	460b      	mov	r3, r1
 8000a38:	70bb      	strb	r3, [r7, #2]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	707b      	strb	r3, [r7, #1]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
 8000a68:	615a      	str	r2, [r3, #20]
 8000a6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a6c:	4b3c      	ldr	r3, [pc, #240]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 8000a74:	4a3a      	ldr	r2, [pc, #232]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7a:	4b39      	ldr	r3, [pc, #228]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_PERIOD;
 8000a80:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b36      	ldr	r3, [pc, #216]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8a:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a90:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a96:	4832      	ldr	r0, [pc, #200]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000a98:	f001 fb80 	bl	800219c <HAL_TIM_Base_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000aa2:	f000 f9f9 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482b      	ldr	r0, [pc, #172]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000ab4:	f001 fe7a 	bl	80027ac <HAL_TIM_ConfigClockSource>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000abe:	f000 f9eb 	bl	8000e98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac2:	4827      	ldr	r0, [pc, #156]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000ac4:	f001 fbc0 	bl	8002248 <HAL_TIM_PWM_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000ace:	f000 f9e3 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ada:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481f      	ldr	r0, [pc, #124]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000ae2:	f002 fb03 	bl	80030ec <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000aec:	f000 f9d4 	bl	8000e98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af0:	2360      	movs	r3, #96	; 0x60
 8000af2:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]
    Error_Handler();
  }*/
  /* USER CODE BEGIN TIM2_Init 2 */

  //Channel configuration
  if (Channel_1==2)
 8000b00:	78fb      	ldrb	r3, [r7, #3]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d106      	bne.n	8000b14 <MX_TIM2_Init+0xf0>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000b10:	f001 fd34 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_2==2)
 8000b14:	78bb      	ldrb	r3, [r7, #2]
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d106      	bne.n	8000b28 <MX_TIM2_Init+0x104>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2204      	movs	r2, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000b24:	f001 fd2a 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_3==2)
 8000b28:	787b      	ldrb	r3, [r7, #1]
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d106      	bne.n	8000b3c <MX_TIM2_Init+0x118>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	2208      	movs	r2, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000b38:	f001 fd20 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  if (Channel_4==2)
 8000b3c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d106      	bne.n	8000b52 <MX_TIM2_Init+0x12e>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 8000b44:	f107 0308 	add.w	r3, r7, #8
 8000b48:	220c      	movs	r2, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000b4e:	f001 fd15 	bl	800257c <HAL_TIM_PWM_ConfigChannel>
  }
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b52:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_TIM2_Init+0x13c>)
 8000b54:	f000 fa08 	bl	8000f68 <HAL_TIM_MspPostInit>

}
 8000b58:	bf00      	nop
 8000b5a:	3740      	adds	r7, #64	; 0x40
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200000d8 	.word	0x200000d8

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	4b23      	ldr	r3, [pc, #140]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a22      	ldr	r2, [pc, #136]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_GPIO_Init+0xd4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f244 0101 	movw	r1, #16385	; 0x4001
 8000be0:	4816      	ldr	r0, [pc, #88]	; (8000c3c <MX_GPIO_Init+0xd8>)
 8000be2:	f000 fe5b 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_LED_GPIO_Port, EXT_LED_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_GPIO_Init+0xdc>)
 8000bee:	f000 fe55 	bl	800189c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bf2:	f244 0301 	movw	r3, #16385	; 0x4001
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_GPIO_Init+0xd8>)
 8000c0c:	f000 fc9c 	bl	8001548 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_LED_Pin */
  GPIO_InitStruct.Pin = EXT_LED_Pin;
 8000c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXT_LED_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_GPIO_Init+0xdc>)
 8000c2a:	f000 fc8d 	bl	8001548 <HAL_GPIO_Init>

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40020c00 	.word	0x40020c00

08000c44 <Timer_Init_base>:
  * @brief Initialize timer n on channel m for s milli seconds with ISR
  * @param Timer number, period (milliseconds), Trigger the Interrupt Service Routine(2=True 1=False), Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init
  * @retval None
  */
static void Timer_Init_base(uint8_t timer, uint16_t period, uint8_t doTriggerISR, uint8_t Channel_1, uint8_t Channel_2, uint8_t Channel_3, uint8_t Channel_4)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	4608      	mov	r0, r1
 8000c4e:	4611      	mov	r1, r2
 8000c50:	461a      	mov	r2, r3
 8000c52:	4623      	mov	r3, r4
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	4603      	mov	r3, r0
 8000c58:	80bb      	strh	r3, [r7, #4]
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	71bb      	strb	r3, [r7, #6]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	70fb      	strb	r3, [r7, #3]
	if (period > 0 && period <65536)
 8000c62:	88bb      	ldrh	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d034      	beq.n	8000cd2 <Timer_Init_base+0x8e>
	{
		uint32_t prescaler = Calculate_prescaler(period); //max period value is 2^16-1
 8000c68:	88bb      	ldrh	r3, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 f844 	bl	8000cf8 <Calculate_prescaler>
 8000c70:	60f8      	str	r0, [r7, #12]

		switch (timer)
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d002      	beq.n	8000c7e <Timer_Init_base+0x3a>
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d013      	beq.n	8000ca4 <Timer_Init_base+0x60>
 8000c7c:	e025      	b.n	8000cca <Timer_Init_base+0x86>
		{
			case (1):
				MX_TIM1_Init(prescaler,Channel_1,Channel_2,Channel_3,Channel_4);
 8000c7e:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000c82:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c86:	78f9      	ldrb	r1, [r7, #3]
 8000c88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	4603      	mov	r3, r0
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f7ff fde9 	bl	8000868 <MX_TIM1_Init>
				if(doTriggerISR==2)
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d11e      	bne.n	8000cda <Timer_Init_base+0x96>
				{
					HAL_TIM_Base_Start_IT(&htim1);
 8000c9c:	4812      	ldr	r0, [pc, #72]	; (8000ce8 <Timer_Init_base+0xa4>)
 8000c9e:	f001 faa9 	bl	80021f4 <HAL_TIM_Base_Start_IT>
				}
				break;
 8000ca2:	e01a      	b.n	8000cda <Timer_Init_base+0x96>
			case (2):
				MX_TIM2_Init(prescaler,Channel_1,Channel_2,Channel_3,Channel_4);
 8000ca4:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8000ca8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000cac:	78f9      	ldrb	r1, [r7, #3]
 8000cae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f7ff feb4 	bl	8000a24 <MX_TIM2_Init>
				if(doTriggerISR==2)
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d10d      	bne.n	8000cde <Timer_Init_base+0x9a>
						{
							HAL_TIM_Base_Start_IT(&htim2);
 8000cc2:	480a      	ldr	r0, [pc, #40]	; (8000cec <Timer_Init_base+0xa8>)
 8000cc4:	f001 fa96 	bl	80021f4 <HAL_TIM_Base_Start_IT>
						}
				break;
 8000cc8:	e009      	b.n	8000cde <Timer_Init_base+0x9a>
			default:
				printf("Invalid Timer argument. Should be either '1' or '2'.\n");
 8000cca:	4809      	ldr	r0, [pc, #36]	; (8000cf0 <Timer_Init_base+0xac>)
 8000ccc:	f002 fbde 	bl	800348c <puts>

	else
	{
		printf("Invalid Period argument. Should be >0 and <65536");
	}
}
 8000cd0:	e006      	b.n	8000ce0 <Timer_Init_base+0x9c>
		printf("Invalid Period argument. Should be >0 and <65536");
 8000cd2:	4808      	ldr	r0, [pc, #32]	; (8000cf4 <Timer_Init_base+0xb0>)
 8000cd4:	f002 fb66 	bl	80033a4 <iprintf>
}
 8000cd8:	e002      	b.n	8000ce0 <Timer_Init_base+0x9c>
				break;
 8000cda:	bf00      	nop
 8000cdc:	e000      	b.n	8000ce0 <Timer_Init_base+0x9c>
				break;
 8000cde:	bf00      	nop
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000098 	.word	0x20000098
 8000cec:	200000d8 	.word	0x200000d8
 8000cf0:	080042ac 	.word	0x080042ac
 8000cf4:	080042e4 	.word	0x080042e4

08000cf8 <Calculate_prescaler>:
  * @brief Calculate the prescaler necessary to operate desired PWM
  * @param period
  * @retval prescaler
  */
uint32_t Calculate_prescaler(uint16_t period)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
	uint32_t prescaler = ((HAL_RCC_GetSysClockFreq()*(float)period)/(COUNTER_PERIOD+1))-1;
 8000d02:	f001 f999 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8000d06:	ee07 0a90 	vmov	s15, r0
 8000d0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d18:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000d1c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000d20:	3301      	adds	r3, #1
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000d32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	60fb      	str	r3, [r7, #12]
	prescaler /= 1000;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	4a05      	ldr	r2, [pc, #20]	; (8000d58 <Calculate_prescaler+0x60>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	099b      	lsrs	r3, r3, #6
 8000d4a:	60fb      	str	r3, [r7, #12]
	return prescaler;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	10624dd3 	.word	0x10624dd3

08000d5c <PWM_Init>:
  * @brief Take initialized timer, channel and desired duty cycle and initialize PWM
  * @param Timer, channel, duty cycle
  * @retval None
  */
static void PWM_Init(uint8_t timer, uint8_t channel, uint8_t duty_cycle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	460b      	mov	r3, r1
 8000d68:	71bb      	strb	r3, [r7, #6]
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	717b      	strb	r3, [r7, #5]

	TIM_HandleTypeDef* desired_timer;
	uint32_t desired_channel;

	//Calculate the pulse
	uint16_t ticks_percycle = Calculate_DutyCycle(duty_cycle);
 8000d6e:	797b      	ldrb	r3, [r7, #5]
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 f86d 	bl	8000e50 <Calculate_DutyCycle>
 8000d76:	4603      	mov	r3, r0
 8000d78:	81fb      	strh	r3, [r7, #14]

	//Find desired timer
	switch(timer)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d002      	beq.n	8000d86 <PWM_Init+0x2a>
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d003      	beq.n	8000d8c <PWM_Init+0x30>
 8000d84:	e005      	b.n	8000d92 <PWM_Init+0x36>
	{
		case(1):
			desired_timer = &htim1;
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <PWM_Init+0xe4>)
 8000d88:	617b      	str	r3, [r7, #20]
			break;
 8000d8a:	e005      	b.n	8000d98 <PWM_Init+0x3c>
		case(2):
			desired_timer = &htim2;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <PWM_Init+0xe8>)
 8000d8e:	617b      	str	r3, [r7, #20]
			break;
 8000d90:	e002      	b.n	8000d98 <PWM_Init+0x3c>
		default:
			printf("Invalid Timer argument. Should be either '1' or '2'.\n");
 8000d92:	482d      	ldr	r0, [pc, #180]	; (8000e48 <PWM_Init+0xec>)
 8000d94:	f002 fb7a 	bl	800348c <puts>
	}

	//Find desired channel
	switch(channel)
 8000d98:	79bb      	ldrb	r3, [r7, #6]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	2b03      	cmp	r3, #3
 8000d9e:	d817      	bhi.n	8000dd0 <PWM_Init+0x74>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <PWM_Init+0x4c>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dbf 	.word	0x08000dbf
 8000db0:	08000dc5 	.word	0x08000dc5
 8000db4:	08000dcb 	.word	0x08000dcb
	{
		case(1):
			desired_channel = TIM_CHANNEL_1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
			break;
 8000dbc:	e00b      	b.n	8000dd6 <PWM_Init+0x7a>
		case(2):
			desired_channel = TIM_CHANNEL_2;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
			break;
 8000dc2:	e008      	b.n	8000dd6 <PWM_Init+0x7a>
		case(3):
			desired_channel = TIM_CHANNEL_3;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	613b      	str	r3, [r7, #16]
			break;
 8000dc8:	e005      	b.n	8000dd6 <PWM_Init+0x7a>
		case(4):
			desired_channel = TIM_CHANNEL_4;
 8000dca:	230c      	movs	r3, #12
 8000dcc:	613b      	str	r3, [r7, #16]
			break;
 8000dce:	e002      	b.n	8000dd6 <PWM_Init+0x7a>
		default:
			printf("Invalid Channel argument. Should be an integer within range [1,4].\n");
 8000dd0:	481e      	ldr	r0, [pc, #120]	; (8000e4c <PWM_Init+0xf0>)
 8000dd2:	f002 fb5b 	bl	800348c <puts>
	}

	//Initiate the PWM and desired duty cycle
    HAL_TIM_PWM_Start(desired_timer, desired_channel);
 8000dd6:	6939      	ldr	r1, [r7, #16]
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f001 fa6b 	bl	80022b4 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d104      	bne.n	8000dee <PWM_Init+0x92>
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	89fa      	ldrh	r2, [r7, #14]
 8000dea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dec:	e023      	b.n	8000e36 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	2b04      	cmp	r3, #4
 8000df2:	d104      	bne.n	8000dfe <PWM_Init+0xa2>
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	89fa      	ldrh	r2, [r7, #14]
 8000dfa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dfc:	e01b      	b.n	8000e36 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	2b08      	cmp	r3, #8
 8000e02:	d104      	bne.n	8000e0e <PWM_Init+0xb2>
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	89fa      	ldrh	r2, [r7, #14]
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e0c:	e013      	b.n	8000e36 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b0c      	cmp	r3, #12
 8000e12:	d104      	bne.n	8000e1e <PWM_Init+0xc2>
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	89fa      	ldrh	r2, [r7, #14]
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e1c:	e00b      	b.n	8000e36 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	2b10      	cmp	r3, #16
 8000e22:	d104      	bne.n	8000e2e <PWM_Init+0xd2>
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	89fa      	ldrh	r2, [r7, #14]
 8000e2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000e2c:	e003      	b.n	8000e36 <PWM_Init+0xda>
    __HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_percycle);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	89fa      	ldrh	r2, [r7, #14]
 8000e34:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000098 	.word	0x20000098
 8000e44:	200000d8 	.word	0x200000d8
 8000e48:	080042ac 	.word	0x080042ac
 8000e4c:	08004318 	.word	0x08004318

08000e50 <Calculate_DutyCycle>:
  * @brief Calculate the duty cycle in ticks
  * @param duty cycle
  * @retval Ticks per cycle
  */
uint16_t Calculate_DutyCycle(uint8_t duty_cycle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	uint16_t ticks_percycle;
	//CHECK TO MAKE SURE DUTY CYCLE IS WITHIN [0,100]
	if (duty_cycle>=0 && duty_cycle <=100)
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	2b64      	cmp	r3, #100	; 0x64
 8000e5e:	d80c      	bhi.n	8000e7a <Calculate_DutyCycle+0x2a>
	{
		ticks_percycle = (duty_cycle*COUNTER_PERIOD)/100;
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <Calculate_DutyCycle+0x40>)
 8000e6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e70:	1152      	asrs	r2, r2, #5
 8000e72:	17db      	asrs	r3, r3, #31
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	81fb      	strh	r3, [r7, #14]
 8000e78:	e004      	b.n	8000e84 <Calculate_DutyCycle+0x34>
	}

	else
	{
		ticks_percycle = 0; //Default value
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	81fb      	strh	r3, [r7, #14]
		printf("Invalid Duty Cycle argument. Should be within range [0,100].\n");
 8000e7e:	4805      	ldr	r0, [pc, #20]	; (8000e94 <Calculate_DutyCycle+0x44>)
 8000e80:	f002 fb04 	bl	800348c <puts>
	}
	return ticks_percycle;
 8000e84:	89fb      	ldrh	r3, [r7, #14]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	51eb851f 	.word	0x51eb851f
 8000e94:	0800435c 	.word	0x0800435c

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <Error_Handler+0x6>

08000ea0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_MspInit+0x44>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_MspInit+0x44>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <HAL_TIM_Base_MspInit+0x78>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d114      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <HAL_TIM_Base_MspInit+0x7c>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_TIM_Base_MspInit+0x7c>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6453      	str	r3, [r2, #68]	; 0x44
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <HAL_TIM_Base_MspInit+0x7c>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2019      	movs	r0, #25
 8000f18:	f000 fadf 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f1c:	2019      	movs	r0, #25
 8000f1e:	f000 faf8 	bl	8001512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f22:	e018      	b.n	8000f56 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f2c:	d113      	bne.n	8000f56 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <HAL_TIM_Base_MspInit+0x7c>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <HAL_TIM_Base_MspInit+0x7c>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_TIM_Base_MspInit+0x7c>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	201c      	movs	r0, #28
 8000f4c:	f000 fac5 	bl	80014da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f50:	201c      	movs	r0, #28
 8000f52:	f000 fade 	bl	8001512 <HAL_NVIC_EnableIRQ>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40010000 	.word	0x40010000
 8000f64:	40023800 	.word	0x40023800

08000f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a31      	ldr	r2, [pc, #196]	; (800104c <HAL_TIM_MspPostInit+0xe4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d11d      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	4b31      	ldr	r3, [pc, #196]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a30      	ldr	r2, [pc, #192]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000f90:	f043 0310 	orr.w	r3, r3, #16
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0310 	and.w	r3, r3, #16
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000fa2:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4825      	ldr	r0, [pc, #148]	; (8001054 <HAL_TIM_MspPostInit+0xec>)
 8000fc0:	f000 fac2 	bl	8001548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fc4:	e03d      	b.n	8001042 <HAL_TIM_MspPostInit+0xda>
  else if(htim->Instance==TIM2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fce:	d138      	bne.n	8001042 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	4a18      	ldr	r2, [pc, #96]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000fee:	f043 0302 	orr.w	r3, r3, #2
 8000ff2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff4:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_TIM_MspPostInit+0xe8>)
 8000ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	60bb      	str	r3, [r7, #8]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001000:	2320      	movs	r3, #32
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001010:	2301      	movs	r3, #1
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <HAL_TIM_MspPostInit+0xf0>)
 800101c:	f000 fa94 	bl	8001548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 8001020:	f640 4308 	movw	r3, #3080	; 0xc08
 8001024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	4619      	mov	r1, r3
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <HAL_TIM_MspPostInit+0xf4>)
 800103e:	f000 fa83 	bl	8001548 <HAL_GPIO_Init>
}
 8001042:	bf00      	nop
 8001044:	3728      	adds	r7, #40	; 0x28
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40010000 	.word	0x40010000
 8001050:	40023800 	.word	0x40023800
 8001054:	40021000 	.word	0x40021000
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f91a 	bl	80012e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80010ba:	f001 f93f 	bl	800233c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000098 	.word	0x20000098

080010c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM2_IRQHandler+0x10>)
 80010ce:	f001 f935 	bl	800233c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	200000d8 	.word	0x200000d8

080010dc <_read>:
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e00a      	b.n	8001104 <_read+0x28>
 80010ee:	f3af 8000 	nop.w
 80010f2:	4601      	mov	r1, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	60ba      	str	r2, [r7, #8]
 80010fa:	b2ca      	uxtb	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	3301      	adds	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697a      	ldr	r2, [r7, #20]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	429a      	cmp	r2, r3
 800110a:	dbf0      	blt.n	80010ee <_read+0x12>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <_close>:
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_fstat>:
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	2300      	movs	r3, #0
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <_isatty>:
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	2301      	movs	r3, #1
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <_lseek>:
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	2300      	movs	r3, #0
 8001172:	4618      	mov	r0, r3
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <_sbrk>:
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	4a14      	ldr	r2, [pc, #80]	; (80011dc <_sbrk+0x5c>)
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <_sbrk+0x60>)
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <_sbrk+0x64>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d102      	bne.n	80011a2 <_sbrk+0x22>
 800119c:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <_sbrk+0x64>)
 800119e:	4a12      	ldr	r2, [pc, #72]	; (80011e8 <_sbrk+0x68>)
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d207      	bcs.n	80011c0 <_sbrk+0x40>
 80011b0:	f002 f8c6 	bl	8003340 <__errno>
 80011b4:	4602      	mov	r2, r0
 80011b6:	230c      	movs	r3, #12
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295
 80011be:	e009      	b.n	80011d4 <_sbrk+0x54>
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <_sbrk+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4618      	mov	r0, r3
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20080000 	.word	0x20080000
 80011e0:	00000400 	.word	0x00000400
 80011e4:	2000008c 	.word	0x2000008c
 80011e8:	20000120 	.word	0x20000120

080011ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <SystemInit+0x28>)
 80011f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f6:	4a07      	ldr	r2, [pc, #28]	; (8001214 <SystemInit+0x28>)
 80011f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SystemInit+0x28>)
 8001202:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001206:	609a      	str	r2, [r3, #8]
#endif
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x14>
 800121c:	2100      	movs	r1, #0
 800121e:	e003      	b.n	8001228 <LoopCopyDataInit>

08001220 <CopyDataInit>:
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LoopFillZerobss+0x18>)
 8001222:	585b      	ldr	r3, [r3, r1]
 8001224:	5043      	str	r3, [r0, r1]
 8001226:	3104      	adds	r1, #4

08001228 <LoopCopyDataInit>:
 8001228:	480b      	ldr	r0, [pc, #44]	; (8001258 <LoopFillZerobss+0x1c>)
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <LoopFillZerobss+0x20>)
 800122c:	1842      	adds	r2, r0, r1
 800122e:	429a      	cmp	r2, r3
 8001230:	d3f6      	bcc.n	8001220 <CopyDataInit>
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x24>)
 8001234:	e002      	b.n	800123c <LoopFillZerobss>

08001236 <FillZerobss>:
 8001236:	2300      	movs	r3, #0
 8001238:	f842 3b04 	str.w	r3, [r2], #4

0800123c <LoopFillZerobss>:
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <LoopFillZerobss+0x28>)
 800123e:	429a      	cmp	r2, r3
 8001240:	d3f9      	bcc.n	8001236 <FillZerobss>
 8001242:	f7ff ffd3 	bl	80011ec <SystemInit>
 8001246:	f002 f881 	bl	800334c <__libc_init_array>
 800124a:	f7ff fa73 	bl	8000734 <main>
 800124e:	4770      	bx	lr
 8001250:	20080000 	.word	0x20080000
 8001254:	08004454 	.word	0x08004454
 8001258:	20000000 	.word	0x20000000
 800125c:	20000070 	.word	0x20000070
 8001260:	20000070 	.word	0x20000070
 8001264:	20000120 	.word	0x20000120

08001268 <ADC_IRQHandler>:
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>

0800126a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f928 	bl	80014c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 f805 	bl	8001284 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800127a:	f7ff fe11 	bl	8000ea0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <HAL_InitTick+0x54>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x58>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fbb3 f3f1 	udiv	r3, r3, r1
 800129e:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f943 	bl	800152e <HAL_SYSTICK_Config>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00e      	b.n	80012d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d80a      	bhi.n	80012ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b8:	2200      	movs	r2, #0
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f000 f90b 	bl	80014da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c4:	4a06      	ldr	r2, [pc, #24]	; (80012e0 <HAL_InitTick+0x5c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e000      	b.n	80012d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20000004 	.word	0x20000004

080012e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e8:	4b06      	ldr	r3, [pc, #24]	; (8001304 <HAL_IncTick+0x20>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x24>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4413      	add	r3, r2
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <HAL_IncTick+0x24>)
 80012f6:	6013      	str	r3, [r2, #0]
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000008 	.word	0x20000008
 8001308:	20000118 	.word	0x20000118

0800130c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return uwTick;
 8001310:	4b03      	ldr	r3, [pc, #12]	; (8001320 <HAL_GetTick+0x14>)
 8001312:	681b      	ldr	r3, [r3, #0]
}
 8001314:	4618      	mov	r0, r3
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000118 	.word	0x20000118

08001324 <__NVIC_SetPriorityGrouping>:
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <__NVIC_SetPriorityGrouping+0x40>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001340:	4013      	ands	r3, r2
 8001342:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	4313      	orrs	r3, r2
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x40>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00
 8001368:	05fa0000 	.word	0x05fa0000

0800136c <__NVIC_GetPriorityGrouping>:
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <__NVIC_GetPriorityGrouping+0x18>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	f003 0307 	and.w	r3, r3, #7
}
 800137a:	4618      	mov	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <__NVIC_EnableIRQ>:
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001396:	2b00      	cmp	r3, #0
 8001398:	db0b      	blt.n	80013b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 021f 	and.w	r2, r3, #31
 80013a0:	4907      	ldr	r1, [pc, #28]	; (80013c0 <__NVIC_EnableIRQ+0x38>)
 80013a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a6:	095b      	lsrs	r3, r3, #5
 80013a8:	2001      	movs	r0, #1
 80013aa:	fa00 f202 	lsl.w	r2, r0, r2
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100

080013c4 <__NVIC_SetPriority>:
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	db0a      	blt.n	80013ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <__NVIC_SetPriority+0x4c>)
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	440b      	add	r3, r1
 80013e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013ec:	e00a      	b.n	8001404 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4908      	ldr	r1, [pc, #32]	; (8001414 <__NVIC_SetPriority+0x50>)
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	3b04      	subs	r3, #4
 80013fc:	0112      	lsls	r2, r2, #4
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	440b      	add	r3, r1
 8001402:	761a      	strb	r2, [r3, #24]
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <NVIC_EncodePriority>:
{
 8001418:	b480      	push	{r7}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	f1c3 0307 	rsb	r3, r3, #7
 8001432:	2b04      	cmp	r3, #4
 8001434:	bf28      	it	cs
 8001436:	2304      	movcs	r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3304      	adds	r3, #4
 800143e:	2b06      	cmp	r3, #6
 8001440:	d902      	bls.n	8001448 <NVIC_EncodePriority+0x30>
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3b03      	subs	r3, #3
 8001446:	e000      	b.n	800144a <NVIC_EncodePriority+0x32>
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	401a      	ands	r2, r3
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001460:	f04f 31ff 	mov.w	r1, #4294967295
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa01 f303 	lsl.w	r3, r1, r3
 800146a:	43d9      	mvns	r1, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	4313      	orrs	r3, r2
}
 8001472:	4618      	mov	r0, r3
 8001474:	3724      	adds	r7, #36	; 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <SysTick_Config>:
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3b01      	subs	r3, #1
 800148c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001490:	d301      	bcc.n	8001496 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001492:	2301      	movs	r3, #1
 8001494:	e00f      	b.n	80014b6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001496:	4a0a      	ldr	r2, [pc, #40]	; (80014c0 <SysTick_Config+0x40>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3b01      	subs	r3, #1
 800149c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149e:	210f      	movs	r1, #15
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295
 80014a4:	f7ff ff8e 	bl	80013c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x40>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x40>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff29 	bl	8001324 <__NVIC_SetPriorityGrouping>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ec:	f7ff ff3e 	bl	800136c <__NVIC_GetPriorityGrouping>
 80014f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	68b9      	ldr	r1, [r7, #8]
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff ff8e 	bl	8001418 <NVIC_EncodePriority>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001502:	4611      	mov	r1, r2
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff5d 	bl	80013c4 <__NVIC_SetPriority>
}
 800150a:	bf00      	nop
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	4603      	mov	r3, r0
 800151a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ff31 	bl	8001388 <__NVIC_EnableIRQ>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b082      	sub	sp, #8
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ffa2 	bl	8001480 <SysTick_Config>
 800153c:	4603      	mov	r3, r0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	e175      	b.n	8001854 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001568:	2201      	movs	r2, #1
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	429a      	cmp	r2, r3
 8001582:	f040 8164 	bne.w	800184e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d00b      	beq.n	80015a6 <HAL_GPIO_Init+0x5e>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800159a:	2b11      	cmp	r3, #17
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b12      	cmp	r3, #18
 80015a4:	d130      	bne.n	8001608 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	2203      	movs	r2, #3
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43db      	mvns	r3, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4013      	ands	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015dc:	2201      	movs	r2, #1
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f003 0201 	and.w	r2, r3, #1
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x100>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b12      	cmp	r3, #18
 8001646:	d123      	bne.n	8001690 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	08da      	lsrs	r2, r3, #3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3208      	adds	r2, #8
 8001650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	220f      	movs	r2, #15
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691a      	ldr	r2, [r3, #16]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	69b9      	ldr	r1, [r7, #24]
 800168c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0203 	and.w	r2, r3, #3
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 80be 	beq.w	800184e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	4b65      	ldr	r3, [pc, #404]	; (8001868 <HAL_GPIO_Init+0x320>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	4a64      	ldr	r2, [pc, #400]	; (8001868 <HAL_GPIO_Init+0x320>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6453      	str	r3, [r2, #68]	; 0x44
 80016de:	4b62      	ldr	r3, [pc, #392]	; (8001868 <HAL_GPIO_Init+0x320>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016ea:	4a60      	ldr	r2, [pc, #384]	; (800186c <HAL_GPIO_Init+0x324>)
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	089b      	lsrs	r3, r3, #2
 80016f0:	3302      	adds	r3, #2
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_GPIO_Init+0x328>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d037      	beq.n	8001786 <HAL_GPIO_Init+0x23e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a56      	ldr	r2, [pc, #344]	; (8001874 <HAL_GPIO_Init+0x32c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d031      	beq.n	8001782 <HAL_GPIO_Init+0x23a>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a55      	ldr	r2, [pc, #340]	; (8001878 <HAL_GPIO_Init+0x330>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x236>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a54      	ldr	r2, [pc, #336]	; (800187c <HAL_GPIO_Init+0x334>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x232>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a53      	ldr	r2, [pc, #332]	; (8001880 <HAL_GPIO_Init+0x338>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x22e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a52      	ldr	r2, [pc, #328]	; (8001884 <HAL_GPIO_Init+0x33c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x22a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a51      	ldr	r2, [pc, #324]	; (8001888 <HAL_GPIO_Init+0x340>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x226>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a50      	ldr	r2, [pc, #320]	; (800188c <HAL_GPIO_Init+0x344>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x222>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4f      	ldr	r2, [pc, #316]	; (8001890 <HAL_GPIO_Init+0x348>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x21e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4e      	ldr	r2, [pc, #312]	; (8001894 <HAL_GPIO_Init+0x34c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x21a>
 800175e:	2309      	movs	r3, #9
 8001760:	e012      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001762:	230a      	movs	r3, #10
 8001764:	e010      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001766:	2308      	movs	r3, #8
 8001768:	e00e      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800176a:	2307      	movs	r3, #7
 800176c:	e00c      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800176e:	2306      	movs	r3, #6
 8001770:	e00a      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001772:	2305      	movs	r3, #5
 8001774:	e008      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001776:	2304      	movs	r3, #4
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800177a:	2303      	movs	r3, #3
 800177c:	e004      	b.n	8001788 <HAL_GPIO_Init+0x240>
 800177e:	2302      	movs	r3, #2
 8001780:	e002      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_GPIO_Init+0x240>
 8001786:	2300      	movs	r3, #0
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f002 0203 	and.w	r2, r2, #3
 800178e:	0092      	lsls	r2, r2, #2
 8001790:	4093      	lsls	r3, r2
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001798:	4934      	ldr	r1, [pc, #208]	; (800186c <HAL_GPIO_Init+0x324>)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	089b      	lsrs	r3, r3, #2
 800179e:	3302      	adds	r3, #2
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017a6:	4b3c      	ldr	r3, [pc, #240]	; (8001898 <HAL_GPIO_Init+0x350>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ca:	4a33      	ldr	r2, [pc, #204]	; (8001898 <HAL_GPIO_Init+0x350>)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_GPIO_Init+0x350>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017f4:	4a28      	ldr	r2, [pc, #160]	; (8001898 <HAL_GPIO_Init+0x350>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <HAL_GPIO_Init+0x350>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800181e:	4a1e      	ldr	r2, [pc, #120]	; (8001898 <HAL_GPIO_Init+0x350>)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001824:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <HAL_GPIO_Init+0x350>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001848:	4a13      	ldr	r2, [pc, #76]	; (8001898 <HAL_GPIO_Init+0x350>)
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3301      	adds	r3, #1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	f67f ae86 	bls.w	8001568 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800185c:	bf00      	nop
 800185e:	3724      	adds	r7, #36	; 0x24
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40023800 	.word	0x40023800
 800186c:	40013800 	.word	0x40013800
 8001870:	40020000 	.word	0x40020000
 8001874:	40020400 	.word	0x40020400
 8001878:	40020800 	.word	0x40020800
 800187c:	40020c00 	.word	0x40020c00
 8001880:	40021000 	.word	0x40021000
 8001884:	40021400 	.word	0x40021400
 8001888:	40021800 	.word	0x40021800
 800188c:	40021c00 	.word	0x40021c00
 8001890:	40022000 	.word	0x40022000
 8001894:	40022400 	.word	0x40022400
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
 80018a8:	4613      	mov	r3, r2
 80018aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018ac:	787b      	ldrb	r3, [r7, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018b8:	e003      	b.n	80018c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018ba:	887b      	ldrh	r3, [r7, #2]
 80018bc:	041a      	lsls	r2, r3, #16
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
 80018d6:	460b      	mov	r3, r1
 80018d8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d004      	beq.n	80018f0 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80018ee:	e002      	b.n	80018f6 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018f0:	887a      	ldrh	r2, [r7, #2]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	619a      	str	r2, [r3, #24]
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e29b      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 8087 	beq.w	8001a36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001928:	4b96      	ldr	r3, [pc, #600]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	d00c      	beq.n	800194e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001934:	4b93      	ldr	r3, [pc, #588]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 030c 	and.w	r3, r3, #12
 800193c:	2b08      	cmp	r3, #8
 800193e:	d112      	bne.n	8001966 <HAL_RCC_OscConfig+0x62>
 8001940:	4b90      	ldr	r3, [pc, #576]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800194c:	d10b      	bne.n	8001966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800194e:	4b8d      	ldr	r3, [pc, #564]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d06c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x130>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d168      	bne.n	8001a34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e275      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d106      	bne.n	800197e <HAL_RCC_OscConfig+0x7a>
 8001970:	4b84      	ldr	r3, [pc, #528]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a83      	ldr	r2, [pc, #524]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e02e      	b.n	80019dc <HAL_RCC_OscConfig+0xd8>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x9c>
 8001986:	4b7f      	ldr	r3, [pc, #508]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 800198c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b7c      	ldr	r3, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7b      	ldr	r2, [pc, #492]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e01d      	b.n	80019dc <HAL_RCC_OscConfig+0xd8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a8:	d10c      	bne.n	80019c4 <HAL_RCC_OscConfig+0xc0>
 80019aa:	4b76      	ldr	r3, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a75      	ldr	r2, [pc, #468]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b73      	ldr	r3, [pc, #460]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a72      	ldr	r2, [pc, #456]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	e00b      	b.n	80019dc <HAL_RCC_OscConfig+0xd8>
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b6c      	ldr	r3, [pc, #432]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a6b      	ldr	r2, [pc, #428]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 80019d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff fc92 	bl	800130c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7ff fc8e 	bl	800130c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e229      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xe8>
 8001a0a:	e014      	b.n	8001a36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc7e 	bl	800130c <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fc7a 	bl	800130c <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e215      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a26:	4b57      	ldr	r3, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x110>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d069      	beq.n	8001b16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a42:	4b50      	ldr	r3, [pc, #320]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00b      	beq.n	8001a66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4e:	4b4d      	ldr	r3, [pc, #308]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d11c      	bne.n	8001a94 <HAL_RCC_OscConfig+0x190>
 8001a5a:	4b4a      	ldr	r3, [pc, #296]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d116      	bne.n	8001a94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	4b47      	ldr	r3, [pc, #284]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_RCC_OscConfig+0x17a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e1e9      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7e:	4b41      	ldr	r3, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	493d      	ldr	r1, [pc, #244]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a92:	e040      	b.n	8001b16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d023      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc30 	bl	800130c <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc2c 	bl	800130c <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1c7      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b30      	ldr	r3, [pc, #192]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4929      	ldr	r1, [pc, #164]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
 8001ae2:	e018      	b.n	8001b16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae4:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc0c 	bl	800130c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc08 	bl	800130c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e1a3      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d038      	beq.n	8001b94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d019      	beq.n	8001b5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b36:	f7ff fbe9 	bl	800130c <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fbe5 	bl	800130c <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e180      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x23a>
 8001b5c:	e01a      	b.n	8001b94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x280>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff fbcf 	bl	800130c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b72:	f7ff fbcb 	bl	800130c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d903      	bls.n	8001b88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e166      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
 8001b84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b88:	4b92      	ldr	r3, [pc, #584]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1ee      	bne.n	8001b72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80a4 	beq.w	8001cea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b8c      	ldr	r3, [pc, #560]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10d      	bne.n	8001bca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b89      	ldr	r3, [pc, #548]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	4a88      	ldr	r2, [pc, #544]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bba:	4b86      	ldr	r3, [pc, #536]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bca:	4b83      	ldr	r3, [pc, #524]	; (8001dd8 <HAL_RCC_OscConfig+0x4d4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d118      	bne.n	8001c08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001bd6:	4b80      	ldr	r3, [pc, #512]	; (8001dd8 <HAL_RCC_OscConfig+0x4d4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a7f      	ldr	r2, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x4d4>)
 8001bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fb93 	bl	800130c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bea:	f7ff fb8f 	bl	800130c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b64      	cmp	r3, #100	; 0x64
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e12a      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bfc:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0x4d4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d106      	bne.n	8001c1e <HAL_RCC_OscConfig+0x31a>
 8001c10:	4b70      	ldr	r3, [pc, #448]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c14:	4a6f      	ldr	r2, [pc, #444]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c1c:	e02d      	b.n	8001c7a <HAL_RCC_OscConfig+0x376>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x33c>
 8001c26:	4b6b      	ldr	r3, [pc, #428]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2a:	4a6a      	ldr	r2, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	6713      	str	r3, [r2, #112]	; 0x70
 8001c32:	4b68      	ldr	r3, [pc, #416]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	4a67      	ldr	r2, [pc, #412]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3e:	e01c      	b.n	8001c7a <HAL_RCC_OscConfig+0x376>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b05      	cmp	r3, #5
 8001c46:	d10c      	bne.n	8001c62 <HAL_RCC_OscConfig+0x35e>
 8001c48:	4b62      	ldr	r3, [pc, #392]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a61      	ldr	r2, [pc, #388]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a5e      	ldr	r2, [pc, #376]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	e00b      	b.n	8001c7a <HAL_RCC_OscConfig+0x376>
 8001c62:	4b5c      	ldr	r3, [pc, #368]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a5b      	ldr	r2, [pc, #364]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b59      	ldr	r3, [pc, #356]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a58      	ldr	r2, [pc, #352]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d015      	beq.n	8001cae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff fb43 	bl	800130c <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fb3f 	bl	800130c <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0d8      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCC_OscConfig+0x386>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cae:	f7ff fb2d 	bl	800130c <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	e00a      	b.n	8001ccc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fb29 	bl	800130c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e0c2      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b41      	ldr	r3, [pc, #260]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1ee      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cd8:	7dfb      	ldrb	r3, [r7, #23]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4b3d      	ldr	r3, [pc, #244]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a3c      	ldr	r2, [pc, #240]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80ae 	beq.w	8001e50 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf4:	4b37      	ldr	r3, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 030c 	and.w	r3, r3, #12
 8001cfc:	2b08      	cmp	r3, #8
 8001cfe:	d06d      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d14b      	bne.n	8001da0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a31      	ldr	r2, [pc, #196]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fafa 	bl	800130c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff faf6 	bl	800130c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e091      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2e:	4b29      	ldr	r3, [pc, #164]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69da      	ldr	r2, [r3, #28]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	019b      	lsls	r3, r3, #6
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	085b      	lsrs	r3, r3, #1
 8001d52:	3b01      	subs	r3, #1
 8001d54:	041b      	lsls	r3, r3, #16
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	071b      	lsls	r3, r3, #28
 8001d66:	491b      	ldr	r1, [pc, #108]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff fac8 	bl	800130c <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff fac4 	bl	800130c <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e05f      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d0f0      	beq.n	8001d80 <HAL_RCC_OscConfig+0x47c>
 8001d9e:	e057      	b.n	8001e50 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff faae 	bl	800130c <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff faaa 	bl	800130c <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e045      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dc6:	4b03      	ldr	r3, [pc, #12]	; (8001dd4 <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x4b0>
 8001dd2:	e03d      	b.n	8001e50 <HAL_RCC_OscConfig+0x54c>
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_RCC_OscConfig+0x558>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d030      	beq.n	8001e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d129      	bne.n	8001e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d122      	bne.n	8001e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e12:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d119      	bne.n	8001e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d10f      	bne.n	8001e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d107      	bne.n	8001e4c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d001      	beq.n	8001e50 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40023800 	.word	0x40023800

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d0      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 020f 	bic.w	r2, r3, #15
 8001e8e:	4965      	ldr	r1, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001ede:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ee2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e073      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4936      	ldr	r1, [pc, #216]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f54:	f7ff f9da 	bl	800130c <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7ff f9d6 	bl	800130c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e053      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d210      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 020f 	bic.w	r2, r3, #15
 8001f9a:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1cc>)
 8002004:	5cd3      	ldrb	r3, [r2, r3]
 8002006:	fa21 f303 	lsr.w	r3, r1, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1d0>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1d4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f936 	bl	8001284 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023c00 	.word	0x40023c00
 8002028:	40023800 	.word	0x40023800
 800202c:	0800439c 	.word	0x0800439c
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	2300      	movs	r3, #0
 8002048:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800204e:	4b50      	ldr	r3, [pc, #320]	; (8002190 <HAL_RCC_GetSysClockFreq+0x158>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b04      	cmp	r3, #4
 8002058:	d007      	beq.n	800206a <HAL_RCC_GetSysClockFreq+0x32>
 800205a:	2b08      	cmp	r3, #8
 800205c:	d008      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x38>
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 808d 	bne.w	800217e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002064:	4b4b      	ldr	r3, [pc, #300]	; (8002194 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002066:	60bb      	str	r3, [r7, #8]
      break;
 8002068:	e08c      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_RCC_GetSysClockFreq+0x160>)
 800206c:	60bb      	str	r3, [r7, #8]
      break;
 800206e:	e089      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002070:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCC_GetSysClockFreq+0x158>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002078:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800207a:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_RCC_GetSysClockFreq+0x158>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d023      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002086:	4b42      	ldr	r3, [pc, #264]	; (8002190 <HAL_RCC_GetSysClockFreq+0x158>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	099b      	lsrs	r3, r3, #6
 800208c:	f04f 0400 	mov.w	r4, #0
 8002090:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	ea03 0501 	and.w	r5, r3, r1
 800209c:	ea04 0602 	and.w	r6, r4, r2
 80020a0:	4a3d      	ldr	r2, [pc, #244]	; (8002198 <HAL_RCC_GetSysClockFreq+0x160>)
 80020a2:	fb02 f106 	mul.w	r1, r2, r6
 80020a6:	2200      	movs	r2, #0
 80020a8:	fb02 f205 	mul.w	r2, r2, r5
 80020ac:	440a      	add	r2, r1
 80020ae:	493a      	ldr	r1, [pc, #232]	; (8002198 <HAL_RCC_GetSysClockFreq+0x160>)
 80020b0:	fba5 0101 	umull	r0, r1, r5, r1
 80020b4:	1853      	adds	r3, r2, r1
 80020b6:	4619      	mov	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f04f 0400 	mov.w	r4, #0
 80020be:	461a      	mov	r2, r3
 80020c0:	4623      	mov	r3, r4
 80020c2:	f7fe f90d 	bl	80002e0 <__aeabi_uldivmod>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e049      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ce:	4b30      	ldr	r3, [pc, #192]	; (8002190 <HAL_RCC_GetSysClockFreq+0x158>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	099b      	lsrs	r3, r3, #6
 80020d4:	f04f 0400 	mov.w	r4, #0
 80020d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	ea03 0501 	and.w	r5, r3, r1
 80020e4:	ea04 0602 	and.w	r6, r4, r2
 80020e8:	4629      	mov	r1, r5
 80020ea:	4632      	mov	r2, r6
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	f04f 0400 	mov.w	r4, #0
 80020f4:	0154      	lsls	r4, r2, #5
 80020f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020fa:	014b      	lsls	r3, r1, #5
 80020fc:	4619      	mov	r1, r3
 80020fe:	4622      	mov	r2, r4
 8002100:	1b49      	subs	r1, r1, r5
 8002102:	eb62 0206 	sbc.w	r2, r2, r6
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	f04f 0400 	mov.w	r4, #0
 800210e:	0194      	lsls	r4, r2, #6
 8002110:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002114:	018b      	lsls	r3, r1, #6
 8002116:	1a5b      	subs	r3, r3, r1
 8002118:	eb64 0402 	sbc.w	r4, r4, r2
 800211c:	f04f 0100 	mov.w	r1, #0
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	00e2      	lsls	r2, r4, #3
 8002126:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800212a:	00d9      	lsls	r1, r3, #3
 800212c:	460b      	mov	r3, r1
 800212e:	4614      	mov	r4, r2
 8002130:	195b      	adds	r3, r3, r5
 8002132:	eb44 0406 	adc.w	r4, r4, r6
 8002136:	f04f 0100 	mov.w	r1, #0
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	02a2      	lsls	r2, r4, #10
 8002140:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002144:	0299      	lsls	r1, r3, #10
 8002146:	460b      	mov	r3, r1
 8002148:	4614      	mov	r4, r2
 800214a:	4618      	mov	r0, r3
 800214c:	4621      	mov	r1, r4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f04f 0400 	mov.w	r4, #0
 8002154:	461a      	mov	r2, r3
 8002156:	4623      	mov	r3, r4
 8002158:	f7fe f8c2 	bl	80002e0 <__aeabi_uldivmod>
 800215c:	4603      	mov	r3, r0
 800215e:	460c      	mov	r4, r1
 8002160:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_GetSysClockFreq+0x158>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0c1b      	lsrs	r3, r3, #16
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	3301      	adds	r3, #1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	60bb      	str	r3, [r7, #8]
      break;
 800217c:	e002      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002180:	60bb      	str	r3, [r7, #8]
      break;
 8002182:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002184:	68bb      	ldr	r3, [r7, #8]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	00f42400 	.word	0x00f42400
 8002198:	017d7840 	.word	0x017d7840

0800219c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e01d      	b.n	80021ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7fe fe90 	bl	8000ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f000 fbc8 	bl	8002970 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <HAL_TIM_Base_Start_IT+0x50>)
 8002214:	4013      	ands	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b06      	cmp	r3, #6
 800221c:	d00b      	beq.n	8002236 <HAL_TIM_Base_Start_IT+0x42>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d007      	beq.n	8002236 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	00010007 	.word	0x00010007

08002248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e01d      	b.n	8002296 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f815 	bl	800229e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3304      	adds	r3, #4
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f000 fb72 	bl	8002970 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2201      	movs	r2, #1
 80022c4:	6839      	ldr	r1, [r7, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 feea 	bl	80030a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a17      	ldr	r2, [pc, #92]	; (8002330 <HAL_TIM_PWM_Start+0x7c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_TIM_PWM_Start+0x2c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a16      	ldr	r2, [pc, #88]	; (8002334 <HAL_TIM_PWM_Start+0x80>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d101      	bne.n	80022e4 <HAL_TIM_PWM_Start+0x30>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <HAL_TIM_PWM_Start+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <HAL_TIM_PWM_Start+0x84>)
 8002302:	4013      	ands	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d00b      	beq.n	8002324 <HAL_TIM_PWM_Start+0x70>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d007      	beq.n	8002324 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40010000 	.word	0x40010000
 8002334:	40010400 	.word	0x40010400
 8002338:	00010007 	.word	0x00010007

0800233c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d122      	bne.n	8002398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b02      	cmp	r3, #2
 800235e:	d11b      	bne.n	8002398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0202 	mvn.w	r2, #2
 8002368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fad8 	bl	8002934 <HAL_TIM_IC_CaptureCallback>
 8002384:	e005      	b.n	8002392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 faca 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fadb 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d122      	bne.n	80023ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d11b      	bne.n	80023ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 0204 	mvn.w	r2, #4
 80023bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2202      	movs	r2, #2
 80023c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 faae 	bl	8002934 <HAL_TIM_IC_CaptureCallback>
 80023d8:	e005      	b.n	80023e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 faa0 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 fab1 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d122      	bne.n	8002440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b08      	cmp	r3, #8
 8002406:	d11b      	bne.n	8002440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0208 	mvn.w	r2, #8
 8002410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2204      	movs	r2, #4
 8002416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa84 	bl	8002934 <HAL_TIM_IC_CaptureCallback>
 800242c:	e005      	b.n	800243a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fa76 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fa87 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b10      	cmp	r3, #16
 800244c:	d122      	bne.n	8002494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0310 	and.w	r3, r3, #16
 8002458:	2b10      	cmp	r3, #16
 800245a:	d11b      	bne.n	8002494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0210 	mvn.w	r2, #16
 8002464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2208      	movs	r2, #8
 800246a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 fa5a 	bl	8002934 <HAL_TIM_IC_CaptureCallback>
 8002480:	e005      	b.n	800248e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa4c 	bl	8002920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 fa5d 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d10e      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d107      	bne.n	80024c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f06f 0201 	mvn.w	r2, #1
 80024b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7fe f914 	bl	80006e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ca:	2b80      	cmp	r3, #128	; 0x80
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d107      	bne.n	80024ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 ff16 	bl	8003318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024fa:	d10e      	bne.n	800251a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b80      	cmp	r3, #128	; 0x80
 8002508:	d107      	bne.n	800251a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 ff09 	bl	800332c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d10e      	bne.n	8002546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d107      	bne.n	8002546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800253e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fa0b 	bl	800295c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d10e      	bne.n	8002572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b20      	cmp	r3, #32
 8002560:	d107      	bne.n	8002572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f06f 0220 	mvn.w	r2, #32
 800256a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 fec9 	bl	8003304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002592:	2302      	movs	r3, #2
 8002594:	e105      	b.n	80027a2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b14      	cmp	r3, #20
 80025aa:	f200 80f0 	bhi.w	800278e <HAL_TIM_PWM_ConfigChannel+0x212>
 80025ae:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80025b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b4:	08002609 	.word	0x08002609
 80025b8:	0800278f 	.word	0x0800278f
 80025bc:	0800278f 	.word	0x0800278f
 80025c0:	0800278f 	.word	0x0800278f
 80025c4:	08002649 	.word	0x08002649
 80025c8:	0800278f 	.word	0x0800278f
 80025cc:	0800278f 	.word	0x0800278f
 80025d0:	0800278f 	.word	0x0800278f
 80025d4:	0800268b 	.word	0x0800268b
 80025d8:	0800278f 	.word	0x0800278f
 80025dc:	0800278f 	.word	0x0800278f
 80025e0:	0800278f 	.word	0x0800278f
 80025e4:	080026cb 	.word	0x080026cb
 80025e8:	0800278f 	.word	0x0800278f
 80025ec:	0800278f 	.word	0x0800278f
 80025f0:	0800278f 	.word	0x0800278f
 80025f4:	0800270d 	.word	0x0800270d
 80025f8:	0800278f 	.word	0x0800278f
 80025fc:	0800278f 	.word	0x0800278f
 8002600:	0800278f 	.word	0x0800278f
 8002604:	0800274d 	.word	0x0800274d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4618      	mov	r0, r3
 8002610:	f000 fa4e 	bl	8002ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699a      	ldr	r2, [r3, #24]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0208 	orr.w	r2, r2, #8
 8002622:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0204 	bic.w	r2, r2, #4
 8002632:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6999      	ldr	r1, [r3, #24]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	619a      	str	r2, [r3, #24]
      break;
 8002646:	e0a3      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68b9      	ldr	r1, [r7, #8]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 faa0 	bl	8002b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699a      	ldr	r2, [r3, #24]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002662:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699a      	ldr	r2, [r3, #24]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6999      	ldr	r1, [r3, #24]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	021a      	lsls	r2, r3, #8
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	619a      	str	r2, [r3, #24]
      break;
 8002688:	e082      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68b9      	ldr	r1, [r7, #8]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 faf7 	bl	8002c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69da      	ldr	r2, [r3, #28]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0208 	orr.w	r2, r2, #8
 80026a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	69da      	ldr	r2, [r3, #28]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0204 	bic.w	r2, r2, #4
 80026b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69d9      	ldr	r1, [r3, #28]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]
      break;
 80026c8:	e062      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 fb4d 	bl	8002d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	69da      	ldr	r2, [r3, #28]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69d9      	ldr	r1, [r3, #28]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	021a      	lsls	r2, r3, #8
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	61da      	str	r2, [r3, #28]
      break;
 800270a:	e041      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fb84 	bl	8002e20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 0208 	orr.w	r2, r2, #8
 8002726:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0204 	bic.w	r2, r2, #4
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	430a      	orrs	r2, r1
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800274a:	e021      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68b9      	ldr	r1, [r7, #8]
 8002752:	4618      	mov	r0, r3
 8002754:	f000 fbb6 	bl	8002ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002766:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	021a      	lsls	r2, r3, #8
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800278c:	e000      	b.n	8002790 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800278e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop

080027ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_TIM_ConfigClockSource+0x18>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e0a6      	b.n	8002912 <HAL_TIM_ConfigClockSource+0x166>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4b4f      	ldr	r3, [pc, #316]	; (800291c <HAL_TIM_ConfigClockSource+0x170>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b40      	cmp	r3, #64	; 0x40
 80027fa:	d067      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0x120>
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	d80b      	bhi.n	8002818 <HAL_TIM_ConfigClockSource+0x6c>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d073      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0x140>
 8002804:	2b10      	cmp	r3, #16
 8002806:	d802      	bhi.n	800280e <HAL_TIM_ConfigClockSource+0x62>
 8002808:	2b00      	cmp	r3, #0
 800280a:	d06f      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800280c:	e078      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800280e:	2b20      	cmp	r3, #32
 8002810:	d06c      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0x140>
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d06a      	beq.n	80028ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002816:	e073      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002818:	2b70      	cmp	r3, #112	; 0x70
 800281a:	d00d      	beq.n	8002838 <HAL_TIM_ConfigClockSource+0x8c>
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d804      	bhi.n	800282a <HAL_TIM_ConfigClockSource+0x7e>
 8002820:	2b50      	cmp	r3, #80	; 0x50
 8002822:	d033      	beq.n	800288c <HAL_TIM_ConfigClockSource+0xe0>
 8002824:	2b60      	cmp	r3, #96	; 0x60
 8002826:	d041      	beq.n	80028ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002828:	e06a      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800282a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282e:	d066      	beq.n	80028fe <HAL_TIM_ConfigClockSource+0x152>
 8002830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002834:	d017      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002836:	e063      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6899      	ldr	r1, [r3, #8]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f000 fc0a 	bl	8003060 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800285a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
      break;
 8002864:	e04c      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f000 fbf3 	bl	8003060 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002888:	609a      	str	r2, [r3, #8]
      break;
 800288a:	e039      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	461a      	mov	r2, r3
 800289a:	f000 fb67 	bl	8002f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2150      	movs	r1, #80	; 0x50
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fbc0 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 80028aa:	e029      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	461a      	mov	r2, r3
 80028ba:	f000 fb86 	bl	8002fca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2160      	movs	r1, #96	; 0x60
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fbb0 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 80028ca:	e019      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6859      	ldr	r1, [r3, #4]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	461a      	mov	r2, r3
 80028da:	f000 fb47 	bl	8002f6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fba0 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 80028ea:	e009      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f000 fb97 	bl	800302a <TIM_ITRx_SetConfig>
      break;
 80028fc:	e000      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80028fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	fffeff88 	.word	0xfffeff88

08002920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a40      	ldr	r2, [pc, #256]	; (8002a84 <TIM_Base_SetConfig+0x114>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d013      	beq.n	80029b0 <TIM_Base_SetConfig+0x40>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298e:	d00f      	beq.n	80029b0 <TIM_Base_SetConfig+0x40>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a3d      	ldr	r2, [pc, #244]	; (8002a88 <TIM_Base_SetConfig+0x118>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d00b      	beq.n	80029b0 <TIM_Base_SetConfig+0x40>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a3c      	ldr	r2, [pc, #240]	; (8002a8c <TIM_Base_SetConfig+0x11c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0x40>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a3b      	ldr	r2, [pc, #236]	; (8002a90 <TIM_Base_SetConfig+0x120>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0x40>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3a      	ldr	r2, [pc, #232]	; (8002a94 <TIM_Base_SetConfig+0x124>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d108      	bne.n	80029c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2f      	ldr	r2, [pc, #188]	; (8002a84 <TIM_Base_SetConfig+0x114>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02b      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d027      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <TIM_Base_SetConfig+0x118>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d023      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2b      	ldr	r2, [pc, #172]	; (8002a8c <TIM_Base_SetConfig+0x11c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d01f      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <TIM_Base_SetConfig+0x120>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01b      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a29      	ldr	r2, [pc, #164]	; (8002a94 <TIM_Base_SetConfig+0x124>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d017      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a28      	ldr	r2, [pc, #160]	; (8002a98 <TIM_Base_SetConfig+0x128>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a27      	ldr	r2, [pc, #156]	; (8002a9c <TIM_Base_SetConfig+0x12c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00f      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <TIM_Base_SetConfig+0x130>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00b      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <TIM_Base_SetConfig+0x134>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <TIM_Base_SetConfig+0x138>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d003      	beq.n	8002a22 <TIM_Base_SetConfig+0xb2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a23      	ldr	r2, [pc, #140]	; (8002aac <TIM_Base_SetConfig+0x13c>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d108      	bne.n	8002a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	; (8002a84 <TIM_Base_SetConfig+0x114>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d003      	beq.n	8002a68 <TIM_Base_SetConfig+0xf8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a0c      	ldr	r2, [pc, #48]	; (8002a94 <TIM_Base_SetConfig+0x124>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	691a      	ldr	r2, [r3, #16]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	615a      	str	r2, [r3, #20]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40000400 	.word	0x40000400
 8002a8c:	40000800 	.word	0x40000800
 8002a90:	40000c00 	.word	0x40000c00
 8002a94:	40010400 	.word	0x40010400
 8002a98:	40014000 	.word	0x40014000
 8002a9c:	40014400 	.word	0x40014400
 8002aa0:	40014800 	.word	0x40014800
 8002aa4:	40001800 	.word	0x40001800
 8002aa8:	40001c00 	.word	0x40001c00
 8002aac:	40002000 	.word	0x40002000

08002ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0201 	bic.w	r2, r3, #1
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4b2b      	ldr	r3, [pc, #172]	; (8002b88 <TIM_OC1_SetConfig+0xd8>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0303 	bic.w	r3, r3, #3
 8002ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f023 0302 	bic.w	r3, r3, #2
 8002af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a21      	ldr	r2, [pc, #132]	; (8002b8c <TIM_OC1_SetConfig+0xdc>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <TIM_OC1_SetConfig+0x64>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <TIM_OC1_SetConfig+0xe0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d10c      	bne.n	8002b2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f023 0308 	bic.w	r3, r3, #8
 8002b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f023 0304 	bic.w	r3, r3, #4
 8002b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a16      	ldr	r2, [pc, #88]	; (8002b8c <TIM_OC1_SetConfig+0xdc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d003      	beq.n	8002b3e <TIM_OC1_SetConfig+0x8e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <TIM_OC1_SetConfig+0xe0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d111      	bne.n	8002b62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	371c      	adds	r7, #28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	fffeff8f 	.word	0xfffeff8f
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40010400 	.word	0x40010400

08002b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f023 0210 	bic.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	699b      	ldr	r3, [r3, #24]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <TIM_OC2_SetConfig+0xe4>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	f023 0320 	bic.w	r3, r3, #32
 8002bde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <TIM_OC2_SetConfig+0xe8>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d003      	beq.n	8002bfc <TIM_OC2_SetConfig+0x68>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <TIM_OC2_SetConfig+0xec>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10d      	bne.n	8002c18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a18      	ldr	r2, [pc, #96]	; (8002c7c <TIM_OC2_SetConfig+0xe8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_OC2_SetConfig+0x94>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <TIM_OC2_SetConfig+0xec>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d113      	bne.n	8002c50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	621a      	str	r2, [r3, #32]
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	feff8fff 	.word	0xfeff8fff
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40010400 	.word	0x40010400

08002c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b087      	sub	sp, #28
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <TIM_OC3_SetConfig+0xe0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <TIM_OC3_SetConfig+0xe4>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d003      	beq.n	8002cea <TIM_OC3_SetConfig+0x66>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <TIM_OC3_SetConfig+0xe8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d10d      	bne.n	8002d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <TIM_OC3_SetConfig+0xe4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d003      	beq.n	8002d16 <TIM_OC3_SetConfig+0x92>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <TIM_OC3_SetConfig+0xe8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d113      	bne.n	8002d3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	fffeff8f 	.word	0xfffeff8f
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40010400 	.word	0x40010400

08002d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <TIM_OC4_SetConfig+0xa4>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	031b      	lsls	r3, r3, #12
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a13      	ldr	r2, [pc, #76]	; (8002e18 <TIM_OC4_SetConfig+0xa8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_OC4_SetConfig+0x68>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <TIM_OC4_SetConfig+0xac>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d109      	bne.n	8002dec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	019b      	lsls	r3, r3, #6
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	feff8fff 	.word	0xfeff8fff
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40010400 	.word	0x40010400

08002e20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <TIM_OC5_SetConfig+0x98>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002e60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	041b      	lsls	r3, r3, #16
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <TIM_OC5_SetConfig+0x9c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_OC5_SetConfig+0x5e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <TIM_OC5_SetConfig+0xa0>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d109      	bne.n	8002e92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	621a      	str	r2, [r3, #32]
}
 8002eac:	bf00      	nop
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	fffeff8f 	.word	0xfffeff8f
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40010400 	.word	0x40010400

08002ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <TIM_OC6_SetConfig+0x9c>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	021b      	lsls	r3, r3, #8
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	051b      	lsls	r3, r3, #20
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <TIM_OC6_SetConfig+0xa0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_OC6_SetConfig+0x60>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a12      	ldr	r2, [pc, #72]	; (8002f68 <TIM_OC6_SetConfig+0xa4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d109      	bne.n	8002f38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	029b      	lsls	r3, r3, #10
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	621a      	str	r2, [r3, #32]
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	feff8fff 	.word	0xfeff8fff
 8002f64:	40010000 	.word	0x40010000
 8002f68:	40010400 	.word	0x40010400

08002f6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0201 	bic.w	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	f023 030a 	bic.w	r3, r3, #10
 8002fa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	f023 0210 	bic.w	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ff4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	031b      	lsls	r3, r3, #12
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003006:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	011b      	lsls	r3, r3, #4
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	4313      	orrs	r3, r2
 8003010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	621a      	str	r2, [r3, #32]
}
 800301e:	bf00      	nop
 8003020:	371c      	adds	r7, #28
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800302a:	b480      	push	{r7}
 800302c:	b085      	sub	sp, #20
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003040:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	f043 0307 	orr.w	r3, r3, #7
 800304c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	609a      	str	r2, [r3, #8]
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003060:	b480      	push	{r7}
 8003062:	b087      	sub	sp, #28
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800307a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	021a      	lsls	r2, r3, #8
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	431a      	orrs	r2, r3
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	4313      	orrs	r3, r2
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	609a      	str	r2, [r3, #8]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b087      	sub	sp, #28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	401a      	ands	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	431a      	orrs	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	621a      	str	r2, [r3, #32]
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003100:	2302      	movs	r3, #2
 8003102:	e06d      	b.n	80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a30      	ldr	r2, [pc, #192]	; (80031ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a2f      	ldr	r2, [pc, #188]	; (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d108      	bne.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800313e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003150:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d022      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d01d      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a1d      	ldr	r2, [pc, #116]	; (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d018      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00e      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a15      	ldr	r2, [pc, #84]	; (80031f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d009      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a16      	ldr	r2, [pc, #88]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d004      	beq.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a15      	ldr	r2, [pc, #84]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d10c      	bne.n	80031ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40014000 	.word	0x40014000
 8003204:	40001800 	.word	0x40001800

08003208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e065      	b.n	80032f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	4313      	orrs	r3, r2
 8003238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	4313      	orrs	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	041b      	lsls	r3, r3, #16
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a14      	ldr	r2, [pc, #80]	; (8003300 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d115      	bne.n	80032de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	051b      	lsls	r3, r3, #20
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr
 80032fc:	40010000 	.word	0x40010000
 8003300:	40010400 	.word	0x40010400

08003304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <__errno>:
 8003340:	4b01      	ldr	r3, [pc, #4]	; (8003348 <__errno+0x8>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2000000c 	.word	0x2000000c

0800334c <__libc_init_array>:
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4e0d      	ldr	r6, [pc, #52]	; (8003384 <__libc_init_array+0x38>)
 8003350:	4c0d      	ldr	r4, [pc, #52]	; (8003388 <__libc_init_array+0x3c>)
 8003352:	1ba4      	subs	r4, r4, r6
 8003354:	10a4      	asrs	r4, r4, #2
 8003356:	2500      	movs	r5, #0
 8003358:	42a5      	cmp	r5, r4
 800335a:	d109      	bne.n	8003370 <__libc_init_array+0x24>
 800335c:	4e0b      	ldr	r6, [pc, #44]	; (800338c <__libc_init_array+0x40>)
 800335e:	4c0c      	ldr	r4, [pc, #48]	; (8003390 <__libc_init_array+0x44>)
 8003360:	f000 ff68 	bl	8004234 <_init>
 8003364:	1ba4      	subs	r4, r4, r6
 8003366:	10a4      	asrs	r4, r4, #2
 8003368:	2500      	movs	r5, #0
 800336a:	42a5      	cmp	r5, r4
 800336c:	d105      	bne.n	800337a <__libc_init_array+0x2e>
 800336e:	bd70      	pop	{r4, r5, r6, pc}
 8003370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003374:	4798      	blx	r3
 8003376:	3501      	adds	r5, #1
 8003378:	e7ee      	b.n	8003358 <__libc_init_array+0xc>
 800337a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800337e:	4798      	blx	r3
 8003380:	3501      	adds	r5, #1
 8003382:	e7f2      	b.n	800336a <__libc_init_array+0x1e>
 8003384:	0800444c 	.word	0x0800444c
 8003388:	0800444c 	.word	0x0800444c
 800338c:	0800444c 	.word	0x0800444c
 8003390:	08004450 	.word	0x08004450

08003394 <memset>:
 8003394:	4402      	add	r2, r0
 8003396:	4603      	mov	r3, r0
 8003398:	4293      	cmp	r3, r2
 800339a:	d100      	bne.n	800339e <memset+0xa>
 800339c:	4770      	bx	lr
 800339e:	f803 1b01 	strb.w	r1, [r3], #1
 80033a2:	e7f9      	b.n	8003398 <memset+0x4>

080033a4 <iprintf>:
 80033a4:	b40f      	push	{r0, r1, r2, r3}
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <iprintf+0x2c>)
 80033a8:	b513      	push	{r0, r1, r4, lr}
 80033aa:	681c      	ldr	r4, [r3, #0]
 80033ac:	b124      	cbz	r4, 80033b8 <iprintf+0x14>
 80033ae:	69a3      	ldr	r3, [r4, #24]
 80033b0:	b913      	cbnz	r3, 80033b8 <iprintf+0x14>
 80033b2:	4620      	mov	r0, r4
 80033b4:	f000 fa22 	bl	80037fc <__sinit>
 80033b8:	ab05      	add	r3, sp, #20
 80033ba:	9a04      	ldr	r2, [sp, #16]
 80033bc:	68a1      	ldr	r1, [r4, #8]
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	4620      	mov	r0, r4
 80033c2:	f000 fbdb 	bl	8003b7c <_vfiprintf_r>
 80033c6:	b002      	add	sp, #8
 80033c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033cc:	b004      	add	sp, #16
 80033ce:	4770      	bx	lr
 80033d0:	2000000c 	.word	0x2000000c

080033d4 <_puts_r>:
 80033d4:	b570      	push	{r4, r5, r6, lr}
 80033d6:	460e      	mov	r6, r1
 80033d8:	4605      	mov	r5, r0
 80033da:	b118      	cbz	r0, 80033e4 <_puts_r+0x10>
 80033dc:	6983      	ldr	r3, [r0, #24]
 80033de:	b90b      	cbnz	r3, 80033e4 <_puts_r+0x10>
 80033e0:	f000 fa0c 	bl	80037fc <__sinit>
 80033e4:	69ab      	ldr	r3, [r5, #24]
 80033e6:	68ac      	ldr	r4, [r5, #8]
 80033e8:	b913      	cbnz	r3, 80033f0 <_puts_r+0x1c>
 80033ea:	4628      	mov	r0, r5
 80033ec:	f000 fa06 	bl	80037fc <__sinit>
 80033f0:	4b23      	ldr	r3, [pc, #140]	; (8003480 <_puts_r+0xac>)
 80033f2:	429c      	cmp	r4, r3
 80033f4:	d117      	bne.n	8003426 <_puts_r+0x52>
 80033f6:	686c      	ldr	r4, [r5, #4]
 80033f8:	89a3      	ldrh	r3, [r4, #12]
 80033fa:	071b      	lsls	r3, r3, #28
 80033fc:	d51d      	bpl.n	800343a <_puts_r+0x66>
 80033fe:	6923      	ldr	r3, [r4, #16]
 8003400:	b1db      	cbz	r3, 800343a <_puts_r+0x66>
 8003402:	3e01      	subs	r6, #1
 8003404:	68a3      	ldr	r3, [r4, #8]
 8003406:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800340a:	3b01      	subs	r3, #1
 800340c:	60a3      	str	r3, [r4, #8]
 800340e:	b9e9      	cbnz	r1, 800344c <_puts_r+0x78>
 8003410:	2b00      	cmp	r3, #0
 8003412:	da2e      	bge.n	8003472 <_puts_r+0x9e>
 8003414:	4622      	mov	r2, r4
 8003416:	210a      	movs	r1, #10
 8003418:	4628      	mov	r0, r5
 800341a:	f000 f83f 	bl	800349c <__swbuf_r>
 800341e:	3001      	adds	r0, #1
 8003420:	d011      	beq.n	8003446 <_puts_r+0x72>
 8003422:	200a      	movs	r0, #10
 8003424:	e011      	b.n	800344a <_puts_r+0x76>
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <_puts_r+0xb0>)
 8003428:	429c      	cmp	r4, r3
 800342a:	d101      	bne.n	8003430 <_puts_r+0x5c>
 800342c:	68ac      	ldr	r4, [r5, #8]
 800342e:	e7e3      	b.n	80033f8 <_puts_r+0x24>
 8003430:	4b15      	ldr	r3, [pc, #84]	; (8003488 <_puts_r+0xb4>)
 8003432:	429c      	cmp	r4, r3
 8003434:	bf08      	it	eq
 8003436:	68ec      	ldreq	r4, [r5, #12]
 8003438:	e7de      	b.n	80033f8 <_puts_r+0x24>
 800343a:	4621      	mov	r1, r4
 800343c:	4628      	mov	r0, r5
 800343e:	f000 f87f 	bl	8003540 <__swsetup_r>
 8003442:	2800      	cmp	r0, #0
 8003444:	d0dd      	beq.n	8003402 <_puts_r+0x2e>
 8003446:	f04f 30ff 	mov.w	r0, #4294967295
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	2b00      	cmp	r3, #0
 800344e:	da04      	bge.n	800345a <_puts_r+0x86>
 8003450:	69a2      	ldr	r2, [r4, #24]
 8003452:	429a      	cmp	r2, r3
 8003454:	dc06      	bgt.n	8003464 <_puts_r+0x90>
 8003456:	290a      	cmp	r1, #10
 8003458:	d004      	beq.n	8003464 <_puts_r+0x90>
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	6022      	str	r2, [r4, #0]
 8003460:	7019      	strb	r1, [r3, #0]
 8003462:	e7cf      	b.n	8003404 <_puts_r+0x30>
 8003464:	4622      	mov	r2, r4
 8003466:	4628      	mov	r0, r5
 8003468:	f000 f818 	bl	800349c <__swbuf_r>
 800346c:	3001      	adds	r0, #1
 800346e:	d1c9      	bne.n	8003404 <_puts_r+0x30>
 8003470:	e7e9      	b.n	8003446 <_puts_r+0x72>
 8003472:	6823      	ldr	r3, [r4, #0]
 8003474:	200a      	movs	r0, #10
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	6022      	str	r2, [r4, #0]
 800347a:	7018      	strb	r0, [r3, #0]
 800347c:	e7e5      	b.n	800344a <_puts_r+0x76>
 800347e:	bf00      	nop
 8003480:	080043d0 	.word	0x080043d0
 8003484:	080043f0 	.word	0x080043f0
 8003488:	080043b0 	.word	0x080043b0

0800348c <puts>:
 800348c:	4b02      	ldr	r3, [pc, #8]	; (8003498 <puts+0xc>)
 800348e:	4601      	mov	r1, r0
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	f7ff bf9f 	b.w	80033d4 <_puts_r>
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c

0800349c <__swbuf_r>:
 800349c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349e:	460e      	mov	r6, r1
 80034a0:	4614      	mov	r4, r2
 80034a2:	4605      	mov	r5, r0
 80034a4:	b118      	cbz	r0, 80034ae <__swbuf_r+0x12>
 80034a6:	6983      	ldr	r3, [r0, #24]
 80034a8:	b90b      	cbnz	r3, 80034ae <__swbuf_r+0x12>
 80034aa:	f000 f9a7 	bl	80037fc <__sinit>
 80034ae:	4b21      	ldr	r3, [pc, #132]	; (8003534 <__swbuf_r+0x98>)
 80034b0:	429c      	cmp	r4, r3
 80034b2:	d12a      	bne.n	800350a <__swbuf_r+0x6e>
 80034b4:	686c      	ldr	r4, [r5, #4]
 80034b6:	69a3      	ldr	r3, [r4, #24]
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	89a3      	ldrh	r3, [r4, #12]
 80034bc:	071a      	lsls	r2, r3, #28
 80034be:	d52e      	bpl.n	800351e <__swbuf_r+0x82>
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	b363      	cbz	r3, 800351e <__swbuf_r+0x82>
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	6820      	ldr	r0, [r4, #0]
 80034c8:	1ac0      	subs	r0, r0, r3
 80034ca:	6963      	ldr	r3, [r4, #20]
 80034cc:	b2f6      	uxtb	r6, r6
 80034ce:	4283      	cmp	r3, r0
 80034d0:	4637      	mov	r7, r6
 80034d2:	dc04      	bgt.n	80034de <__swbuf_r+0x42>
 80034d4:	4621      	mov	r1, r4
 80034d6:	4628      	mov	r0, r5
 80034d8:	f000 f926 	bl	8003728 <_fflush_r>
 80034dc:	bb28      	cbnz	r0, 800352a <__swbuf_r+0x8e>
 80034de:	68a3      	ldr	r3, [r4, #8]
 80034e0:	3b01      	subs	r3, #1
 80034e2:	60a3      	str	r3, [r4, #8]
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	6022      	str	r2, [r4, #0]
 80034ea:	701e      	strb	r6, [r3, #0]
 80034ec:	6963      	ldr	r3, [r4, #20]
 80034ee:	3001      	adds	r0, #1
 80034f0:	4283      	cmp	r3, r0
 80034f2:	d004      	beq.n	80034fe <__swbuf_r+0x62>
 80034f4:	89a3      	ldrh	r3, [r4, #12]
 80034f6:	07db      	lsls	r3, r3, #31
 80034f8:	d519      	bpl.n	800352e <__swbuf_r+0x92>
 80034fa:	2e0a      	cmp	r6, #10
 80034fc:	d117      	bne.n	800352e <__swbuf_r+0x92>
 80034fe:	4621      	mov	r1, r4
 8003500:	4628      	mov	r0, r5
 8003502:	f000 f911 	bl	8003728 <_fflush_r>
 8003506:	b190      	cbz	r0, 800352e <__swbuf_r+0x92>
 8003508:	e00f      	b.n	800352a <__swbuf_r+0x8e>
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <__swbuf_r+0x9c>)
 800350c:	429c      	cmp	r4, r3
 800350e:	d101      	bne.n	8003514 <__swbuf_r+0x78>
 8003510:	68ac      	ldr	r4, [r5, #8]
 8003512:	e7d0      	b.n	80034b6 <__swbuf_r+0x1a>
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <__swbuf_r+0xa0>)
 8003516:	429c      	cmp	r4, r3
 8003518:	bf08      	it	eq
 800351a:	68ec      	ldreq	r4, [r5, #12]
 800351c:	e7cb      	b.n	80034b6 <__swbuf_r+0x1a>
 800351e:	4621      	mov	r1, r4
 8003520:	4628      	mov	r0, r5
 8003522:	f000 f80d 	bl	8003540 <__swsetup_r>
 8003526:	2800      	cmp	r0, #0
 8003528:	d0cc      	beq.n	80034c4 <__swbuf_r+0x28>
 800352a:	f04f 37ff 	mov.w	r7, #4294967295
 800352e:	4638      	mov	r0, r7
 8003530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003532:	bf00      	nop
 8003534:	080043d0 	.word	0x080043d0
 8003538:	080043f0 	.word	0x080043f0
 800353c:	080043b0 	.word	0x080043b0

08003540 <__swsetup_r>:
 8003540:	4b32      	ldr	r3, [pc, #200]	; (800360c <__swsetup_r+0xcc>)
 8003542:	b570      	push	{r4, r5, r6, lr}
 8003544:	681d      	ldr	r5, [r3, #0]
 8003546:	4606      	mov	r6, r0
 8003548:	460c      	mov	r4, r1
 800354a:	b125      	cbz	r5, 8003556 <__swsetup_r+0x16>
 800354c:	69ab      	ldr	r3, [r5, #24]
 800354e:	b913      	cbnz	r3, 8003556 <__swsetup_r+0x16>
 8003550:	4628      	mov	r0, r5
 8003552:	f000 f953 	bl	80037fc <__sinit>
 8003556:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <__swsetup_r+0xd0>)
 8003558:	429c      	cmp	r4, r3
 800355a:	d10f      	bne.n	800357c <__swsetup_r+0x3c>
 800355c:	686c      	ldr	r4, [r5, #4]
 800355e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003562:	b29a      	uxth	r2, r3
 8003564:	0715      	lsls	r5, r2, #28
 8003566:	d42c      	bmi.n	80035c2 <__swsetup_r+0x82>
 8003568:	06d0      	lsls	r0, r2, #27
 800356a:	d411      	bmi.n	8003590 <__swsetup_r+0x50>
 800356c:	2209      	movs	r2, #9
 800356e:	6032      	str	r2, [r6, #0]
 8003570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003574:	81a3      	strh	r3, [r4, #12]
 8003576:	f04f 30ff 	mov.w	r0, #4294967295
 800357a:	e03e      	b.n	80035fa <__swsetup_r+0xba>
 800357c:	4b25      	ldr	r3, [pc, #148]	; (8003614 <__swsetup_r+0xd4>)
 800357e:	429c      	cmp	r4, r3
 8003580:	d101      	bne.n	8003586 <__swsetup_r+0x46>
 8003582:	68ac      	ldr	r4, [r5, #8]
 8003584:	e7eb      	b.n	800355e <__swsetup_r+0x1e>
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <__swsetup_r+0xd8>)
 8003588:	429c      	cmp	r4, r3
 800358a:	bf08      	it	eq
 800358c:	68ec      	ldreq	r4, [r5, #12]
 800358e:	e7e6      	b.n	800355e <__swsetup_r+0x1e>
 8003590:	0751      	lsls	r1, r2, #29
 8003592:	d512      	bpl.n	80035ba <__swsetup_r+0x7a>
 8003594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003596:	b141      	cbz	r1, 80035aa <__swsetup_r+0x6a>
 8003598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800359c:	4299      	cmp	r1, r3
 800359e:	d002      	beq.n	80035a6 <__swsetup_r+0x66>
 80035a0:	4630      	mov	r0, r6
 80035a2:	f000 fa19 	bl	80039d8 <_free_r>
 80035a6:	2300      	movs	r3, #0
 80035a8:	6363      	str	r3, [r4, #52]	; 0x34
 80035aa:	89a3      	ldrh	r3, [r4, #12]
 80035ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	2300      	movs	r3, #0
 80035b4:	6063      	str	r3, [r4, #4]
 80035b6:	6923      	ldr	r3, [r4, #16]
 80035b8:	6023      	str	r3, [r4, #0]
 80035ba:	89a3      	ldrh	r3, [r4, #12]
 80035bc:	f043 0308 	orr.w	r3, r3, #8
 80035c0:	81a3      	strh	r3, [r4, #12]
 80035c2:	6923      	ldr	r3, [r4, #16]
 80035c4:	b94b      	cbnz	r3, 80035da <__swsetup_r+0x9a>
 80035c6:	89a3      	ldrh	r3, [r4, #12]
 80035c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d0:	d003      	beq.n	80035da <__swsetup_r+0x9a>
 80035d2:	4621      	mov	r1, r4
 80035d4:	4630      	mov	r0, r6
 80035d6:	f000 f9bf 	bl	8003958 <__smakebuf_r>
 80035da:	89a2      	ldrh	r2, [r4, #12]
 80035dc:	f012 0301 	ands.w	r3, r2, #1
 80035e0:	d00c      	beq.n	80035fc <__swsetup_r+0xbc>
 80035e2:	2300      	movs	r3, #0
 80035e4:	60a3      	str	r3, [r4, #8]
 80035e6:	6963      	ldr	r3, [r4, #20]
 80035e8:	425b      	negs	r3, r3
 80035ea:	61a3      	str	r3, [r4, #24]
 80035ec:	6923      	ldr	r3, [r4, #16]
 80035ee:	b953      	cbnz	r3, 8003606 <__swsetup_r+0xc6>
 80035f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80035f4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80035f8:	d1ba      	bne.n	8003570 <__swsetup_r+0x30>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	0792      	lsls	r2, r2, #30
 80035fe:	bf58      	it	pl
 8003600:	6963      	ldrpl	r3, [r4, #20]
 8003602:	60a3      	str	r3, [r4, #8]
 8003604:	e7f2      	b.n	80035ec <__swsetup_r+0xac>
 8003606:	2000      	movs	r0, #0
 8003608:	e7f7      	b.n	80035fa <__swsetup_r+0xba>
 800360a:	bf00      	nop
 800360c:	2000000c 	.word	0x2000000c
 8003610:	080043d0 	.word	0x080043d0
 8003614:	080043f0 	.word	0x080043f0
 8003618:	080043b0 	.word	0x080043b0

0800361c <__sflush_r>:
 800361c:	898a      	ldrh	r2, [r1, #12]
 800361e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003622:	4605      	mov	r5, r0
 8003624:	0710      	lsls	r0, r2, #28
 8003626:	460c      	mov	r4, r1
 8003628:	d458      	bmi.n	80036dc <__sflush_r+0xc0>
 800362a:	684b      	ldr	r3, [r1, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	dc05      	bgt.n	800363c <__sflush_r+0x20>
 8003630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	dc02      	bgt.n	800363c <__sflush_r+0x20>
 8003636:	2000      	movs	r0, #0
 8003638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800363e:	2e00      	cmp	r6, #0
 8003640:	d0f9      	beq.n	8003636 <__sflush_r+0x1a>
 8003642:	2300      	movs	r3, #0
 8003644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003648:	682f      	ldr	r7, [r5, #0]
 800364a:	6a21      	ldr	r1, [r4, #32]
 800364c:	602b      	str	r3, [r5, #0]
 800364e:	d032      	beq.n	80036b6 <__sflush_r+0x9a>
 8003650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003652:	89a3      	ldrh	r3, [r4, #12]
 8003654:	075a      	lsls	r2, r3, #29
 8003656:	d505      	bpl.n	8003664 <__sflush_r+0x48>
 8003658:	6863      	ldr	r3, [r4, #4]
 800365a:	1ac0      	subs	r0, r0, r3
 800365c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800365e:	b10b      	cbz	r3, 8003664 <__sflush_r+0x48>
 8003660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003662:	1ac0      	subs	r0, r0, r3
 8003664:	2300      	movs	r3, #0
 8003666:	4602      	mov	r2, r0
 8003668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800366a:	6a21      	ldr	r1, [r4, #32]
 800366c:	4628      	mov	r0, r5
 800366e:	47b0      	blx	r6
 8003670:	1c43      	adds	r3, r0, #1
 8003672:	89a3      	ldrh	r3, [r4, #12]
 8003674:	d106      	bne.n	8003684 <__sflush_r+0x68>
 8003676:	6829      	ldr	r1, [r5, #0]
 8003678:	291d      	cmp	r1, #29
 800367a:	d848      	bhi.n	800370e <__sflush_r+0xf2>
 800367c:	4a29      	ldr	r2, [pc, #164]	; (8003724 <__sflush_r+0x108>)
 800367e:	40ca      	lsrs	r2, r1
 8003680:	07d6      	lsls	r6, r2, #31
 8003682:	d544      	bpl.n	800370e <__sflush_r+0xf2>
 8003684:	2200      	movs	r2, #0
 8003686:	6062      	str	r2, [r4, #4]
 8003688:	04d9      	lsls	r1, r3, #19
 800368a:	6922      	ldr	r2, [r4, #16]
 800368c:	6022      	str	r2, [r4, #0]
 800368e:	d504      	bpl.n	800369a <__sflush_r+0x7e>
 8003690:	1c42      	adds	r2, r0, #1
 8003692:	d101      	bne.n	8003698 <__sflush_r+0x7c>
 8003694:	682b      	ldr	r3, [r5, #0]
 8003696:	b903      	cbnz	r3, 800369a <__sflush_r+0x7e>
 8003698:	6560      	str	r0, [r4, #84]	; 0x54
 800369a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800369c:	602f      	str	r7, [r5, #0]
 800369e:	2900      	cmp	r1, #0
 80036a0:	d0c9      	beq.n	8003636 <__sflush_r+0x1a>
 80036a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036a6:	4299      	cmp	r1, r3
 80036a8:	d002      	beq.n	80036b0 <__sflush_r+0x94>
 80036aa:	4628      	mov	r0, r5
 80036ac:	f000 f994 	bl	80039d8 <_free_r>
 80036b0:	2000      	movs	r0, #0
 80036b2:	6360      	str	r0, [r4, #52]	; 0x34
 80036b4:	e7c0      	b.n	8003638 <__sflush_r+0x1c>
 80036b6:	2301      	movs	r3, #1
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b0      	blx	r6
 80036bc:	1c41      	adds	r1, r0, #1
 80036be:	d1c8      	bne.n	8003652 <__sflush_r+0x36>
 80036c0:	682b      	ldr	r3, [r5, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0c5      	beq.n	8003652 <__sflush_r+0x36>
 80036c6:	2b1d      	cmp	r3, #29
 80036c8:	d001      	beq.n	80036ce <__sflush_r+0xb2>
 80036ca:	2b16      	cmp	r3, #22
 80036cc:	d101      	bne.n	80036d2 <__sflush_r+0xb6>
 80036ce:	602f      	str	r7, [r5, #0]
 80036d0:	e7b1      	b.n	8003636 <__sflush_r+0x1a>
 80036d2:	89a3      	ldrh	r3, [r4, #12]
 80036d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036d8:	81a3      	strh	r3, [r4, #12]
 80036da:	e7ad      	b.n	8003638 <__sflush_r+0x1c>
 80036dc:	690f      	ldr	r7, [r1, #16]
 80036de:	2f00      	cmp	r7, #0
 80036e0:	d0a9      	beq.n	8003636 <__sflush_r+0x1a>
 80036e2:	0793      	lsls	r3, r2, #30
 80036e4:	680e      	ldr	r6, [r1, #0]
 80036e6:	bf08      	it	eq
 80036e8:	694b      	ldreq	r3, [r1, #20]
 80036ea:	600f      	str	r7, [r1, #0]
 80036ec:	bf18      	it	ne
 80036ee:	2300      	movne	r3, #0
 80036f0:	eba6 0807 	sub.w	r8, r6, r7
 80036f4:	608b      	str	r3, [r1, #8]
 80036f6:	f1b8 0f00 	cmp.w	r8, #0
 80036fa:	dd9c      	ble.n	8003636 <__sflush_r+0x1a>
 80036fc:	4643      	mov	r3, r8
 80036fe:	463a      	mov	r2, r7
 8003700:	6a21      	ldr	r1, [r4, #32]
 8003702:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003704:	4628      	mov	r0, r5
 8003706:	47b0      	blx	r6
 8003708:	2800      	cmp	r0, #0
 800370a:	dc06      	bgt.n	800371a <__sflush_r+0xfe>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003712:	81a3      	strh	r3, [r4, #12]
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	e78e      	b.n	8003638 <__sflush_r+0x1c>
 800371a:	4407      	add	r7, r0
 800371c:	eba8 0800 	sub.w	r8, r8, r0
 8003720:	e7e9      	b.n	80036f6 <__sflush_r+0xda>
 8003722:	bf00      	nop
 8003724:	20400001 	.word	0x20400001

08003728 <_fflush_r>:
 8003728:	b538      	push	{r3, r4, r5, lr}
 800372a:	690b      	ldr	r3, [r1, #16]
 800372c:	4605      	mov	r5, r0
 800372e:	460c      	mov	r4, r1
 8003730:	b1db      	cbz	r3, 800376a <_fflush_r+0x42>
 8003732:	b118      	cbz	r0, 800373c <_fflush_r+0x14>
 8003734:	6983      	ldr	r3, [r0, #24]
 8003736:	b90b      	cbnz	r3, 800373c <_fflush_r+0x14>
 8003738:	f000 f860 	bl	80037fc <__sinit>
 800373c:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <_fflush_r+0x48>)
 800373e:	429c      	cmp	r4, r3
 8003740:	d109      	bne.n	8003756 <_fflush_r+0x2e>
 8003742:	686c      	ldr	r4, [r5, #4]
 8003744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003748:	b17b      	cbz	r3, 800376a <_fflush_r+0x42>
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003752:	f7ff bf63 	b.w	800361c <__sflush_r>
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_fflush_r+0x4c>)
 8003758:	429c      	cmp	r4, r3
 800375a:	d101      	bne.n	8003760 <_fflush_r+0x38>
 800375c:	68ac      	ldr	r4, [r5, #8]
 800375e:	e7f1      	b.n	8003744 <_fflush_r+0x1c>
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <_fflush_r+0x50>)
 8003762:	429c      	cmp	r4, r3
 8003764:	bf08      	it	eq
 8003766:	68ec      	ldreq	r4, [r5, #12]
 8003768:	e7ec      	b.n	8003744 <_fflush_r+0x1c>
 800376a:	2000      	movs	r0, #0
 800376c:	bd38      	pop	{r3, r4, r5, pc}
 800376e:	bf00      	nop
 8003770:	080043d0 	.word	0x080043d0
 8003774:	080043f0 	.word	0x080043f0
 8003778:	080043b0 	.word	0x080043b0

0800377c <std>:
 800377c:	2300      	movs	r3, #0
 800377e:	b510      	push	{r4, lr}
 8003780:	4604      	mov	r4, r0
 8003782:	e9c0 3300 	strd	r3, r3, [r0]
 8003786:	6083      	str	r3, [r0, #8]
 8003788:	8181      	strh	r1, [r0, #12]
 800378a:	6643      	str	r3, [r0, #100]	; 0x64
 800378c:	81c2      	strh	r2, [r0, #14]
 800378e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003792:	6183      	str	r3, [r0, #24]
 8003794:	4619      	mov	r1, r3
 8003796:	2208      	movs	r2, #8
 8003798:	305c      	adds	r0, #92	; 0x5c
 800379a:	f7ff fdfb 	bl	8003394 <memset>
 800379e:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <std+0x38>)
 80037a0:	6263      	str	r3, [r4, #36]	; 0x24
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <std+0x3c>)
 80037a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x40>)
 80037a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037aa:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <std+0x44>)
 80037ac:	6224      	str	r4, [r4, #32]
 80037ae:	6323      	str	r3, [r4, #48]	; 0x30
 80037b0:	bd10      	pop	{r4, pc}
 80037b2:	bf00      	nop
 80037b4:	080040d9 	.word	0x080040d9
 80037b8:	080040fb 	.word	0x080040fb
 80037bc:	08004133 	.word	0x08004133
 80037c0:	08004157 	.word	0x08004157

080037c4 <_cleanup_r>:
 80037c4:	4901      	ldr	r1, [pc, #4]	; (80037cc <_cleanup_r+0x8>)
 80037c6:	f000 b885 	b.w	80038d4 <_fwalk_reent>
 80037ca:	bf00      	nop
 80037cc:	08003729 	.word	0x08003729

080037d0 <__sfmoreglue>:
 80037d0:	b570      	push	{r4, r5, r6, lr}
 80037d2:	1e4a      	subs	r2, r1, #1
 80037d4:	2568      	movs	r5, #104	; 0x68
 80037d6:	4355      	muls	r5, r2
 80037d8:	460e      	mov	r6, r1
 80037da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037de:	f000 f949 	bl	8003a74 <_malloc_r>
 80037e2:	4604      	mov	r4, r0
 80037e4:	b140      	cbz	r0, 80037f8 <__sfmoreglue+0x28>
 80037e6:	2100      	movs	r1, #0
 80037e8:	e9c0 1600 	strd	r1, r6, [r0]
 80037ec:	300c      	adds	r0, #12
 80037ee:	60a0      	str	r0, [r4, #8]
 80037f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037f4:	f7ff fdce 	bl	8003394 <memset>
 80037f8:	4620      	mov	r0, r4
 80037fa:	bd70      	pop	{r4, r5, r6, pc}

080037fc <__sinit>:
 80037fc:	6983      	ldr	r3, [r0, #24]
 80037fe:	b510      	push	{r4, lr}
 8003800:	4604      	mov	r4, r0
 8003802:	bb33      	cbnz	r3, 8003852 <__sinit+0x56>
 8003804:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003808:	6503      	str	r3, [r0, #80]	; 0x50
 800380a:	4b12      	ldr	r3, [pc, #72]	; (8003854 <__sinit+0x58>)
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <__sinit+0x5c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6282      	str	r2, [r0, #40]	; 0x28
 8003812:	4298      	cmp	r0, r3
 8003814:	bf04      	itt	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	6183      	streq	r3, [r0, #24]
 800381a:	f000 f81f 	bl	800385c <__sfp>
 800381e:	6060      	str	r0, [r4, #4]
 8003820:	4620      	mov	r0, r4
 8003822:	f000 f81b 	bl	800385c <__sfp>
 8003826:	60a0      	str	r0, [r4, #8]
 8003828:	4620      	mov	r0, r4
 800382a:	f000 f817 	bl	800385c <__sfp>
 800382e:	2200      	movs	r2, #0
 8003830:	60e0      	str	r0, [r4, #12]
 8003832:	2104      	movs	r1, #4
 8003834:	6860      	ldr	r0, [r4, #4]
 8003836:	f7ff ffa1 	bl	800377c <std>
 800383a:	2201      	movs	r2, #1
 800383c:	2109      	movs	r1, #9
 800383e:	68a0      	ldr	r0, [r4, #8]
 8003840:	f7ff ff9c 	bl	800377c <std>
 8003844:	2202      	movs	r2, #2
 8003846:	2112      	movs	r1, #18
 8003848:	68e0      	ldr	r0, [r4, #12]
 800384a:	f7ff ff97 	bl	800377c <std>
 800384e:	2301      	movs	r3, #1
 8003850:	61a3      	str	r3, [r4, #24]
 8003852:	bd10      	pop	{r4, pc}
 8003854:	080043ac 	.word	0x080043ac
 8003858:	080037c5 	.word	0x080037c5

0800385c <__sfp>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <__sfp+0x70>)
 8003860:	681e      	ldr	r6, [r3, #0]
 8003862:	69b3      	ldr	r3, [r6, #24]
 8003864:	4607      	mov	r7, r0
 8003866:	b913      	cbnz	r3, 800386e <__sfp+0x12>
 8003868:	4630      	mov	r0, r6
 800386a:	f7ff ffc7 	bl	80037fc <__sinit>
 800386e:	3648      	adds	r6, #72	; 0x48
 8003870:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003874:	3b01      	subs	r3, #1
 8003876:	d503      	bpl.n	8003880 <__sfp+0x24>
 8003878:	6833      	ldr	r3, [r6, #0]
 800387a:	b133      	cbz	r3, 800388a <__sfp+0x2e>
 800387c:	6836      	ldr	r6, [r6, #0]
 800387e:	e7f7      	b.n	8003870 <__sfp+0x14>
 8003880:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003884:	b16d      	cbz	r5, 80038a2 <__sfp+0x46>
 8003886:	3468      	adds	r4, #104	; 0x68
 8003888:	e7f4      	b.n	8003874 <__sfp+0x18>
 800388a:	2104      	movs	r1, #4
 800388c:	4638      	mov	r0, r7
 800388e:	f7ff ff9f 	bl	80037d0 <__sfmoreglue>
 8003892:	6030      	str	r0, [r6, #0]
 8003894:	2800      	cmp	r0, #0
 8003896:	d1f1      	bne.n	800387c <__sfp+0x20>
 8003898:	230c      	movs	r3, #12
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	4604      	mov	r4, r0
 800389e:	4620      	mov	r0, r4
 80038a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <__sfp+0x74>)
 80038a4:	6665      	str	r5, [r4, #100]	; 0x64
 80038a6:	e9c4 5500 	strd	r5, r5, [r4]
 80038aa:	60a5      	str	r5, [r4, #8]
 80038ac:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80038b0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80038b4:	2208      	movs	r2, #8
 80038b6:	4629      	mov	r1, r5
 80038b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038bc:	f7ff fd6a 	bl	8003394 <memset>
 80038c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80038c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80038c8:	e7e9      	b.n	800389e <__sfp+0x42>
 80038ca:	bf00      	nop
 80038cc:	080043ac 	.word	0x080043ac
 80038d0:	ffff0001 	.word	0xffff0001

080038d4 <_fwalk_reent>:
 80038d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038d8:	4680      	mov	r8, r0
 80038da:	4689      	mov	r9, r1
 80038dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80038e0:	2600      	movs	r6, #0
 80038e2:	b914      	cbnz	r4, 80038ea <_fwalk_reent+0x16>
 80038e4:	4630      	mov	r0, r6
 80038e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ea:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80038ee:	3f01      	subs	r7, #1
 80038f0:	d501      	bpl.n	80038f6 <_fwalk_reent+0x22>
 80038f2:	6824      	ldr	r4, [r4, #0]
 80038f4:	e7f5      	b.n	80038e2 <_fwalk_reent+0xe>
 80038f6:	89ab      	ldrh	r3, [r5, #12]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d907      	bls.n	800390c <_fwalk_reent+0x38>
 80038fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003900:	3301      	adds	r3, #1
 8003902:	d003      	beq.n	800390c <_fwalk_reent+0x38>
 8003904:	4629      	mov	r1, r5
 8003906:	4640      	mov	r0, r8
 8003908:	47c8      	blx	r9
 800390a:	4306      	orrs	r6, r0
 800390c:	3568      	adds	r5, #104	; 0x68
 800390e:	e7ee      	b.n	80038ee <_fwalk_reent+0x1a>

08003910 <__swhatbuf_r>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	460e      	mov	r6, r1
 8003914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003918:	2900      	cmp	r1, #0
 800391a:	b096      	sub	sp, #88	; 0x58
 800391c:	4614      	mov	r4, r2
 800391e:	461d      	mov	r5, r3
 8003920:	da07      	bge.n	8003932 <__swhatbuf_r+0x22>
 8003922:	2300      	movs	r3, #0
 8003924:	602b      	str	r3, [r5, #0]
 8003926:	89b3      	ldrh	r3, [r6, #12]
 8003928:	061a      	lsls	r2, r3, #24
 800392a:	d410      	bmi.n	800394e <__swhatbuf_r+0x3e>
 800392c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003930:	e00e      	b.n	8003950 <__swhatbuf_r+0x40>
 8003932:	466a      	mov	r2, sp
 8003934:	f000 fc36 	bl	80041a4 <_fstat_r>
 8003938:	2800      	cmp	r0, #0
 800393a:	dbf2      	blt.n	8003922 <__swhatbuf_r+0x12>
 800393c:	9a01      	ldr	r2, [sp, #4]
 800393e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003946:	425a      	negs	r2, r3
 8003948:	415a      	adcs	r2, r3
 800394a:	602a      	str	r2, [r5, #0]
 800394c:	e7ee      	b.n	800392c <__swhatbuf_r+0x1c>
 800394e:	2340      	movs	r3, #64	; 0x40
 8003950:	2000      	movs	r0, #0
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	b016      	add	sp, #88	; 0x58
 8003956:	bd70      	pop	{r4, r5, r6, pc}

08003958 <__smakebuf_r>:
 8003958:	898b      	ldrh	r3, [r1, #12]
 800395a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800395c:	079d      	lsls	r5, r3, #30
 800395e:	4606      	mov	r6, r0
 8003960:	460c      	mov	r4, r1
 8003962:	d507      	bpl.n	8003974 <__smakebuf_r+0x1c>
 8003964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003968:	6023      	str	r3, [r4, #0]
 800396a:	6123      	str	r3, [r4, #16]
 800396c:	2301      	movs	r3, #1
 800396e:	6163      	str	r3, [r4, #20]
 8003970:	b002      	add	sp, #8
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	ab01      	add	r3, sp, #4
 8003976:	466a      	mov	r2, sp
 8003978:	f7ff ffca 	bl	8003910 <__swhatbuf_r>
 800397c:	9900      	ldr	r1, [sp, #0]
 800397e:	4605      	mov	r5, r0
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f877 	bl	8003a74 <_malloc_r>
 8003986:	b948      	cbnz	r0, 800399c <__smakebuf_r+0x44>
 8003988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800398c:	059a      	lsls	r2, r3, #22
 800398e:	d4ef      	bmi.n	8003970 <__smakebuf_r+0x18>
 8003990:	f023 0303 	bic.w	r3, r3, #3
 8003994:	f043 0302 	orr.w	r3, r3, #2
 8003998:	81a3      	strh	r3, [r4, #12]
 800399a:	e7e3      	b.n	8003964 <__smakebuf_r+0xc>
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <__smakebuf_r+0x7c>)
 800399e:	62b3      	str	r3, [r6, #40]	; 0x28
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	6020      	str	r0, [r4, #0]
 80039a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a8:	81a3      	strh	r3, [r4, #12]
 80039aa:	9b00      	ldr	r3, [sp, #0]
 80039ac:	6163      	str	r3, [r4, #20]
 80039ae:	9b01      	ldr	r3, [sp, #4]
 80039b0:	6120      	str	r0, [r4, #16]
 80039b2:	b15b      	cbz	r3, 80039cc <__smakebuf_r+0x74>
 80039b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039b8:	4630      	mov	r0, r6
 80039ba:	f000 fc05 	bl	80041c8 <_isatty_r>
 80039be:	b128      	cbz	r0, 80039cc <__smakebuf_r+0x74>
 80039c0:	89a3      	ldrh	r3, [r4, #12]
 80039c2:	f023 0303 	bic.w	r3, r3, #3
 80039c6:	f043 0301 	orr.w	r3, r3, #1
 80039ca:	81a3      	strh	r3, [r4, #12]
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	431d      	orrs	r5, r3
 80039d0:	81a5      	strh	r5, [r4, #12]
 80039d2:	e7cd      	b.n	8003970 <__smakebuf_r+0x18>
 80039d4:	080037c5 	.word	0x080037c5

080039d8 <_free_r>:
 80039d8:	b538      	push	{r3, r4, r5, lr}
 80039da:	4605      	mov	r5, r0
 80039dc:	2900      	cmp	r1, #0
 80039de:	d045      	beq.n	8003a6c <_free_r+0x94>
 80039e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039e4:	1f0c      	subs	r4, r1, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bfb8      	it	lt
 80039ea:	18e4      	addlt	r4, r4, r3
 80039ec:	f000 fc0e 	bl	800420c <__malloc_lock>
 80039f0:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <_free_r+0x98>)
 80039f2:	6813      	ldr	r3, [r2, #0]
 80039f4:	4610      	mov	r0, r2
 80039f6:	b933      	cbnz	r3, 8003a06 <_free_r+0x2e>
 80039f8:	6063      	str	r3, [r4, #4]
 80039fa:	6014      	str	r4, [r2, #0]
 80039fc:	4628      	mov	r0, r5
 80039fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a02:	f000 bc04 	b.w	800420e <__malloc_unlock>
 8003a06:	42a3      	cmp	r3, r4
 8003a08:	d90c      	bls.n	8003a24 <_free_r+0x4c>
 8003a0a:	6821      	ldr	r1, [r4, #0]
 8003a0c:	1862      	adds	r2, r4, r1
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	bf04      	itt	eq
 8003a12:	681a      	ldreq	r2, [r3, #0]
 8003a14:	685b      	ldreq	r3, [r3, #4]
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	bf04      	itt	eq
 8003a1a:	1852      	addeq	r2, r2, r1
 8003a1c:	6022      	streq	r2, [r4, #0]
 8003a1e:	6004      	str	r4, [r0, #0]
 8003a20:	e7ec      	b.n	80039fc <_free_r+0x24>
 8003a22:	4613      	mov	r3, r2
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	b10a      	cbz	r2, 8003a2c <_free_r+0x54>
 8003a28:	42a2      	cmp	r2, r4
 8003a2a:	d9fa      	bls.n	8003a22 <_free_r+0x4a>
 8003a2c:	6819      	ldr	r1, [r3, #0]
 8003a2e:	1858      	adds	r0, r3, r1
 8003a30:	42a0      	cmp	r0, r4
 8003a32:	d10b      	bne.n	8003a4c <_free_r+0x74>
 8003a34:	6820      	ldr	r0, [r4, #0]
 8003a36:	4401      	add	r1, r0
 8003a38:	1858      	adds	r0, r3, r1
 8003a3a:	4282      	cmp	r2, r0
 8003a3c:	6019      	str	r1, [r3, #0]
 8003a3e:	d1dd      	bne.n	80039fc <_free_r+0x24>
 8003a40:	6810      	ldr	r0, [r2, #0]
 8003a42:	6852      	ldr	r2, [r2, #4]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	4401      	add	r1, r0
 8003a48:	6019      	str	r1, [r3, #0]
 8003a4a:	e7d7      	b.n	80039fc <_free_r+0x24>
 8003a4c:	d902      	bls.n	8003a54 <_free_r+0x7c>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	602b      	str	r3, [r5, #0]
 8003a52:	e7d3      	b.n	80039fc <_free_r+0x24>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	1821      	adds	r1, r4, r0
 8003a58:	428a      	cmp	r2, r1
 8003a5a:	bf04      	itt	eq
 8003a5c:	6811      	ldreq	r1, [r2, #0]
 8003a5e:	6852      	ldreq	r2, [r2, #4]
 8003a60:	6062      	str	r2, [r4, #4]
 8003a62:	bf04      	itt	eq
 8003a64:	1809      	addeq	r1, r1, r0
 8003a66:	6021      	streq	r1, [r4, #0]
 8003a68:	605c      	str	r4, [r3, #4]
 8003a6a:	e7c7      	b.n	80039fc <_free_r+0x24>
 8003a6c:	bd38      	pop	{r3, r4, r5, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000090 	.word	0x20000090

08003a74 <_malloc_r>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	1ccd      	adds	r5, r1, #3
 8003a78:	f025 0503 	bic.w	r5, r5, #3
 8003a7c:	3508      	adds	r5, #8
 8003a7e:	2d0c      	cmp	r5, #12
 8003a80:	bf38      	it	cc
 8003a82:	250c      	movcc	r5, #12
 8003a84:	2d00      	cmp	r5, #0
 8003a86:	4606      	mov	r6, r0
 8003a88:	db01      	blt.n	8003a8e <_malloc_r+0x1a>
 8003a8a:	42a9      	cmp	r1, r5
 8003a8c:	d903      	bls.n	8003a96 <_malloc_r+0x22>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6033      	str	r3, [r6, #0]
 8003a92:	2000      	movs	r0, #0
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
 8003a96:	f000 fbb9 	bl	800420c <__malloc_lock>
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <_malloc_r+0xac>)
 8003a9c:	6814      	ldr	r4, [r2, #0]
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	b991      	cbnz	r1, 8003ac8 <_malloc_r+0x54>
 8003aa2:	4c20      	ldr	r4, [pc, #128]	; (8003b24 <_malloc_r+0xb0>)
 8003aa4:	6823      	ldr	r3, [r4, #0]
 8003aa6:	b91b      	cbnz	r3, 8003ab0 <_malloc_r+0x3c>
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 fb05 	bl	80040b8 <_sbrk_r>
 8003aae:	6020      	str	r0, [r4, #0]
 8003ab0:	4629      	mov	r1, r5
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	f000 fb00 	bl	80040b8 <_sbrk_r>
 8003ab8:	1c43      	adds	r3, r0, #1
 8003aba:	d124      	bne.n	8003b06 <_malloc_r+0x92>
 8003abc:	230c      	movs	r3, #12
 8003abe:	6033      	str	r3, [r6, #0]
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	f000 fba4 	bl	800420e <__malloc_unlock>
 8003ac6:	e7e4      	b.n	8003a92 <_malloc_r+0x1e>
 8003ac8:	680b      	ldr	r3, [r1, #0]
 8003aca:	1b5b      	subs	r3, r3, r5
 8003acc:	d418      	bmi.n	8003b00 <_malloc_r+0x8c>
 8003ace:	2b0b      	cmp	r3, #11
 8003ad0:	d90f      	bls.n	8003af2 <_malloc_r+0x7e>
 8003ad2:	600b      	str	r3, [r1, #0]
 8003ad4:	50cd      	str	r5, [r1, r3]
 8003ad6:	18cc      	adds	r4, r1, r3
 8003ad8:	4630      	mov	r0, r6
 8003ada:	f000 fb98 	bl	800420e <__malloc_unlock>
 8003ade:	f104 000b 	add.w	r0, r4, #11
 8003ae2:	1d23      	adds	r3, r4, #4
 8003ae4:	f020 0007 	bic.w	r0, r0, #7
 8003ae8:	1ac3      	subs	r3, r0, r3
 8003aea:	d0d3      	beq.n	8003a94 <_malloc_r+0x20>
 8003aec:	425a      	negs	r2, r3
 8003aee:	50e2      	str	r2, [r4, r3]
 8003af0:	e7d0      	b.n	8003a94 <_malloc_r+0x20>
 8003af2:	428c      	cmp	r4, r1
 8003af4:	684b      	ldr	r3, [r1, #4]
 8003af6:	bf16      	itet	ne
 8003af8:	6063      	strne	r3, [r4, #4]
 8003afa:	6013      	streq	r3, [r2, #0]
 8003afc:	460c      	movne	r4, r1
 8003afe:	e7eb      	b.n	8003ad8 <_malloc_r+0x64>
 8003b00:	460c      	mov	r4, r1
 8003b02:	6849      	ldr	r1, [r1, #4]
 8003b04:	e7cc      	b.n	8003aa0 <_malloc_r+0x2c>
 8003b06:	1cc4      	adds	r4, r0, #3
 8003b08:	f024 0403 	bic.w	r4, r4, #3
 8003b0c:	42a0      	cmp	r0, r4
 8003b0e:	d005      	beq.n	8003b1c <_malloc_r+0xa8>
 8003b10:	1a21      	subs	r1, r4, r0
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 fad0 	bl	80040b8 <_sbrk_r>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d0cf      	beq.n	8003abc <_malloc_r+0x48>
 8003b1c:	6025      	str	r5, [r4, #0]
 8003b1e:	e7db      	b.n	8003ad8 <_malloc_r+0x64>
 8003b20:	20000090 	.word	0x20000090
 8003b24:	20000094 	.word	0x20000094

08003b28 <__sfputc_r>:
 8003b28:	6893      	ldr	r3, [r2, #8]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	b410      	push	{r4}
 8003b30:	6093      	str	r3, [r2, #8]
 8003b32:	da08      	bge.n	8003b46 <__sfputc_r+0x1e>
 8003b34:	6994      	ldr	r4, [r2, #24]
 8003b36:	42a3      	cmp	r3, r4
 8003b38:	db01      	blt.n	8003b3e <__sfputc_r+0x16>
 8003b3a:	290a      	cmp	r1, #10
 8003b3c:	d103      	bne.n	8003b46 <__sfputc_r+0x1e>
 8003b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b42:	f7ff bcab 	b.w	800349c <__swbuf_r>
 8003b46:	6813      	ldr	r3, [r2, #0]
 8003b48:	1c58      	adds	r0, r3, #1
 8003b4a:	6010      	str	r0, [r2, #0]
 8003b4c:	7019      	strb	r1, [r3, #0]
 8003b4e:	4608      	mov	r0, r1
 8003b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <__sfputs_r>:
 8003b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b58:	4606      	mov	r6, r0
 8003b5a:	460f      	mov	r7, r1
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	18d5      	adds	r5, r2, r3
 8003b60:	42ac      	cmp	r4, r5
 8003b62:	d101      	bne.n	8003b68 <__sfputs_r+0x12>
 8003b64:	2000      	movs	r0, #0
 8003b66:	e007      	b.n	8003b78 <__sfputs_r+0x22>
 8003b68:	463a      	mov	r2, r7
 8003b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f7ff ffda 	bl	8003b28 <__sfputc_r>
 8003b74:	1c43      	adds	r3, r0, #1
 8003b76:	d1f3      	bne.n	8003b60 <__sfputs_r+0xa>
 8003b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b7c <_vfiprintf_r>:
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	460c      	mov	r4, r1
 8003b82:	b09d      	sub	sp, #116	; 0x74
 8003b84:	4617      	mov	r7, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	4606      	mov	r6, r0
 8003b8a:	b118      	cbz	r0, 8003b94 <_vfiprintf_r+0x18>
 8003b8c:	6983      	ldr	r3, [r0, #24]
 8003b8e:	b90b      	cbnz	r3, 8003b94 <_vfiprintf_r+0x18>
 8003b90:	f7ff fe34 	bl	80037fc <__sinit>
 8003b94:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <_vfiprintf_r+0x20c>)
 8003b96:	429c      	cmp	r4, r3
 8003b98:	d158      	bne.n	8003c4c <_vfiprintf_r+0xd0>
 8003b9a:	6874      	ldr	r4, [r6, #4]
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	0718      	lsls	r0, r3, #28
 8003ba0:	d55e      	bpl.n	8003c60 <_vfiprintf_r+0xe4>
 8003ba2:	6923      	ldr	r3, [r4, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05b      	beq.n	8003c60 <_vfiprintf_r+0xe4>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	9309      	str	r3, [sp, #36]	; 0x24
 8003bac:	2320      	movs	r3, #32
 8003bae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003bb2:	2330      	movs	r3, #48	; 0x30
 8003bb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003bb8:	9503      	str	r5, [sp, #12]
 8003bba:	f04f 0b01 	mov.w	fp, #1
 8003bbe:	46b8      	mov	r8, r7
 8003bc0:	4645      	mov	r5, r8
 8003bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003bc6:	b10b      	cbz	r3, 8003bcc <_vfiprintf_r+0x50>
 8003bc8:	2b25      	cmp	r3, #37	; 0x25
 8003bca:	d154      	bne.n	8003c76 <_vfiprintf_r+0xfa>
 8003bcc:	ebb8 0a07 	subs.w	sl, r8, r7
 8003bd0:	d00b      	beq.n	8003bea <_vfiprintf_r+0x6e>
 8003bd2:	4653      	mov	r3, sl
 8003bd4:	463a      	mov	r2, r7
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f7ff ffbc 	bl	8003b56 <__sfputs_r>
 8003bde:	3001      	adds	r0, #1
 8003be0:	f000 80c2 	beq.w	8003d68 <_vfiprintf_r+0x1ec>
 8003be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be6:	4453      	add	r3, sl
 8003be8:	9309      	str	r3, [sp, #36]	; 0x24
 8003bea:	f898 3000 	ldrb.w	r3, [r8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80ba 	beq.w	8003d68 <_vfiprintf_r+0x1ec>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bfe:	9304      	str	r3, [sp, #16]
 8003c00:	9307      	str	r3, [sp, #28]
 8003c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c06:	931a      	str	r3, [sp, #104]	; 0x68
 8003c08:	46a8      	mov	r8, r5
 8003c0a:	2205      	movs	r2, #5
 8003c0c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c10:	485e      	ldr	r0, [pc, #376]	; (8003d8c <_vfiprintf_r+0x210>)
 8003c12:	f7fc fb15 	bl	8000240 <memchr>
 8003c16:	9b04      	ldr	r3, [sp, #16]
 8003c18:	bb78      	cbnz	r0, 8003c7a <_vfiprintf_r+0xfe>
 8003c1a:	06d9      	lsls	r1, r3, #27
 8003c1c:	bf44      	itt	mi
 8003c1e:	2220      	movmi	r2, #32
 8003c20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c24:	071a      	lsls	r2, r3, #28
 8003c26:	bf44      	itt	mi
 8003c28:	222b      	movmi	r2, #43	; 0x2b
 8003c2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003c2e:	782a      	ldrb	r2, [r5, #0]
 8003c30:	2a2a      	cmp	r2, #42	; 0x2a
 8003c32:	d02a      	beq.n	8003c8a <_vfiprintf_r+0x10e>
 8003c34:	9a07      	ldr	r2, [sp, #28]
 8003c36:	46a8      	mov	r8, r5
 8003c38:	2000      	movs	r0, #0
 8003c3a:	250a      	movs	r5, #10
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c42:	3b30      	subs	r3, #48	; 0x30
 8003c44:	2b09      	cmp	r3, #9
 8003c46:	d969      	bls.n	8003d1c <_vfiprintf_r+0x1a0>
 8003c48:	b360      	cbz	r0, 8003ca4 <_vfiprintf_r+0x128>
 8003c4a:	e024      	b.n	8003c96 <_vfiprintf_r+0x11a>
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <_vfiprintf_r+0x214>)
 8003c4e:	429c      	cmp	r4, r3
 8003c50:	d101      	bne.n	8003c56 <_vfiprintf_r+0xda>
 8003c52:	68b4      	ldr	r4, [r6, #8]
 8003c54:	e7a2      	b.n	8003b9c <_vfiprintf_r+0x20>
 8003c56:	4b4f      	ldr	r3, [pc, #316]	; (8003d94 <_vfiprintf_r+0x218>)
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf08      	it	eq
 8003c5c:	68f4      	ldreq	r4, [r6, #12]
 8003c5e:	e79d      	b.n	8003b9c <_vfiprintf_r+0x20>
 8003c60:	4621      	mov	r1, r4
 8003c62:	4630      	mov	r0, r6
 8003c64:	f7ff fc6c 	bl	8003540 <__swsetup_r>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d09d      	beq.n	8003ba8 <_vfiprintf_r+0x2c>
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	b01d      	add	sp, #116	; 0x74
 8003c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c76:	46a8      	mov	r8, r5
 8003c78:	e7a2      	b.n	8003bc0 <_vfiprintf_r+0x44>
 8003c7a:	4a44      	ldr	r2, [pc, #272]	; (8003d8c <_vfiprintf_r+0x210>)
 8003c7c:	1a80      	subs	r0, r0, r2
 8003c7e:	fa0b f000 	lsl.w	r0, fp, r0
 8003c82:	4318      	orrs	r0, r3
 8003c84:	9004      	str	r0, [sp, #16]
 8003c86:	4645      	mov	r5, r8
 8003c88:	e7be      	b.n	8003c08 <_vfiprintf_r+0x8c>
 8003c8a:	9a03      	ldr	r2, [sp, #12]
 8003c8c:	1d11      	adds	r1, r2, #4
 8003c8e:	6812      	ldr	r2, [r2, #0]
 8003c90:	9103      	str	r1, [sp, #12]
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	db01      	blt.n	8003c9a <_vfiprintf_r+0x11e>
 8003c96:	9207      	str	r2, [sp, #28]
 8003c98:	e004      	b.n	8003ca4 <_vfiprintf_r+0x128>
 8003c9a:	4252      	negs	r2, r2
 8003c9c:	f043 0302 	orr.w	r3, r3, #2
 8003ca0:	9207      	str	r2, [sp, #28]
 8003ca2:	9304      	str	r3, [sp, #16]
 8003ca4:	f898 3000 	ldrb.w	r3, [r8]
 8003ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8003caa:	d10e      	bne.n	8003cca <_vfiprintf_r+0x14e>
 8003cac:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003cb2:	d138      	bne.n	8003d26 <_vfiprintf_r+0x1aa>
 8003cb4:	9b03      	ldr	r3, [sp, #12]
 8003cb6:	1d1a      	adds	r2, r3, #4
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	9203      	str	r2, [sp, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfb8      	it	lt
 8003cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003cc4:	f108 0802 	add.w	r8, r8, #2
 8003cc8:	9305      	str	r3, [sp, #20]
 8003cca:	4d33      	ldr	r5, [pc, #204]	; (8003d98 <_vfiprintf_r+0x21c>)
 8003ccc:	f898 1000 	ldrb.w	r1, [r8]
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f7fc fab4 	bl	8000240 <memchr>
 8003cd8:	b140      	cbz	r0, 8003cec <_vfiprintf_r+0x170>
 8003cda:	2340      	movs	r3, #64	; 0x40
 8003cdc:	1b40      	subs	r0, r0, r5
 8003cde:	fa03 f000 	lsl.w	r0, r3, r0
 8003ce2:	9b04      	ldr	r3, [sp, #16]
 8003ce4:	4303      	orrs	r3, r0
 8003ce6:	f108 0801 	add.w	r8, r8, #1
 8003cea:	9304      	str	r3, [sp, #16]
 8003cec:	f898 1000 	ldrb.w	r1, [r8]
 8003cf0:	482a      	ldr	r0, [pc, #168]	; (8003d9c <_vfiprintf_r+0x220>)
 8003cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003cf6:	2206      	movs	r2, #6
 8003cf8:	f108 0701 	add.w	r7, r8, #1
 8003cfc:	f7fc faa0 	bl	8000240 <memchr>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d037      	beq.n	8003d74 <_vfiprintf_r+0x1f8>
 8003d04:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <_vfiprintf_r+0x224>)
 8003d06:	bb1b      	cbnz	r3, 8003d50 <_vfiprintf_r+0x1d4>
 8003d08:	9b03      	ldr	r3, [sp, #12]
 8003d0a:	3307      	adds	r3, #7
 8003d0c:	f023 0307 	bic.w	r3, r3, #7
 8003d10:	3308      	adds	r3, #8
 8003d12:	9303      	str	r3, [sp, #12]
 8003d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d16:	444b      	add	r3, r9
 8003d18:	9309      	str	r3, [sp, #36]	; 0x24
 8003d1a:	e750      	b.n	8003bbe <_vfiprintf_r+0x42>
 8003d1c:	fb05 3202 	mla	r2, r5, r2, r3
 8003d20:	2001      	movs	r0, #1
 8003d22:	4688      	mov	r8, r1
 8003d24:	e78a      	b.n	8003c3c <_vfiprintf_r+0xc0>
 8003d26:	2300      	movs	r3, #0
 8003d28:	f108 0801 	add.w	r8, r8, #1
 8003d2c:	9305      	str	r3, [sp, #20]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	250a      	movs	r5, #10
 8003d32:	4640      	mov	r0, r8
 8003d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d38:	3a30      	subs	r2, #48	; 0x30
 8003d3a:	2a09      	cmp	r2, #9
 8003d3c:	d903      	bls.n	8003d46 <_vfiprintf_r+0x1ca>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0c3      	beq.n	8003cca <_vfiprintf_r+0x14e>
 8003d42:	9105      	str	r1, [sp, #20]
 8003d44:	e7c1      	b.n	8003cca <_vfiprintf_r+0x14e>
 8003d46:	fb05 2101 	mla	r1, r5, r1, r2
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4680      	mov	r8, r0
 8003d4e:	e7f0      	b.n	8003d32 <_vfiprintf_r+0x1b6>
 8003d50:	ab03      	add	r3, sp, #12
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	4622      	mov	r2, r4
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <_vfiprintf_r+0x228>)
 8003d58:	a904      	add	r1, sp, #16
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	f3af 8000 	nop.w
 8003d60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003d64:	4681      	mov	r9, r0
 8003d66:	d1d5      	bne.n	8003d14 <_vfiprintf_r+0x198>
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	065b      	lsls	r3, r3, #25
 8003d6c:	f53f af7e 	bmi.w	8003c6c <_vfiprintf_r+0xf0>
 8003d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d72:	e77d      	b.n	8003c70 <_vfiprintf_r+0xf4>
 8003d74:	ab03      	add	r3, sp, #12
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4622      	mov	r2, r4
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <_vfiprintf_r+0x228>)
 8003d7c:	a904      	add	r1, sp, #16
 8003d7e:	4630      	mov	r0, r6
 8003d80:	f000 f888 	bl	8003e94 <_printf_i>
 8003d84:	e7ec      	b.n	8003d60 <_vfiprintf_r+0x1e4>
 8003d86:	bf00      	nop
 8003d88:	080043d0 	.word	0x080043d0
 8003d8c:	08004410 	.word	0x08004410
 8003d90:	080043f0 	.word	0x080043f0
 8003d94:	080043b0 	.word	0x080043b0
 8003d98:	08004416 	.word	0x08004416
 8003d9c:	0800441a 	.word	0x0800441a
 8003da0:	00000000 	.word	0x00000000
 8003da4:	08003b57 	.word	0x08003b57

08003da8 <_printf_common>:
 8003da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dac:	4691      	mov	r9, r2
 8003dae:	461f      	mov	r7, r3
 8003db0:	688a      	ldr	r2, [r1, #8]
 8003db2:	690b      	ldr	r3, [r1, #16]
 8003db4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003db8:	4293      	cmp	r3, r2
 8003dba:	bfb8      	it	lt
 8003dbc:	4613      	movlt	r3, r2
 8003dbe:	f8c9 3000 	str.w	r3, [r9]
 8003dc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	460c      	mov	r4, r1
 8003dca:	b112      	cbz	r2, 8003dd2 <_printf_common+0x2a>
 8003dcc:	3301      	adds	r3, #1
 8003dce:	f8c9 3000 	str.w	r3, [r9]
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	0699      	lsls	r1, r3, #26
 8003dd6:	bf42      	ittt	mi
 8003dd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ddc:	3302      	addmi	r3, #2
 8003dde:	f8c9 3000 	strmi.w	r3, [r9]
 8003de2:	6825      	ldr	r5, [r4, #0]
 8003de4:	f015 0506 	ands.w	r5, r5, #6
 8003de8:	d107      	bne.n	8003dfa <_printf_common+0x52>
 8003dea:	f104 0a19 	add.w	sl, r4, #25
 8003dee:	68e3      	ldr	r3, [r4, #12]
 8003df0:	f8d9 2000 	ldr.w	r2, [r9]
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	42ab      	cmp	r3, r5
 8003df8:	dc28      	bgt.n	8003e4c <_printf_common+0xa4>
 8003dfa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003dfe:	6822      	ldr	r2, [r4, #0]
 8003e00:	3300      	adds	r3, #0
 8003e02:	bf18      	it	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	0692      	lsls	r2, r2, #26
 8003e08:	d42d      	bmi.n	8003e66 <_printf_common+0xbe>
 8003e0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e0e:	4639      	mov	r1, r7
 8003e10:	4630      	mov	r0, r6
 8003e12:	47c0      	blx	r8
 8003e14:	3001      	adds	r0, #1
 8003e16:	d020      	beq.n	8003e5a <_printf_common+0xb2>
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	68e5      	ldr	r5, [r4, #12]
 8003e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf08      	it	eq
 8003e28:	1aad      	subeq	r5, r5, r2
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e34:	2500      	movne	r5, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfc4      	itt	gt
 8003e3a:	1a9b      	subgt	r3, r3, r2
 8003e3c:	18ed      	addgt	r5, r5, r3
 8003e3e:	f04f 0900 	mov.w	r9, #0
 8003e42:	341a      	adds	r4, #26
 8003e44:	454d      	cmp	r5, r9
 8003e46:	d11a      	bne.n	8003e7e <_printf_common+0xd6>
 8003e48:	2000      	movs	r0, #0
 8003e4a:	e008      	b.n	8003e5e <_printf_common+0xb6>
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	4652      	mov	r2, sl
 8003e50:	4639      	mov	r1, r7
 8003e52:	4630      	mov	r0, r6
 8003e54:	47c0      	blx	r8
 8003e56:	3001      	adds	r0, #1
 8003e58:	d103      	bne.n	8003e62 <_printf_common+0xba>
 8003e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e62:	3501      	adds	r5, #1
 8003e64:	e7c3      	b.n	8003dee <_printf_common+0x46>
 8003e66:	18e1      	adds	r1, r4, r3
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	2030      	movs	r0, #48	; 0x30
 8003e6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e70:	4422      	add	r2, r4
 8003e72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	e7c5      	b.n	8003e0a <_printf_common+0x62>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4622      	mov	r2, r4
 8003e82:	4639      	mov	r1, r7
 8003e84:	4630      	mov	r0, r6
 8003e86:	47c0      	blx	r8
 8003e88:	3001      	adds	r0, #1
 8003e8a:	d0e6      	beq.n	8003e5a <_printf_common+0xb2>
 8003e8c:	f109 0901 	add.w	r9, r9, #1
 8003e90:	e7d8      	b.n	8003e44 <_printf_common+0x9c>
	...

08003e94 <_printf_i>:
 8003e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	7e09      	ldrb	r1, [r1, #24]
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	296e      	cmp	r1, #110	; 0x6e
 8003ea4:	4617      	mov	r7, r2
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eac:	f000 80b3 	beq.w	8004016 <_printf_i+0x182>
 8003eb0:	d822      	bhi.n	8003ef8 <_printf_i+0x64>
 8003eb2:	2963      	cmp	r1, #99	; 0x63
 8003eb4:	d036      	beq.n	8003f24 <_printf_i+0x90>
 8003eb6:	d80a      	bhi.n	8003ece <_printf_i+0x3a>
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	f000 80b9 	beq.w	8004030 <_printf_i+0x19c>
 8003ebe:	2958      	cmp	r1, #88	; 0x58
 8003ec0:	f000 8083 	beq.w	8003fca <_printf_i+0x136>
 8003ec4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ec8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ecc:	e032      	b.n	8003f34 <_printf_i+0xa0>
 8003ece:	2964      	cmp	r1, #100	; 0x64
 8003ed0:	d001      	beq.n	8003ed6 <_printf_i+0x42>
 8003ed2:	2969      	cmp	r1, #105	; 0x69
 8003ed4:	d1f6      	bne.n	8003ec4 <_printf_i+0x30>
 8003ed6:	6820      	ldr	r0, [r4, #0]
 8003ed8:	6813      	ldr	r3, [r2, #0]
 8003eda:	0605      	lsls	r5, r0, #24
 8003edc:	f103 0104 	add.w	r1, r3, #4
 8003ee0:	d52a      	bpl.n	8003f38 <_printf_i+0xa4>
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6011      	str	r1, [r2, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	da03      	bge.n	8003ef2 <_printf_i+0x5e>
 8003eea:	222d      	movs	r2, #45	; 0x2d
 8003eec:	425b      	negs	r3, r3
 8003eee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003ef2:	486f      	ldr	r0, [pc, #444]	; (80040b0 <_printf_i+0x21c>)
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	e039      	b.n	8003f6c <_printf_i+0xd8>
 8003ef8:	2973      	cmp	r1, #115	; 0x73
 8003efa:	f000 809d 	beq.w	8004038 <_printf_i+0x1a4>
 8003efe:	d808      	bhi.n	8003f12 <_printf_i+0x7e>
 8003f00:	296f      	cmp	r1, #111	; 0x6f
 8003f02:	d020      	beq.n	8003f46 <_printf_i+0xb2>
 8003f04:	2970      	cmp	r1, #112	; 0x70
 8003f06:	d1dd      	bne.n	8003ec4 <_printf_i+0x30>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	f043 0320 	orr.w	r3, r3, #32
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	e003      	b.n	8003f1a <_printf_i+0x86>
 8003f12:	2975      	cmp	r1, #117	; 0x75
 8003f14:	d017      	beq.n	8003f46 <_printf_i+0xb2>
 8003f16:	2978      	cmp	r1, #120	; 0x78
 8003f18:	d1d4      	bne.n	8003ec4 <_printf_i+0x30>
 8003f1a:	2378      	movs	r3, #120	; 0x78
 8003f1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f20:	4864      	ldr	r0, [pc, #400]	; (80040b4 <_printf_i+0x220>)
 8003f22:	e055      	b.n	8003fd0 <_printf_i+0x13c>
 8003f24:	6813      	ldr	r3, [r2, #0]
 8003f26:	1d19      	adds	r1, r3, #4
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6011      	str	r1, [r2, #0]
 8003f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f34:	2301      	movs	r3, #1
 8003f36:	e08c      	b.n	8004052 <_printf_i+0x1be>
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6011      	str	r1, [r2, #0]
 8003f3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f40:	bf18      	it	ne
 8003f42:	b21b      	sxthne	r3, r3
 8003f44:	e7cf      	b.n	8003ee6 <_printf_i+0x52>
 8003f46:	6813      	ldr	r3, [r2, #0]
 8003f48:	6825      	ldr	r5, [r4, #0]
 8003f4a:	1d18      	adds	r0, r3, #4
 8003f4c:	6010      	str	r0, [r2, #0]
 8003f4e:	0628      	lsls	r0, r5, #24
 8003f50:	d501      	bpl.n	8003f56 <_printf_i+0xc2>
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	e002      	b.n	8003f5c <_printf_i+0xc8>
 8003f56:	0668      	lsls	r0, r5, #25
 8003f58:	d5fb      	bpl.n	8003f52 <_printf_i+0xbe>
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	4854      	ldr	r0, [pc, #336]	; (80040b0 <_printf_i+0x21c>)
 8003f5e:	296f      	cmp	r1, #111	; 0x6f
 8003f60:	bf14      	ite	ne
 8003f62:	220a      	movne	r2, #10
 8003f64:	2208      	moveq	r2, #8
 8003f66:	2100      	movs	r1, #0
 8003f68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f6c:	6865      	ldr	r5, [r4, #4]
 8003f6e:	60a5      	str	r5, [r4, #8]
 8003f70:	2d00      	cmp	r5, #0
 8003f72:	f2c0 8095 	blt.w	80040a0 <_printf_i+0x20c>
 8003f76:	6821      	ldr	r1, [r4, #0]
 8003f78:	f021 0104 	bic.w	r1, r1, #4
 8003f7c:	6021      	str	r1, [r4, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13d      	bne.n	8003ffe <_printf_i+0x16a>
 8003f82:	2d00      	cmp	r5, #0
 8003f84:	f040 808e 	bne.w	80040a4 <_printf_i+0x210>
 8003f88:	4665      	mov	r5, ip
 8003f8a:	2a08      	cmp	r2, #8
 8003f8c:	d10b      	bne.n	8003fa6 <_printf_i+0x112>
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	07db      	lsls	r3, r3, #31
 8003f92:	d508      	bpl.n	8003fa6 <_printf_i+0x112>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	6862      	ldr	r2, [r4, #4]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	bfde      	ittt	le
 8003f9c:	2330      	movle	r3, #48	; 0x30
 8003f9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fa6:	ebac 0305 	sub.w	r3, ip, r5
 8003faa:	6123      	str	r3, [r4, #16]
 8003fac:	f8cd 8000 	str.w	r8, [sp]
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	aa03      	add	r2, sp, #12
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f7ff fef6 	bl	8003da8 <_printf_common>
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d14d      	bne.n	800405c <_printf_i+0x1c8>
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	b005      	add	sp, #20
 8003fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fca:	4839      	ldr	r0, [pc, #228]	; (80040b0 <_printf_i+0x21c>)
 8003fcc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fd0:	6813      	ldr	r3, [r2, #0]
 8003fd2:	6821      	ldr	r1, [r4, #0]
 8003fd4:	1d1d      	adds	r5, r3, #4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6015      	str	r5, [r2, #0]
 8003fda:	060a      	lsls	r2, r1, #24
 8003fdc:	d50b      	bpl.n	8003ff6 <_printf_i+0x162>
 8003fde:	07ca      	lsls	r2, r1, #31
 8003fe0:	bf44      	itt	mi
 8003fe2:	f041 0120 	orrmi.w	r1, r1, #32
 8003fe6:	6021      	strmi	r1, [r4, #0]
 8003fe8:	b91b      	cbnz	r3, 8003ff2 <_printf_i+0x15e>
 8003fea:	6822      	ldr	r2, [r4, #0]
 8003fec:	f022 0220 	bic.w	r2, r2, #32
 8003ff0:	6022      	str	r2, [r4, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	e7b7      	b.n	8003f66 <_printf_i+0xd2>
 8003ff6:	064d      	lsls	r5, r1, #25
 8003ff8:	bf48      	it	mi
 8003ffa:	b29b      	uxthmi	r3, r3
 8003ffc:	e7ef      	b.n	8003fde <_printf_i+0x14a>
 8003ffe:	4665      	mov	r5, ip
 8004000:	fbb3 f1f2 	udiv	r1, r3, r2
 8004004:	fb02 3311 	mls	r3, r2, r1, r3
 8004008:	5cc3      	ldrb	r3, [r0, r3]
 800400a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800400e:	460b      	mov	r3, r1
 8004010:	2900      	cmp	r1, #0
 8004012:	d1f5      	bne.n	8004000 <_printf_i+0x16c>
 8004014:	e7b9      	b.n	8003f8a <_printf_i+0xf6>
 8004016:	6813      	ldr	r3, [r2, #0]
 8004018:	6825      	ldr	r5, [r4, #0]
 800401a:	6961      	ldr	r1, [r4, #20]
 800401c:	1d18      	adds	r0, r3, #4
 800401e:	6010      	str	r0, [r2, #0]
 8004020:	0628      	lsls	r0, r5, #24
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	d501      	bpl.n	800402a <_printf_i+0x196>
 8004026:	6019      	str	r1, [r3, #0]
 8004028:	e002      	b.n	8004030 <_printf_i+0x19c>
 800402a:	066a      	lsls	r2, r5, #25
 800402c:	d5fb      	bpl.n	8004026 <_printf_i+0x192>
 800402e:	8019      	strh	r1, [r3, #0]
 8004030:	2300      	movs	r3, #0
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	4665      	mov	r5, ip
 8004036:	e7b9      	b.n	8003fac <_printf_i+0x118>
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	1d19      	adds	r1, r3, #4
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	681d      	ldr	r5, [r3, #0]
 8004040:	6862      	ldr	r2, [r4, #4]
 8004042:	2100      	movs	r1, #0
 8004044:	4628      	mov	r0, r5
 8004046:	f7fc f8fb 	bl	8000240 <memchr>
 800404a:	b108      	cbz	r0, 8004050 <_printf_i+0x1bc>
 800404c:	1b40      	subs	r0, r0, r5
 800404e:	6060      	str	r0, [r4, #4]
 8004050:	6863      	ldr	r3, [r4, #4]
 8004052:	6123      	str	r3, [r4, #16]
 8004054:	2300      	movs	r3, #0
 8004056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800405a:	e7a7      	b.n	8003fac <_printf_i+0x118>
 800405c:	6923      	ldr	r3, [r4, #16]
 800405e:	462a      	mov	r2, r5
 8004060:	4639      	mov	r1, r7
 8004062:	4630      	mov	r0, r6
 8004064:	47c0      	blx	r8
 8004066:	3001      	adds	r0, #1
 8004068:	d0aa      	beq.n	8003fc0 <_printf_i+0x12c>
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	079b      	lsls	r3, r3, #30
 800406e:	d413      	bmi.n	8004098 <_printf_i+0x204>
 8004070:	68e0      	ldr	r0, [r4, #12]
 8004072:	9b03      	ldr	r3, [sp, #12]
 8004074:	4298      	cmp	r0, r3
 8004076:	bfb8      	it	lt
 8004078:	4618      	movlt	r0, r3
 800407a:	e7a3      	b.n	8003fc4 <_printf_i+0x130>
 800407c:	2301      	movs	r3, #1
 800407e:	464a      	mov	r2, r9
 8004080:	4639      	mov	r1, r7
 8004082:	4630      	mov	r0, r6
 8004084:	47c0      	blx	r8
 8004086:	3001      	adds	r0, #1
 8004088:	d09a      	beq.n	8003fc0 <_printf_i+0x12c>
 800408a:	3501      	adds	r5, #1
 800408c:	68e3      	ldr	r3, [r4, #12]
 800408e:	9a03      	ldr	r2, [sp, #12]
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	42ab      	cmp	r3, r5
 8004094:	dcf2      	bgt.n	800407c <_printf_i+0x1e8>
 8004096:	e7eb      	b.n	8004070 <_printf_i+0x1dc>
 8004098:	2500      	movs	r5, #0
 800409a:	f104 0919 	add.w	r9, r4, #25
 800409e:	e7f5      	b.n	800408c <_printf_i+0x1f8>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1ac      	bne.n	8003ffe <_printf_i+0x16a>
 80040a4:	7803      	ldrb	r3, [r0, #0]
 80040a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ae:	e76c      	b.n	8003f8a <_printf_i+0xf6>
 80040b0:	08004421 	.word	0x08004421
 80040b4:	08004432 	.word	0x08004432

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4c06      	ldr	r4, [pc, #24]	; (80040d4 <_sbrk_r+0x1c>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4605      	mov	r5, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	f7fd f85c 	bl	8001180 <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	6823      	ldr	r3, [r4, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	602b      	str	r3, [r5, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	2000011c 	.word	0x2000011c

080040d8 <__sread>:
 80040d8:	b510      	push	{r4, lr}
 80040da:	460c      	mov	r4, r1
 80040dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040e0:	f000 f896 	bl	8004210 <_read_r>
 80040e4:	2800      	cmp	r0, #0
 80040e6:	bfab      	itete	ge
 80040e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80040ea:	89a3      	ldrhlt	r3, [r4, #12]
 80040ec:	181b      	addge	r3, r3, r0
 80040ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80040f2:	bfac      	ite	ge
 80040f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80040f6:	81a3      	strhlt	r3, [r4, #12]
 80040f8:	bd10      	pop	{r4, pc}

080040fa <__swrite>:
 80040fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040fe:	461f      	mov	r7, r3
 8004100:	898b      	ldrh	r3, [r1, #12]
 8004102:	05db      	lsls	r3, r3, #23
 8004104:	4605      	mov	r5, r0
 8004106:	460c      	mov	r4, r1
 8004108:	4616      	mov	r6, r2
 800410a:	d505      	bpl.n	8004118 <__swrite+0x1e>
 800410c:	2302      	movs	r3, #2
 800410e:	2200      	movs	r2, #0
 8004110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004114:	f000 f868 	bl	80041e8 <_lseek_r>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800411e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	4632      	mov	r2, r6
 8004126:	463b      	mov	r3, r7
 8004128:	4628      	mov	r0, r5
 800412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800412e:	f000 b817 	b.w	8004160 <_write_r>

08004132 <__sseek>:
 8004132:	b510      	push	{r4, lr}
 8004134:	460c      	mov	r4, r1
 8004136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800413a:	f000 f855 	bl	80041e8 <_lseek_r>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	89a3      	ldrh	r3, [r4, #12]
 8004142:	bf15      	itete	ne
 8004144:	6560      	strne	r0, [r4, #84]	; 0x54
 8004146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800414a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800414e:	81a3      	strheq	r3, [r4, #12]
 8004150:	bf18      	it	ne
 8004152:	81a3      	strhne	r3, [r4, #12]
 8004154:	bd10      	pop	{r4, pc}

08004156 <__sclose>:
 8004156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800415a:	f000 b813 	b.w	8004184 <_close_r>
	...

08004160 <_write_r>:
 8004160:	b538      	push	{r3, r4, r5, lr}
 8004162:	4c07      	ldr	r4, [pc, #28]	; (8004180 <_write_r+0x20>)
 8004164:	4605      	mov	r5, r0
 8004166:	4608      	mov	r0, r1
 8004168:	4611      	mov	r1, r2
 800416a:	2200      	movs	r2, #0
 800416c:	6022      	str	r2, [r4, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	f7fc fa9b 	bl	80006aa <_write>
 8004174:	1c43      	adds	r3, r0, #1
 8004176:	d102      	bne.n	800417e <_write_r+0x1e>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	b103      	cbz	r3, 800417e <_write_r+0x1e>
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	bd38      	pop	{r3, r4, r5, pc}
 8004180:	2000011c 	.word	0x2000011c

08004184 <_close_r>:
 8004184:	b538      	push	{r3, r4, r5, lr}
 8004186:	4c06      	ldr	r4, [pc, #24]	; (80041a0 <_close_r+0x1c>)
 8004188:	2300      	movs	r3, #0
 800418a:	4605      	mov	r5, r0
 800418c:	4608      	mov	r0, r1
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	f7fc ffc1 	bl	8001116 <_close>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_close_r+0x1a>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	b103      	cbz	r3, 800419e <_close_r+0x1a>
 800419c:	602b      	str	r3, [r5, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	2000011c 	.word	0x2000011c

080041a4 <_fstat_r>:
 80041a4:	b538      	push	{r3, r4, r5, lr}
 80041a6:	4c07      	ldr	r4, [pc, #28]	; (80041c4 <_fstat_r+0x20>)
 80041a8:	2300      	movs	r3, #0
 80041aa:	4605      	mov	r5, r0
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	f7fc ffbc 	bl	800112e <_fstat>
 80041b6:	1c43      	adds	r3, r0, #1
 80041b8:	d102      	bne.n	80041c0 <_fstat_r+0x1c>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	b103      	cbz	r3, 80041c0 <_fstat_r+0x1c>
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	bd38      	pop	{r3, r4, r5, pc}
 80041c2:	bf00      	nop
 80041c4:	2000011c 	.word	0x2000011c

080041c8 <_isatty_r>:
 80041c8:	b538      	push	{r3, r4, r5, lr}
 80041ca:	4c06      	ldr	r4, [pc, #24]	; (80041e4 <_isatty_r+0x1c>)
 80041cc:	2300      	movs	r3, #0
 80041ce:	4605      	mov	r5, r0
 80041d0:	4608      	mov	r0, r1
 80041d2:	6023      	str	r3, [r4, #0]
 80041d4:	f7fc ffbb 	bl	800114e <_isatty>
 80041d8:	1c43      	adds	r3, r0, #1
 80041da:	d102      	bne.n	80041e2 <_isatty_r+0x1a>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	b103      	cbz	r3, 80041e2 <_isatty_r+0x1a>
 80041e0:	602b      	str	r3, [r5, #0]
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
 80041e4:	2000011c 	.word	0x2000011c

080041e8 <_lseek_r>:
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	4c07      	ldr	r4, [pc, #28]	; (8004208 <_lseek_r+0x20>)
 80041ec:	4605      	mov	r5, r0
 80041ee:	4608      	mov	r0, r1
 80041f0:	4611      	mov	r1, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	6022      	str	r2, [r4, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	f7fc ffb4 	bl	8001164 <_lseek>
 80041fc:	1c43      	adds	r3, r0, #1
 80041fe:	d102      	bne.n	8004206 <_lseek_r+0x1e>
 8004200:	6823      	ldr	r3, [r4, #0]
 8004202:	b103      	cbz	r3, 8004206 <_lseek_r+0x1e>
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	2000011c 	.word	0x2000011c

0800420c <__malloc_lock>:
 800420c:	4770      	bx	lr

0800420e <__malloc_unlock>:
 800420e:	4770      	bx	lr

08004210 <_read_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4c07      	ldr	r4, [pc, #28]	; (8004230 <_read_r+0x20>)
 8004214:	4605      	mov	r5, r0
 8004216:	4608      	mov	r0, r1
 8004218:	4611      	mov	r1, r2
 800421a:	2200      	movs	r2, #0
 800421c:	6022      	str	r2, [r4, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	f7fc ff5c 	bl	80010dc <_read>
 8004224:	1c43      	adds	r3, r0, #1
 8004226:	d102      	bne.n	800422e <_read_r+0x1e>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	b103      	cbz	r3, 800422e <_read_r+0x1e>
 800422c:	602b      	str	r3, [r5, #0]
 800422e:	bd38      	pop	{r3, r4, r5, pc}
 8004230:	2000011c 	.word	0x2000011c

08004234 <_init>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr

08004240 <_fini>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	bf00      	nop
 8004244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004246:	bc08      	pop	{r3}
 8004248:	469e      	mov	lr, r3
 800424a:	4770      	bx	lr
