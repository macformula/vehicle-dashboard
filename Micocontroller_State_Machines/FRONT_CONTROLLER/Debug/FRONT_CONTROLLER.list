
FRONT_CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005630  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005838  08005838  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005840  08005840  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000010  08005858  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08005858  00020484  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133cb  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021fe  00000000  00000000  00033409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  000369d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002830a  00000000  00000000  00037ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118be  00000000  00000000  0005ffaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101c3e  00000000  00000000  00071868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001734a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  001734fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08005810 	.word	0x08005810

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08005810 	.word	0x08005810

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <pack_left_shift_u8>:

static inline uint8_t pack_left_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	460b      	mov	r3, r1
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	4613      	mov	r3, r2
 8000540:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000542:	79fa      	ldrb	r2, [r7, #7]
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	fa02 f303 	lsl.w	r3, r2, r3
 800054a:	b2da      	uxtb	r2, r3
 800054c:	797b      	ldrb	r3, [r7, #5]
 800054e:	4013      	ands	r3, r2
 8000550:	b2db      	uxtb	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <pack_left_shift_u16>:

static inline uint8_t pack_left_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	4603      	mov	r3, r0
 8000566:	80fb      	strh	r3, [r7, #6]
 8000568:	460b      	mov	r3, r1
 800056a:	717b      	strb	r3, [r7, #5]
 800056c:	4613      	mov	r3, r2
 800056e:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value << shift) & mask);
 8000570:	88fa      	ldrh	r2, [r7, #6]
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	fa02 f303 	lsl.w	r3, r2, r3
 8000578:	b2da      	uxtb	r2, r3
 800057a:	793b      	ldrb	r3, [r7, #4]
 800057c:	4013      	ands	r3, r2
 800057e:	b2db      	uxtb	r3, r3
}
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <pack_right_shift_u16>:

static inline uint8_t pack_right_shift_u16(
    uint16_t value,
    uint8_t shift,
    uint8_t mask)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
 8000596:	460b      	mov	r3, r1
 8000598:	717b      	strb	r3, [r7, #5]
 800059a:	4613      	mov	r3, r2
 800059c:	713b      	strb	r3, [r7, #4]
    return (uint8_t)((uint8_t)(value >> shift) & mask);
 800059e:	88fa      	ldrh	r2, [r7, #6]
 80005a0:	797b      	ldrb	r3, [r7, #5]
 80005a2:	fa42 f303 	asr.w	r3, r2, r3
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	793b      	ldrb	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	b2db      	uxtb	r3, r3
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <unpack_left_shift_u16>:

static inline uint16_t unpack_left_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80005ba:	b480      	push	{r7}
 80005bc:	b083      	sub	sp, #12
 80005be:	af00      	add	r7, sp, #0
 80005c0:	4603      	mov	r3, r0
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	460b      	mov	r3, r1
 80005c6:	71bb      	strb	r3, [r7, #6]
 80005c8:	4613      	mov	r3, r2
 80005ca:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) << shift);
 80005cc:	79fa      	ldrb	r2, [r7, #7]
 80005ce:	797b      	ldrb	r3, [r7, #5]
 80005d0:	4013      	ands	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	461a      	mov	r2, r3
 80005d6:	79bb      	ldrb	r3, [r7, #6]
 80005d8:	fa02 f303 	lsl.w	r3, r2, r3
 80005dc:	b29b      	uxth	r3, r3
}
 80005de:	4618      	mov	r0, r3
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <unpack_right_shift_u8>:

static inline uint8_t unpack_right_shift_u8(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	4603      	mov	r3, r0
 80005f2:	71fb      	strb	r3, [r7, #7]
 80005f4:	460b      	mov	r3, r1
 80005f6:	71bb      	strb	r3, [r7, #6]
 80005f8:	4613      	mov	r3, r2
 80005fa:	717b      	strb	r3, [r7, #5]
    return (uint8_t)((uint8_t)(value & mask) >> shift);
 80005fc:	79fa      	ldrb	r2, [r7, #7]
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	4013      	ands	r3, r2
 8000602:	b2db      	uxtb	r3, r3
 8000604:	461a      	mov	r2, r3
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	fa42 f303 	asr.w	r3, r2, r3
 800060c:	b2db      	uxtb	r3, r3
}
 800060e:	4618      	mov	r0, r3
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <unpack_right_shift_u16>:

static inline uint16_t unpack_right_shift_u16(
    uint8_t value,
    uint8_t shift,
    uint8_t mask)
{
 800061a:	b480      	push	{r7}
 800061c:	b083      	sub	sp, #12
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	71fb      	strb	r3, [r7, #7]
 8000624:	460b      	mov	r3, r1
 8000626:	71bb      	strb	r3, [r7, #6]
 8000628:	4613      	mov	r3, r2
 800062a:	717b      	strb	r3, [r7, #5]
    return (uint16_t)((uint16_t)(value & mask) >> shift);
 800062c:	79fa      	ldrb	r2, [r7, #7]
 800062e:	797b      	ldrb	r3, [r7, #5]
 8000630:	4013      	ands	r3, r2
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	fa42 f303 	asr.w	r3, r2, r3
 800063c:	b29b      	uxth	r3, r3
}
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <can_amk_inverter_amk0_actual_values1_pack>:

int can_amk_inverter_amk0_actual_values1_pack(
    uint8_t *dst_p,
    const struct can_amk_inverter_amk0_actual_values1_t *src_p,
    size_t size)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b086      	sub	sp, #24
 800064e:	af00      	add	r7, sp, #0
 8000650:	60f8      	str	r0, [r7, #12]
 8000652:	60b9      	str	r1, [r7, #8]
 8000654:	607a      	str	r2, [r7, #4]
    uint16_t amk_actual_velocity;
    uint16_t amk_magnetizing_current;
    uint16_t amk_torque_current;

    if (size < 8u) {
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b07      	cmp	r3, #7
 800065a:	d802      	bhi.n	8000662 <can_amk_inverter_amk0_actual_values1_pack+0x18>
        return (-EINVAL);
 800065c:	f06f 0315 	mvn.w	r3, #21
 8000660:	e0f9      	b.n	8000856 <can_amk_inverter_amk0_actual_values1_pack+0x20c>
    }

    memset(&dst_p[0], 0, 8);
 8000662:	2208      	movs	r2, #8
 8000664:	2100      	movs	r1, #0
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f005 f8ca 	bl	8005800 <memset>

    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_system_ready, 0u, 0x01u);
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2201      	movs	r2, #1
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff ff5b 	bl	8000530 <pack_left_shift_u8>
 800067a:	4603      	mov	r3, r0
 800067c:	4619      	mov	r1, r3
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	781a      	ldrb	r2, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	3301      	adds	r3, #1
 8000688:	430a      	orrs	r2, r1
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_error, 1u, 0x02u);
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	2202      	movs	r2, #2
 8000694:	2101      	movs	r1, #1
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff4a 	bl	8000530 <pack_left_shift_u8>
 800069c:	4603      	mov	r3, r0
 800069e:	4619      	mov	r1, r3
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	3301      	adds	r3, #1
 80006aa:	430a      	orrs	r2, r1
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_warn, 2u, 0x04u);
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	789b      	ldrb	r3, [r3, #2]
 80006b4:	2204      	movs	r2, #4
 80006b6:	2102      	movs	r1, #2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff39 	bl	8000530 <pack_left_shift_u8>
 80006be:	4603      	mov	r3, r0
 80006c0:	4619      	mov	r1, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	3301      	adds	r3, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_quit_dc_on, 3u, 0x08u);
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	78db      	ldrb	r3, [r3, #3]
 80006d6:	2208      	movs	r2, #8
 80006d8:	2103      	movs	r1, #3
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff28 	bl	8000530 <pack_left_shift_u8>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4619      	mov	r1, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	3301      	adds	r3, #1
 80006e8:	781a      	ldrb	r2, [r3, #0]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	3301      	adds	r3, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_dc_on, 4u, 0x10u);
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	791b      	ldrb	r3, [r3, #4]
 80006f8:	2210      	movs	r2, #16
 80006fa:	2104      	movs	r1, #4
 80006fc:	4618      	mov	r0, r3
 80006fe:	f7ff ff17 	bl	8000530 <pack_left_shift_u8>
 8000702:	4603      	mov	r3, r0
 8000704:	4619      	mov	r1, r3
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3301      	adds	r3, #1
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	430a      	orrs	r2, r1
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_quit_inverter_on, 5u, 0x20u);
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	795b      	ldrb	r3, [r3, #5]
 800071a:	2220      	movs	r2, #32
 800071c:	2105      	movs	r1, #5
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff06 	bl	8000530 <pack_left_shift_u8>
 8000724:	4603      	mov	r3, r0
 8000726:	4619      	mov	r1, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	781a      	ldrb	r2, [r3, #0]
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3301      	adds	r3, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_inverter_on, 6u, 0x40u);
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	799b      	ldrb	r3, [r3, #6]
 800073c:	2240      	movs	r2, #64	; 0x40
 800073e:	2106      	movs	r1, #6
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fef5 	bl	8000530 <pack_left_shift_u8>
 8000746:	4603      	mov	r3, r0
 8000748:	4619      	mov	r1, r3
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	781a      	ldrb	r2, [r3, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3301      	adds	r3, #1
 8000754:	430a      	orrs	r2, r1
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_derating, 7u, 0x80u);
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	79db      	ldrb	r3, [r3, #7]
 800075e:	2280      	movs	r2, #128	; 0x80
 8000760:	2107      	movs	r1, #7
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fee4 	bl	8000530 <pack_left_shift_u8>
 8000768:	4603      	mov	r3, r0
 800076a:	4619      	mov	r1, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	781a      	ldrb	r2, [r3, #0]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	701a      	strb	r2, [r3, #0]
    amk_actual_velocity = (uint16_t)src_p->amk_actual_velocity;
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000782:	82fb      	strh	r3, [r7, #22]
    dst_p[2] |= pack_left_shift_u16(amk_actual_velocity, 0u, 0xffu);
 8000784:	8afb      	ldrh	r3, [r7, #22]
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fee7 	bl	800055e <pack_left_shift_u16>
 8000790:	4603      	mov	r3, r0
 8000792:	4619      	mov	r1, r3
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	3302      	adds	r3, #2
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3302      	adds	r3, #2
 800079e:	430a      	orrs	r2, r1
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(amk_actual_velocity, 8u, 0xffu);
 80007a4:	8afb      	ldrh	r3, [r7, #22]
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	2108      	movs	r1, #8
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff feee 	bl	800058c <pack_right_shift_u16>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4619      	mov	r1, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	3303      	adds	r3, #3
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3303      	adds	r3, #3
 80007be:	430a      	orrs	r2, r1
 80007c0:	b2d2      	uxtb	r2, r2
 80007c2:	701a      	strb	r2, [r3, #0]
    amk_torque_current = (uint16_t)src_p->amk_torque_current;
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80007ca:	82bb      	strh	r3, [r7, #20]
    dst_p[4] |= pack_left_shift_u16(amk_torque_current, 0u, 0xffu);
 80007cc:	8abb      	ldrh	r3, [r7, #20]
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff fec3 	bl	800055e <pack_left_shift_u16>
 80007d8:	4603      	mov	r3, r0
 80007da:	4619      	mov	r1, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	3304      	adds	r3, #4
 80007e0:	781a      	ldrb	r2, [r3, #0]
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3304      	adds	r3, #4
 80007e6:	430a      	orrs	r2, r1
 80007e8:	b2d2      	uxtb	r2, r2
 80007ea:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(amk_torque_current, 8u, 0xffu);
 80007ec:	8abb      	ldrh	r3, [r7, #20]
 80007ee:	22ff      	movs	r2, #255	; 0xff
 80007f0:	2108      	movs	r1, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff feca 	bl	800058c <pack_right_shift_u16>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3305      	adds	r3, #5
 8000800:	781a      	ldrb	r2, [r3, #0]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3305      	adds	r3, #5
 8000806:	430a      	orrs	r2, r1
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	701a      	strb	r2, [r3, #0]
    amk_magnetizing_current = (uint16_t)src_p->amk_magnetizing_current;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000812:	827b      	strh	r3, [r7, #18]
    dst_p[6] |= pack_left_shift_u16(amk_magnetizing_current, 0u, 0xffu);
 8000814:	8a7b      	ldrh	r3, [r7, #18]
 8000816:	22ff      	movs	r2, #255	; 0xff
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fe9f 	bl	800055e <pack_left_shift_u16>
 8000820:	4603      	mov	r3, r0
 8000822:	4619      	mov	r1, r3
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3306      	adds	r3, #6
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	3306      	adds	r3, #6
 800082e:	430a      	orrs	r2, r1
 8000830:	b2d2      	uxtb	r2, r2
 8000832:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(amk_magnetizing_current, 8u, 0xffu);
 8000834:	8a7b      	ldrh	r3, [r7, #18]
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	2108      	movs	r1, #8
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fea6 	bl	800058c <pack_right_shift_u16>
 8000840:	4603      	mov	r3, r0
 8000842:	4619      	mov	r1, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3307      	adds	r3, #7
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	3307      	adds	r3, #7
 800084e:	430a      	orrs	r2, r1
 8000850:	b2d2      	uxtb	r2, r2
 8000852:	701a      	strb	r2, [r3, #0]

    return (8);
 8000854:	2308      	movs	r3, #8
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <can_amk_inverter_amk0_actual_values1_unpack>:

int can_amk_inverter_amk0_actual_values1_unpack(
    struct can_amk_inverter_amk0_actual_values1_t *dst_p,
    const uint8_t *src_p,
    size_t size)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	60f8      	str	r0, [r7, #12]
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
    uint16_t amk_actual_velocity;
    uint16_t amk_magnetizing_current;
    uint16_t amk_torque_current;

    if (size < 8u) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d802      	bhi.n	8000876 <can_amk_inverter_amk0_actual_values1_unpack+0x18>
        return (-EINVAL);
 8000870:	f06f 0315 	mvn.w	r3, #21
 8000874:	e0b1      	b.n	80009da <can_amk_inverter_amk0_actual_values1_unpack+0x17c>
    }

    dst_p->amk_b_system_ready = unpack_right_shift_u8(src_p[1], 0u, 0x01u);
 8000876:	68bb      	ldr	r3, [r7, #8]
 8000878:	3301      	adds	r3, #1
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2201      	movs	r2, #1
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff feb2 	bl	80005ea <unpack_right_shift_u8>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	701a      	strb	r2, [r3, #0]
    dst_p->amk_b_error = unpack_right_shift_u8(src_p[1], 1u, 0x02u);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2202      	movs	r2, #2
 8000896:	2101      	movs	r1, #1
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff fea6 	bl	80005ea <unpack_right_shift_u8>
 800089e:	4603      	mov	r3, r0
 80008a0:	461a      	mov	r2, r3
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	705a      	strb	r2, [r3, #1]
    dst_p->amk_b_warn = unpack_right_shift_u8(src_p[1], 2u, 0x04u);
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	3301      	adds	r3, #1
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2204      	movs	r2, #4
 80008ae:	2102      	movs	r1, #2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe9a 	bl	80005ea <unpack_right_shift_u8>
 80008b6:	4603      	mov	r3, r0
 80008b8:	461a      	mov	r2, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	709a      	strb	r2, [r3, #2]
    dst_p->amk_b_quit_dc_on = unpack_right_shift_u8(src_p[1], 3u, 0x08u);
 80008be:	68bb      	ldr	r3, [r7, #8]
 80008c0:	3301      	adds	r3, #1
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2208      	movs	r2, #8
 80008c6:	2103      	movs	r1, #3
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe8e 	bl	80005ea <unpack_right_shift_u8>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	70da      	strb	r2, [r3, #3]
    dst_p->amk_b_dc_on = unpack_right_shift_u8(src_p[1], 4u, 0x10u);
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	3301      	adds	r3, #1
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2210      	movs	r2, #16
 80008de:	2104      	movs	r1, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe82 	bl	80005ea <unpack_right_shift_u8>
 80008e6:	4603      	mov	r3, r0
 80008e8:	461a      	mov	r2, r3
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	711a      	strb	r2, [r3, #4]
    dst_p->amk_b_quit_inverter_on = unpack_right_shift_u8(src_p[1], 5u, 0x20u);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2220      	movs	r2, #32
 80008f6:	2105      	movs	r1, #5
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fe76 	bl	80005ea <unpack_right_shift_u8>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	715a      	strb	r2, [r3, #5]
    dst_p->amk_b_inverter_on = unpack_right_shift_u8(src_p[1], 6u, 0x40u);
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	3301      	adds	r3, #1
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2240      	movs	r2, #64	; 0x40
 800090e:	2106      	movs	r1, #6
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fe6a 	bl	80005ea <unpack_right_shift_u8>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	719a      	strb	r2, [r3, #6]
    dst_p->amk_b_derating = unpack_right_shift_u8(src_p[1], 7u, 0x80u);
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	3301      	adds	r3, #1
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	2107      	movs	r1, #7
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe5e 	bl	80005ea <unpack_right_shift_u8>
 800092e:	4603      	mov	r3, r0
 8000930:	461a      	mov	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	71da      	strb	r2, [r3, #7]
    amk_actual_velocity = unpack_right_shift_u16(src_p[2], 0u, 0xffu);
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3302      	adds	r3, #2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	22ff      	movs	r2, #255	; 0xff
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fe6a 	bl	800061a <unpack_right_shift_u16>
 8000946:	4603      	mov	r3, r0
 8000948:	82fb      	strh	r3, [r7, #22]
    amk_actual_velocity |= unpack_left_shift_u16(src_p[3], 8u, 0xffu);
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	3303      	adds	r3, #3
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	22ff      	movs	r2, #255	; 0xff
 8000952:	2108      	movs	r1, #8
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe30 	bl	80005ba <unpack_left_shift_u16>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	8afb      	ldrh	r3, [r7, #22]
 8000960:	4313      	orrs	r3, r2
 8000962:	82fb      	strh	r3, [r7, #22]
    dst_p->amk_actual_velocity = (int16_t)amk_actual_velocity;
 8000964:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	811a      	strh	r2, [r3, #8]
    amk_torque_current = unpack_right_shift_u16(src_p[4], 0u, 0xffu);
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	3304      	adds	r3, #4
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe4f 	bl	800061a <unpack_right_shift_u16>
 800097c:	4603      	mov	r3, r0
 800097e:	82bb      	strh	r3, [r7, #20]
    amk_torque_current |= unpack_left_shift_u16(src_p[5], 8u, 0xffu);
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	3305      	adds	r3, #5
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	22ff      	movs	r2, #255	; 0xff
 8000988:	2108      	movs	r1, #8
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fe15 	bl	80005ba <unpack_left_shift_u16>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	8abb      	ldrh	r3, [r7, #20]
 8000996:	4313      	orrs	r3, r2
 8000998:	82bb      	strh	r3, [r7, #20]
    dst_p->amk_torque_current = (int16_t)amk_torque_current;
 800099a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	815a      	strh	r2, [r3, #10]
    amk_magnetizing_current = unpack_right_shift_u16(src_p[6], 0u, 0xffu);
 80009a2:	68bb      	ldr	r3, [r7, #8]
 80009a4:	3306      	adds	r3, #6
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	22ff      	movs	r2, #255	; 0xff
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fe34 	bl	800061a <unpack_right_shift_u16>
 80009b2:	4603      	mov	r3, r0
 80009b4:	827b      	strh	r3, [r7, #18]
    amk_magnetizing_current |= unpack_left_shift_u16(src_p[7], 8u, 0xffu);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3307      	adds	r3, #7
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	2108      	movs	r1, #8
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fdfa 	bl	80005ba <unpack_left_shift_u16>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	8a7b      	ldrh	r3, [r7, #18]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	827b      	strh	r3, [r7, #18]
    dst_p->amk_magnetizing_current = (int16_t)amk_magnetizing_current;
 80009d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	819a      	strh	r2, [r3, #12]

    return (0);
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <can_amk_inverter_amk0_set_points1_pack>:

int can_amk_inverter_amk0_set_points1_pack(
    uint8_t *dst_p,
    const struct can_amk_inverter_amk0_set_points1_t *src_p,
    size_t size)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b086      	sub	sp, #24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
    uint16_t amk_target_velocity;
    uint16_t amk_torque_limit_negativ;
    uint16_t amk_torque_limit_positiv;

    if (size < 8u) {
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2b07      	cmp	r3, #7
 80009f2:	d802      	bhi.n	80009fa <can_amk_inverter_amk0_set_points1_pack+0x18>
        return (-EINVAL);
 80009f4:	f06f 0315 	mvn.w	r3, #21
 80009f8:	e0b5      	b.n	8000b66 <can_amk_inverter_amk0_set_points1_pack+0x184>
    }

    memset(&dst_p[0], 0, 8);
 80009fa:	2208      	movs	r2, #8
 80009fc:	2100      	movs	r1, #0
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f004 fefe 	bl	8005800 <memset>

    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_inverter_on, 0u, 0x01u);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fd8f 	bl	8000530 <pack_left_shift_u8>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4619      	mov	r1, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_dc_on, 1u, 0x02u);
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fd7e 	bl	8000530 <pack_left_shift_u8>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4619      	mov	r1, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	781a      	ldrb	r2, [r3, #0]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	3301      	adds	r3, #1
 8000a42:	430a      	orrs	r2, r1
 8000a44:	b2d2      	uxtb	r2, r2
 8000a46:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_enable, 2u, 0x04u);
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fd6d 	bl	8000530 <pack_left_shift_u8>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	430a      	orrs	r2, r1
 8000a66:	b2d2      	uxtb	r2, r2
 8000a68:	701a      	strb	r2, [r3, #0]
    dst_p[1] |= pack_left_shift_u8(src_p->amk_b_error_reset, 3u, 0x08u);
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	78db      	ldrb	r3, [r3, #3]
 8000a6e:	2208      	movs	r2, #8
 8000a70:	2103      	movs	r1, #3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fd5c 	bl	8000530 <pack_left_shift_u8>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3301      	adds	r3, #1
 8000a86:	430a      	orrs	r2, r1
 8000a88:	b2d2      	uxtb	r2, r2
 8000a8a:	701a      	strb	r2, [r3, #0]
    amk_target_velocity = (uint16_t)src_p->amk_target_velocity;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a92:	82fb      	strh	r3, [r7, #22]
    dst_p[2] |= pack_left_shift_u16(amk_target_velocity, 0u, 0xffu);
 8000a94:	8afb      	ldrh	r3, [r7, #22]
 8000a96:	22ff      	movs	r2, #255	; 0xff
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd5f 	bl	800055e <pack_left_shift_u16>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	781a      	ldrb	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3302      	adds	r3, #2
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	701a      	strb	r2, [r3, #0]
    dst_p[3] |= pack_right_shift_u16(amk_target_velocity, 8u, 0xffu);
 8000ab4:	8afb      	ldrh	r3, [r7, #22]
 8000ab6:	22ff      	movs	r2, #255	; 0xff
 8000ab8:	2108      	movs	r1, #8
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fd66 	bl	800058c <pack_right_shift_u16>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3303      	adds	r3, #3
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3303      	adds	r3, #3
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
    amk_torque_limit_positiv = (uint16_t)src_p->amk_torque_limit_positiv;
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ada:	82bb      	strh	r3, [r7, #20]
    dst_p[4] |= pack_left_shift_u16(amk_torque_limit_positiv, 0u, 0xffu);
 8000adc:	8abb      	ldrh	r3, [r7, #20]
 8000ade:	22ff      	movs	r2, #255	; 0xff
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fd3b 	bl	800055e <pack_left_shift_u16>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	4619      	mov	r1, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3304      	adds	r3, #4
 8000af0:	781a      	ldrb	r2, [r3, #0]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3304      	adds	r3, #4
 8000af6:	430a      	orrs	r2, r1
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	701a      	strb	r2, [r3, #0]
    dst_p[5] |= pack_right_shift_u16(amk_torque_limit_positiv, 8u, 0xffu);
 8000afc:	8abb      	ldrh	r3, [r7, #20]
 8000afe:	22ff      	movs	r2, #255	; 0xff
 8000b00:	2108      	movs	r1, #8
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fd42 	bl	800058c <pack_right_shift_u16>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	3305      	adds	r3, #5
 8000b10:	781a      	ldrb	r2, [r3, #0]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	3305      	adds	r3, #5
 8000b16:	430a      	orrs	r2, r1
 8000b18:	b2d2      	uxtb	r2, r2
 8000b1a:	701a      	strb	r2, [r3, #0]
    amk_torque_limit_negativ = (uint16_t)src_p->amk_torque_limit_negativ;
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000b22:	827b      	strh	r3, [r7, #18]
    dst_p[6] |= pack_left_shift_u16(amk_torque_limit_negativ, 0u, 0xffu);
 8000b24:	8a7b      	ldrh	r3, [r7, #18]
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fd17 	bl	800055e <pack_left_shift_u16>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4619      	mov	r1, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	3306      	adds	r3, #6
 8000b38:	781a      	ldrb	r2, [r3, #0]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	3306      	adds	r3, #6
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	b2d2      	uxtb	r2, r2
 8000b42:	701a      	strb	r2, [r3, #0]
    dst_p[7] |= pack_right_shift_u16(amk_torque_limit_negativ, 8u, 0xffu);
 8000b44:	8a7b      	ldrh	r3, [r7, #18]
 8000b46:	22ff      	movs	r2, #255	; 0xff
 8000b48:	2108      	movs	r1, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fd1e 	bl	800058c <pack_right_shift_u16>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4619      	mov	r1, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3307      	adds	r3, #7
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	3307      	adds	r3, #7
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	701a      	strb	r2, [r3, #0]

    return (8);
 8000b64:	2308      	movs	r3, #8
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f001 fa80 	bl	800207a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f8d7 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fb51 	bl	8001224 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b82:	f000 f943 	bl	8000e0c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b86:	f000 f993 	bl	8000eb0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000b8a:	f000 f9e3 	bl	8000f54 <MX_ADC3_Init>
  MX_CAN3_Init();
 8000b8e:	f000 fa69 	bl	8001064 <MX_CAN3_Init>
  MX_CAN1_Init();
 8000b92:	f000 fa31 	bl	8000ff8 <MX_CAN1_Init>
  MX_TIM14_Init();
 8000b96:	f000 fb21 	bl	80011dc <MX_TIM14_Init>
  MX_TIM13_Init();
 8000b9a:	f000 fafb 	bl	8001194 <MX_TIM13_Init>
  MX_SPI4_Init();
 8000b9e:	f000 fa97 	bl	80010d0 <MX_SPI4_Init>
  MX_TIM10_Init();
 8000ba2:	f000 fad3 	bl	800114c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  //INITIALIZE CAN, ADC's, GPIO, BRAKE LIGHT, GPS, IMU
  configure_hardware();
 8000ba6:	f000 fbff 	bl	80013a8 <configure_hardware>

  //Initial state machine configuration
  startup.startup_state = WAIT_BMS;
 8000baa:	4b53      	ldr	r3, [pc, #332]	; (8000cf8 <main+0x188>)
 8000bac:	2202      	movs	r2, #2
 8000bae:	701a      	strb	r2, [r3, #0]
  startup.amk_start_state = BEGIN_MOTOR_INIT;
 8000bb0:	4b51      	ldr	r3, [pc, #324]	; (8000cf8 <main+0x188>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	709a      	strb	r2, [r3, #2]
  startup.mpo_state = RESET_CONT;
 8000bb6:	4b50      	ldr	r3, [pc, #320]	; (8000cf8 <main+0x188>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	705a      	strb	r2, [r3, #1]

  //HAL_Delay(2000);

  adxl_init();
 8000bbc:	f000 fdc6 	bl	800174c <adxl_init>
        //mpo_state = SUSPENDED;
        //mpo_state = RESET_CONT;

        //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
  int pin_state, last_pin_state;
  last_pin_state = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  adxl_read(0x32);
 8000bc4:	2032      	movs	r0, #50	; 0x32
 8000bc6:	f000 fd91 	bl	80016ec <adxl_read>
	  x = ((data_rec[1]<<8)|data_rec[0]);
 8000bca:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <main+0x18c>)
 8000bcc:	785b      	ldrb	r3, [r3, #1]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	b21a      	sxth	r2, r3
 8000bd2:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <main+0x18c>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b48      	ldr	r3, [pc, #288]	; (8000d00 <main+0x190>)
 8000bde:	801a      	strh	r2, [r3, #0]
	  y = ((data_rec[3]<<8)|data_rec[2]);
 8000be0:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <main+0x18c>)
 8000be2:	78db      	ldrb	r3, [r3, #3]
 8000be4:	021b      	lsls	r3, r3, #8
 8000be6:	b21a      	sxth	r2, r3
 8000be8:	4b44      	ldr	r3, [pc, #272]	; (8000cfc <main+0x18c>)
 8000bea:	789b      	ldrb	r3, [r3, #2]
 8000bec:	b21b      	sxth	r3, r3
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	4b44      	ldr	r3, [pc, #272]	; (8000d04 <main+0x194>)
 8000bf4:	801a      	strh	r2, [r3, #0]
	  z = ((data_rec[5]<<8)|data_rec[4]);
 8000bf6:	4b41      	ldr	r3, [pc, #260]	; (8000cfc <main+0x18c>)
 8000bf8:	795b      	ldrb	r3, [r3, #5]
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	b21a      	sxth	r2, r3
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <main+0x18c>)
 8000c00:	791b      	ldrb	r3, [r3, #4]
 8000c02:	b21b      	sxth	r3, r3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <main+0x198>)
 8000c0a:	801a      	strh	r2, [r3, #0]
	  //convert into g
	  xg = x * .0078;
 8000c0c:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <main+0x190>)
 8000c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c12:	ee07 3a90 	vmov	s15, r3
 8000c16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c1a:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8000cf0 <main+0x180>
 8000c1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c26:	4b39      	ldr	r3, [pc, #228]	; (8000d0c <main+0x19c>)
 8000c28:	edc3 7a00 	vstr	s15, [r3]
	  yg = y * .0078;
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <main+0x194>)
 8000c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c32:	ee07 3a90 	vmov	s15, r3
 8000c36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c3a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8000cf0 <main+0x180>
 8000c3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c46:	4b32      	ldr	r3, [pc, #200]	; (8000d10 <main+0x1a0>)
 8000c48:	edc3 7a00 	vstr	s15, [r3]
	  zg = z * .0078;
 8000c4c:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <main+0x198>)
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c5a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000cf0 <main+0x180>
 8000c5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c66:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <main+0x1a4>)
 8000c68:	edc3 7a00 	vstr	s15, [r3]

	  TxData[0] = (uint8_t)xg;
 8000c6c:	4b27      	ldr	r3, [pc, #156]	; (8000d0c <main+0x19c>)
 8000c6e:	edd3 7a00 	vldr	s15, [r3]
 8000c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c76:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c7a:	793b      	ldrb	r3, [r7, #4]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <main+0x1a8>)
 8000c80:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (uint8_t)yg;
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <main+0x1a0>)
 8000c84:	edd3 7a00 	vldr	s15, [r3]
 8000c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c8c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c90:	793b      	ldrb	r3, [r7, #4]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <main+0x1a8>)
 8000c96:	705a      	strb	r2, [r3, #1]
	  TxData[2] = (uint8_t)zg;
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <main+0x1a4>)
 8000c9a:	edd3 7a00 	vldr	s15, [r3]
 8000c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ca2:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ca6:	793b      	ldrb	r3, [r7, #4]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <main+0x1a8>)
 8000cac:	709a      	strb	r2, [r3, #2]


	  HAL_CAN_AddTxMessage(&hcan3, &TxHeader, TxData, &TxMailbox);
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <main+0x1ac>)
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <main+0x1a8>)
 8000cb2:	491b      	ldr	r1, [pc, #108]	; (8000d20 <main+0x1b0>)
 8000cb4:	481b      	ldr	r0, [pc, #108]	; (8000d24 <main+0x1b4>)
 8000cb6:	f001 ff21 	bl	8002afc <HAL_CAN_AddTxMessage>
	  HAL_Delay(500);
 8000cba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cbe:	f001 fa39 	bl	8002134 <HAL_Delay>


	  //pin_state = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6);
	  if (startup.startup_state == WAIT_START_BTN_PRESS && start_pressed)
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <main+0x188>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b03      	cmp	r3, #3
 8000cc8:	d109      	bne.n	8000cde <main+0x16e>
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <main+0x1b8>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d005      	beq.n	8000cde <main+0x16e>
	  {
		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
		  startup.startup_state = CONTACTOR_SEQ;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <main+0x188>)
 8000cd4:	2204      	movs	r2, #4
 8000cd6:	701a      	strb	r2, [r3, #0]
		  startup.mpo_state = CLMPO3;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <main+0x188>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	705a      	strb	r2, [r3, #1]
	  }
	  //last_pin_state = pin_state;

	  if (startup.startup_state == START_MOTORS)
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <main+0x188>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	f47f af6e 	bne.w	8000bc4 <main+0x54>
		  perform_motor_step();
 8000ce8:	f000 fd78 	bl	80017dc <perform_motor_step>
	  adxl_read(0x32);
 8000cec:	e76a      	b.n	8000bc4 <main+0x54>
 8000cee:	bf00      	nop
 8000cf0:	8e8a71de 	.word	0x8e8a71de
 8000cf4:	3f7ff2e4 	.word	0x3f7ff2e4
 8000cf8:	2000011c 	.word	0x2000011c
 8000cfc:	20000450 	.word	0x20000450
 8000d00:	20000074 	.word	0x20000074
 8000d04:	2000036c 	.word	0x2000036c
 8000d08:	200001a4 	.word	0x200001a4
 8000d0c:	20000460 	.word	0x20000460
 8000d10:	20000408 	.word	0x20000408
 8000d14:	20000154 	.word	0x20000154
 8000d18:	2000004c 	.word	0x2000004c
 8000d1c:	20000370 	.word	0x20000370
 8000d20:	2000040c 	.word	0x2000040c
 8000d24:	2000015c 	.word	0x2000015c
 8000d28:	2000002c 	.word	0x2000002c

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	; 0x50
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 031c 	add.w	r3, r7, #28
 8000d36:	2234      	movs	r2, #52	; 0x34
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f004 fd60 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	f107 0308 	add.w	r3, r7, #8
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d50:	4b2c      	ldr	r3, [pc, #176]	; (8000e04 <SystemClock_Config+0xd8>)
 8000d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d54:	4a2b      	ldr	r2, [pc, #172]	; (8000e04 <SystemClock_Config+0xd8>)
 8000d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <SystemClock_Config+0xd8>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d68:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <SystemClock_Config+0xdc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <SystemClock_Config+0xdc>)
 8000d6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b24      	ldr	r3, [pc, #144]	; (8000e08 <SystemClock_Config+0xdc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7c:	603b      	str	r3, [r7, #0]
 8000d7e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d88:	2310      	movs	r3, #16
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d90:	2300      	movs	r3, #0
 8000d92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d94:	2310      	movs	r3, #16
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000d98:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000d9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fe4e 	bl	8003a50 <HAL_RCC_OscConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000dba:	f000 fea3 	bl	8001b04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dbe:	f002 fdf7 	bl	80039b0 <HAL_PWREx_EnableOverDrive>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000dc8:	f000 fe9c 	bl	8001b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dcc:	230f      	movs	r3, #15
 8000dce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ddc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	2107      	movs	r1, #7
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f8de 	bl	8003fac <HAL_RCC_ClockConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000df6:	f000 fe85 	bl	8001b04 <Error_Handler>
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3750      	adds	r7, #80	; 0x50
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40007000 	.word	0x40007000

08000e0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_ADC1_Init+0x9c>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <MX_ADC1_Init+0xa0>)
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e6e:	f001 f985 	bl	800217c <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e78:	f000 fe44 	bl	8001b04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000e7c:	230a      	movs	r3, #10
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC1_Init+0x98>)
 8000e8e:	f001 f9b9 	bl	8002204 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e98:	f000 fe34 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200001a8 	.word	0x200001a8
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ec4:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <MX_ADC2_Init+0x9c>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000eca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ece:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ed0:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ef2:	4a17      	ldr	r2, [pc, #92]	; (8000f50 <MX_ADC2_Init+0xa0>)
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f02:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000f12:	f001 f933 	bl	800217c <HAL_ADC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000f1c:	f000 fdf2 	bl	8001b04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f20:	230b      	movs	r3, #11
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_ADC2_Init+0x98>)
 8000f32:	f001 f967 	bl	8002204 <HAL_ADC_ConfigChannel>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000f3c:	f000 fde2 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000088 	.word	0x20000088
 8000f4c:	40012100 	.word	0x40012100
 8000f50:	0f000001 	.word	0x0f000001

08000f54 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000f66:	4b21      	ldr	r3, [pc, #132]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <MX_ADC3_Init+0x9c>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f7a:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f80:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b17      	ldr	r3, [pc, #92]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f94:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f96:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <MX_ADC3_Init+0xa0>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ADC3_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_ADC3_Init+0x98>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_ADC3_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_ADC3_Init+0x98>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_ADC3_Init+0x98>)
 8000fb6:	f001 f8e1 	bl	800217c <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 fda0 	bl	8001b04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fc4:	230c      	movs	r3, #12
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_ADC3_Init+0x98>)
 8000fd6:	f001 f915 	bl	8002204 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000fe0:	f000 fd90 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200001f0 	.word	0x200001f0
 8000ff0:	40012200 	.word	0x40012200
 8000ff4:	0f000001 	.word	0x0f000001

08000ff8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_CAN1_Init+0x64>)
 8000ffe:	4a18      	ldr	r2, [pc, #96]	; (8001060 <MX_CAN1_Init+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_CAN1_Init+0x64>)
 8001004:	2206      	movs	r2, #6
 8001006:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_CAN1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_CAN1_Init+0x64>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_CAN1_Init+0x64>)
 8001016:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800101a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_CAN1_Init+0x64>)
 800101e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001022:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <MX_CAN1_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_CAN1_Init+0x64>)
 800102c:	2200      	movs	r2, #0
 800102e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001030:	4b0a      	ldr	r3, [pc, #40]	; (800105c <MX_CAN1_Init+0x64>)
 8001032:	2200      	movs	r2, #0
 8001034:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_CAN1_Init+0x64>)
 8001038:	2200      	movs	r2, #0
 800103a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <MX_CAN1_Init+0x64>)
 800103e:	2200      	movs	r2, #0
 8001040:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_CAN1_Init+0x64>)
 8001044:	2200      	movs	r2, #0
 8001046:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_CAN1_Init+0x64>)
 800104a:	f001 fb2b 	bl	80026a4 <HAL_CAN_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001054:	f000 fd56 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000394 	.word	0x20000394
 8001060:	40006400 	.word	0x40006400

08001064 <MX_CAN3_Init>:
  * @brief CAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <MX_CAN3_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <MX_CAN3_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 6;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_CAN3_Init+0x64>)
 8001070:	2206      	movs	r2, #6
 8001072:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_CAN3_Init+0x64>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800107a:	4b13      	ldr	r3, [pc, #76]	; (80010c8 <MX_CAN3_Init+0x64>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_9TQ;
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_CAN3_Init+0x64>)
 8001082:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001086:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001088:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_CAN3_Init+0x64>)
 800108a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800108e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <MX_CAN3_Init+0x64>)
 8001092:	2200      	movs	r2, #0
 8001094:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <MX_CAN3_Init+0x64>)
 8001098:	2200      	movs	r2, #0
 800109a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <MX_CAN3_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <MX_CAN3_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <MX_CAN3_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <MX_CAN3_Init+0x64>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	; (80010c8 <MX_CAN3_Init+0x64>)
 80010b6:	f001 faf5 	bl	80026a4 <HAL_CAN_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_CAN3_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 fd20 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000015c 	.word	0x2000015c
 80010cc:	40003400 	.word	0x40003400

080010d0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_SPI4_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	; (8001148 <MX_SPI4_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_SPI4_Init+0x74>)
 80010dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_SPI4_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_SPI4_Init+0x74>)
 80010ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010ee:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_SPI4_Init+0x74>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_SPI4_Init+0x74>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <MX_SPI4_Init+0x74>)
 80010fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001102:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_SPI4_Init+0x74>)
 8001106:	2228      	movs	r2, #40	; 0x28
 8001108:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <MX_SPI4_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <MX_SPI4_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <MX_SPI4_Init+0x74>)
 8001118:	2200      	movs	r2, #0
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_SPI4_Init+0x74>)
 800111e:	2207      	movs	r2, #7
 8001120:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <MX_SPI4_Init+0x74>)
 8001124:	2200      	movs	r2, #0
 8001126:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_SPI4_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_SPI4_Init+0x74>)
 8001130:	f003 f8de 	bl	80042f0 <HAL_SPI_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fce3 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200002ec 	.word	0x200002ec
 8001148:	40013400 	.word	0x40013400

0800114c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_TIM10_Init+0x40>)
 8001152:	4a0f      	ldr	r2, [pc, #60]	; (8001190 <MX_TIM10_Init+0x44>)
 8001154:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 216-1;
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_TIM10_Init+0x40>)
 8001158:	22d7      	movs	r2, #215	; 0xd7
 800115a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_TIM10_Init+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_TIM10_Init+0x40>)
 8001164:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001168:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_TIM10_Init+0x40>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_TIM10_Init+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_TIM10_Init+0x40>)
 8001178:	f004 f81a 	bl	80051b0 <HAL_TIM_Base_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001182:	f000 fcbf 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200000d0 	.word	0x200000d0
 8001190:	40014400 	.word	0x40014400

08001194 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MX_TIM13_Init+0x40>)
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <MX_TIM13_Init+0x44>)
 800119c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2160-1;
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <MX_TIM13_Init+0x40>)
 80011a0:	f640 026f 	movw	r2, #2159	; 0x86f
 80011a4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <MX_TIM13_Init+0x40>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 50000-1;
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_TIM13_Init+0x40>)
 80011ae:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80011b2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <MX_TIM13_Init+0x40>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <MX_TIM13_Init+0x40>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	; (80011d4 <MX_TIM13_Init+0x40>)
 80011c2:	f003 fff5 	bl	80051b0 <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 80011cc:	f000 fc9a 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000250 	.word	0x20000250
 80011d8:	40001c00 	.word	0x40001c00

080011dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_TIM14_Init+0x40>)
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <MX_TIM14_Init+0x44>)
 80011e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 216-1;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <MX_TIM14_Init+0x40>)
 80011e8:	22d7      	movs	r2, #215	; 0xd7
 80011ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_TIM14_Init+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 50000-1;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_TIM14_Init+0x40>)
 80011f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80011f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_TIM14_Init+0x40>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_TIM14_Init+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM14_Init+0x40>)
 8001208:	f003 ffd2 	bl	80051b0 <HAL_TIM_Base_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001212:	f000 fc77 	bl	8001b04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200003bc 	.word	0x200003bc
 8001220:	40002000 	.word	0x40002000

08001224 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
 8001238:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800123a:	4b56      	ldr	r3, [pc, #344]	; (8001394 <MX_GPIO_Init+0x170>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a55      	ldr	r2, [pc, #340]	; (8001394 <MX_GPIO_Init+0x170>)
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <MX_GPIO_Init+0x170>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0310 	and.w	r3, r3, #16
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <MX_GPIO_Init+0x170>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a4f      	ldr	r2, [pc, #316]	; (8001394 <MX_GPIO_Init+0x170>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b4d      	ldr	r3, [pc, #308]	; (8001394 <MX_GPIO_Init+0x170>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <MX_GPIO_Init+0x170>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a49      	ldr	r2, [pc, #292]	; (8001394 <MX_GPIO_Init+0x170>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b47      	ldr	r3, [pc, #284]	; (8001394 <MX_GPIO_Init+0x170>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <MX_GPIO_Init+0x170>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a43      	ldr	r2, [pc, #268]	; (8001394 <MX_GPIO_Init+0x170>)
 8001288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <MX_GPIO_Init+0x170>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_GPIO_Init+0x170>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <MX_GPIO_Init+0x170>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <MX_GPIO_Init+0x170>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2110      	movs	r1, #16
 80012b6:	4838      	ldr	r0, [pc, #224]	; (8001398 <MX_GPIO_Init+0x174>)
 80012b8:	f002 fb2e 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2128      	movs	r1, #40	; 0x28
 80012c0:	4836      	ldr	r0, [pc, #216]	; (800139c <MX_GPIO_Init+0x178>)
 80012c2:	f002 fb29 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2109      	movs	r1, #9
 80012ca:	4835      	ldr	r0, [pc, #212]	; (80013a0 <MX_GPIO_Init+0x17c>)
 80012cc:	f002 fb24 	bl	8003918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012d0:	2310      	movs	r3, #16
 80012d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	482c      	ldr	r0, [pc, #176]	; (8001398 <MX_GPIO_Init+0x174>)
 80012e8:	f002 f952 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012ec:	2308      	movs	r3, #8
 80012ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f0:	2301      	movs	r3, #1
 80012f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4826      	ldr	r0, [pc, #152]	; (800139c <MX_GPIO_Init+0x178>)
 8001304:	f002 f944 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001308:	2320      	movs	r3, #32
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130c:	2301      	movs	r3, #1
 800130e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	4619      	mov	r1, r3
 800131e:	481f      	ldr	r0, [pc, #124]	; (800139c <MX_GPIO_Init+0x178>)
 8001320:	f002 f936 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001324:	2309      	movs	r3, #9
 8001326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4819      	ldr	r0, [pc, #100]	; (80013a0 <MX_GPIO_Init+0x17c>)
 800133c:	f002 f928 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001344:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4812      	ldr	r0, [pc, #72]	; (80013a0 <MX_GPIO_Init+0x17c>)
 8001356:	f002 f91b 	bl	8003590 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800135a:	2360      	movs	r3, #96	; 0x60
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136a:	2307      	movs	r3, #7
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	480b      	ldr	r0, [pc, #44]	; (80013a4 <MX_GPIO_Init+0x180>)
 8001376:	f002 f90b 	bl	8003590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2017      	movs	r0, #23
 8001380:	f002 f8cf 	bl	8003522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001384:	2017      	movs	r0, #23
 8001386:	f002 f8e8 	bl	800355a <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40021000 	.word	0x40021000
 800139c:	40020000 	.word	0x40020000
 80013a0:	40021800 	.word	0x40021800
 80013a4:	40020c00 	.word	0x40020c00

080013a8 <configure_hardware>:

/* USER CODE BEGIN 4 */
static void configure_hardware(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	can_config();
 80013ac:	f000 f80c 	bl	80013c8 <can_config>

	HAL_TIM_Base_Start_IT(&htim13);
 80013b0:	4803      	ldr	r0, [pc, #12]	; (80013c0 <configure_hardware+0x18>)
 80013b2:	f003 ff55 	bl	8005260 <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim10);
	HAL_TIM_Base_Start_IT(&htim14);
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <configure_hardware+0x1c>)
 80013b8:	f003 ff52 	bl	8005260 <HAL_TIM_Base_Start_IT>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000250 	.word	0x20000250
 80013c4:	200003bc 	.word	0x200003bc

080013c8 <can_config>:


static void can_config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
	//Configure Vehicle CAN
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	643b      	str	r3, [r7, #64]	; 0x40
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80013d6:	2301      	movs	r3, #1
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
	sFilterConfig.FilterIdHigh = 0x0000;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterIdLow = 0x0000;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80013e6:	2300      	movs	r3, #0
 80013e8:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig.FilterActivation = ENABLE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	64bb      	str	r3, [r7, #72]	; 0x48
	sFilterConfig.SlaveStartFilterBank = 14;
 80013f2:	230e      	movs	r3, #14
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_CAN_ConfigFilter(&hcan3, &sFilterConfig) != HAL_OK)
 80013f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013fa:	4619      	mov	r1, r3
 80013fc:	4868      	ldr	r0, [pc, #416]	; (80015a0 <can_config+0x1d8>)
 80013fe:	f001 fa4d 	bl	800289c <HAL_CAN_ConfigFilter>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <can_config+0x44>
	  {
	    /* Filter configuration Error */
	    Error_Handler();
 8001408:	f000 fb7c 	bl	8001b04 <Error_Handler>
	  }

	if (HAL_CAN_Start(&hcan3) != HAL_OK)
 800140c:	4864      	ldr	r0, [pc, #400]	; (80015a0 <can_config+0x1d8>)
 800140e:	f001 fb31 	bl	8002a74 <HAL_CAN_Start>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <can_config+0x54>
	{
	    /* Start Error */
	    Error_Handler();
 8001418:	f000 fb74 	bl	8001b04 <Error_Handler>
	}


	//Configure Powertrain CAN
	CAN_FilterTypeDef  sFilterConfig2;
	sFilterConfig2.FilterBank = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001424:	2301      	movs	r3, #1
 8001426:	61fb      	str	r3, [r7, #28]
	sFilterConfig2.FilterIdHigh = 0x0000;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
	sFilterConfig2.FilterIdLow = 0x0000;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001438:	2301      	movs	r3, #1
 800143a:	613b      	str	r3, [r7, #16]
	sFilterConfig2.FilterActivation = ENABLE;
 800143c:	2301      	movs	r3, #1
 800143e:	623b      	str	r3, [r7, #32]
	sFilterConfig2.SlaveStartFilterBank = 14;
 8001440:	230e      	movs	r3, #14
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig2) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	4856      	ldr	r0, [pc, #344]	; (80015a4 <can_config+0x1dc>)
 800144a:	f001 fa27 	bl	800289c <HAL_CAN_ConfigFilter>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <can_config+0x90>
    {
	   /* Filter configuration Error */
	   Error_Handler();
 8001454:	f000 fb56 	bl	8001b04 <Error_Handler>
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001458:	4852      	ldr	r0, [pc, #328]	; (80015a4 <can_config+0x1dc>)
 800145a:	f001 fb0b 	bl	8002a74 <HAL_CAN_Start>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <can_config+0xa0>
	{
	    /* Start Error */
	    Error_Handler();
 8001464:	f000 fb4e 	bl	8001b04 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan3, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001468:	2102      	movs	r1, #2
 800146a:	484d      	ldr	r0, [pc, #308]	; (80015a0 <can_config+0x1d8>)
 800146c:	f001 fd33 	bl	8002ed6 <HAL_CAN_ActivateNotification>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <can_config+0xb2>
	{
		/* Notification Error */
	    Error_Handler();
 8001476:	f000 fb45 	bl	8001b04 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800147a:	2110      	movs	r1, #16
 800147c:	4849      	ldr	r0, [pc, #292]	; (80015a4 <can_config+0x1dc>)
 800147e:	f001 fd2a 	bl	8002ed6 <HAL_CAN_ActivateNotification>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <can_config+0xc4>
	{
		/* Notification Error */
	    Error_Handler();
 8001488:	f000 fb3c 	bl	8001b04 <Error_Handler>
	}


	//Configure TX Headers for BMS CAN
	mpo2_tx_header.StdId = 0x400;
 800148c:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <can_config+0x1e0>)
 800148e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001492:	601a      	str	r2, [r3, #0]
	mpo2_tx_header.ExtId = 0;
 8001494:	4b44      	ldr	r3, [pc, #272]	; (80015a8 <can_config+0x1e0>)
 8001496:	2200      	movs	r2, #0
 8001498:	605a      	str	r2, [r3, #4]
	mpo2_tx_header.RTR = CAN_RTR_DATA;
 800149a:	4b43      	ldr	r3, [pc, #268]	; (80015a8 <can_config+0x1e0>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
	mpo2_tx_header.IDE = CAN_ID_STD;
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <can_config+0x1e0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
	mpo2_tx_header.DLC = 8;
 80014a6:	4b40      	ldr	r3, [pc, #256]	; (80015a8 <can_config+0x1e0>)
 80014a8:	2208      	movs	r2, #8
 80014aa:	611a      	str	r2, [r3, #16]
	mpo2_tx_header.TransmitGlobalTime = DISABLE;
 80014ac:	4b3e      	ldr	r3, [pc, #248]	; (80015a8 <can_config+0x1e0>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	751a      	strb	r2, [r3, #20]

	mpo3_tx_header.StdId = 0x401;
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <can_config+0x1e4>)
 80014b4:	f240 4201 	movw	r2, #1025	; 0x401
 80014b8:	601a      	str	r2, [r3, #0]
	mpo3_tx_header.ExtId = 0;
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <can_config+0x1e4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	605a      	str	r2, [r3, #4]
	mpo3_tx_header.RTR = CAN_RTR_DATA;
 80014c0:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <can_config+0x1e4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
	mpo3_tx_header.IDE = CAN_ID_STD;
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <can_config+0x1e4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
	mpo3_tx_header.DLC = 8;
 80014cc:	4b37      	ldr	r3, [pc, #220]	; (80015ac <can_config+0x1e4>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	611a      	str	r2, [r3, #16]
	mpo3_tx_header.TransmitGlobalTime = DISABLE;
 80014d2:	4b36      	ldr	r3, [pc, #216]	; (80015ac <can_config+0x1e4>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	751a      	strb	r2, [r3, #20]

	mpo4_tx_header.StdId = 0x402;
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <can_config+0x1e8>)
 80014da:	f240 4202 	movw	r2, #1026	; 0x402
 80014de:	601a      	str	r2, [r3, #0]
	mpo4_tx_header.ExtId = 0;
 80014e0:	4b33      	ldr	r3, [pc, #204]	; (80015b0 <can_config+0x1e8>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	605a      	str	r2, [r3, #4]
	mpo4_tx_header.RTR = CAN_RTR_DATA;
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <can_config+0x1e8>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
	mpo4_tx_header.IDE = CAN_ID_STD;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <can_config+0x1e8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
	mpo4_tx_header.DLC = 8;
 80014f2:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <can_config+0x1e8>)
 80014f4:	2208      	movs	r2, #8
 80014f6:	611a      	str	r2, [r3, #16]
	mpo4_tx_header.TransmitGlobalTime = DISABLE;
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <can_config+0x1e8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	751a      	strb	r2, [r3, #20]


	//Configure TX Headers for AMK CAN
	amk0_av1_tx_header.StdId = 0x284;
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <can_config+0x1ec>)
 8001500:	f44f 7221 	mov.w	r2, #644	; 0x284
 8001504:	601a      	str	r2, [r3, #0]
	amk0_av1_tx_header.ExtId = 0;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <can_config+0x1ec>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
	amk0_av1_tx_header.RTR = CAN_RTR_DATA;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <can_config+0x1ec>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
	amk0_av1_tx_header.IDE = CAN_ID_STD;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <can_config+0x1ec>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	amk0_av1_tx_header.DLC = 8;
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <can_config+0x1ec>)
 800151a:	2208      	movs	r2, #8
 800151c:	611a      	str	r2, [r3, #16]
	amk0_av1_tx_header.TransmitGlobalTime = DISABLE;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <can_config+0x1ec>)
 8001520:	2200      	movs	r2, #0
 8001522:	751a      	strb	r2, [r3, #20]

	amk0_av2_tx_header.StdId = 0x286;
 8001524:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <can_config+0x1f0>)
 8001526:	f240 2286 	movw	r2, #646	; 0x286
 800152a:	601a      	str	r2, [r3, #0]
	amk0_av2_tx_header.ExtId = 0;
 800152c:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <can_config+0x1f0>)
 800152e:	2200      	movs	r2, #0
 8001530:	605a      	str	r2, [r3, #4]
	amk0_av2_tx_header.RTR = CAN_RTR_DATA;
 8001532:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <can_config+0x1f0>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
	amk0_av2_tx_header.IDE = CAN_ID_STD;
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <can_config+0x1f0>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
	amk0_av2_tx_header.DLC = 8;
 800153e:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <can_config+0x1f0>)
 8001540:	2208      	movs	r2, #8
 8001542:	611a      	str	r2, [r3, #16]
	amk0_av2_tx_header.TransmitGlobalTime = DISABLE;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <can_config+0x1f0>)
 8001546:	2200      	movs	r2, #0
 8001548:	751a      	strb	r2, [r3, #20]

	amk0_sp_tx_header.StdId = 389;
 800154a:	4b1c      	ldr	r3, [pc, #112]	; (80015bc <can_config+0x1f4>)
 800154c:	f240 1285 	movw	r2, #389	; 0x185
 8001550:	601a      	str	r2, [r3, #0]
	amk0_sp_tx_header.ExtId = 0;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <can_config+0x1f4>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
	amk0_sp_tx_header.RTR = CAN_RTR_DATA;
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <can_config+0x1f4>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
	amk0_sp_tx_header.IDE = CAN_ID_STD;
 800155e:	4b17      	ldr	r3, [pc, #92]	; (80015bc <can_config+0x1f4>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
	amk0_sp_tx_header.DLC = 8;
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <can_config+0x1f4>)
 8001566:	2208      	movs	r2, #8
 8001568:	611a      	str	r2, [r3, #16]
	amk0_sp_tx_header.TransmitGlobalTime = DISABLE;
 800156a:	4b14      	ldr	r3, [pc, #80]	; (80015bc <can_config+0x1f4>)
 800156c:	2200      	movs	r2, #0
 800156e:	751a      	strb	r2, [r3, #20]


	TxHeader.StdId = 0x111;
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <can_config+0x1f8>)
 8001572:	f240 1211 	movw	r2, #273	; 0x111
 8001576:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <can_config+0x1f8>)
 800157a:	2200      	movs	r2, #0
 800157c:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <can_config+0x1f8>)
 8001580:	2200      	movs	r2, #0
 8001582:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <can_config+0x1f8>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <can_config+0x1f8>)
 800158c:	2208      	movs	r2, #8
 800158e:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <can_config+0x1f8>)
 8001592:	2200      	movs	r2, #0
 8001594:	751a      	strb	r2, [r3, #20]

}
 8001596:	bf00      	nop
 8001598:	3750      	adds	r7, #80	; 0x50
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000015c 	.word	0x2000015c
 80015a4:	20000394 	.word	0x20000394
 80015a8:	2000029c 	.word	0x2000029c
 80015ac:	200002b4 	.word	0x200002b4
 80015b0:	2000018c 	.word	0x2000018c
 80015b4:	2000013c 	.word	0x2000013c
 80015b8:	20000238 	.word	0x20000238
 80015bc:	20000374 	.word	0x20000374
 80015c0:	2000040c 	.word	0x2000040c

080015c4 <change_contactor_phase>:

void change_contactor_phase(struct StartupStateMachine *startup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	if (startup->mpo_state == RESET_CONT)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d109      	bne.n	80015e8 <change_contactor_phase+0x24>
	{
		mpo2_data[0] = 1;
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <change_contactor_phase+0xcc>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		mpo3_data[0] = 1;
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <change_contactor_phase+0xd0>)
 80015dc:	2201      	movs	r2, #1
 80015de:	701a      	strb	r2, [r3, #0]
		mpo4_data[0] = 1;
 80015e0:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <change_contactor_phase+0xd4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]
////		HAL_CAN_AddTxMessage(&hcan3, &mpo2_tx_header, mpo2_data, &TxMailbox);
////		HAL_CAN_AddTxMessage(&hcan3, &mpo3_tx_header, mpo3_data, &TxMailbox);
////		HAL_CAN_AddTxMessage(&hcan3, &mpo4_tx_header, mpo4_data, &TxMailbox);
//		break;
//	}
}
 80015e6:	e04c      	b.n	8001682 <change_contactor_phase+0xbe>
	else if (startup->mpo_state == CLMPO3)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	785b      	ldrb	r3, [r3, #1]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d10c      	bne.n	800160a <change_contactor_phase+0x46>
		mpo2_data[0] = 1;
 80015f0:	4b27      	ldr	r3, [pc, #156]	; (8001690 <change_contactor_phase+0xcc>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
		mpo3_data[0] = 0;
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <change_contactor_phase+0xd0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
		mpo4_data[0] = 1;
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <change_contactor_phase+0xd4>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
		startup->mpo_state = CLMPO4;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	705a      	strb	r2, [r3, #1]
}
 8001608:	e03b      	b.n	8001682 <change_contactor_phase+0xbe>
	else if (startup->mpo_state == CLMPO4)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d109      	bne.n	8001626 <change_contactor_phase+0x62>
		mpo2_data[0] = 1;
 8001612:	4b1f      	ldr	r3, [pc, #124]	; (8001690 <change_contactor_phase+0xcc>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
		mpo3_data[0] = 0;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <change_contactor_phase+0xd0>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
		mpo4_data[0] = 0;
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <change_contactor_phase+0xd4>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
}
 8001624:	e02d      	b.n	8001682 <change_contactor_phase+0xbe>
	else if (startup->mpo_state == CLMPO2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d10c      	bne.n	8001648 <change_contactor_phase+0x84>
		mpo2_data[0] = 0;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <change_contactor_phase+0xcc>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
		mpo3_data[0] = 0;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <change_contactor_phase+0xd0>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		mpo4_data[0] = 0;
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <change_contactor_phase+0xd4>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
				startup->mpo_state = OPMPO4;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2204      	movs	r2, #4
 8001644:	705a      	strb	r2, [r3, #1]
}
 8001646:	e01c      	b.n	8001682 <change_contactor_phase+0xbe>
	else if (startup->mpo_state == OPMPO4)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d10c      	bne.n	800166a <change_contactor_phase+0xa6>
		mpo2_data[0] = 0;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <change_contactor_phase+0xcc>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
				mpo3_data[0] = 0;
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <change_contactor_phase+0xd0>)
 8001658:	2200      	movs	r2, #0
 800165a:	701a      	strb	r2, [r3, #0]
				mpo4_data[0] = 1;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <change_contactor_phase+0xd4>)
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
				startup->mpo_state = CONTACTOR_COMPLETE;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	705a      	strb	r2, [r3, #1]
}
 8001668:	e00b      	b.n	8001682 <change_contactor_phase+0xbe>
		mpo2_data[0] = 1;
 800166a:	4b09      	ldr	r3, [pc, #36]	; (8001690 <change_contactor_phase+0xcc>)
 800166c:	2201      	movs	r2, #1
 800166e:	701a      	strb	r2, [r3, #0]
				mpo3_data[0] = 1;
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <change_contactor_phase+0xd0>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
				mpo4_data[0] = 1;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <change_contactor_phase+0xd4>)
 8001678:	2201      	movs	r2, #1
 800167a:	701a      	strb	r2, [r3, #0]
				startup->startup_state = PEDAL;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2205      	movs	r2, #5
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000030 	.word	0x20000030
 8001694:	20000038 	.word	0x20000038
 8001698:	20000040 	.word	0x20000040

0800169c <adxl_write>:

void adxl_write (uint8_t address, uint8_t value)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	460a      	mov	r2, r1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = address|0x40;  // multibyte write
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 80016b6:	79bb      	ldrb	r3, [r7, #6]
 80016b8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin (GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);  // pull the cs pin low
 80016ba:	2200      	movs	r2, #0
 80016bc:	2110      	movs	r1, #16
 80016be:	4809      	ldr	r0, [pc, #36]	; (80016e4 <adxl_write+0x48>)
 80016c0:	f002 f92a 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi4, data, 2, 100);  // write data to register
 80016c4:	f107 010c 	add.w	r1, r7, #12
 80016c8:	2364      	movs	r3, #100	; 0x64
 80016ca:	2202      	movs	r2, #2
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <adxl_write+0x4c>)
 80016ce:	f002 feba 	bl	8004446 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOE, GPIO_PIN_4, GPIO_PIN_SET);  // pull the cs pin high
 80016d2:	2201      	movs	r2, #1
 80016d4:	2110      	movs	r1, #16
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <adxl_write+0x48>)
 80016d8:	f002 f91e 	bl	8003918 <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40021000 	.word	0x40021000
 80016e8:	200002ec 	.word	0x200002ec

080016ec <adxl_read>:

void adxl_read (uint8_t address)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;  // read operation
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	71fb      	strb	r3, [r7, #7]
	address |= 0x40;  // multibyte read
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001706:	b2db      	uxtb	r3, r3
 8001708:	71fb      	strb	r3, [r7, #7]
	uint8_t rec;
	HAL_GPIO_WritePin (GPIOE, GPIO_PIN_4, GPIO_PIN_RESET);  // pull the pin low
 800170a:	2200      	movs	r2, #0
 800170c:	2110      	movs	r1, #16
 800170e:	480c      	ldr	r0, [pc, #48]	; (8001740 <adxl_read+0x54>)
 8001710:	f002 f902 	bl	8003918 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi4, &address, 1, 100);  // send address
 8001714:	1df9      	adds	r1, r7, #7
 8001716:	2364      	movs	r3, #100	; 0x64
 8001718:	2201      	movs	r2, #1
 800171a:	480a      	ldr	r0, [pc, #40]	; (8001744 <adxl_read+0x58>)
 800171c:	f002 fe93 	bl	8004446 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi4, data_rec, 6, 100);  // receive 6 bytes data
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	2206      	movs	r2, #6
 8001724:	4908      	ldr	r1, [pc, #32]	; (8001748 <adxl_read+0x5c>)
 8001726:	4807      	ldr	r0, [pc, #28]	; (8001744 <adxl_read+0x58>)
 8001728:	f002 fffb 	bl	8004722 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOE, GPIO_PIN_4, GPIO_PIN_SET);  // pull the pin high
 800172c:	2201      	movs	r2, #1
 800172e:	2110      	movs	r1, #16
 8001730:	4803      	ldr	r0, [pc, #12]	; (8001740 <adxl_read+0x54>)
 8001732:	f002 f8f1 	bl	8003918 <HAL_GPIO_WritePin>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	200002ec 	.word	0x200002ec
 8001748:	20000450 	.word	0x20000450

0800174c <adxl_init>:

void adxl_init (void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
//	adxl_write (0x31, 0x01);  // data_format range= +- 4g
//	adxl_write (0x2d, 0x00);  // reset all bits
//	adxl_write (0x2d, 0x08);  // power_cntl measure and wake up 8hz

	adxl_write (0x2d, 0x00);  // reset all bits
 8001750:	2100      	movs	r1, #0
 8001752:	202d      	movs	r0, #45	; 0x2d
 8001754:	f7ff ffa2 	bl	800169c <adxl_write>

	adxl_write (0x2d, 0x08);  // measure and wake up 8hz
 8001758:	2108      	movs	r1, #8
 800175a:	202d      	movs	r0, #45	; 0x2d
 800175c:	f7ff ff9e 	bl	800169c <adxl_write>

	adxl_write (0x31, 0x01);  // data_format range= +- 4g
 8001760:	2101      	movs	r1, #1
 8001762:	2031      	movs	r0, #49	; 0x31
 8001764:	f7ff ff9a 	bl	800169c <adxl_write>
}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}

0800176c <process_amk0_av1>:

void process_amk0_av1(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	can_amk_inverter_amk0_actual_values1_unpack(amk0_av1, powertrain_rx_data, sizeof(powertrain_rx_data));
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <process_amk0_av1+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2208      	movs	r2, #8
 8001776:	4917      	ldr	r1, [pc, #92]	; (80017d4 <process_amk0_av1+0x68>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff f870 	bl	800085e <can_amk_inverter_amk0_actual_values1_unpack>

	if(startup.amk_start_state == BEGIN_MOTOR_INIT && amk0_av1->amk_b_system_ready == 1)
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <process_amk0_av1+0x6c>)
 8001780:	789b      	ldrb	r3, [r3, #2]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d108      	bne.n	8001798 <process_amk0_av1+0x2c>
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <process_amk0_av1+0x64>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d103      	bne.n	8001798 <process_amk0_av1+0x2c>
		startup.amk_start_state = TX_DC_ON;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <process_amk0_av1+0x6c>)
 8001792:	2202      	movs	r2, #2
 8001794:	709a      	strb	r2, [r3, #2]
 8001796:	e019      	b.n	80017cc <process_amk0_av1+0x60>
	else if(startup.amk_start_state == RX_QUIT_DC_ON && amk0_av1->amk_b_quit_dc_on == 1)
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <process_amk0_av1+0x6c>)
 800179a:	789b      	ldrb	r3, [r3, #2]
 800179c:	2b03      	cmp	r3, #3
 800179e:	d108      	bne.n	80017b2 <process_amk0_av1+0x46>
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <process_amk0_av1+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	78db      	ldrb	r3, [r3, #3]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d103      	bne.n	80017b2 <process_amk0_av1+0x46>
		startup.amk_start_state = TX_ZERO_TORQUE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <process_amk0_av1+0x6c>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	709a      	strb	r2, [r3, #2]
 80017b0:	e00c      	b.n	80017cc <process_amk0_av1+0x60>
	else if(startup.amk_start_state == RX_BQ_INTVERTER_ON && amk0_av1->amk_b_quit_inverter_on == 1)
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <process_amk0_av1+0x6c>)
 80017b4:	789b      	ldrb	r3, [r3, #2]
 80017b6:	2b07      	cmp	r3, #7
 80017b8:	d108      	bne.n	80017cc <process_amk0_av1+0x60>
 80017ba:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <process_amk0_av1+0x64>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	795b      	ldrb	r3, [r3, #5]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d103      	bne.n	80017cc <process_amk0_av1+0x60>
		startup.amk_start_state = SET_INITIAL_TORQUE;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <process_amk0_av1+0x6c>)
 80017c6:	2208      	movs	r2, #8
 80017c8:	709a      	strb	r2, [r3, #2]
}
 80017ca:	e7ff      	b.n	80017cc <process_amk0_av1+0x60>
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000464 	.word	0x20000464
 80017d4:	20000184 	.word	0x20000184
 80017d8:	2000011c 	.word	0x2000011c

080017dc <perform_motor_step>:

void perform_motor_step(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	switch(startup.amk_start_state)
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <perform_motor_step+0x134>)
 80017e2:	789b      	ldrb	r3, [r3, #2]
 80017e4:	3b02      	subs	r3, #2
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	f200 808e 	bhi.w	8001908 <perform_motor_step+0x12c>
 80017ec:	a201      	add	r2, pc, #4	; (adr r2, 80017f4 <perform_motor_step+0x18>)
 80017ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f2:	bf00      	nop
 80017f4:	08001811 	.word	0x08001811
 80017f8:	08001909 	.word	0x08001909
 80017fc:	0800183b 	.word	0x0800183b
 8001800:	08001875 	.word	0x08001875
 8001804:	0800189f 	.word	0x0800189f
 8001808:	08001909 	.word	0x08001909
 800180c:	080018c9 	.word	0x080018c9
	{
	case TX_DC_ON:
		amk0_av1->amk_b_dc_on = 1;
 8001810:	4b40      	ldr	r3, [pc, #256]	; (8001914 <perform_motor_step+0x138>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2201      	movs	r2, #1
 8001816:	711a      	strb	r2, [r3, #4]
		can_amk_inverter_amk0_actual_values1_pack(amk0_av1_tx_data, amk0_av1, sizeof(amk0_av1_tx_data));
 8001818:	4b3e      	ldr	r3, [pc, #248]	; (8001914 <perform_motor_step+0x138>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2208      	movs	r2, #8
 800181e:	4619      	mov	r1, r3
 8001820:	483d      	ldr	r0, [pc, #244]	; (8001918 <perform_motor_step+0x13c>)
 8001822:	f7fe ff12 	bl	800064a <can_amk_inverter_amk0_actual_values1_pack>
		HAL_CAN_AddTxMessage(&hcan1, &amk0_av1_tx_header, amk0_av1_tx_data, &amk_tx_mailbox);
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <perform_motor_step+0x140>)
 8001828:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <perform_motor_step+0x13c>)
 800182a:	493d      	ldr	r1, [pc, #244]	; (8001920 <perform_motor_step+0x144>)
 800182c:	483d      	ldr	r0, [pc, #244]	; (8001924 <perform_motor_step+0x148>)
 800182e:	f001 f965 	bl	8002afc <HAL_CAN_AddTxMessage>
		startup.amk_start_state = RX_QUIT_DC_ON;
 8001832:	4b37      	ldr	r3, [pc, #220]	; (8001910 <perform_motor_step+0x134>)
 8001834:	2203      	movs	r2, #3
 8001836:	709a      	strb	r2, [r3, #2]
		break;
 8001838:	e067      	b.n	800190a <perform_motor_step+0x12e>

	case TX_ZERO_TORQUE:
		amk0_sp->amk_target_velocity = 0;
 800183a:	4b3b      	ldr	r3, [pc, #236]	; (8001928 <perform_motor_step+0x14c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2200      	movs	r2, #0
 8001840:	809a      	strh	r2, [r3, #4]
		amk0_sp->amk_torque_limit_negativ = 0;
 8001842:	4b39      	ldr	r3, [pc, #228]	; (8001928 <perform_motor_step+0x14c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2200      	movs	r2, #0
 8001848:	811a      	strh	r2, [r3, #8]
		amk0_sp->amk_torque_limit_positiv = 0;
 800184a:	4b37      	ldr	r3, [pc, #220]	; (8001928 <perform_motor_step+0x14c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	80da      	strh	r2, [r3, #6]
		can_amk_inverter_amk0_set_points1_pack(amk0_sp_tx_data, amk0_sp, sizeof(amk0_sp_tx_data));
 8001852:	4b35      	ldr	r3, [pc, #212]	; (8001928 <perform_motor_step+0x14c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	4619      	mov	r1, r3
 800185a:	4834      	ldr	r0, [pc, #208]	; (800192c <perform_motor_step+0x150>)
 800185c:	f7ff f8c1 	bl	80009e2 <can_amk_inverter_amk0_set_points1_pack>
		HAL_CAN_AddTxMessage(&hcan1, &amk0_sp_tx_header, amk0_sp_tx_data, &amk_tx_mailbox);
 8001860:	4b2e      	ldr	r3, [pc, #184]	; (800191c <perform_motor_step+0x140>)
 8001862:	4a32      	ldr	r2, [pc, #200]	; (800192c <perform_motor_step+0x150>)
 8001864:	4932      	ldr	r1, [pc, #200]	; (8001930 <perform_motor_step+0x154>)
 8001866:	482f      	ldr	r0, [pc, #188]	; (8001924 <perform_motor_step+0x148>)
 8001868:	f001 f948 	bl	8002afc <HAL_CAN_AddTxMessage>
		startup.amk_start_state = TX_B_ENABLE;
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <perform_motor_step+0x134>)
 800186e:	2205      	movs	r2, #5
 8001870:	709a      	strb	r2, [r3, #2]
		break;
 8001872:	e04a      	b.n	800190a <perform_motor_step+0x12e>

	case TX_B_ENABLE:
		amk0_sp->amk_b_enable = 1;
 8001874:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <perform_motor_step+0x14c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	709a      	strb	r2, [r3, #2]
		can_amk_inverter_amk0_set_points1_pack(amk0_sp_tx_data, amk0_sp, sizeof(amk0_sp_tx_data));
 800187c:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <perform_motor_step+0x14c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2208      	movs	r2, #8
 8001882:	4619      	mov	r1, r3
 8001884:	4829      	ldr	r0, [pc, #164]	; (800192c <perform_motor_step+0x150>)
 8001886:	f7ff f8ac 	bl	80009e2 <can_amk_inverter_amk0_set_points1_pack>
		HAL_CAN_AddTxMessage(&hcan1, &amk0_sp_tx_header, amk0_sp_tx_data, &amk_tx_mailbox);
 800188a:	4b24      	ldr	r3, [pc, #144]	; (800191c <perform_motor_step+0x140>)
 800188c:	4a27      	ldr	r2, [pc, #156]	; (800192c <perform_motor_step+0x150>)
 800188e:	4928      	ldr	r1, [pc, #160]	; (8001930 <perform_motor_step+0x154>)
 8001890:	4824      	ldr	r0, [pc, #144]	; (8001924 <perform_motor_step+0x148>)
 8001892:	f001 f933 	bl	8002afc <HAL_CAN_AddTxMessage>
		startup.amk_start_state = TX_B_INVERTER_ON;
 8001896:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <perform_motor_step+0x134>)
 8001898:	2206      	movs	r2, #6
 800189a:	709a      	strb	r2, [r3, #2]
		break;
 800189c:	e035      	b.n	800190a <perform_motor_step+0x12e>

	case TX_B_INVERTER_ON:
		amk0_sp->amk_b_inverter_on = 1;
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <perform_motor_step+0x14c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
		can_amk_inverter_amk0_set_points1_pack(amk0_sp_tx_data, amk0_sp, sizeof(amk0_sp_tx_data));
 80018a6:	4b20      	ldr	r3, [pc, #128]	; (8001928 <perform_motor_step+0x14c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2208      	movs	r2, #8
 80018ac:	4619      	mov	r1, r3
 80018ae:	481f      	ldr	r0, [pc, #124]	; (800192c <perform_motor_step+0x150>)
 80018b0:	f7ff f897 	bl	80009e2 <can_amk_inverter_amk0_set_points1_pack>
		HAL_CAN_AddTxMessage(&hcan1, &amk0_sp_tx_header, amk0_sp_tx_data, &amk_tx_mailbox);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <perform_motor_step+0x140>)
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <perform_motor_step+0x150>)
 80018b8:	491d      	ldr	r1, [pc, #116]	; (8001930 <perform_motor_step+0x154>)
 80018ba:	481a      	ldr	r0, [pc, #104]	; (8001924 <perform_motor_step+0x148>)
 80018bc:	f001 f91e 	bl	8002afc <HAL_CAN_AddTxMessage>
		startup.amk_start_state = RX_BQ_INTVERTER_ON;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <perform_motor_step+0x134>)
 80018c2:	2207      	movs	r2, #7
 80018c4:	709a      	strb	r2, [r3, #2]
		break;
 80018c6:	e020      	b.n	800190a <perform_motor_step+0x12e>

	case SET_INITIAL_TORQUE:
		amk0_sp->amk_target_velocity = 0; //CHANGE
 80018c8:	4b17      	ldr	r3, [pc, #92]	; (8001928 <perform_motor_step+0x14c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2200      	movs	r2, #0
 80018ce:	809a      	strh	r2, [r3, #4]
		amk0_sp->amk_torque_limit_negativ = 0;
 80018d0:	4b15      	ldr	r3, [pc, #84]	; (8001928 <perform_motor_step+0x14c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	811a      	strh	r2, [r3, #8]
		amk0_sp->amk_torque_limit_positiv = 0;
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <perform_motor_step+0x14c>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	80da      	strh	r2, [r3, #6]
		can_amk_inverter_amk0_set_points1_pack(amk0_sp_tx_data, amk0_sp, sizeof(amk0_sp_tx_data));
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <perform_motor_step+0x14c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4810      	ldr	r0, [pc, #64]	; (800192c <perform_motor_step+0x150>)
 80018ea:	f7ff f87a 	bl	80009e2 <can_amk_inverter_amk0_set_points1_pack>
		HAL_CAN_AddTxMessage(&hcan1, &amk0_sp_tx_header, amk0_sp_tx_data, &amk_tx_mailbox);
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <perform_motor_step+0x140>)
 80018f0:	4a0e      	ldr	r2, [pc, #56]	; (800192c <perform_motor_step+0x150>)
 80018f2:	490f      	ldr	r1, [pc, #60]	; (8001930 <perform_motor_step+0x154>)
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <perform_motor_step+0x148>)
 80018f6:	f001 f901 	bl	8002afc <HAL_CAN_AddTxMessage>
		startup.amk_start_state = MOTOR_INITIALIZED;
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <perform_motor_step+0x134>)
 80018fc:	2209      	movs	r2, #9
 80018fe:	709a      	strb	r2, [r3, #2]
		startup.startup_state = WAIT_BMS;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <perform_motor_step+0x134>)
 8001902:	2202      	movs	r2, #2
 8001904:	701a      	strb	r2, [r3, #0]
		break;
 8001906:	e000      	b.n	800190a <perform_motor_step+0x12e>

	default:
		break;
 8001908:	bf00      	nop
	}
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000011c 	.word	0x2000011c
 8001914:	20000464 	.word	0x20000464
 8001918:	20000078 	.word	0x20000078
 800191c:	20000158 	.word	0x20000158
 8001920:	2000013c 	.word	0x2000013c
 8001924:	20000394 	.word	0x20000394
 8001928:	20000058 	.word	0x20000058
 800192c:	20000458 	.word	0x20000458
 8001930:	20000374 	.word	0x20000374

08001934 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]

	if (startup.startup_state == WAIT_START_BTN_PRESS && htim == &htim13)
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b03      	cmp	r3, #3
 8001942:	d107      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x20>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a2d      	ldr	r2, [pc, #180]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d103      	bne.n	8001954 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800194c:	2120      	movs	r1, #32
 800194e:	482c      	ldr	r0, [pc, #176]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001950:	f001 fffb 	bl	800394a <HAL_GPIO_TogglePin>
	}


	//CONTACTOR PHASE
	if (htim == &htim14)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a2b      	ldr	r2, [pc, #172]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d135      	bne.n	80019c8 <HAL_TIM_PeriodElapsedCallback+0x94>
	{
		if(startup.mpo_state != CONTACTOR_COMPLETE && startup.startup_state == CONTACTOR_SEQ)
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d008      	beq.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x42>
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b04      	cmp	r3, #4
 800196a:	d104      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0x42>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800196c:	2120      	movs	r1, #32
 800196e:	4824      	ldr	r0, [pc, #144]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001970:	f001 ffeb 	bl	800394a <HAL_GPIO_TogglePin>
 8001974:	e008      	b.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x54>
		else if (startup.mpo_state == CONTACTOR_COMPLETE)
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001978:	785b      	ldrb	r3, [r3, #1]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d104      	bne.n	8001988 <HAL_TIM_PeriodElapsedCallback+0x54>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800197e:	2201      	movs	r2, #1
 8001980:	2120      	movs	r1, #32
 8001982:	481f      	ldr	r0, [pc, #124]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001984:	f001 ffc8 	bl	8003918 <HAL_GPIO_WritePin>
//		{
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
//		}

		if (startup.mpo_state == CLMPO4 && contactor_delay_cnt < 10)
 8001988:	4b1b      	ldr	r3, [pc, #108]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800198a:	785b      	ldrb	r3, [r3, #1]
 800198c:	2b02      	cmp	r3, #2
 800198e:	d10a      	bne.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x72>
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d806      	bhi.n	80019a6 <HAL_TIM_PeriodElapsedCallback+0x72>
			contactor_delay_cnt++;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	3301      	adds	r3, #1
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	e00d      	b.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x8e>
		else if (startup.mpo_state == CLMPO4 && contactor_delay_cnt == 10)
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d109      	bne.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x8e>
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d105      	bne.n	80019c2 <HAL_TIM_PeriodElapsedCallback+0x8e>
		{
			startup.mpo_state = CLMPO2;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019b8:	2203      	movs	r2, #3
 80019ba:	705a      	strb	r2, [r3, #1]
			contactor_delay_cnt = 200;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80019be:	22c8      	movs	r2, #200	; 0xc8
 80019c0:	701a      	strb	r2, [r3, #0]
		}

		change_contactor_phase(&startup);
 80019c2:	480d      	ldr	r0, [pc, #52]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80019c4:	f7ff fdfe 	bl	80015c4 <change_contactor_phase>
	}

	if (htim == &htim10)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d10f      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0xbc>
	{
		if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_6) == GPIO_PIN_RESET)
 80019d0:	2140      	movs	r1, #64	; 0x40
 80019d2:	480f      	ldr	r0, [pc, #60]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80019d4:	f001 ff88 	bl	80038e8 <HAL_GPIO_ReadPin>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d108      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0xbc>
		{
			state = true;
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 80019e4:	4809      	ldr	r0, [pc, #36]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80019e6:	f003 fcb3 	bl	8005350 <HAL_TIM_Base_Stop_IT>
			start_pressed = 1;
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
		}

	}


}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000011c 	.word	0x2000011c
 80019fc:	20000250 	.word	0x20000250
 8001a00:	40020000 	.word	0x40020000
 8001a04:	200003bc 	.word	0x200003bc
 8001a08:	20000048 	.word	0x20000048
 8001a0c:	200000d0 	.word	0x200000d0
 8001a10:	40021800 	.word	0x40021800
 8001a14:	20000000 	.word	0x20000000
 8001a18:	2000002c 	.word	0x2000002c

08001a1c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Get RX message */
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001a26:	4a16      	ldr	r2, [pc, #88]	; (8001a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f001 f941 	bl	8002cb2 <HAL_CAN_GetRxMessage>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
  {
    /* Reception Error */
    Error_Handler();
 8001a36:	f000 f865 	bl	8001b04 <Error_Handler>
  }

  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  uint32_t id = RxHeader.StdId;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]

  if (id == 0x4B0)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001a46:	d102      	bne.n	8001a4e <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
	  active_rx1 = 1;
 8001a48:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]

  if (id == 0x4B1)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f240 42b1 	movw	r2, #1201	; 0x4b1
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d102      	bne.n	8001a5e <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
	  active_rx2 = 1;
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]

  //CODE CHECK FOR APPROPRIATE BMS MESSAGE HERE
  if (active_rx1 && active_rx2)
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
  {
	  startup.startup_state = WAIT_START_BTN_PRESS;
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001a70:	2203      	movs	r2, #3
 8001a72:	701a      	strb	r2, [r3, #0]
	  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
  }

}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	2000038c 	.word	0x2000038c
 8001a80:	2000042c 	.word	0x2000042c
 8001a84:	20000049 	.word	0x20000049
 8001a88:	2000004a 	.word	0x2000004a
 8001a8c:	2000011c 	.word	0x2000011c

08001a90 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &powertrain_rx_header, powertrain_rx_data) != HAL_OK)
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f001 f907 	bl	8002cb2 <HAL_CAN_GetRxMessage>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_CAN_RxFifo1MsgPendingCallback+0x1e>
	{
	    /* Reception Error */
	    Error_Handler();
 8001aaa:	f000 f82b 	bl	8001b04 <Error_Handler>
	}

	if(RxHeader.StdId == 644) //AMK0_ActualValues1
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <HAL_CAN_RxFifo1MsgPendingCallback+0x3c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f5b3 7f21 	cmp.w	r3, #644	; 0x284
 8001ab6:	d101      	bne.n	8001abc <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>
	{
		process_amk0_av1();
 8001ab8:	f7ff fe58 	bl	800176c <process_amk0_av1>
	}

}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	20000184 	.word	0x20000184
 8001ac8:	200002cc 	.word	0x200002cc
 8001acc:	2000042c 	.word	0x2000042c

08001ad0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_6 && state == true){
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	2b40      	cmp	r3, #64	; 0x40
 8001ade:	d109      	bne.n	8001af4 <HAL_GPIO_EXTI_Callback+0x24>
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <HAL_GPIO_EXTI_Callback+0x2c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_GPIO_EXTI_Callback+0x24>
		HAL_TIM_Base_Start_IT(&htim10);
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x30>)
 8001aea:	f003 fbb9 	bl	8005260 <HAL_TIM_Base_Start_IT>
		state = false;
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_GPIO_EXTI_Callback+0x2c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
//	if(GPIO_Pin == GPIO_PIN_5)
//	{
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, PinState)
//	}

}
 8001af4:	bf00      	nop
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000000 	.word	0x20000000
 8001b00:	200000d0 	.word	0x200000d0

08001b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001b08:	2201      	movs	r2, #1
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <Error_Handler+0x14>)
 8001b0e:	f001 ff03 	bl	8003918 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b12:	b672      	cpsid	i
}
 8001b14:	bf00      	nop

  __disable_irq();
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <Error_Handler+0x12>
 8001b18:	40020000 	.word	0x40020000

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <HAL_MspInit+0x44>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_MspInit+0x44>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x44>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a3f      	ldr	r2, [pc, #252]	; (8001c80 <HAL_ADC_MspInit+0x11c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d124      	bne.n	8001bd0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b86:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a3e      	ldr	r2, [pc, #248]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	623b      	str	r3, [r7, #32]
 8001b9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9e:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a38      	ldr	r2, [pc, #224]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	482f      	ldr	r0, [pc, #188]	; (8001c88 <HAL_ADC_MspInit+0x124>)
 8001bca:	f001 fce1 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001bce:	e052      	b.n	8001c76 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a2d      	ldr	r2, [pc, #180]	; (8001c8c <HAL_ADC_MspInit+0x128>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d124      	bne.n	8001c24 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001bda:	4b2a      	ldr	r3, [pc, #168]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001be0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be4:	6453      	str	r3, [r2, #68]	; 0x44
 8001be6:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	481a      	ldr	r0, [pc, #104]	; (8001c88 <HAL_ADC_MspInit+0x124>)
 8001c1e:	f001 fcb7 	bl	8003590 <HAL_GPIO_Init>
}
 8001c22:	e028      	b.n	8001c76 <HAL_ADC_MspInit+0x112>
  else if(hadc->Instance==ADC3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_ADC_MspInit+0x12c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d123      	bne.n	8001c76 <HAL_ADC_MspInit+0x112>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a14      	ldr	r2, [pc, #80]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_ADC_MspInit+0x120>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0304 	and.w	r3, r3, #4
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c5e:	230c      	movs	r3, #12
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c62:	2303      	movs	r3, #3
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <HAL_ADC_MspInit+0x124>)
 8001c72:	f001 fc8d 	bl	8003590 <HAL_GPIO_Init>
}
 8001c76:	bf00      	nop
 8001c78:	3738      	adds	r7, #56	; 0x38
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40012000 	.word	0x40012000
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40012100 	.word	0x40012100
 8001c90:	40012200 	.word	0x40012200

08001c94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08e      	sub	sp, #56	; 0x38
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <HAL_CAN_MspInit+0x150>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d13a      	bne.n	8001d2c <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001cb6:	4b4c      	ldr	r3, [pc, #304]	; (8001de8 <HAL_CAN_MspInit+0x154>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <HAL_CAN_MspInit+0x154>)
 8001cbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <HAL_CAN_MspInit+0x154>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a47      	ldr	r2, [pc, #284]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a41      	ldr	r2, [pc, #260]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cf8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d0a:	2309      	movs	r3, #9
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4836      	ldr	r0, [pc, #216]	; (8001df0 <HAL_CAN_MspInit+0x15c>)
 8001d16:	f001 fc3b 	bl	8003590 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2015      	movs	r0, #21
 8001d20:	f001 fbff 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001d24:	2015      	movs	r0, #21
 8001d26:	f001 fc18 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 8001d2a:	e056      	b.n	8001dda <HAL_CAN_MspInit+0x146>
  else if(hcan->Instance==CAN3)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a30      	ldr	r2, [pc, #192]	; (8001df4 <HAL_CAN_MspInit+0x160>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d151      	bne.n	8001dda <HAL_CAN_MspInit+0x146>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d4a:	61bb      	str	r3, [r7, #24]
 8001d4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d66:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <HAL_CAN_MspInit+0x154>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_CAN_MspInit+0x154>)
 8001d6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d70:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_CAN_MspInit+0x154>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10b      	bne.n	8001d90 <HAL_CAN_MspInit+0xfc>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d78:	4b1c      	ldr	r3, [pc, #112]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	4b16      	ldr	r3, [pc, #88]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	4a15      	ldr	r2, [pc, #84]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <HAL_CAN_MspInit+0x158>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001da8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8001dba:	230b      	movs	r3, #11
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	480a      	ldr	r0, [pc, #40]	; (8001df0 <HAL_CAN_MspInit+0x15c>)
 8001dc6:	f001 fbe3 	bl	8003590 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2069      	movs	r0, #105	; 0x69
 8001dd0:	f001 fba7 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8001dd4:	2069      	movs	r0, #105	; 0x69
 8001dd6:	f001 fbc0 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40006400 	.word	0x40006400
 8001de8:	20000054 	.word	0x20000054
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40003400 	.word	0x40003400

08001df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <HAL_SPI_MspInit+0x7c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d127      	bne.n	8001e6a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e24:	6453      	str	r3, [r2, #68]	; 0x44
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e38:	f043 0310 	orr.w	r3, r3, #16
 8001e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <HAL_SPI_MspInit+0x80>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001e4a:	2364      	movs	r3, #100	; 0x64
 8001e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001e5a:	2305      	movs	r3, #5
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e5e:	f107 0314 	add.w	r3, r7, #20
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_SPI_MspInit+0x84>)
 8001e66:	f001 fb93 	bl	8003590 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3728      	adds	r7, #40	; 0x28
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40013400 	.word	0x40013400
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a27      	ldr	r2, [pc, #156]	; (8001f2c <HAL_TIM_Base_MspInit+0xac>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d114      	bne.n	8001ebc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e92:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	4a26      	ldr	r2, [pc, #152]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2019      	movs	r0, #25
 8001eb0:	f001 fb37 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001eb4:	2019      	movs	r0, #25
 8001eb6:	f001 fb50 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001eba:	e032      	b.n	8001f22 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM13)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_TIM_Base_MspInit+0xb4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d114      	bne.n	8001ef0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001ec6:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	202c      	movs	r0, #44	; 0x2c
 8001ee4:	f001 fb1d 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f001 fb36 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8001eee:	e018      	b.n	8001f22 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM14)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_TIM_Base_MspInit+0xb8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d113      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6413      	str	r3, [r2, #64]	; 0x40
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_TIM_Base_MspInit+0xb0>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001f12:	2200      	movs	r2, #0
 8001f14:	2100      	movs	r1, #0
 8001f16:	202d      	movs	r0, #45	; 0x2d
 8001f18:	f001 fb03 	bl	8003522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001f1c:	202d      	movs	r0, #45	; 0x2d
 8001f1e:	f001 fb1c 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40014400 	.word	0x40014400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40001c00 	.word	0x40001c00
 8001f38:	40002000 	.word	0x40002000

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 f8b4 	bl	80020f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <CAN1_RX1_IRQHandler+0x10>)
 8001f96:	f000 ffc4 	bl	8002f22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000394 	.word	0x20000394

08001fa4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001fa8:	2040      	movs	r0, #64	; 0x40
 8001faa:	f001 fce9 	bl	8003980 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fba:	f003 f9f8 	bl	80053ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200000d0 	.word	0x200000d0

08001fc8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001fce:	f003 f9ee 	bl	80053ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000250 	.word	0x20000250

08001fdc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001fe2:	f003 f9e4 	bl	80053ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200003bc 	.word	0x200003bc

08001ff0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8001ff4:	4802      	ldr	r0, [pc, #8]	; (8002000 <CAN3_RX0_IRQHandler+0x10>)
 8001ff6:	f000 ff94 	bl	8002f22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000015c 	.word	0x2000015c

08002004 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002060 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800202c:	480d      	ldr	r0, [pc, #52]	; (8002064 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800202e:	490e      	ldr	r1, [pc, #56]	; (8002068 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002034:	e002      	b.n	800203c <LoopCopyDataInit>

08002036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800203a:	3304      	adds	r3, #4

0800203c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800203c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800203e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002040:	d3f9      	bcc.n	8002036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002042:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002044:	4c0b      	ldr	r4, [pc, #44]	; (8002074 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002048:	e001      	b.n	800204e <LoopFillZerobss>

0800204a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800204a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800204c:	3204      	adds	r2, #4

0800204e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800204e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002050:	d3fb      	bcc.n	800204a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002052:	f7ff ffd7 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002056:	f003 fbaf 	bl	80057b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205a:	f7fe fd89 	bl	8000b70 <main>
  bx  lr    
 800205e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002060:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002068:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800206c:	08005848 	.word	0x08005848
  ldr r2, =_sbss
 8002070:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002074:	20000484 	.word	0x20000484

08002078 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002078:	e7fe      	b.n	8002078 <ADC_IRQHandler>

0800207a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800207e:	2003      	movs	r0, #3
 8002080:	f001 fa44 	bl	800350c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002084:	200f      	movs	r0, #15
 8002086:	f000 f805 	bl	8002094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800208a:	f7ff fd47 	bl	8001b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x54>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_InitTick+0x58>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fa5f 	bl	8003576 <HAL_SYSTICK_Config>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e00e      	b.n	80020e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b0f      	cmp	r3, #15
 80020c6:	d80a      	bhi.n	80020de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c8:	2200      	movs	r2, #0
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f001 fa27 	bl	8003522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d4:	4a06      	ldr	r2, [pc, #24]	; (80020f0 <HAL_InitTick+0x5c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	e000      	b.n	80020e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000004 	.word	0x20000004
 80020ec:	2000000c 	.word	0x2000000c
 80020f0:	20000008 	.word	0x20000008

080020f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_IncTick+0x20>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_IncTick+0x24>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4413      	add	r3, r2
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_IncTick+0x24>)
 8002106:	6013      	str	r3, [r2, #0]
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	2000000c 	.word	0x2000000c
 8002118:	20000480 	.word	0x20000480

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000480 	.word	0x20000480

08002134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800213c:	f7ff ffee 	bl	800211c <HAL_GetTick>
 8002140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d005      	beq.n	800215a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_Delay+0x44>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4413      	add	r3, r2
 8002158:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800215a:	bf00      	nop
 800215c:	f7ff ffde 	bl	800211c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	429a      	cmp	r2, r3
 800216a:	d8f7      	bhi.n	800215c <HAL_Delay+0x28>
  {
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e031      	b.n	80021f6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fce2 	bl	8001b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <HAL_ADC_Init+0x84>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	f043 0202 	orr.w	r2, r3, #2
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f970 	bl	80024b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f023 0303 	bic.w	r3, r3, #3
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	641a      	str	r2, [r3, #64]	; 0x40
 80021e6:	e001      	b.n	80021ec <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	ffffeefd 	.word	0xffffeefd

08002204 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x1c>
 800221c:	2302      	movs	r3, #2
 800221e:	e136      	b.n	800248e <HAL_ADC_ConfigChannel+0x28a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d93a      	bls.n	80022a6 <HAL_ADC_ConfigChannel+0xa2>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002238:	d035      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68d9      	ldr	r1, [r3, #12]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b29b      	uxth	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	3b1e      	subs	r3, #30
 8002250:	2207      	movs	r2, #7
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	400a      	ands	r2, r1
 800225e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a8d      	ldr	r2, [pc, #564]	; (800249c <HAL_ADC_ConfigChannel+0x298>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68d9      	ldr	r1, [r3, #12]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	061a      	lsls	r2, r3, #24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227e:	e035      	b.n	80022ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68d9      	ldr	r1, [r3, #12]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b29b      	uxth	r3, r3
 8002290:	4618      	mov	r0, r3
 8002292:	4603      	mov	r3, r0
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4403      	add	r3, r0
 8002298:	3b1e      	subs	r3, #30
 800229a:	409a      	lsls	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a4:	e022      	b.n	80022ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6919      	ldr	r1, [r3, #16]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	2207      	movs	r2, #7
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43da      	mvns	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	400a      	ands	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6919      	ldr	r1, [r3, #16]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	b29b      	uxth	r3, r3
 80022da:	4618      	mov	r0, r3
 80022dc:	4603      	mov	r3, r0
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4403      	add	r3, r0
 80022e2:	409a      	lsls	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b06      	cmp	r3, #6
 80022f2:	d824      	bhi.n	800233e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4413      	add	r3, r2
 8002304:	3b05      	subs	r3, #5
 8002306:	221f      	movs	r2, #31
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43da      	mvns	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	400a      	ands	r2, r1
 8002314:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	3b05      	subs	r3, #5
 8002330:	fa00 f203 	lsl.w	r2, r0, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	635a      	str	r2, [r3, #52]	; 0x34
 800233c:	e04c      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d824      	bhi.n	8002390 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b23      	subs	r3, #35	; 0x23
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b23      	subs	r3, #35	; 0x23
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
 800238e:	e023      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	3b41      	subs	r3, #65	; 0x41
 80023a2:	221f      	movs	r2, #31
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43da      	mvns	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	400a      	ands	r2, r1
 80023b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	b29b      	uxth	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	3b41      	subs	r3, #65	; 0x41
 80023cc:	fa00 f203 	lsl.w	r2, r0, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_ADC_ConfigChannel+0x29c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10a      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x1f4>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ea:	d105      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80023ec:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80023f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <HAL_ADC_ConfigChannel+0x29c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10f      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x21e>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2b12      	cmp	r3, #18
 8002408:	d10b      	bne.n	8002422 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800240a:	4b26      	ldr	r3, [pc, #152]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4a25      	ldr	r2, [pc, #148]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002410:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002414:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	4a22      	ldr	r2, [pc, #136]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800241c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002420:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1e      	ldr	r2, [pc, #120]	; (80024a0 <HAL_ADC_ConfigChannel+0x29c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d12b      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x280>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a1a      	ldr	r2, [pc, #104]	; (800249c <HAL_ADC_ConfigChannel+0x298>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d003      	beq.n	800243e <HAL_ADC_ConfigChannel+0x23a>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b11      	cmp	r3, #17
 800243c:	d122      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002444:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002448:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800244a:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002450:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002454:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_ADC_ConfigChannel+0x298>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d111      	bne.n	8002484 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_ADC_ConfigChannel+0x2a8>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	0c9a      	lsrs	r2, r3, #18
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002476:	e002      	b.n	800247e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3b01      	subs	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f9      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	10000012 	.word	0x10000012
 80024a0:	40012000 	.word	0x40012000
 80024a4:	40012300 	.word	0x40012300
 80024a8:	20000004 	.word	0x20000004
 80024ac:	431bde83 	.word	0x431bde83

080024b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80024b8:	4b78      	ldr	r3, [pc, #480]	; (800269c <ADC_Init+0x1ec>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a77      	ldr	r2, [pc, #476]	; (800269c <ADC_Init+0x1ec>)
 80024be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80024c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80024c4:	4b75      	ldr	r3, [pc, #468]	; (800269c <ADC_Init+0x1ec>)
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4973      	ldr	r1, [pc, #460]	; (800269c <ADC_Init+0x1ec>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689a      	ldr	r2, [r3, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6899      	ldr	r1, [r3, #8]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	4a58      	ldr	r2, [pc, #352]	; (80026a0 <ADC_Init+0x1f0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d022      	beq.n	800258a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6899      	ldr	r1, [r3, #8]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	e00f      	b.n	80025aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0202 	bic.w	r2, r2, #2
 80025b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	005a      	lsls	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01b      	beq.n	8002610 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	3b01      	subs	r3, #1
 8002604:	035a      	lsls	r2, r3, #13
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	e007      	b.n	8002620 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800262e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	3b01      	subs	r3, #1
 800263c:	051a      	lsls	r2, r3, #20
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6899      	ldr	r1, [r3, #8]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002662:	025a      	lsls	r2, r3, #9
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	029a      	lsls	r2, r3, #10
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	609a      	str	r2, [r3, #8]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40012300 	.word	0x40012300
 80026a0:	0f000001 	.word	0x0f000001

080026a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0ed      	b.n	8002892 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d102      	bne.n	80026c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7ff fae6 	bl	8001c94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026d8:	f7ff fd20 	bl	800211c <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026de:	e012      	b.n	8002706 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026e0:	f7ff fd1c 	bl	800211c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b0a      	cmp	r3, #10
 80026ec:	d90b      	bls.n	8002706 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2205      	movs	r2, #5
 80026fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0c5      	b.n	8002892 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0e5      	beq.n	80026e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0202 	bic.w	r2, r2, #2
 8002722:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002724:	f7ff fcfa 	bl	800211c <HAL_GetTick>
 8002728:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800272a:	e012      	b.n	8002752 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800272c:	f7ff fcf6 	bl	800211c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b0a      	cmp	r3, #10
 8002738:	d90b      	bls.n	8002752 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2205      	movs	r2, #5
 800274a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e09f      	b.n	8002892 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e5      	bne.n	800272c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7e1b      	ldrb	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d108      	bne.n	800277a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e007      	b.n	800278a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7e5b      	ldrb	r3, [r3, #25]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d108      	bne.n	80027a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	e007      	b.n	80027b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7e9b      	ldrb	r3, [r3, #26]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d108      	bne.n	80027ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0220 	orr.w	r2, r2, #32
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	e007      	b.n	80027de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0220 	bic.w	r2, r2, #32
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	7edb      	ldrb	r3, [r3, #27]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0210 	bic.w	r2, r2, #16
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e007      	b.n	8002808 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f042 0210 	orr.w	r2, r2, #16
 8002806:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	7f1b      	ldrb	r3, [r3, #28]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d108      	bne.n	8002822 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0208 	orr.w	r2, r2, #8
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e007      	b.n	8002832 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0208 	bic.w	r2, r2, #8
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7f5b      	ldrb	r3, [r3, #29]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d108      	bne.n	800284c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0204 	orr.w	r2, r2, #4
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	e007      	b.n	800285c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0204 	bic.w	r2, r2, #4
 800285a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	431a      	orrs	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	ea42 0103 	orr.w	r1, r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
	...

0800289c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028b4:	7cfb      	ldrb	r3, [r7, #19]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d003      	beq.n	80028c2 <HAL_CAN_ConfigFilter+0x26>
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	f040 80c7 	bne.w	8002a50 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a69      	ldr	r2, [pc, #420]	; (8002a6c <HAL_CAN_ConfigFilter+0x1d0>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d001      	beq.n	80028d0 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80028cc:	4b68      	ldr	r3, [pc, #416]	; (8002a70 <HAL_CAN_ConfigFilter+0x1d4>)
 80028ce:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028d6:	f043 0201 	orr.w	r2, r3, #1
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4a63      	ldr	r2, [pc, #396]	; (8002a70 <HAL_CAN_ConfigFilter+0x1d4>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2201      	movs	r2, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43db      	mvns	r3, r3
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d123      	bne.n	800297e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002958:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3248      	adds	r2, #72	; 0x48
 800295e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002972:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002974:	6979      	ldr	r1, [r7, #20]
 8002976:	3348      	adds	r3, #72	; 0x48
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d122      	bne.n	80029cc <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	431a      	orrs	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	3248      	adds	r2, #72	; 0x48
 80029ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029c2:	6979      	ldr	r1, [r7, #20]
 80029c4:	3348      	adds	r3, #72	; 0x48
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	440b      	add	r3, r1
 80029ca:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	43db      	mvns	r3, r3
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029e6:	e007      	b.n	80029f8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	431a      	orrs	r2, r3
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d109      	bne.n	8002a14 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a12:	e007      	b.n	8002a24 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d107      	bne.n	8002a3c <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	431a      	orrs	r2, r3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a42:	f023 0201 	bic.w	r2, r3, #1
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e006      	b.n	8002a5e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	371c      	adds	r7, #28
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40003400 	.word	0x40003400
 8002a70:	40006400 	.word	0x40006400

08002a74 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d12e      	bne.n	8002ae6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa0:	f7ff fb3c 	bl	800211c <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aa6:	e012      	b.n	8002ace <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aa8:	f7ff fb38 	bl	800211c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b0a      	cmp	r3, #10
 8002ab4:	d90b      	bls.n	8002ace <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e012      	b.n	8002af4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1e5      	bne.n	8002aa8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e006      	b.n	8002af4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d003      	beq.n	8002b28 <HAL_CAN_AddTxMessage+0x2c>
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	f040 80b8 	bne.w	8002c98 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10a      	bne.n	8002b48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d105      	bne.n	8002b48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80a0 	beq.w	8002c88 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	0e1b      	lsrs	r3, r3, #24
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d907      	bls.n	8002b68 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e09e      	b.n	8002ca6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	409a      	lsls	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10d      	bne.n	8002b96 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b84:	68f9      	ldr	r1, [r7, #12]
 8002b86:	6809      	ldr	r1, [r1, #0]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3318      	adds	r3, #24
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	440b      	add	r3, r1
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e00f      	b.n	8002bb6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002baa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3318      	adds	r3, #24
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	440b      	add	r3, r1
 8002bb4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	7d1b      	ldrb	r3, [r3, #20]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d111      	bne.n	8002bf6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3318      	adds	r3, #24
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4413      	add	r3, r2
 8002bde:	3304      	adds	r3, #4
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	6811      	ldr	r1, [r2, #0]
 8002be6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	3318      	adds	r3, #24
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3307      	adds	r3, #7
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	061a      	lsls	r2, r3, #24
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3306      	adds	r3, #6
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	041b      	lsls	r3, r3, #16
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3305      	adds	r3, #5
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	4313      	orrs	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	3204      	adds	r2, #4
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	4610      	mov	r0, r2
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	6811      	ldr	r1, [r2, #0]
 8002c1e:	ea43 0200 	orr.w	r2, r3, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3303      	adds	r3, #3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	061a      	lsls	r2, r3, #24
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3302      	adds	r3, #2
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	041b      	lsls	r3, r3, #16
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3301      	adds	r3, #1
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	7812      	ldrb	r2, [r2, #0]
 8002c4e:	4610      	mov	r0, r2
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	6811      	ldr	r1, [r2, #0]
 8002c54:	ea43 0200 	orr.w	r2, r3, r0
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	440b      	add	r3, r1
 8002c5e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	4413      	add	r3, r2
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	6811      	ldr	r1, [r2, #0]
 8002c76:	f043 0201 	orr.w	r2, r3, #1
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	3318      	adds	r3, #24
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	440b      	add	r3, r1
 8002c82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e00e      	b.n	8002ca6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e006      	b.n	8002ca6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b087      	sub	sp, #28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d003      	beq.n	8002cd6 <HAL_CAN_GetRxMessage+0x24>
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 80f3 	bne.w	8002ebc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10e      	bne.n	8002cfa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d116      	bne.n	8002d18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0e7      	b.n	8002eca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0d8      	b.n	8002eca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	331b      	adds	r3, #27
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	4413      	add	r3, r2
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0204 	and.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10c      	bne.n	8002d50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	331b      	adds	r3, #27
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	4413      	add	r3, r2
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0d5b      	lsrs	r3, r3, #21
 8002d46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00b      	b.n	8002d68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	331b      	adds	r3, #27
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4413      	add	r3, r2
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	08db      	lsrs	r3, r3, #3
 8002d60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	331b      	adds	r3, #27
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4413      	add	r3, r2
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0202 	and.w	r2, r3, #2
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	331b      	adds	r3, #27
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	4413      	add	r3, r2
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	331b      	adds	r3, #27
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4413      	add	r3, r2
 8002da2:	3304      	adds	r3, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	331b      	adds	r3, #27
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	3304      	adds	r3, #4
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0c1b      	lsrs	r3, r3, #16
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0a1a      	lsrs	r2, r3, #8
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	3301      	adds	r3, #1
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	4413      	add	r3, r2
 8002e00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0c1a      	lsrs	r2, r3, #16
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e1a      	lsrs	r2, r3, #24
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	3303      	adds	r3, #3
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	0a1a      	lsrs	r2, r3, #8
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	3305      	adds	r3, #5
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0c1a      	lsrs	r2, r3, #16
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	3306      	adds	r3, #6
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0e1a      	lsrs	r2, r3, #24
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	3307      	adds	r3, #7
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68da      	ldr	r2, [r3, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	e007      	b.n	8002eb8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0220 	orr.w	r2, r2, #32
 8002eb6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e006      	b.n	8002eca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b085      	sub	sp, #20
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d002      	beq.n	8002ef4 <HAL_CAN_ActivateNotification+0x1e>
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d109      	bne.n	8002f08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6959      	ldr	r1, [r3, #20]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	e006      	b.n	8002f16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
  }
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b08a      	sub	sp, #40	; 0x28
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d07c      	beq.n	8003062 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d023      	beq.n	8002fba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f983 	bl	8003290 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f8a:	e016      	b.n	8002fba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	e00c      	b.n	8002fba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb2:	e002      	b.n	8002fba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f989 	bl	80032cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d024      	beq.n	800300e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f963 	bl	80032a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fde:	e016      	b.n	800300e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e00c      	b.n	800300e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d004      	beq.n	8003008 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	e002      	b.n	800300e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f969 	bl	80032e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d024      	beq.n	8003062 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003020:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f943 	bl	80032b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8003032:	e016      	b.n	8003062 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
 8003046:	e00c      	b.n	8003062 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	e002      	b.n	8003062 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f949 	bl	80032f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800307c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2210      	movs	r2, #16
 8003084:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f003 0308 	and.w	r3, r3, #8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2208      	movs	r2, #8
 80030a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f930 	bl	8003308 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d009      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fe fcab 	bl	8001a1c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00c      	beq.n	80030ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d007      	beq.n	80030ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	f003 0320 	and.w	r3, r3, #32
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d006      	beq.n	800310c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2208      	movs	r2, #8
 8003104:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f908 	bl	800331c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b00      	cmp	r3, #0
 8003114:	d009      	beq.n	800312a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fe fcb3 	bl	8001a90 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00b      	beq.n	800314c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d006      	beq.n	800314c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2210      	movs	r2, #16
 8003144:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8f2 	bl	8003330 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00b      	beq.n	800316e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2208      	movs	r2, #8
 8003166:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8eb 	bl	8003344 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d07b      	beq.n	8003270 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d072      	beq.n	8003268 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d008      	beq.n	80031ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d003      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	f043 0304 	orr.w	r3, r3, #4
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d043      	beq.n	8003268 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d03e      	beq.n	8003268 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031f0:	2b60      	cmp	r3, #96	; 0x60
 80031f2:	d02b      	beq.n	800324c <HAL_CAN_IRQHandler+0x32a>
 80031f4:	2b60      	cmp	r3, #96	; 0x60
 80031f6:	d82e      	bhi.n	8003256 <HAL_CAN_IRQHandler+0x334>
 80031f8:	2b50      	cmp	r3, #80	; 0x50
 80031fa:	d022      	beq.n	8003242 <HAL_CAN_IRQHandler+0x320>
 80031fc:	2b50      	cmp	r3, #80	; 0x50
 80031fe:	d82a      	bhi.n	8003256 <HAL_CAN_IRQHandler+0x334>
 8003200:	2b40      	cmp	r3, #64	; 0x40
 8003202:	d019      	beq.n	8003238 <HAL_CAN_IRQHandler+0x316>
 8003204:	2b40      	cmp	r3, #64	; 0x40
 8003206:	d826      	bhi.n	8003256 <HAL_CAN_IRQHandler+0x334>
 8003208:	2b30      	cmp	r3, #48	; 0x30
 800320a:	d010      	beq.n	800322e <HAL_CAN_IRQHandler+0x30c>
 800320c:	2b30      	cmp	r3, #48	; 0x30
 800320e:	d822      	bhi.n	8003256 <HAL_CAN_IRQHandler+0x334>
 8003210:	2b10      	cmp	r3, #16
 8003212:	d002      	beq.n	800321a <HAL_CAN_IRQHandler+0x2f8>
 8003214:	2b20      	cmp	r3, #32
 8003216:	d005      	beq.n	8003224 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003218:	e01d      	b.n	8003256 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	f043 0308 	orr.w	r3, r3, #8
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003222:	e019      	b.n	8003258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f043 0310 	orr.w	r3, r3, #16
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800322c:	e014      	b.n	8003258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800322e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003230:	f043 0320 	orr.w	r3, r3, #32
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003236:	e00f      	b.n	8003258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003240:	e00a      	b.n	8003258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800324a:	e005      	b.n	8003258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003254:	e000      	b.n	8003258 <HAL_CAN_IRQHandler+0x336>
            break;
 8003256:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003266:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2204      	movs	r2, #4
 800326e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d008      	beq.n	8003288 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f868 	bl	8003358 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <__NVIC_SetPriorityGrouping+0x40>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003388:	4013      	ands	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	4313      	orrs	r3, r2
 8003398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339a:	4a04      	ldr	r2, [pc, #16]	; (80033ac <__NVIC_SetPriorityGrouping+0x40>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	60d3      	str	r3, [r2, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00
 80033b0:	05fa0000 	.word	0x05fa0000

080033b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <__NVIC_GetPriorityGrouping+0x18>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f003 0307 	and.w	r3, r3, #7
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000ed00 	.word	0xe000ed00

080033d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	4603      	mov	r3, r0
 80033d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	db0b      	blt.n	80033fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	f003 021f 	and.w	r2, r3, #31
 80033e8:	4907      	ldr	r1, [pc, #28]	; (8003408 <__NVIC_EnableIRQ+0x38>)
 80033ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ee:	095b      	lsrs	r3, r3, #5
 80033f0:	2001      	movs	r0, #1
 80033f2:	fa00 f202 	lsl.w	r2, r0, r2
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	e000e100 	.word	0xe000e100

0800340c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	6039      	str	r1, [r7, #0]
 8003416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341c:	2b00      	cmp	r3, #0
 800341e:	db0a      	blt.n	8003436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	b2da      	uxtb	r2, r3
 8003424:	490c      	ldr	r1, [pc, #48]	; (8003458 <__NVIC_SetPriority+0x4c>)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	0112      	lsls	r2, r2, #4
 800342c:	b2d2      	uxtb	r2, r2
 800342e:	440b      	add	r3, r1
 8003430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003434:	e00a      	b.n	800344c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	b2da      	uxtb	r2, r3
 800343a:	4908      	ldr	r1, [pc, #32]	; (800345c <__NVIC_SetPriority+0x50>)
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	3b04      	subs	r3, #4
 8003444:	0112      	lsls	r2, r2, #4
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	440b      	add	r3, r1
 800344a:	761a      	strb	r2, [r3, #24]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000e100 	.word	0xe000e100
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003460:	b480      	push	{r7}
 8003462:	b089      	sub	sp, #36	; 0x24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f1c3 0307 	rsb	r3, r3, #7
 800347a:	2b04      	cmp	r3, #4
 800347c:	bf28      	it	cs
 800347e:	2304      	movcs	r3, #4
 8003480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	3304      	adds	r3, #4
 8003486:	2b06      	cmp	r3, #6
 8003488:	d902      	bls.n	8003490 <NVIC_EncodePriority+0x30>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3b03      	subs	r3, #3
 800348e:	e000      	b.n	8003492 <NVIC_EncodePriority+0x32>
 8003490:	2300      	movs	r3, #0
 8003492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	f04f 32ff 	mov.w	r2, #4294967295
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	401a      	ands	r2, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	fa01 f303 	lsl.w	r3, r1, r3
 80034b2:	43d9      	mvns	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	4313      	orrs	r3, r2
         );
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3724      	adds	r7, #36	; 0x24
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
	...

080034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	; (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f7ff ff8e 	bl	800340c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	; (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff29 	bl	800336c <__NVIC_SetPriorityGrouping>
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003522:	b580      	push	{r7, lr}
 8003524:	b086      	sub	sp, #24
 8003526:	af00      	add	r7, sp, #0
 8003528:	4603      	mov	r3, r0
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003530:	2300      	movs	r3, #0
 8003532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff3e 	bl	80033b4 <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff8e 	bl	8003460 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5d 	bl	800340c <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff31 	bl	80033d0 <__NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffa2 	bl	80034c8 <SysTick_Config>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003590:	b480      	push	{r7}
 8003592:	b089      	sub	sp, #36	; 0x24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e175      	b.n	800389c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 8164 	bne.w	8003896 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_GPIO_Init+0x56>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d130      	bne.n	8003648 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0201 	and.w	r2, r3, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d017      	beq.n	8003684 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d123      	bne.n	80036d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80be 	beq.w	8003896 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	4b66      	ldr	r3, [pc, #408]	; (80038b4 <HAL_GPIO_Init+0x324>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4a65      	ldr	r2, [pc, #404]	; (80038b4 <HAL_GPIO_Init+0x324>)
 8003720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003724:	6453      	str	r3, [r2, #68]	; 0x44
 8003726:	4b63      	ldr	r3, [pc, #396]	; (80038b4 <HAL_GPIO_Init+0x324>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003732:	4a61      	ldr	r2, [pc, #388]	; (80038b8 <HAL_GPIO_Init+0x328>)
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	3302      	adds	r3, #2
 800373a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	220f      	movs	r2, #15
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a58      	ldr	r2, [pc, #352]	; (80038bc <HAL_GPIO_Init+0x32c>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d037      	beq.n	80037ce <HAL_GPIO_Init+0x23e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a57      	ldr	r2, [pc, #348]	; (80038c0 <HAL_GPIO_Init+0x330>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d031      	beq.n	80037ca <HAL_GPIO_Init+0x23a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a56      	ldr	r2, [pc, #344]	; (80038c4 <HAL_GPIO_Init+0x334>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02b      	beq.n	80037c6 <HAL_GPIO_Init+0x236>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a55      	ldr	r2, [pc, #340]	; (80038c8 <HAL_GPIO_Init+0x338>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d025      	beq.n	80037c2 <HAL_GPIO_Init+0x232>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a54      	ldr	r2, [pc, #336]	; (80038cc <HAL_GPIO_Init+0x33c>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d01f      	beq.n	80037be <HAL_GPIO_Init+0x22e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a53      	ldr	r2, [pc, #332]	; (80038d0 <HAL_GPIO_Init+0x340>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d019      	beq.n	80037ba <HAL_GPIO_Init+0x22a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a52      	ldr	r2, [pc, #328]	; (80038d4 <HAL_GPIO_Init+0x344>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d013      	beq.n	80037b6 <HAL_GPIO_Init+0x226>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a51      	ldr	r2, [pc, #324]	; (80038d8 <HAL_GPIO_Init+0x348>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00d      	beq.n	80037b2 <HAL_GPIO_Init+0x222>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a50      	ldr	r2, [pc, #320]	; (80038dc <HAL_GPIO_Init+0x34c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <HAL_GPIO_Init+0x21e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a4f      	ldr	r2, [pc, #316]	; (80038e0 <HAL_GPIO_Init+0x350>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d101      	bne.n	80037aa <HAL_GPIO_Init+0x21a>
 80037a6:	2309      	movs	r3, #9
 80037a8:	e012      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037aa:	230a      	movs	r3, #10
 80037ac:	e010      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037ae:	2308      	movs	r3, #8
 80037b0:	e00e      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037b2:	2307      	movs	r3, #7
 80037b4:	e00c      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037b6:	2306      	movs	r3, #6
 80037b8:	e00a      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037ba:	2305      	movs	r3, #5
 80037bc:	e008      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037be:	2304      	movs	r3, #4
 80037c0:	e006      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037c2:	2303      	movs	r3, #3
 80037c4:	e004      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037c6:	2302      	movs	r3, #2
 80037c8:	e002      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <HAL_GPIO_Init+0x240>
 80037ce:	2300      	movs	r3, #0
 80037d0:	69fa      	ldr	r2, [r7, #28]
 80037d2:	f002 0203 	and.w	r2, r2, #3
 80037d6:	0092      	lsls	r2, r2, #2
 80037d8:	4093      	lsls	r3, r2
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037e0:	4935      	ldr	r1, [pc, #212]	; (80038b8 <HAL_GPIO_Init+0x328>)
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ee:	4b3d      	ldr	r3, [pc, #244]	; (80038e4 <HAL_GPIO_Init+0x354>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	43db      	mvns	r3, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4013      	ands	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	4313      	orrs	r3, r2
 8003810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003812:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_GPIO_Init+0x354>)
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003818:	4b32      	ldr	r3, [pc, #200]	; (80038e4 <HAL_GPIO_Init+0x354>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	43db      	mvns	r3, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	4013      	ands	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800383c:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <HAL_GPIO_Init+0x354>)
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003842:	4b28      	ldr	r3, [pc, #160]	; (80038e4 <HAL_GPIO_Init+0x354>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003866:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_GPIO_Init+0x354>)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800386c:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <HAL_GPIO_Init+0x354>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	43db      	mvns	r3, r3
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	4013      	ands	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003890:	4a14      	ldr	r2, [pc, #80]	; (80038e4 <HAL_GPIO_Init+0x354>)
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	3301      	adds	r3, #1
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b0f      	cmp	r3, #15
 80038a0:	f67f ae86 	bls.w	80035b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40013800 	.word	0x40013800
 80038bc:	40020000 	.word	0x40020000
 80038c0:	40020400 	.word	0x40020400
 80038c4:	40020800 	.word	0x40020800
 80038c8:	40020c00 	.word	0x40020c00
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40021400 	.word	0x40021400
 80038d4:	40021800 	.word	0x40021800
 80038d8:	40021c00 	.word	0x40021c00
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40022400 	.word	0x40022400
 80038e4:	40013c00 	.word	0x40013c00

080038e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	887b      	ldrh	r3, [r7, #2]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
 8003904:	e001      	b.n	800390a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]
 8003924:	4613      	mov	r3, r2
 8003926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003928:	787b      	ldrb	r3, [r7, #1]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003934:	e003      	b.n	800393e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	619a      	str	r2, [r3, #24]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800394a:	b480      	push	{r7}
 800394c:	b085      	sub	sp, #20
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800395c:	887a      	ldrh	r2, [r7, #2]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4013      	ands	r3, r2
 8003962:	041a      	lsls	r2, r3, #16
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	43d9      	mvns	r1, r3
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	400b      	ands	r3, r1
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	619a      	str	r2, [r3, #24]
}
 8003972:	bf00      	nop
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800398c:	695a      	ldr	r2, [r3, #20]
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	4013      	ands	r3, r2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d006      	beq.n	80039a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003996:	4a05      	ldr	r2, [pc, #20]	; (80039ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe f896 	bl	8001ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40013c00 	.word	0x40013c00

080039b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80039ba:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x98>)
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	4a22      	ldr	r2, [pc, #136]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c4:	6413      	str	r3, [r2, #64]	; 0x40
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_PWREx_EnableOverDrive+0x98>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039de:	f7fe fb9d 	bl	800211c <HAL_GetTick>
 80039e2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039e4:	e009      	b.n	80039fa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039e6:	f7fe fb99 	bl	800211c <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039f4:	d901      	bls.n	80039fa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e022      	b.n	8003a40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d1ee      	bne.n	80039e6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a14:	f7fe fb82 	bl	800211c <HAL_GetTick>
 8003a18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a1a:	e009      	b.n	8003a30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003a1c:	f7fe fb7e 	bl	800211c <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2a:	d901      	bls.n	8003a30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e007      	b.n	8003a40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a3c:	d1ee      	bne.n	8003a1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a3e:	2300      	movs	r3, #0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40007000 	.word	0x40007000

08003a50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e29b      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8087 	beq.w	8003b82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a74:	4b96      	ldr	r3, [pc, #600]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d00c      	beq.n	8003a9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a80:	4b93      	ldr	r3, [pc, #588]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d112      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62>
 8003a8c:	4b90      	ldr	r3, [pc, #576]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a98:	d10b      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9a:	4b8d      	ldr	r3, [pc, #564]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d06c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x130>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d168      	bne.n	8003b80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e275      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x7a>
 8003abc:	4b84      	ldr	r3, [pc, #528]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a83      	ldr	r2, [pc, #524]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e02e      	b.n	8003b28 <HAL_RCC_OscConfig+0xd8>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x9c>
 8003ad2:	4b7f      	ldr	r3, [pc, #508]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7e      	ldr	r2, [pc, #504]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b7c      	ldr	r3, [pc, #496]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a7b      	ldr	r2, [pc, #492]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e01d      	b.n	8003b28 <HAL_RCC_OscConfig+0xd8>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0xc0>
 8003af6:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a75      	ldr	r2, [pc, #468]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b73      	ldr	r3, [pc, #460]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a72      	ldr	r2, [pc, #456]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0xd8>
 8003b10:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6e      	ldr	r2, [pc, #440]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a6b      	ldr	r2, [pc, #428]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe faf4 	bl	800211c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fe faf0 	bl	800211c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e229      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0xe8>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b58:	f7fe fae0 	bl	800211c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe fadc 	bl	800211c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e215      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	4b57      	ldr	r3, [pc, #348]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x110>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d069      	beq.n	8003c62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8e:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d11c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x190>
 8003ba6:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x17a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e1e9      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b41      	ldr	r3, [pc, #260]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	493d      	ldr	r1, [pc, #244]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	e040      	b.n	8003c62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d023      	beq.n	8003c30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be8:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a38      	ldr	r2, [pc, #224]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fa92 	bl	800211c <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bfc:	f7fe fa8e 	bl	800211c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e1c7      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1a:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4929      	ldr	r1, [pc, #164]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	600b      	str	r3, [r1, #0]
 8003c2e:	e018      	b.n	8003c62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c30:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fe fa6e 	bl	800211c <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c44:	f7fe fa6a 	bl	800211c <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1a3      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d038      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d019      	beq.n	8003caa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c82:	f7fe fa4b 	bl	800211c <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fa47 	bl	800211c <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e180      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x23a>
 8003ca8:	e01a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cae:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <HAL_RCC_OscConfig+0x280>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb6:	f7fe fa31 	bl	800211c <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cbe:	f7fe fa2d 	bl	800211c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d903      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e166      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
 8003cd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd4:	4b92      	ldr	r3, [pc, #584]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1ee      	bne.n	8003cbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a4 	beq.w	8003e36 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cee:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cfa:	4b89      	ldr	r3, [pc, #548]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	4a88      	ldr	r2, [pc, #544]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d04:	6413      	str	r3, [r2, #64]	; 0x40
 8003d06:	4b86      	ldr	r3, [pc, #536]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0e:	60bb      	str	r3, [r7, #8]
 8003d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d12:	2301      	movs	r3, #1
 8003d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d16:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <HAL_RCC_OscConfig+0x4d4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d118      	bne.n	8003d54 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003d22:	4b80      	ldr	r3, [pc, #512]	; (8003f24 <HAL_RCC_OscConfig+0x4d4>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a7f      	ldr	r2, [pc, #508]	; (8003f24 <HAL_RCC_OscConfig+0x4d4>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2e:	f7fe f9f5 	bl	800211c <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d34:	e008      	b.n	8003d48 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fe f9f1 	bl	800211c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b64      	cmp	r3, #100	; 0x64
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e12a      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d48:	4b76      	ldr	r3, [pc, #472]	; (8003f24 <HAL_RCC_OscConfig+0x4d4>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0f0      	beq.n	8003d36 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d106      	bne.n	8003d6a <HAL_RCC_OscConfig+0x31a>
 8003d5c:	4b70      	ldr	r3, [pc, #448]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a6f      	ldr	r2, [pc, #444]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	e02d      	b.n	8003dc6 <HAL_RCC_OscConfig+0x376>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x33c>
 8003d72:	4b6b      	ldr	r3, [pc, #428]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a6a      	ldr	r2, [pc, #424]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7e:	4b68      	ldr	r3, [pc, #416]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a67      	ldr	r2, [pc, #412]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	f023 0304 	bic.w	r3, r3, #4
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	e01c      	b.n	8003dc6 <HAL_RCC_OscConfig+0x376>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b05      	cmp	r3, #5
 8003d92:	d10c      	bne.n	8003dae <HAL_RCC_OscConfig+0x35e>
 8003d94:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d98:	4a61      	ldr	r2, [pc, #388]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003d9a:	f043 0304 	orr.w	r3, r3, #4
 8003d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003da0:	4b5f      	ldr	r3, [pc, #380]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da4:	4a5e      	ldr	r2, [pc, #376]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	6713      	str	r3, [r2, #112]	; 0x70
 8003dac:	e00b      	b.n	8003dc6 <HAL_RCC_OscConfig+0x376>
 8003dae:	4b5c      	ldr	r3, [pc, #368]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db2:	4a5b      	ldr	r2, [pc, #364]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dba:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a58      	ldr	r2, [pc, #352]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d015      	beq.n	8003dfa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fe f9a5 	bl	800211c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fe f9a1 	bl	800211c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e0d8      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dec:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0ee      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x386>
 8003df8:	e014      	b.n	8003e24 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfa:	f7fe f98f 	bl	800211c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e00:	e00a      	b.n	8003e18 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e02:	f7fe f98b 	bl	800211c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0c2      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e18:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1ee      	bne.n	8003e02 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a3c      	ldr	r2, [pc, #240]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f000 80ae 	beq.w	8003f9c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e40:	4b37      	ldr	r3, [pc, #220]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d06d      	beq.n	8003f28 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d14b      	bne.n	8003eec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a31      	ldr	r2, [pc, #196]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f95c 	bl	800211c <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe f958 	bl	800211c <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e091      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	019b      	lsls	r3, r3, #6
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	071b      	lsls	r3, r3, #28
 8003eb2:	491b      	ldr	r1, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a18      	ldr	r2, [pc, #96]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fe f92a 	bl	800211c <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe f926 	bl	800211c <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e05f      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x47c>
 8003eea:	e057      	b.n	8003f9c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f910 	bl	800211c <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f00:	f7fe f90c 	bl	800211c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e045      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	4b03      	ldr	r3, [pc, #12]	; (8003f20 <HAL_RCC_OscConfig+0x4d0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x4b0>
 8003f1e:	e03d      	b.n	8003f9c <HAL_RCC_OscConfig+0x54c>
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003f28:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <HAL_RCC_OscConfig+0x558>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d030      	beq.n	8003f98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d129      	bne.n	8003f98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d122      	bne.n	8003f98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f58:	4013      	ands	r3, r2
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f5e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d119      	bne.n	8003f98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6e:	085b      	lsrs	r3, r3, #1
 8003f70:	3b01      	subs	r3, #1
 8003f72:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d10f      	bne.n	8003f98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40023800 	.word	0x40023800

08003fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0d0      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b6a      	ldr	r3, [pc, #424]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d910      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b67      	ldr	r3, [pc, #412]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 020f 	bic.w	r2, r3, #15
 8003fda:	4965      	ldr	r1, [pc, #404]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d040      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d115      	bne.n	800408e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406e:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e073      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e06b      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f023 0203 	bic.w	r2, r3, #3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4936      	ldr	r1, [pc, #216]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800409c:	4313      	orrs	r3, r2
 800409e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a0:	f7fe f83c 	bl	800211c <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a6:	e00a      	b.n	80040be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040a8:	f7fe f838 	bl	800211c <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e053      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040be:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 020c 	and.w	r2, r3, #12
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1eb      	bne.n	80040a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040d0:	4b27      	ldr	r3, [pc, #156]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d210      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f023 020f 	bic.w	r2, r3, #15
 80040e6:	4922      	ldr	r1, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_ClockConfig+0x1c4>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f821 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004142:	4602      	mov	r2, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	490a      	ldr	r1, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1cc>)
 8004150:	5ccb      	ldrb	r3, [r1, r3]
 8004152:	fa22 f303 	lsr.w	r3, r2, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1d0>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1d4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd ff98 	bl	8002094 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	08005828 	.word	0x08005828
 800417c:	20000004 	.word	0x20000004
 8004180:	20000008 	.word	0x20000008

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800418a:	2100      	movs	r1, #0
 800418c:	6079      	str	r1, [r7, #4]
 800418e:	2100      	movs	r1, #0
 8004190:	60f9      	str	r1, [r7, #12]
 8004192:	2100      	movs	r1, #0
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004196:	2100      	movs	r1, #0
 8004198:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419a:	4952      	ldr	r1, [pc, #328]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 800419c:	6889      	ldr	r1, [r1, #8]
 800419e:	f001 010c 	and.w	r1, r1, #12
 80041a2:	2908      	cmp	r1, #8
 80041a4:	d00d      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0x3e>
 80041a6:	2908      	cmp	r1, #8
 80041a8:	f200 8094 	bhi.w	80042d4 <HAL_RCC_GetSysClockFreq+0x150>
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x32>
 80041b0:	2904      	cmp	r1, #4
 80041b2:	d003      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x38>
 80041b4:	e08e      	b.n	80042d4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b6:	4b4c      	ldr	r3, [pc, #304]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	e08e      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041bc:	4b4b      	ldr	r3, [pc, #300]	; (80042ec <HAL_RCC_GetSysClockFreq+0x168>)
 80041be:	60bb      	str	r3, [r7, #8]
      break;
 80041c0:	e08b      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041c2:	4948      	ldr	r1, [pc, #288]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041c4:	6849      	ldr	r1, [r1, #4]
 80041c6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80041ca:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80041cc:	4945      	ldr	r1, [pc, #276]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ce:	6849      	ldr	r1, [r1, #4]
 80041d0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80041d4:	2900      	cmp	r1, #0
 80041d6:	d024      	beq.n	8004222 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d8:	4942      	ldr	r1, [pc, #264]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041da:	6849      	ldr	r1, [r1, #4]
 80041dc:	0989      	lsrs	r1, r1, #6
 80041de:	4608      	mov	r0, r1
 80041e0:	f04f 0100 	mov.w	r1, #0
 80041e4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041e8:	f04f 0500 	mov.w	r5, #0
 80041ec:	ea00 0204 	and.w	r2, r0, r4
 80041f0:	ea01 0305 	and.w	r3, r1, r5
 80041f4:	493d      	ldr	r1, [pc, #244]	; (80042ec <HAL_RCC_GetSysClockFreq+0x168>)
 80041f6:	fb01 f003 	mul.w	r0, r1, r3
 80041fa:	2100      	movs	r1, #0
 80041fc:	fb01 f102 	mul.w	r1, r1, r2
 8004200:	1844      	adds	r4, r0, r1
 8004202:	493a      	ldr	r1, [pc, #232]	; (80042ec <HAL_RCC_GetSysClockFreq+0x168>)
 8004204:	fba2 0101 	umull	r0, r1, r2, r1
 8004208:	1863      	adds	r3, r4, r1
 800420a:	4619      	mov	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	461a      	mov	r2, r3
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	f7fc f810 	bl	8000238 <__aeabi_uldivmod>
 8004218:	4602      	mov	r2, r0
 800421a:	460b      	mov	r3, r1
 800421c:	4613      	mov	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e04a      	b.n	80042b8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004222:	4b30      	ldr	r3, [pc, #192]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	099b      	lsrs	r3, r3, #6
 8004228:	461a      	mov	r2, r3
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	ea02 0400 	and.w	r4, r2, r0
 800423a:	ea03 0501 	and.w	r5, r3, r1
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	014b      	lsls	r3, r1, #5
 800424c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004250:	0142      	lsls	r2, r0, #5
 8004252:	4610      	mov	r0, r2
 8004254:	4619      	mov	r1, r3
 8004256:	1b00      	subs	r0, r0, r4
 8004258:	eb61 0105 	sbc.w	r1, r1, r5
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	018b      	lsls	r3, r1, #6
 8004266:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800426a:	0182      	lsls	r2, r0, #6
 800426c:	1a12      	subs	r2, r2, r0
 800426e:	eb63 0301 	sbc.w	r3, r3, r1
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f04f 0100 	mov.w	r1, #0
 800427a:	00d9      	lsls	r1, r3, #3
 800427c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004280:	00d0      	lsls	r0, r2, #3
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	1912      	adds	r2, r2, r4
 8004288:	eb45 0303 	adc.w	r3, r5, r3
 800428c:	f04f 0000 	mov.w	r0, #0
 8004290:	f04f 0100 	mov.w	r1, #0
 8004294:	0299      	lsls	r1, r3, #10
 8004296:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800429a:	0290      	lsls	r0, r2, #10
 800429c:	4602      	mov	r2, r0
 800429e:	460b      	mov	r3, r1
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	461a      	mov	r2, r3
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	f7fb ffc4 	bl	8000238 <__aeabi_uldivmod>
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	4613      	mov	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	0c1b      	lsrs	r3, r3, #16
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	3301      	adds	r3, #1
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d0:	60bb      	str	r3, [r7, #8]
      break;
 80042d2:	e002      	b.n	80042da <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x164>)
 80042d6:	60bb      	str	r3, [r7, #8]
      break;
 80042d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042da:	68bb      	ldr	r3, [r7, #8]
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3710      	adds	r7, #16
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bdb0      	pop	{r4, r5, r7, pc}
 80042e4:	40023800 	.word	0x40023800
 80042e8:	00f42400 	.word	0x00f42400
 80042ec:	017d7840 	.word	0x017d7840

080042f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e09d      	b.n	800443e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d108      	bne.n	800431c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004312:	d009      	beq.n	8004328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
 800431a:	e005      	b.n	8004328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd fd58 	bl	8001df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800435e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004368:	d902      	bls.n	8004370 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e002      	b.n	8004376 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004370:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004374:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800437e:	d007      	beq.n	8004390 <HAL_SPI_Init+0xa0>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004388:	d002      	beq.n	8004390 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c8:	431a      	orrs	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	ea42 0103 	orr.w	r1, r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	0c1b      	lsrs	r3, r3, #16
 80043ec:	f003 0204 	and.w	r2, r3, #4
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800440c:	ea42 0103 	orr.w	r1, r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69da      	ldr	r2, [r3, #28]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800442c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b088      	sub	sp, #32
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_SPI_Transmit+0x22>
 8004464:	2302      	movs	r3, #2
 8004466:	e158      	b.n	800471a <HAL_SPI_Transmit+0x2d4>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004470:	f7fd fe54 	bl	800211c <HAL_GetTick>
 8004474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d002      	beq.n	800448c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004486:	2302      	movs	r3, #2
 8004488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800448a:	e13d      	b.n	8004708 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d002      	beq.n	8004498 <HAL_SPI_Transmit+0x52>
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800449c:	e134      	b.n	8004708 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2203      	movs	r2, #3
 80044a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e8:	d10f      	bne.n	800450a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004508:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d007      	beq.n	8004528 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004526:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004530:	d94b      	bls.n	80045ca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_Transmit+0xfa>
 800453a:	8afb      	ldrh	r3, [r7, #22]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d13e      	bne.n	80045be <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004564:	e02b      	b.n	80045be <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d112      	bne.n	800459a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	881a      	ldrh	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	1c9a      	adds	r2, r3, #2
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004598:	e011      	b.n	80045be <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800459a:	f7fd fdbf 	bl	800211c <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d803      	bhi.n	80045b2 <HAL_SPI_Transmit+0x16c>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b0:	d102      	bne.n	80045b8 <HAL_SPI_Transmit+0x172>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045bc:	e0a4      	b.n	8004708 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ce      	bne.n	8004566 <HAL_SPI_Transmit+0x120>
 80045c8:	e07c      	b.n	80046c4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_SPI_Transmit+0x192>
 80045d2:	8afb      	ldrh	r3, [r7, #22]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d170      	bne.n	80046ba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045dc:	b29b      	uxth	r3, r3
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d912      	bls.n	8004608 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	3b02      	subs	r3, #2
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004606:	e058      	b.n	80046ba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	7812      	ldrb	r2, [r2, #0]
 8004614:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800462e:	e044      	b.n	80046ba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b02      	cmp	r3, #2
 800463c:	d12b      	bne.n	8004696 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d912      	bls.n	800466e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	1c9a      	adds	r2, r3, #2
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b02      	subs	r3, #2
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800466c:	e025      	b.n	80046ba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	7812      	ldrb	r2, [r2, #0]
 800467a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004694:	e011      	b.n	80046ba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004696:	f7fd fd41 	bl	800211c <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d803      	bhi.n	80046ae <HAL_SPI_Transmit+0x268>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d102      	bne.n	80046b4 <HAL_SPI_Transmit+0x26e>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d102      	bne.n	80046ba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046b8:	e026      	b.n	8004708 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046be:	b29b      	uxth	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1b5      	bne.n	8004630 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fd07 	bl	80050dc <SPI_EndRxTxTransaction>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2220      	movs	r2, #32
 80046d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e000      	b.n	8004708 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004706:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004718:	7ffb      	ldrb	r3, [r7, #31]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b088      	sub	sp, #32
 8004726:	af02      	add	r7, sp, #8
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800473e:	d112      	bne.n	8004766 <HAL_SPI_Receive+0x44>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10e      	bne.n	8004766 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2204      	movs	r2, #4
 800474c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	4613      	mov	r3, r2
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f910 	bl	8004982 <HAL_SPI_TransmitReceive>
 8004762:	4603      	mov	r3, r0
 8004764:	e109      	b.n	800497a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_SPI_Receive+0x52>
 8004770:	2302      	movs	r3, #2
 8004772:	e102      	b.n	800497a <HAL_SPI_Receive+0x258>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800477c:	f7fd fcce 	bl	800211c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800478e:	2302      	movs	r3, #2
 8004790:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004792:	e0e9      	b.n	8004968 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d002      	beq.n	80047a0 <HAL_SPI_Receive+0x7e>
 800479a:	88fb      	ldrh	r3, [r7, #6]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047a4:	e0e0      	b.n	8004968 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2204      	movs	r2, #4
 80047aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	88fa      	ldrh	r2, [r7, #6]
 80047be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047f0:	d908      	bls.n	8004804 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004800:	605a      	str	r2, [r3, #4]
 8004802:	e007      	b.n	8004814 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004812:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800481c:	d10f      	bne.n	800483e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800482c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800483c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004848:	2b40      	cmp	r3, #64	; 0x40
 800484a:	d007      	beq.n	800485c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800485a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004864:	d867      	bhi.n	8004936 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004866:	e030      	b.n	80048ca <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b01      	cmp	r3, #1
 8004874:	d117      	bne.n	80048a6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f103 020c 	add.w	r2, r3, #12
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80048a4:	e011      	b.n	80048ca <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048a6:	f7fd fc39 	bl	800211c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d803      	bhi.n	80048be <HAL_SPI_Receive+0x19c>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d102      	bne.n	80048c4 <HAL_SPI_Receive+0x1a2>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048c8:	e04e      	b.n	8004968 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1c8      	bne.n	8004868 <HAL_SPI_Receive+0x146>
 80048d6:	e034      	b.n	8004942 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d115      	bne.n	8004912 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	b292      	uxth	r2, r2
 80048f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	1c9a      	adds	r2, r3, #2
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004910:	e011      	b.n	8004936 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004912:	f7fd fc03 	bl	800211c <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	429a      	cmp	r2, r3
 8004920:	d803      	bhi.n	800492a <HAL_SPI_Receive+0x208>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004928:	d102      	bne.n	8004930 <HAL_SPI_Receive+0x20e>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004934:	e018      	b.n	8004968 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ca      	bne.n	80048d8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb4c 	bl	8004fe4 <SPI_EndRxTransaction>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75fb      	strb	r3, [r7, #23]
 8004964:	e000      	b.n	8004968 <HAL_SPI_Receive+0x246>
  }

error :
 8004966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08a      	sub	sp, #40	; 0x28
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x26>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e1fb      	b.n	8004da0 <HAL_SPI_TransmitReceive+0x41e>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b0:	f7fd fbb4 	bl	800211c <HAL_GetTick>
 80049b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049cc:	7efb      	ldrb	r3, [r7, #27]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d00e      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x6e>
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d8:	d106      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d102      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x66>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d003      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80049ee:	e1cd      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x80>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x80>
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d103      	bne.n	8004a0a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004a08:	e1c0      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d003      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2205      	movs	r2, #5
 8004a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	887a      	ldrh	r2, [r7, #2]
 8004a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	887a      	ldrh	r2, [r7, #2]
 8004a36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	887a      	ldrh	r2, [r7, #2]
 8004a4a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d802      	bhi.n	8004a68 <HAL_SPI_TransmitReceive+0xe6>
 8004a62:	8a3b      	ldrh	r3, [r7, #16]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d908      	bls.n	8004a7a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a76:	605a      	str	r2, [r3, #4]
 8004a78:	e007      	b.n	8004a8a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a88:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d007      	beq.n	8004aa8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ab0:	d97c      	bls.n	8004bac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <HAL_SPI_TransmitReceive+0x13e>
 8004aba:	8a7b      	ldrh	r3, [r7, #18]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d169      	bne.n	8004b94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	881a      	ldrh	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	1c9a      	adds	r2, r3, #2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae4:	e056      	b.n	8004b94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d11b      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x1aa>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <HAL_SPI_TransmitReceive+0x1aa>
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d113      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	3b01      	subs	r3, #1
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d11c      	bne.n	8004b74 <HAL_SPI_TransmitReceive+0x1f2>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d016      	beq.n	8004b74 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	b292      	uxth	r2, r2
 8004b52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	1c9a      	adds	r2, r3, #2
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b70:	2301      	movs	r3, #1
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b74:	f7fd fad2 	bl	800211c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d807      	bhi.n	8004b94 <HAL_SPI_TransmitReceive+0x212>
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d003      	beq.n	8004b94 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004b92:	e0fb      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1a3      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x164>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d19d      	bne.n	8004ae6 <HAL_SPI_TransmitReceive+0x164>
 8004baa:	e0df      	b.n	8004d6c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x23a>
 8004bb4:	8a7b      	ldrh	r3, [r7, #18]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	f040 80cb 	bne.w	8004d52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d912      	bls.n	8004bec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bca:	881a      	ldrh	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	1c9a      	adds	r2, r3, #2
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b02      	subs	r3, #2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bea:	e0b2      	b.n	8004d52 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	330c      	adds	r3, #12
 8004bf6:	7812      	ldrb	r2, [r2, #0]
 8004bf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c12:	e09e      	b.n	8004d52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d134      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x30a>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d02f      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x30a>
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d12c      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d912      	bls.n	8004c62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4c:	1c9a      	adds	r2, r3, #2
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b02      	subs	r3, #2
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c60:	e012      	b.n	8004c88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	7812      	ldrb	r2, [r2, #0]
 8004c6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d148      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x3aa>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d042      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d923      	bls.n	8004cfa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	b292      	uxth	r2, r2
 8004cbe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	1c9a      	adds	r2, r3, #2
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b02      	subs	r3, #2
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d81f      	bhi.n	8004d28 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	e016      	b.n	8004d28 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f103 020c 	add.w	r2, r3, #12
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	7812      	ldrb	r2, [r2, #0]
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d2c:	f7fd f9f6 	bl	800211c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d803      	bhi.n	8004d44 <HAL_SPI_TransmitReceive+0x3c2>
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_TransmitReceive+0x3c8>
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d103      	bne.n	8004d52 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004d50:	e01c      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f47f af5b 	bne.w	8004c14 <HAL_SPI_TransmitReceive+0x292>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f47f af54 	bne.w	8004c14 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f9b3 	bl	80050dc <SPI_EndRxTxTransaction>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2220      	movs	r2, #32
 8004d86:	661a      	str	r2, [r3, #96]	; 0x60
 8004d88:	e000      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004d8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3728      	adds	r7, #40	; 0x28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004db8:	f7fd f9b0 	bl	800211c <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	683a      	ldr	r2, [r7, #0]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dc8:	f7fd f9a8 	bl	800211c <HAL_GetTick>
 8004dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dce:	4b39      	ldr	r3, [pc, #228]	; (8004eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	015b      	lsls	r3, r3, #5
 8004dd4:	0d1b      	lsrs	r3, r3, #20
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	fb02 f303 	mul.w	r3, r2, r3
 8004ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dde:	e054      	b.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d050      	beq.n	8004e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004de8:	f7fd f998 	bl	800211c <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d902      	bls.n	8004dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d13d      	bne.n	8004e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e16:	d111      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e20:	d004      	beq.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2a:	d107      	bne.n	8004e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e44:	d10f      	bne.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e017      	b.n	8004eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4013      	ands	r3, r2
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	bf0c      	ite	eq
 8004e9a:	2301      	moveq	r3, #1
 8004e9c:	2300      	movne	r3, #0
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d19b      	bne.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3720      	adds	r7, #32
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000004 	.word	0x20000004

08004eb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004eca:	f7fd f927 	bl	800211c <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004eda:	f7fd f91f 	bl	800211c <HAL_GetTick>
 8004ede:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ee8:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	00da      	lsls	r2, r3, #3
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	0d1b      	lsrs	r3, r3, #20
 8004ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efa:	fb02 f303 	mul.w	r3, r2, r3
 8004efe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f00:	e060      	b.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f08:	d107      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f20:	d050      	beq.n	8004fc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f22:	f7fd f8fb 	bl	800211c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d902      	bls.n	8004f38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d13d      	bne.n	8004fb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f50:	d111      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5a:	d004      	beq.n	8004f66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f64:	d107      	bne.n	8004f76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f7e:	d10f      	bne.n	8004fa0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f8e:	601a      	str	r2, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e010      	b.n	8004fd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d196      	bne.n	8004f02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000004 	.word	0x20000004

08004fe4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff8:	d111      	bne.n	800501e <SPI_EndRxTransaction+0x3a>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005002:	d004      	beq.n	800500e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500c:	d107      	bne.n	800501e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800501c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005026:	d112      	bne.n	800504e <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2200      	movs	r2, #0
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f7ff feb8 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005042:	f043 0220 	orr.w	r2, r3, #32
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e03d      	b.n	80050ca <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800504e:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <SPI_EndRxTransaction+0xf0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <SPI_EndRxTransaction+0xf4>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0d5b      	lsrs	r3, r3, #21
 800505a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3b01      	subs	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	d0f2      	beq.n	8005064 <SPI_EndRxTransaction+0x80>
 800507e:	e000      	b.n	8005082 <SPI_EndRxTransaction+0x9e>
        break;
 8005080:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800508a:	d11d      	bne.n	80050c8 <SPI_EndRxTransaction+0xe4>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005094:	d004      	beq.n	80050a0 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d113      	bne.n	80050c8 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7ff ff03 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d007      	beq.n	80050c8 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e000      	b.n	80050ca <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000004 	.word	0x20000004
 80050d8:	165e9f81 	.word	0x165e9f81

080050dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7ff fedf 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e046      	b.n	800519e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <SPI_EndRxTxTransaction+0xcc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a25      	ldr	r2, [pc, #148]	; (80051ac <SPI_EndRxTxTransaction+0xd0>)
 8005116:	fba2 2303 	umull	r2, r3, r2, r3
 800511a:	0d5b      	lsrs	r3, r3, #21
 800511c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005120:	fb02 f303 	mul.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512e:	d112      	bne.n	8005156 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2200      	movs	r2, #0
 8005138:	2180      	movs	r1, #128	; 0x80
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fe34 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d016      	beq.n	8005174 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e023      	b.n	800519e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	3b01      	subs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516c:	2b80      	cmp	r3, #128	; 0x80
 800516e:	d0f2      	beq.n	8005156 <SPI_EndRxTxTransaction+0x7a>
 8005170:	e000      	b.n	8005174 <SPI_EndRxTxTransaction+0x98>
        break;
 8005172:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	2200      	movs	r2, #0
 800517c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fe99 	bl	8004eb8 <SPI_WaitFifoStateUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005190:	f043 0220 	orr.w	r2, r3, #32
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e000      	b.n	800519e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	20000004 	.word	0x20000004
 80051ac:	165e9f81 	.word	0x165e9f81

080051b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e049      	b.n	8005256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fc fe52 	bl	8001e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f000 fa24 	bl	800563c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
	...

08005260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b01      	cmp	r3, #1
 8005272:	d001      	beq.n	8005278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e054      	b.n	8005322 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a26      	ldr	r2, [pc, #152]	; (8005330 <HAL_TIM_Base_Start_IT+0xd0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a2:	d01d      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a22      	ldr	r2, [pc, #136]	; (8005334 <HAL_TIM_Base_Start_IT+0xd4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a21      	ldr	r2, [pc, #132]	; (8005338 <HAL_TIM_Base_Start_IT+0xd8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_TIM_Base_Start_IT+0xdc>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <HAL_TIM_Base_Start_IT+0xe0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <HAL_TIM_Base_Start_IT+0xe4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_TIM_Base_Start_IT+0x80>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <HAL_TIM_Base_Start_IT+0xe8>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d115      	bne.n	800530c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	4b19      	ldr	r3, [pc, #100]	; (800534c <HAL_TIM_Base_Start_IT+0xec>)
 80052e8:	4013      	ands	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b06      	cmp	r3, #6
 80052f0:	d015      	beq.n	800531e <HAL_TIM_Base_Start_IT+0xbe>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f8:	d011      	beq.n	800531e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	e008      	b.n	800531e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e000      	b.n	8005320 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40010400 	.word	0x40010400
 8005344:	40014000 	.word	0x40014000
 8005348:	40001800 	.word	0x40001800
 800534c:	00010007 	.word	0x00010007

08005350 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6a1a      	ldr	r2, [r3, #32]
 800536e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005372:	4013      	ands	r3, r2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10f      	bne.n	8005398 <HAL_TIM_Base_Stop_IT+0x48>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	f240 4344 	movw	r3, #1092	; 0x444
 8005382:	4013      	ands	r3, r2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d107      	bne.n	8005398 <HAL_TIM_Base_Stop_IT+0x48>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0201 	bic.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d122      	bne.n	800540a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d11b      	bne.n	800540a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0202 	mvn.w	r2, #2
 80053da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f905 	bl	8005600 <HAL_TIM_IC_CaptureCallback>
 80053f6:	e005      	b.n	8005404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8f7 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f908 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d122      	bne.n	800545e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d11b      	bne.n	800545e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0204 	mvn.w	r2, #4
 800542e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f8db 	bl	8005600 <HAL_TIM_IC_CaptureCallback>
 800544a:	e005      	b.n	8005458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f8cd 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f8de 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d122      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b08      	cmp	r3, #8
 8005478:	d11b      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0208 	mvn.w	r2, #8
 8005482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2204      	movs	r2, #4
 8005488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f8b1 	bl	8005600 <HAL_TIM_IC_CaptureCallback>
 800549e:	e005      	b.n	80054ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8a3 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8b4 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d122      	bne.n	8005506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d11b      	bne.n	8005506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0210 	mvn.w	r2, #16
 80054d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2208      	movs	r2, #8
 80054dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f887 	bl	8005600 <HAL_TIM_IC_CaptureCallback>
 80054f2:	e005      	b.n	8005500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f879 	bl	80055ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f88a 	bl	8005614 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10e      	bne.n	8005532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0201 	mvn.w	r2, #1
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fc fa01 	bl	8001934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f919 	bl	8005790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800556c:	d10e      	bne.n	800558c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005578:	2b80      	cmp	r3, #128	; 0x80
 800557a:	d107      	bne.n	800558c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f90c 	bl	80057a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d10e      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a4:	2b40      	cmp	r3, #64	; 0x40
 80055a6:	d107      	bne.n	80055b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f838 	bl	8005628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d10e      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d107      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f06f 0220 	mvn.w	r2, #32
 80055dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f8cc 	bl	800577c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e4:	bf00      	nop
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a40      	ldr	r2, [pc, #256]	; (8005750 <TIM_Base_SetConfig+0x114>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565a:	d00f      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a3d      	ldr	r2, [pc, #244]	; (8005754 <TIM_Base_SetConfig+0x118>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00b      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a3c      	ldr	r2, [pc, #240]	; (8005758 <TIM_Base_SetConfig+0x11c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a3b      	ldr	r2, [pc, #236]	; (800575c <TIM_Base_SetConfig+0x120>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_Base_SetConfig+0x40>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a3a      	ldr	r2, [pc, #232]	; (8005760 <TIM_Base_SetConfig+0x124>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d108      	bne.n	800568e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005682:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2f      	ldr	r2, [pc, #188]	; (8005750 <TIM_Base_SetConfig+0x114>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d02b      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569c:	d027      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2c      	ldr	r2, [pc, #176]	; (8005754 <TIM_Base_SetConfig+0x118>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d023      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2b      	ldr	r2, [pc, #172]	; (8005758 <TIM_Base_SetConfig+0x11c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01f      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2a      	ldr	r2, [pc, #168]	; (800575c <TIM_Base_SetConfig+0x120>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d01b      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a29      	ldr	r2, [pc, #164]	; (8005760 <TIM_Base_SetConfig+0x124>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d017      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a28      	ldr	r2, [pc, #160]	; (8005764 <TIM_Base_SetConfig+0x128>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a27      	ldr	r2, [pc, #156]	; (8005768 <TIM_Base_SetConfig+0x12c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00f      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a26      	ldr	r2, [pc, #152]	; (800576c <TIM_Base_SetConfig+0x130>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00b      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a25      	ldr	r2, [pc, #148]	; (8005770 <TIM_Base_SetConfig+0x134>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d007      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a24      	ldr	r2, [pc, #144]	; (8005774 <TIM_Base_SetConfig+0x138>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a23      	ldr	r2, [pc, #140]	; (8005778 <TIM_Base_SetConfig+0x13c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d108      	bne.n	8005700 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a0a      	ldr	r2, [pc, #40]	; (8005750 <TIM_Base_SetConfig+0x114>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0xf8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <TIM_Base_SetConfig+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d103      	bne.n	800573c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	615a      	str	r2, [r3, #20]
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	40010000 	.word	0x40010000
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40010400 	.word	0x40010400
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400
 800576c:	40014800 	.word	0x40014800
 8005770:	40001800 	.word	0x40001800
 8005774:	40001c00 	.word	0x40001c00
 8005778:	40002000 	.word	0x40002000

0800577c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <__libc_init_array>:
 80057b8:	b570      	push	{r4, r5, r6, lr}
 80057ba:	4d0d      	ldr	r5, [pc, #52]	; (80057f0 <__libc_init_array+0x38>)
 80057bc:	4c0d      	ldr	r4, [pc, #52]	; (80057f4 <__libc_init_array+0x3c>)
 80057be:	1b64      	subs	r4, r4, r5
 80057c0:	10a4      	asrs	r4, r4, #2
 80057c2:	2600      	movs	r6, #0
 80057c4:	42a6      	cmp	r6, r4
 80057c6:	d109      	bne.n	80057dc <__libc_init_array+0x24>
 80057c8:	4d0b      	ldr	r5, [pc, #44]	; (80057f8 <__libc_init_array+0x40>)
 80057ca:	4c0c      	ldr	r4, [pc, #48]	; (80057fc <__libc_init_array+0x44>)
 80057cc:	f000 f820 	bl	8005810 <_init>
 80057d0:	1b64      	subs	r4, r4, r5
 80057d2:	10a4      	asrs	r4, r4, #2
 80057d4:	2600      	movs	r6, #0
 80057d6:	42a6      	cmp	r6, r4
 80057d8:	d105      	bne.n	80057e6 <__libc_init_array+0x2e>
 80057da:	bd70      	pop	{r4, r5, r6, pc}
 80057dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e0:	4798      	blx	r3
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7ee      	b.n	80057c4 <__libc_init_array+0xc>
 80057e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ea:	4798      	blx	r3
 80057ec:	3601      	adds	r6, #1
 80057ee:	e7f2      	b.n	80057d6 <__libc_init_array+0x1e>
 80057f0:	08005840 	.word	0x08005840
 80057f4:	08005840 	.word	0x08005840
 80057f8:	08005840 	.word	0x08005840
 80057fc:	08005844 	.word	0x08005844

08005800 <memset>:
 8005800:	4402      	add	r2, r0
 8005802:	4603      	mov	r3, r0
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	f803 1b01 	strb.w	r1, [r3], #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
