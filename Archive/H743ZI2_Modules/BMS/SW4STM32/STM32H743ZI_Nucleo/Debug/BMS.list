
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001130  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080013c8  080013c8  000113c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080013ec  080013ec  000113ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080013f0  080013f0  000113f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080013f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  20000010  08001404  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08001404  00020034  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000108b6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001fc9  00000000  00000000  000308f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00002206  00000000  00000000  000328bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000005a8  00000000  00000000  00034ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000007c0  00000000  00000000  00035070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035c8c  00000000  00000000  00035830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008316  00000000  00000000  0006b4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162da4  00000000  00000000  000737d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001d6576  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000d14  00000000  00000000  001d65cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080013b0 	.word	0x080013b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	080013b0 	.word	0x080013b0

080002d8 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80002d8:	2802      	cmp	r0, #2
{
 80002da:	b530      	push	{r4, r5, lr}
 80002dc:	b08b      	sub	sp, #44	; 0x2c
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80002de:	d83e      	bhi.n	800035e <BSP_LED_Init+0x86>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80002e0:	4b20      	ldr	r3, [pc, #128]	; (8000364 <BSP_LED_Init+0x8c>)
    {
      LED1_GPIO_CLK_ENABLE();
 80002e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    if(Led == LED1)
 80002e6:	bb10      	cbnz	r0, 800032e <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 80002e8:	f042 0202 	orr.w	r2, r2, #2
 80002ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	f003 0302 	and.w	r3, r3, #2
 80002f8:	9302      	str	r3, [sp, #8]
 80002fa:	9b02      	ldr	r3, [sp, #8]
    else
    {
      LED3_GPIO_CLK_ENABLE();
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <BSP_LED_Init+0x90>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80002fe:	2400      	movs	r4, #0
 8000300:	2201      	movs	r2, #1
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000302:	a905      	add	r1, sp, #20
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000304:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000308:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800030c:	e9cd 2406 	strd	r2, r4, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000310:	6880      	ldr	r0, [r0, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000312:	2203      	movs	r2, #3
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000314:	9505      	str	r5, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000316:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000318:	9001      	str	r0, [sp, #4]
 800031a:	f000 f97d 	bl	8000618 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800031e:	9801      	ldr	r0, [sp, #4]
 8000320:	4622      	mov	r2, r4
 8000322:	4629      	mov	r1, r5
 8000324:	f000 fa5e 	bl	80007e4 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000328:	4620      	mov	r0, r4
  }

  return ret;
}
 800032a:	b00b      	add	sp, #44	; 0x2c
 800032c:	bd30      	pop	{r4, r5, pc}
    else if(Led == LED2)
 800032e:	2801      	cmp	r0, #1
 8000330:	d10a      	bne.n	8000348 <BSP_LED_Init+0x70>
      LED2_GPIO_CLK_ENABLE();
 8000332:	f042 0210 	orr.w	r2, r2, #16
 8000336:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800033a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800033e:	f003 0310 	and.w	r3, r3, #16
 8000342:	9303      	str	r3, [sp, #12]
 8000344:	9b03      	ldr	r3, [sp, #12]
 8000346:	e7d9      	b.n	80002fc <BSP_LED_Init+0x24>
      LED3_GPIO_CLK_ENABLE();
 8000348:	f042 0202 	orr.w	r2, r2, #2
 800034c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000354:	f003 0302 	and.w	r3, r3, #2
 8000358:	9304      	str	r3, [sp, #16]
 800035a:	9b04      	ldr	r3, [sp, #16]
 800035c:	e7ce      	b.n	80002fc <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 800035e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8000362:	e7e2      	b.n	800032a <BSP_LED_Init+0x52>
 8000364:	58024400 	.word	0x58024400
 8000368:	080013c8 	.word	0x080013c8

0800036c <BSP_LED_On>:
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800036c:	2802      	cmp	r0, #2
{
 800036e:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000370:	d80a      	bhi.n	8000388 <BSP_LED_On+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000372:	4b07      	ldr	r3, [pc, #28]	; (8000390 <BSP_LED_On+0x24>)
 8000374:	2201      	movs	r2, #1
 8000376:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800037a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800037e:	68a0      	ldr	r0, [r4, #8]
 8000380:	f000 fa30 	bl	80007e4 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000384:	2000      	movs	r0, #0
  }

  return ret;
}
 8000386:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000388:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800038c:	e7fb      	b.n	8000386 <BSP_LED_On+0x1a>
 800038e:	bf00      	nop
 8000390:	080013c8 	.word	0x080013c8

08000394 <BSP_LED_Toggle>:
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000394:	2802      	cmp	r0, #2
{
 8000396:	b508      	push	{r3, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000398:	d809      	bhi.n	80003ae <BSP_LED_Toggle+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <BSP_LED_Toggle+0x20>)
 800039c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80003a0:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 80003a4:	6890      	ldr	r0, [r2, #8]
 80003a6:	f000 fa22 	bl	80007ee <HAL_GPIO_TogglePin>
  int32_t ret = BSP_ERROR_NONE;
 80003aa:	2000      	movs	r0, #0
  }

  return ret;
}
 80003ac:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80003ae:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80003b2:	e7fb      	b.n	80003ac <BSP_LED_Toggle+0x18>
 80003b4:	080013c8 	.word	0x080013c8

080003b8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003b8:	491a      	ldr	r1, [pc, #104]	; (8000424 <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ba:	481b      	ldr	r0, [pc, #108]	; (8000428 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003bc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80003c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80003c4:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <SystemInit+0x74>)
 80003cc:	681a      	ldr	r2, [r3, #0]
 80003ce:	f042 0201 	orr.w	r2, r2, #1
 80003d2:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80003d4:	2200      	movs	r2, #0
 80003d6:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80003d8:	681c      	ldr	r4, [r3, #0]
 80003da:	4020      	ands	r0, r4
 80003dc:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003e0:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003e2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80003e4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80003e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80003e8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80003ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80003ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80003f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003f2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003f4:	6818      	ldr	r0, [r3, #0]
 80003f6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80003fa:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003fe:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <SystemInit+0x78>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	041b      	lsls	r3, r3, #16
 8000406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800040a:	d202      	bcs.n	8000412 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <SystemInit+0x7c>)
 800040e:	2201      	movs	r2, #1
 8000410:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <SystemInit+0x80>)
 8000414:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000418:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800041a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800041e:	608b      	str	r3, [r1, #8]
#endif  


}
 8000420:	bd10      	pop	{r4, pc}
 8000422:	bf00      	nop
 8000424:	e000ed00 	.word	0xe000ed00
 8000428:	eaf6ed7f 	.word	0xeaf6ed7f
 800042c:	58024400 	.word	0x58024400
 8000430:	5c001000 	.word	0x5c001000
 8000434:	51008108 	.word	0x51008108
 8000438:	52004000 	.word	0x52004000

0800043c <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 800043c:	4770      	bx	lr
	...

08000440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000440:	b570      	push	{r4, r5, r6, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000442:	4e0f      	ldr	r6, [pc, #60]	; (8000480 <HAL_InitTick+0x40>)
{
 8000444:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 8000446:	7830      	ldrb	r0, [r6, #0]
 8000448:	b908      	cbnz	r0, 800044e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 800044a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800044c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800044e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000452:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <HAL_InitTick+0x44>)
 8000454:	fbb3 f3f0 	udiv	r3, r3, r0
 8000458:	6810      	ldr	r0, [r2, #0]
 800045a:	fbb0 f0f3 	udiv	r0, r0, r3
 800045e:	f000 f8c5 	bl	80005ec <HAL_SYSTICK_Config>
 8000462:	4604      	mov	r4, r0
 8000464:	2800      	cmp	r0, #0
 8000466:	d1f0      	bne.n	800044a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000468:	2d0f      	cmp	r5, #15
 800046a:	d8ee      	bhi.n	800044a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800046c:	4602      	mov	r2, r0
 800046e:	4629      	mov	r1, r5
 8000470:	f04f 30ff 	mov.w	r0, #4294967295
 8000474:	f000 f87a 	bl	800056c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000478:	4620      	mov	r0, r4
 800047a:	6075      	str	r5, [r6, #4]
  return HAL_OK;
 800047c:	e7e6      	b.n	800044c <HAL_InitTick+0xc>
 800047e:	bf00      	nop
 8000480:	20000008 	.word	0x20000008
 8000484:	20000000 	.word	0x20000000

08000488 <HAL_Init>:
{
 8000488:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800048a:	2003      	movs	r0, #3
 800048c:	f000 f85c 	bl	8000548 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000490:	f000 fc7e 	bl	8000d90 <HAL_RCC_GetSysClockFreq>
 8000494:	490f      	ldr	r1, [pc, #60]	; (80004d4 <HAL_Init+0x4c>)
 8000496:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <HAL_Init+0x50>)
 8000498:	698b      	ldr	r3, [r1, #24]
 800049a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800049e:	5cd3      	ldrb	r3, [r2, r3]
 80004a0:	f003 031f 	and.w	r3, r3, #31
 80004a4:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80004a6:	698b      	ldr	r3, [r1, #24]
 80004a8:	f003 030f 	and.w	r3, r3, #15
 80004ac:	5cd3      	ldrb	r3, [r2, r3]
 80004ae:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <HAL_Init+0x54>)
 80004b0:	f003 031f 	and.w	r3, r3, #31
 80004b4:	fa20 f303 	lsr.w	r3, r0, r3
 80004b8:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_Init+0x58>)
 80004bc:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004be:	200f      	movs	r0, #15
 80004c0:	f7ff ffbe 	bl	8000440 <HAL_InitTick>
 80004c4:	4604      	mov	r4, r0
 80004c6:	b918      	cbnz	r0, 80004d0 <HAL_Init+0x48>
  HAL_MspInit();
 80004c8:	f7ff ffb8 	bl	800043c <HAL_MspInit>
}
 80004cc:	4620      	mov	r0, r4
 80004ce:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80004d0:	2401      	movs	r4, #1
 80004d2:	e7fb      	b.n	80004cc <HAL_Init+0x44>
 80004d4:	58024400 	.word	0x58024400
 80004d8:	080013dc 	.word	0x080013dc
 80004dc:	20000004 	.word	0x20000004
 80004e0:	20000000 	.word	0x20000000

080004e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <HAL_IncTick+0x10>)
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <HAL_IncTick+0x14>)
 80004e8:	6811      	ldr	r1, [r2, #0]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	440b      	add	r3, r1
 80004ee:	6013      	str	r3, [r2, #0]
}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000030 	.word	0x20000030
 80004f8:	20000008 	.word	0x20000008

080004fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004fc:	4b01      	ldr	r3, [pc, #4]	; (8000504 <HAL_GetTick+0x8>)
 80004fe:	6818      	ldr	r0, [r3, #0]
}
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000030 	.word	0x20000030

08000508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000508:	b538      	push	{r3, r4, r5, lr}
 800050a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800050c:	f7ff fff6 	bl	80004fc <HAL_GetTick>
 8000510:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000512:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000514:	bf1e      	ittt	ne
 8000516:	4b04      	ldrne	r3, [pc, #16]	; (8000528 <HAL_Delay+0x20>)
 8000518:	781b      	ldrbne	r3, [r3, #0]
 800051a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800051c:	f7ff ffee 	bl	80004fc <HAL_GetTick>
 8000520:	1b43      	subs	r3, r0, r5
 8000522:	42a3      	cmp	r3, r4
 8000524:	d3fa      	bcc.n	800051c <HAL_Delay+0x14>
  {
  }
}
 8000526:	bd38      	pop	{r3, r4, r5, pc}
 8000528:	20000008 	.word	0x20000008

0800052c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetREVID+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	0c00      	lsrs	r0, r0, #16
 8000532:	4770      	bx	lr
 8000534:	5c001000 	.word	0x5c001000

08000538 <HAL_EnableCompensationCell>:
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8000538:	4a02      	ldr	r2, [pc, #8]	; (8000544 <HAL_EnableCompensationCell+0xc>)
 800053a:	6a13      	ldr	r3, [r2, #32]
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6213      	str	r3, [r2, #32]
}
 8000542:	4770      	bx	lr
 8000544:	58000400 	.word	0x58000400

08000548 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000548:	4907      	ldr	r1, [pc, #28]	; (8000568 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800054a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800054e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000556:	0412      	lsls	r2, r2, #16
 8000558:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800055a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800055c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000564:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	68dc      	ldr	r4, [r3, #12]
 8000572:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000576:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800057a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800057c:	2d04      	cmp	r5, #4
 800057e:	bf28      	it	cs
 8000580:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000582:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000588:	bf8c      	ite	hi
 800058a:	3c03      	subhi	r4, #3
 800058c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800058e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000594:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000598:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800059c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005a0:	fa01 f104 	lsl.w	r1, r1, r4
 80005a4:	ea41 0302 	orr.w	r3, r1, r2
 80005a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80005ac:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80005ae:	db06      	blt.n	80005be <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005b4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005b8:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005bc:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005be:	f000 000f 	and.w	r0, r0, #15
 80005c2:	4a02      	ldr	r2, [pc, #8]	; (80005cc <HAL_NVIC_SetPriority+0x60>)
 80005c4:	5413      	strb	r3, [r2, r0]
 80005c6:	e7f9      	b.n	80005bc <HAL_NVIC_SetPriority+0x50>
 80005c8:	e000ed00 	.word	0xe000ed00
 80005cc:	e000ed14 	.word	0xe000ed14

080005d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005d0:	2800      	cmp	r0, #0
 80005d2:	db08      	blt.n	80005e6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005d4:	2301      	movs	r3, #1
 80005d6:	0942      	lsrs	r2, r0, #5
 80005d8:	f000 001f 	and.w	r0, r0, #31
 80005dc:	fa03 f000 	lsl.w	r0, r3, r0
 80005e0:	4b01      	ldr	r3, [pc, #4]	; (80005e8 <HAL_NVIC_EnableIRQ+0x18>)
 80005e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005ec:	3801      	subs	r0, #1
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005f2:	d20a      	bcs.n	800060a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	21f0      	movs	r1, #240	; 0xf0
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005fa:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000604:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000608:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800060a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e010 	.word	0xe000e010
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800061c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80007dc <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000622:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 80007e0 <HAL_GPIO_Init+0x1c8>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000626:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800062a:	680a      	ldr	r2, [r1, #0]
 800062c:	fa32 f403 	lsrs.w	r4, r2, r3
 8000630:	d102      	bne.n	8000638 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8000632:	b003      	add	sp, #12
 8000634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000638:	2701      	movs	r7, #1
 800063a:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 800063c:	403a      	ands	r2, r7
 800063e:	f000 80b6 	beq.w	80007ae <HAL_GPIO_Init+0x196>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000642:	684c      	ldr	r4, [r1, #4]
 8000644:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000648:	2503      	movs	r5, #3
 800064a:	f024 0a10 	bic.w	sl, r4, #16
 800064e:	fa05 f50e 	lsl.w	r5, r5, lr
 8000652:	f10a 36ff 	add.w	r6, sl, #4294967295
 8000656:	43ed      	mvns	r5, r5
 8000658:	2e01      	cmp	r6, #1
 800065a:	d810      	bhi.n	800067e <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 800065c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800065e:	ea06 0b05 	and.w	fp, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000662:	68ce      	ldr	r6, [r1, #12]
 8000664:	fa06 f60e 	lsl.w	r6, r6, lr
 8000668:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 800066c:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800066e:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000670:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000674:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000678:	409e      	lsls	r6, r3
 800067a:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 800067c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800067e:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000680:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000684:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000686:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800068a:	fa06 f60e 	lsl.w	r6, r6, lr
 800068e:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 8000692:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000694:	d114      	bne.n	80006c0 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3U];
 8000696:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800069a:	f003 0b07 	and.w	fp, r3, #7
 800069e:	270f      	movs	r7, #15
 80006a0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80006a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80006a8:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80006ac:	fa07 f70b 	lsl.w	r7, r7, fp
 80006b0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80006b4:	690e      	ldr	r6, [r1, #16]
 80006b6:	fa06 f60b 	lsl.w	r6, r6, fp
 80006ba:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80006bc:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 80006c0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80006c2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006c4:	f004 0603 	and.w	r6, r4, #3
 80006c8:	fa06 fe0e 	lsl.w	lr, r6, lr
 80006cc:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 80006d0:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006d2:	00e5      	lsls	r5, r4, #3
 80006d4:	d56b      	bpl.n	80007ae <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 80006da:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80006de:	f003 0703 	and.w	r7, r3, #3
 80006e2:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006e6:	f045 0502 	orr.w	r5, r5, #2
 80006ea:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80006ee:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f0:	f8c8 50f4 	str.w	r5, [r8, #244]	; 0xf4
 80006f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80006f8:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 80006fc:	f005 0502 	and.w	r5, r5, #2
 8000700:	9501      	str	r5, [sp, #4]
 8000702:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000704:	fa0e f507 	lsl.w	r5, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8000708:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800070c:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000710:	4d31      	ldr	r5, [pc, #196]	; (80007d8 <HAL_GPIO_Init+0x1c0>)
 8000712:	42a8      	cmp	r0, r5
 8000714:	d04d      	beq.n	80007b2 <HAL_GPIO_Init+0x19a>
 8000716:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071a:	42a8      	cmp	r0, r5
 800071c:	d04b      	beq.n	80007b6 <HAL_GPIO_Init+0x19e>
 800071e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000722:	42a8      	cmp	r0, r5
 8000724:	d049      	beq.n	80007ba <HAL_GPIO_Init+0x1a2>
 8000726:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800072a:	42a8      	cmp	r0, r5
 800072c:	d047      	beq.n	80007be <HAL_GPIO_Init+0x1a6>
 800072e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000732:	42a8      	cmp	r0, r5
 8000734:	d045      	beq.n	80007c2 <HAL_GPIO_Init+0x1aa>
 8000736:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800073a:	42a8      	cmp	r0, r5
 800073c:	d043      	beq.n	80007c6 <HAL_GPIO_Init+0x1ae>
 800073e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000742:	42a8      	cmp	r0, r5
 8000744:	d041      	beq.n	80007ca <HAL_GPIO_Init+0x1b2>
 8000746:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800074a:	42a8      	cmp	r0, r5
 800074c:	d03f      	beq.n	80007ce <HAL_GPIO_Init+0x1b6>
 800074e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000752:	42a8      	cmp	r0, r5
 8000754:	d03d      	beq.n	80007d2 <HAL_GPIO_Init+0x1ba>
 8000756:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800075a:	42a8      	cmp	r0, r5
 800075c:	bf0c      	ite	eq
 800075e:	2509      	moveq	r5, #9
 8000760:	250a      	movne	r5, #10
 8000762:	40bd      	lsls	r5, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000764:	03e7      	lsls	r7, r4, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000766:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800076a:	60b5      	str	r5, [r6, #8]
        temp &= ~(iocurrent);
 800076c:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI_CurrentCPU->IMR1;
 8000770:	f8dc 5000 	ldr.w	r5, [ip]
        temp &= ~(iocurrent);
 8000774:	bf54      	ite	pl
 8000776:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000778:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800077a:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 800077c:	f8cc 5000 	str.w	r5, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000780:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
 8000784:	bf54      	ite	pl
 8000786:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000788:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800078a:	02e7      	lsls	r7, r4, #11
        EXTI->RTSR1 = temp;
 800078c:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000790:	f8cc 5004 	str.w	r5, [ip, #4]
        temp = EXTI->RTSR1;
 8000794:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~(iocurrent);
 8000798:	bf54      	ite	pl
 800079a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800079c:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800079e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR1 = temp;
 80007a0:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 80007a2:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
 80007a4:	bf54      	ite	pl
 80007a6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80007a8:	4315      	orrmi	r5, r2
        EXTI->FTSR1 = temp;
 80007aa:	f8c9 5004 	str.w	r5, [r9, #4]
    position++;
 80007ae:	3301      	adds	r3, #1
 80007b0:	e73b      	b.n	800062a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80007b2:	2500      	movs	r5, #0
 80007b4:	e7d5      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007b6:	2501      	movs	r5, #1
 80007b8:	e7d3      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007ba:	2502      	movs	r5, #2
 80007bc:	e7d1      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007be:	2503      	movs	r5, #3
 80007c0:	e7cf      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007c2:	2504      	movs	r5, #4
 80007c4:	e7cd      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007c6:	2505      	movs	r5, #5
 80007c8:	e7cb      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007ca:	2506      	movs	r5, #6
 80007cc:	e7c9      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007ce:	2507      	movs	r5, #7
 80007d0:	e7c7      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007d2:	2508      	movs	r5, #8
 80007d4:	e7c5      	b.n	8000762 <HAL_GPIO_Init+0x14a>
 80007d6:	bf00      	nop
 80007d8:	58020000 	.word	0x58020000
 80007dc:	58024400 	.word	0x58024400
 80007e0:	58000080 	.word	0x58000080

080007e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007e4:	b10a      	cbz	r2, 80007ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007e6:	6181      	str	r1, [r0, #24]
  }
}
 80007e8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007ea:	0409      	lsls	r1, r1, #16
 80007ec:	e7fb      	b.n	80007e6 <HAL_GPIO_WritePin+0x2>

080007ee <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80007ee:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80007f0:	ea01 0203 	and.w	r2, r1, r3
 80007f4:	ea21 0103 	bic.w	r1, r1, r3
 80007f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80007fc:	6181      	str	r1, [r0, #24]
}
 80007fe:	4770      	bx	lr

08000800 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8000800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000804:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8000808:	4201      	tst	r1, r0
{
 800080a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800080c:	d003      	beq.n	8000816 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800080e:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000812:	f000 fd91 	bl	8001338 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8000816:	bd08      	pop	{r3, pc}

08000818 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000818:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800081a:	4c10      	ldr	r4, [pc, #64]	; (800085c <HAL_PWREx_ConfigSupply+0x44>)
 800081c:	68e3      	ldr	r3, [r4, #12]
 800081e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000822:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000824:	d105      	bne.n	8000832 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000826:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800082a:	1a18      	subs	r0, r3, r0
 800082c:	bf18      	it	ne
 800082e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8000830:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000832:	f023 0307 	bic.w	r3, r3, #7
 8000836:	4318      	orrs	r0, r3
 8000838:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800083a:	f7ff fe5f 	bl	80004fc <HAL_GetTick>
 800083e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000840:	6863      	ldr	r3, [r4, #4]
 8000842:	049b      	lsls	r3, r3, #18
 8000844:	d501      	bpl.n	800084a <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 8000846:	2000      	movs	r0, #0
 8000848:	e7f2      	b.n	8000830 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800084a:	f7ff fe57 	bl	80004fc <HAL_GetTick>
 800084e:	1b40      	subs	r0, r0, r5
 8000850:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000854:	d9f4      	bls.n	8000840 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 8000856:	2001      	movs	r0, #1
 8000858:	e7ea      	b.n	8000830 <HAL_PWREx_ConfigSupply+0x18>
 800085a:	bf00      	nop
 800085c:	58024800 	.word	0x58024800

08000860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000862:	4604      	mov	r4, r0
 8000864:	2800      	cmp	r0, #0
 8000866:	d074      	beq.n	8000952 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000868:	6803      	ldr	r3, [r0, #0]
 800086a:	07d8      	lsls	r0, r3, #31
 800086c:	d45e      	bmi.n	800092c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800086e:	6823      	ldr	r3, [r4, #0]
 8000870:	0799      	lsls	r1, r3, #30
 8000872:	f100 80b0 	bmi.w	80009d6 <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	06da      	lsls	r2, r3, #27
 800087a:	d527      	bpl.n	80008cc <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800087c:	4baa      	ldr	r3, [pc, #680]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 800087e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000880:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000882:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000886:	2a08      	cmp	r2, #8
 8000888:	d007      	beq.n	800089a <HAL_RCC_OscConfig+0x3a>
 800088a:	2a18      	cmp	r2, #24
 800088c:	f040 810e 	bne.w	8000aac <HAL_RCC_OscConfig+0x24c>
 8000890:	f001 0203 	and.w	r2, r1, #3
 8000894:	2a01      	cmp	r2, #1
 8000896:	f040 8109 	bne.w	8000aac <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	05db      	lsls	r3, r3, #23
 800089e:	d502      	bpl.n	80008a6 <HAL_RCC_OscConfig+0x46>
 80008a0:	69e3      	ldr	r3, [r4, #28]
 80008a2:	2b80      	cmp	r3, #128	; 0x80
 80008a4:	d155      	bne.n	8000952 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80008a6:	f7ff fe41 	bl	800052c <HAL_GetREVID>
 80008aa:	f241 0303 	movw	r3, #4099	; 0x1003
 80008ae:	6a21      	ldr	r1, [r4, #32]
 80008b0:	4298      	cmp	r0, r3
 80008b2:	4b9d      	ldr	r3, [pc, #628]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 80008b4:	f200 80f3 	bhi.w	8000a9e <HAL_RCC_OscConfig+0x23e>
 80008b8:	685a      	ldr	r2, [r3, #4]
 80008ba:	2920      	cmp	r1, #32
 80008bc:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80008c0:	bf0c      	ite	eq
 80008c2:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80008c6:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80008ca:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	0719      	lsls	r1, r3, #28
 80008d0:	f100 812e 	bmi.w	8000b30 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	069a      	lsls	r2, r3, #26
 80008d8:	f100 814f 	bmi.w	8000b7a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008dc:	6823      	ldr	r3, [r4, #0]
 80008de:	075d      	lsls	r5, r3, #29
 80008e0:	d51e      	bpl.n	8000920 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80008e2:	4d92      	ldr	r5, [pc, #584]	; (8000b2c <HAL_RCC_OscConfig+0x2cc>)
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80008ec:	f7ff fe06 	bl	80004fc <HAL_GetTick>
 80008f0:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80008f2:	682b      	ldr	r3, [r5, #0]
 80008f4:	05da      	lsls	r2, r3, #23
 80008f6:	f140 8165 	bpl.w	8000bc4 <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008fa:	68a3      	ldr	r3, [r4, #8]
 80008fc:	4d8a      	ldr	r5, [pc, #552]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 80008fe:	2b01      	cmp	r3, #1
 8000900:	f040 8167 	bne.w	8000bd2 <HAL_RCC_OscConfig+0x372>
 8000904:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800090c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000910:	f7ff fdf4 	bl	80004fc <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000914:	4e84      	ldr	r6, [pc, #528]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000916:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000918:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800091a:	079b      	lsls	r3, r3, #30
 800091c:	f140 817f 	bpl.w	8000c1e <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000920:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000922:	2900      	cmp	r1, #0
 8000924:	f040 8182 	bne.w	8000c2c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8000928:	2000      	movs	r0, #0
 800092a:	e02a      	b.n	8000982 <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800092c:	4b7e      	ldr	r3, [pc, #504]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 800092e:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000930:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000932:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000936:	2a10      	cmp	r2, #16
 8000938:	d005      	beq.n	8000946 <HAL_RCC_OscConfig+0xe6>
 800093a:	2a18      	cmp	r2, #24
 800093c:	d10b      	bne.n	8000956 <HAL_RCC_OscConfig+0xf6>
 800093e:	f001 0203 	and.w	r2, r1, #3
 8000942:	2a02      	cmp	r2, #2
 8000944:	d107      	bne.n	8000956 <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	039a      	lsls	r2, r3, #14
 800094a:	d590      	bpl.n	800086e <HAL_RCC_OscConfig+0xe>
 800094c:	6863      	ldr	r3, [r4, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d18d      	bne.n	800086e <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8000952:	2001      	movs	r0, #1
 8000954:	e015      	b.n	8000982 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000956:	6862      	ldr	r2, [r4, #4]
 8000958:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800095c:	d112      	bne.n	8000984 <HAL_RCC_OscConfig+0x124>
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000964:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000966:	f7ff fdc9 	bl	80004fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800096a:	4e6f      	ldr	r6, [pc, #444]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 800096c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800096e:	6833      	ldr	r3, [r6, #0]
 8000970:	039b      	lsls	r3, r3, #14
 8000972:	f53f af7c 	bmi.w	800086e <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000976:	f7ff fdc1 	bl	80004fc <HAL_GetTick>
 800097a:	1b40      	subs	r0, r0, r5
 800097c:	2864      	cmp	r0, #100	; 0x64
 800097e:	d9f6      	bls.n	800096e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8000980:	2003      	movs	r0, #3
}
 8000982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000984:	4d68      	ldr	r5, [pc, #416]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	b99a      	cbnz	r2, 80009b2 <HAL_RCC_OscConfig+0x152>
 800098a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800098e:	602b      	str	r3, [r5, #0]
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000996:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000998:	f7ff fdb0 	bl	80004fc <HAL_GetTick>
 800099c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800099e:	682b      	ldr	r3, [r5, #0]
 80009a0:	039f      	lsls	r7, r3, #14
 80009a2:	f57f af64 	bpl.w	800086e <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009a6:	f7ff fda9 	bl	80004fc <HAL_GetTick>
 80009aa:	1b80      	subs	r0, r0, r6
 80009ac:	2864      	cmp	r0, #100	; 0x64
 80009ae:	d9f6      	bls.n	800099e <HAL_RCC_OscConfig+0x13e>
 80009b0:	e7e6      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b2:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80009b6:	d107      	bne.n	80009c8 <HAL_RCC_OscConfig+0x168>
 80009b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009bc:	602b      	str	r3, [r5, #0]
 80009be:	682b      	ldr	r3, [r5, #0]
 80009c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c4:	602b      	str	r3, [r5, #0]
 80009c6:	e7ce      	b.n	8000966 <HAL_RCC_OscConfig+0x106>
 80009c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009cc:	602b      	str	r3, [r5, #0]
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009d4:	e7f6      	b.n	80009c4 <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80009d6:	4b54      	ldr	r3, [pc, #336]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 80009d8:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80009da:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80009dc:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80009e0:	d003      	beq.n	80009ea <HAL_RCC_OscConfig+0x18a>
 80009e2:	2a18      	cmp	r2, #24
 80009e4:	d11f      	bne.n	8000a26 <HAL_RCC_OscConfig+0x1c6>
 80009e6:	078e      	lsls	r6, r1, #30
 80009e8:	d11d      	bne.n	8000a26 <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	075d      	lsls	r5, r3, #29
 80009ee:	d502      	bpl.n	80009f6 <HAL_RCC_OscConfig+0x196>
 80009f0:	68e3      	ldr	r3, [r4, #12]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d0ad      	beq.n	8000952 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009f6:	f7ff fd99 	bl	800052c <HAL_GetREVID>
 80009fa:	f241 0303 	movw	r3, #4099	; 0x1003
 80009fe:	6921      	ldr	r1, [r4, #16]
 8000a00:	4298      	cmp	r0, r3
 8000a02:	4b49      	ldr	r3, [pc, #292]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	d809      	bhi.n	8000a1c <HAL_RCC_OscConfig+0x1bc>
 8000a08:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8000a0c:	2940      	cmp	r1, #64	; 0x40
 8000a0e:	bf0c      	ite	eq
 8000a10:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 8000a14:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	e72c      	b.n	8000876 <HAL_RCC_OscConfig+0x16>
 8000a1c:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000a20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a24:	e7f8      	b.n	8000a18 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a26:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a28:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a2a:	b339      	cbz	r1, 8000a7c <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a2c:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a30:	4d3d      	ldr	r5, [pc, #244]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000a32:	430a      	orrs	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a36:	f7ff fd61 	bl	80004fc <HAL_GetTick>
 8000a3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	0758      	lsls	r0, r3, #29
 8000a40:	d511      	bpl.n	8000a66 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a42:	f7ff fd73 	bl	800052c <HAL_GetREVID>
 8000a46:	f241 0303 	movw	r3, #4099	; 0x1003
 8000a4a:	6922      	ldr	r2, [r4, #16]
 8000a4c:	4298      	cmp	r0, r3
 8000a4e:	686b      	ldr	r3, [r5, #4]
 8000a50:	d80f      	bhi.n	8000a72 <HAL_RCC_OscConfig+0x212>
 8000a52:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000a56:	2a40      	cmp	r2, #64	; 0x40
 8000a58:	bf0c      	ite	eq
 8000a5a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8000a5e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8000a62:	606b      	str	r3, [r5, #4]
 8000a64:	e707      	b.n	8000876 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a66:	f7ff fd49 	bl	80004fc <HAL_GetTick>
 8000a6a:	1b80      	subs	r0, r0, r6
 8000a6c:	2802      	cmp	r0, #2
 8000a6e:	d9e5      	bls.n	8000a3c <HAL_RCC_OscConfig+0x1dc>
 8000a70:	e786      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000a76:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a7a:	e7f2      	b.n	8000a62 <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 8000a7c:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000a80:	4e29      	ldr	r6, [pc, #164]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8000a82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a84:	f7ff fd3a 	bl	80004fc <HAL_GetTick>
 8000a88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000a8a:	6833      	ldr	r3, [r6, #0]
 8000a8c:	0759      	lsls	r1, r3, #29
 8000a8e:	f57f aef2 	bpl.w	8000876 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a92:	f7ff fd33 	bl	80004fc <HAL_GetTick>
 8000a96:	1b40      	subs	r0, r0, r5
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d9f6      	bls.n	8000a8a <HAL_RCC_OscConfig+0x22a>
 8000a9c:	e770      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8000aa4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	e70f      	b.n	80008cc <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000aac:	69e2      	ldr	r2, [r4, #28]
 8000aae:	b34a      	cbz	r2, 8000b04 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_ENABLE();
 8000ab0:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000ab2:	4d1d      	ldr	r5, [pc, #116]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_ENABLE();
 8000ab4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ab8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aba:	f7ff fd1f 	bl	80004fc <HAL_GetTick>
 8000abe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000ac0:	682b      	ldr	r3, [r5, #0]
 8000ac2:	05df      	lsls	r7, r3, #23
 8000ac4:	d511      	bpl.n	8000aea <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000ac6:	f7ff fd31 	bl	800052c <HAL_GetREVID>
 8000aca:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ace:	6a22      	ldr	r2, [r4, #32]
 8000ad0:	4298      	cmp	r0, r3
 8000ad2:	d810      	bhi.n	8000af6 <HAL_RCC_OscConfig+0x296>
 8000ad4:	686b      	ldr	r3, [r5, #4]
 8000ad6:	2a20      	cmp	r2, #32
 8000ad8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8000adc:	bf0c      	ite	eq
 8000ade:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8000ae2:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8000ae6:	606b      	str	r3, [r5, #4]
 8000ae8:	e6f0      	b.n	80008cc <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000aea:	f7ff fd07 	bl	80004fc <HAL_GetTick>
 8000aee:	1b80      	subs	r0, r0, r6
 8000af0:	2802      	cmp	r0, #2
 8000af2:	d9e5      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x260>
 8000af4:	e744      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000af6:	68eb      	ldr	r3, [r5, #12]
 8000af8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000afc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b00:	60eb      	str	r3, [r5, #12]
 8000b02:	e6e3      	b.n	80008cc <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_CSI_DISABLE();
 8000b04:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000b06:	4e08      	ldr	r6, [pc, #32]	; (8000b28 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_DISABLE();
 8000b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b0c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b0e:	f7ff fcf5 	bl	80004fc <HAL_GetTick>
 8000b12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8000b14:	6833      	ldr	r3, [r6, #0]
 8000b16:	05d8      	lsls	r0, r3, #23
 8000b18:	f57f aed8 	bpl.w	80008cc <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000b1c:	f7ff fcee 	bl	80004fc <HAL_GetTick>
 8000b20:	1b40      	subs	r0, r0, r5
 8000b22:	2802      	cmp	r0, #2
 8000b24:	d9f6      	bls.n	8000b14 <HAL_RCC_OscConfig+0x2b4>
 8000b26:	e72b      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
 8000b28:	58024400 	.word	0x58024400
 8000b2c:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b30:	6963      	ldr	r3, [r4, #20]
 8000b32:	4d96      	ldr	r5, [pc, #600]	; (8000d8c <HAL_RCC_OscConfig+0x52c>)
 8000b34:	b183      	cbz	r3, 8000b58 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 8000b36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b3e:	f7ff fcdd 	bl	80004fc <HAL_GetTick>
 8000b42:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000b44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b46:	079b      	lsls	r3, r3, #30
 8000b48:	f53f aec4 	bmi.w	80008d4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b4c:	f7ff fcd6 	bl	80004fc <HAL_GetTick>
 8000b50:	1b80      	subs	r0, r0, r6
 8000b52:	2802      	cmp	r0, #2
 8000b54:	d9f6      	bls.n	8000b44 <HAL_RCC_OscConfig+0x2e4>
 8000b56:	e713      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8000b58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000b60:	f7ff fccc 	bl	80004fc <HAL_GetTick>
 8000b64:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000b66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000b68:	079f      	lsls	r7, r3, #30
 8000b6a:	f57f aeb3 	bpl.w	80008d4 <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b6e:	f7ff fcc5 	bl	80004fc <HAL_GetTick>
 8000b72:	1b80      	subs	r0, r0, r6
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x306>
 8000b78:	e702      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8000b7a:	69a3      	ldr	r3, [r4, #24]
 8000b7c:	4d83      	ldr	r5, [pc, #524]	; (8000d8c <HAL_RCC_OscConfig+0x52c>)
 8000b7e:	b183      	cbz	r3, 8000ba2 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8000b80:	682b      	ldr	r3, [r5, #0]
 8000b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b86:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b88:	f7ff fcb8 	bl	80004fc <HAL_GetTick>
 8000b8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	0498      	lsls	r0, r3, #18
 8000b92:	f53f aea3 	bmi.w	80008dc <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000b96:	f7ff fcb1 	bl	80004fc <HAL_GetTick>
 8000b9a:	1b80      	subs	r0, r0, r6
 8000b9c:	2802      	cmp	r0, #2
 8000b9e:	d9f6      	bls.n	8000b8e <HAL_RCC_OscConfig+0x32e>
 8000ba0:	e6ee      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000ba8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000baa:	f7ff fca7 	bl	80004fc <HAL_GetTick>
 8000bae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8000bb0:	682b      	ldr	r3, [r5, #0]
 8000bb2:	0499      	lsls	r1, r3, #18
 8000bb4:	f57f ae92 	bpl.w	80008dc <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8000bb8:	f7ff fca0 	bl	80004fc <HAL_GetTick>
 8000bbc:	1b80      	subs	r0, r0, r6
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9f6      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x350>
 8000bc2:	e6dd      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000bc4:	f7ff fc9a 	bl	80004fc <HAL_GetTick>
 8000bc8:	1b80      	subs	r0, r0, r6
 8000bca:	2864      	cmp	r0, #100	; 0x64
 8000bcc:	f67f ae91 	bls.w	80008f2 <HAL_RCC_OscConfig+0x92>
 8000bd0:	e6d6      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bd2:	b9b3      	cbnz	r3, 8000c02 <HAL_RCC_OscConfig+0x3a2>
 8000bd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bd6:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bda:	f023 0301 	bic.w	r3, r3, #1
 8000bde:	672b      	str	r3, [r5, #112]	; 0x70
 8000be0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000be2:	f023 0304 	bic.w	r3, r3, #4
 8000be6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000be8:	f7ff fc88 	bl	80004fc <HAL_GetTick>
 8000bec:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000bee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000bf0:	0798      	lsls	r0, r3, #30
 8000bf2:	f57f ae95 	bpl.w	8000920 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf6:	f7ff fc81 	bl	80004fc <HAL_GetTick>
 8000bfa:	1b80      	subs	r0, r0, r6
 8000bfc:	42b8      	cmp	r0, r7
 8000bfe:	d9f6      	bls.n	8000bee <HAL_RCC_OscConfig+0x38e>
 8000c00:	e6be      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c06:	d103      	bne.n	8000c10 <HAL_RCC_OscConfig+0x3b0>
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	672b      	str	r3, [r5, #112]	; 0x70
 8000c0e:	e679      	b.n	8000904 <HAL_RCC_OscConfig+0xa4>
 8000c10:	f023 0301 	bic.w	r3, r3, #1
 8000c14:	672b      	str	r3, [r5, #112]	; 0x70
 8000c16:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c18:	f023 0304 	bic.w	r3, r3, #4
 8000c1c:	e675      	b.n	800090a <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c1e:	f7ff fc6d 	bl	80004fc <HAL_GetTick>
 8000c22:	1b40      	subs	r0, r0, r5
 8000c24:	42b8      	cmp	r0, r7
 8000c26:	f67f ae77 	bls.w	8000918 <HAL_RCC_OscConfig+0xb8>
 8000c2a:	e6a9      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000c2c:	4d57      	ldr	r5, [pc, #348]	; (8000d8c <HAL_RCC_OscConfig+0x52c>)
 8000c2e:	692b      	ldr	r3, [r5, #16]
 8000c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000c34:	2b18      	cmp	r3, #24
 8000c36:	d07a      	beq.n	8000d2e <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8000c38:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c3a:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8000c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c40:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c42:	d167      	bne.n	8000d14 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 8000c44:	f7ff fc5a 	bl	80004fc <HAL_GetTick>
 8000c48:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c4a:	682b      	ldr	r3, [r5, #0]
 8000c4c:	0199      	lsls	r1, r3, #6
 8000c4e:	d45b      	bmi.n	8000d08 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c50:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c52:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000c54:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000c58:	f023 0303 	bic.w	r3, r3, #3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c60:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000c64:	62ab      	str	r3, [r5, #40]	; 0x28
 8000c66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	3a01      	subs	r2, #1
 8000c6e:	025b      	lsls	r3, r3, #9
 8000c70:	0412      	lsls	r2, r2, #16
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c82:	4313      	orrs	r3, r2
 8000c84:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000c86:	3a01      	subs	r2, #1
 8000c88:	0612      	lsls	r2, r2, #24
 8000c8a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000c92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000c94:	f023 0301 	bic.w	r3, r3, #1
 8000c98:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000c9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000c9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ca2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ca6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000caa:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000cac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cb0:	f023 030c 	bic.w	r3, r3, #12
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000cb8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000cbc:	f023 0302 	bic.w	r3, r3, #2
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000cc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cca:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000ccc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000cd4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cda:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000cdc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000ce4:	682b      	ldr	r3, [r5, #0]
 8000ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cec:	f7ff fc06 	bl	80004fc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cf0:	4d26      	ldr	r5, [pc, #152]	; (8000d8c <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 8000cf2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	019a      	lsls	r2, r3, #6
 8000cf8:	f53f ae16 	bmi.w	8000928 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cfc:	f7ff fbfe 	bl	80004fc <HAL_GetTick>
 8000d00:	1b00      	subs	r0, r0, r4
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d9f6      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x494>
 8000d06:	e63b      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d08:	f7ff fbf8 	bl	80004fc <HAL_GetTick>
 8000d0c:	1b80      	subs	r0, r0, r6
 8000d0e:	2802      	cmp	r0, #2
 8000d10:	d99b      	bls.n	8000c4a <HAL_RCC_OscConfig+0x3ea>
 8000d12:	e635      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 8000d14:	f7ff fbf2 	bl	80004fc <HAL_GetTick>
 8000d18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000d1a:	682b      	ldr	r3, [r5, #0]
 8000d1c:	019b      	lsls	r3, r3, #6
 8000d1e:	f57f ae03 	bpl.w	8000928 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d22:	f7ff fbeb 	bl	80004fc <HAL_GetTick>
 8000d26:	1b00      	subs	r0, r0, r4
 8000d28:	2802      	cmp	r0, #2
 8000d2a:	d9f6      	bls.n	8000d1a <HAL_RCC_OscConfig+0x4ba>
 8000d2c:	e628      	b.n	8000980 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d2e:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8000d30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8000d32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d34:	f43f ae0d 	beq.w	8000952 <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d38:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000d3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000d3e:	4281      	cmp	r1, r0
 8000d40:	f47f ae07 	bne.w	8000952 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d44:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d48:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000d4a:	428a      	cmp	r2, r1
 8000d4c:	f47f ae01 	bne.w	8000952 <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d50:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000d52:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8000d56:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8000d58:	4291      	cmp	r1, r2
 8000d5a:	f47f adfa 	bne.w	8000952 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000d60:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8000d64:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8000d66:	4291      	cmp	r1, r2
 8000d68:	f47f adf3 	bne.w	8000952 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000d6c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000d6e:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8000d72:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8000d74:	4291      	cmp	r1, r2
 8000d76:	f47f adec 	bne.w	8000952 <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8000d7a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000d7c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8000d80:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8000d82:	4293      	cmp	r3, r2
 8000d84:	f43f add0 	beq.w	8000928 <HAL_RCC_OscConfig+0xc8>
 8000d88:	e5e3      	b.n	8000952 <HAL_RCC_OscConfig+0xf2>
 8000d8a:	bf00      	nop
 8000d8c:	58024400 	.word	0x58024400

08000d90 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d90:	4b48      	ldr	r3, [pc, #288]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x124>)
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000d98:	2a10      	cmp	r2, #16
{
 8000d9a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d9c:	f000 8086 	beq.w	8000eac <HAL_RCC_GetSysClockFreq+0x11c>
 8000da0:	2a18      	cmp	r2, #24
 8000da2:	d00c      	beq.n	8000dbe <HAL_RCC_GetSysClockFreq+0x2e>
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 8083 	bne.w	8000eb0 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4842      	ldr	r0, [pc, #264]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0x128>)
 8000dae:	f012 0f20 	tst.w	r2, #32
 8000db2:	d003      	beq.n	8000dbc <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000dba:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8000dbc:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000dbe:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000dc0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 8000dc4:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000dc8:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000dcc:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 8000dce:	d0f5      	beq.n	8000dbc <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000dd0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000dd4:	f002 0201 	and.w	r2, r2, #1
 8000dd8:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000ddc:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000de0:	4362      	muls	r2, r4
 8000de2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8000de6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dea:	2901      	cmp	r1, #1
 8000dec:	ee07 2a90 	vmov	s15, r2
 8000df0:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8000df4:	d04c      	beq.n	8000e90 <HAL_RCC_GetSysClockFreq+0x100>
 8000df6:	2902      	cmp	r1, #2
 8000df8:	d03c      	beq.n	8000e74 <HAL_RCC_GetSysClockFreq+0xe4>
 8000dfa:	2900      	cmp	r1, #0
 8000dfc:	d148      	bne.n	8000e90 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	0692      	lsls	r2, r2, #26
 8000e02:	d527      	bpl.n	8000e54 <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	4a2c      	ldr	r2, [pc, #176]	; (8000eb8 <HAL_RCC_GetSysClockFreq+0x128>)
 8000e08:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000e0e:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e14:	ee07 2a10 	vmov	s14, r2
 8000e18:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8000e1c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8000e20:	ee06 3a90 	vmov	s13, r3
 8000e24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000e28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000e2c:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000e30:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e32:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000e3c:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000e3e:	ee07 3a10 	vmov	s14, r3
 8000e42:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000e46:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000e4a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000e4e:	ee17 0a90 	vmov	r0, s15
 8000e52:	e7b3      	b.n	8000dbc <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e5a:	ee07 3a10 	vmov	s14, r3
 8000e5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e66:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e6a:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8000ebc <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e6e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8000e72:	e7dd      	b.n	8000e30 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e7a:	ee07 3a10 	vmov	s14, r3
 8000e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e86:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000e8a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8000ec0 <HAL_RCC_GetSysClockFreq+0x130>
 8000e8e:	e7ee      	b.n	8000e6e <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e96:	ee07 3a10 	vmov	s14, r3
 8000e9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000ea6:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8000ec4 <HAL_RCC_GetSysClockFreq+0x134>
 8000eaa:	e7e0      	b.n	8000e6e <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000eac:	4806      	ldr	r0, [pc, #24]	; (8000ec8 <HAL_RCC_GetSysClockFreq+0x138>)
 8000eae:	e785      	b.n	8000dbc <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8000eb0:	4806      	ldr	r0, [pc, #24]	; (8000ecc <HAL_RCC_GetSysClockFreq+0x13c>)
 8000eb2:	e783      	b.n	8000dbc <HAL_RCC_GetSysClockFreq+0x2c>
 8000eb4:	58024400 	.word	0x58024400
 8000eb8:	03d09000 	.word	0x03d09000
 8000ebc:	4c742400 	.word	0x4c742400
 8000ec0:	4af42400 	.word	0x4af42400
 8000ec4:	4a742400 	.word	0x4a742400
 8000ec8:	007a1200 	.word	0x007a1200
 8000ecc:	003d0900 	.word	0x003d0900

08000ed0 <HAL_RCC_ClockConfig>:
{
 8000ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	b910      	cbnz	r0, 8000ee0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
}
 8000edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ee0:	4a88      	ldr	r2, [pc, #544]	; (8001104 <HAL_RCC_ClockConfig+0x234>)
 8000ee2:	6813      	ldr	r3, [r2, #0]
 8000ee4:	f003 030f 	and.w	r3, r3, #15
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	f0c0 8093 	bcc.w	8001014 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	075f      	lsls	r7, r3, #29
 8000ef2:	f100 809b 	bmi.w	800102c <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef6:	071e      	lsls	r6, r3, #28
 8000ef8:	d50b      	bpl.n	8000f12 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8000efa:	4983      	ldr	r1, [pc, #524]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000efc:	6966      	ldr	r6, [r4, #20]
 8000efe:	69c8      	ldr	r0, [r1, #28]
 8000f00:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000f04:	4286      	cmp	r6, r0
 8000f06:	d904      	bls.n	8000f12 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000f08:	69ca      	ldr	r2, [r1, #28]
 8000f0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f0e:	4332      	orrs	r2, r6
 8000f10:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f12:	06d8      	lsls	r0, r3, #27
 8000f14:	d50b      	bpl.n	8000f2e <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8000f16:	497c      	ldr	r1, [pc, #496]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000f18:	69a6      	ldr	r6, [r4, #24]
 8000f1a:	69c8      	ldr	r0, [r1, #28]
 8000f1c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000f20:	4286      	cmp	r6, r0
 8000f22:	d904      	bls.n	8000f2e <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000f24:	69ca      	ldr	r2, [r1, #28]
 8000f26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f2a:	4332      	orrs	r2, r6
 8000f2c:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000f2e:	0699      	lsls	r1, r3, #26
 8000f30:	d50b      	bpl.n	8000f4a <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8000f32:	4975      	ldr	r1, [pc, #468]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000f34:	69e6      	ldr	r6, [r4, #28]
 8000f36:	6a08      	ldr	r0, [r1, #32]
 8000f38:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000f3c:	4286      	cmp	r6, r0
 8000f3e:	d904      	bls.n	8000f4a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8000f40:	6a0a      	ldr	r2, [r1, #32]
 8000f42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f46:	4332      	orrs	r2, r6
 8000f48:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f4a:	079a      	lsls	r2, r3, #30
 8000f4c:	d50b      	bpl.n	8000f66 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8000f4e:	496e      	ldr	r1, [pc, #440]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000f50:	68e6      	ldr	r6, [r4, #12]
 8000f52:	6988      	ldr	r0, [r1, #24]
 8000f54:	f000 000f 	and.w	r0, r0, #15
 8000f58:	4286      	cmp	r6, r0
 8000f5a:	d904      	bls.n	8000f66 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f5c:	698a      	ldr	r2, [r1, #24]
 8000f5e:	f022 020f 	bic.w	r2, r2, #15
 8000f62:	4332      	orrs	r2, r6
 8000f64:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f66:	07df      	lsls	r7, r3, #31
 8000f68:	d46e      	bmi.n	8001048 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f6a:	6823      	ldr	r3, [r4, #0]
 8000f6c:	079e      	lsls	r6, r3, #30
 8000f6e:	f100 80a1 	bmi.w	80010b4 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f72:	4964      	ldr	r1, [pc, #400]	; (8001104 <HAL_RCC_ClockConfig+0x234>)
 8000f74:	680a      	ldr	r2, [r1, #0]
 8000f76:	f002 020f 	and.w	r2, r2, #15
 8000f7a:	42aa      	cmp	r2, r5
 8000f7c:	f200 80a8 	bhi.w	80010d0 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000f80:	0758      	lsls	r0, r3, #29
 8000f82:	f100 80b1 	bmi.w	80010e8 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f86:	0719      	lsls	r1, r3, #28
 8000f88:	d50b      	bpl.n	8000fa2 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8000f8a:	495f      	ldr	r1, [pc, #380]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000f8c:	6965      	ldr	r5, [r4, #20]
 8000f8e:	69c8      	ldr	r0, [r1, #28]
 8000f90:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000f94:	4285      	cmp	r5, r0
 8000f96:	d204      	bcs.n	8000fa2 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000f98:	69ca      	ldr	r2, [r1, #28]
 8000f9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f9e:	432a      	orrs	r2, r5
 8000fa0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fa2:	06da      	lsls	r2, r3, #27
 8000fa4:	d50b      	bpl.n	8000fbe <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8000fa6:	4958      	ldr	r1, [pc, #352]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000fa8:	69a5      	ldr	r5, [r4, #24]
 8000faa:	69c8      	ldr	r0, [r1, #28]
 8000fac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000fb0:	4285      	cmp	r5, r0
 8000fb2:	d204      	bcs.n	8000fbe <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000fb4:	69ca      	ldr	r2, [r1, #28]
 8000fb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000fba:	432a      	orrs	r2, r5
 8000fbc:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000fbe:	069b      	lsls	r3, r3, #26
 8000fc0:	d50b      	bpl.n	8000fda <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8000fc2:	4a51      	ldr	r2, [pc, #324]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000fc4:	69e0      	ldr	r0, [r4, #28]
 8000fc6:	6a11      	ldr	r1, [r2, #32]
 8000fc8:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8000fcc:	4288      	cmp	r0, r1
 8000fce:	d204      	bcs.n	8000fda <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8000fd0:	6a13      	ldr	r3, [r2, #32]
 8000fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd6:	4303      	orrs	r3, r0
 8000fd8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fda:	f7ff fed9 	bl	8000d90 <HAL_RCC_GetSysClockFreq>
 8000fde:	494a      	ldr	r1, [pc, #296]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 8000fe0:	4a4a      	ldr	r2, [pc, #296]	; (800110c <HAL_RCC_ClockConfig+0x23c>)
 8000fe2:	698b      	ldr	r3, [r1, #24]
 8000fe4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
 8000fea:	f003 031f 	and.w	r3, r3, #31
 8000fee:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ff0:	698b      	ldr	r3, [r1, #24]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	4a45      	ldr	r2, [pc, #276]	; (8001110 <HAL_RCC_ClockConfig+0x240>)
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	fa20 f303 	lsr.w	r3, r0, r3
 8001002:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8001004:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_RCC_ClockConfig+0x244>)
 8001006:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_RCC_ClockConfig+0x248>)
}
 800100a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	f7ff ba16 	b.w	8000440 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f023 030f 	bic.w	r3, r3, #15
 800101a:	430b      	orrs	r3, r1
 800101c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800101e:	6813      	ldr	r3, [r2, #0]
 8001020:	f003 030f 	and.w	r3, r3, #15
 8001024:	428b      	cmp	r3, r1
 8001026:	f47f af58 	bne.w	8000eda <HAL_RCC_ClockConfig+0xa>
 800102a:	e760      	b.n	8000eee <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800102c:	4936      	ldr	r1, [pc, #216]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 800102e:	6926      	ldr	r6, [r4, #16]
 8001030:	6988      	ldr	r0, [r1, #24]
 8001032:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8001036:	4286      	cmp	r6, r0
 8001038:	f67f af5d 	bls.w	8000ef6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800103c:	698a      	ldr	r2, [r1, #24]
 800103e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001042:	4332      	orrs	r2, r6
 8001044:	618a      	str	r2, [r1, #24]
 8001046:	e756      	b.n	8000ef6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 800104a:	68a1      	ldr	r1, [r4, #8]
 800104c:	699a      	ldr	r2, [r3, #24]
 800104e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8001052:	430a      	orrs	r2, r1
 8001054:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001056:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001058:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800105a:	2a02      	cmp	r2, #2
 800105c:	d11d      	bne.n	800109a <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800105e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001062:	f43f af3a 	beq.w	8000eda <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001066:	4e28      	ldr	r6, [pc, #160]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001068:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800106c:	6933      	ldr	r3, [r6, #16]
 800106e:	f023 0307 	bic.w	r3, r3, #7
 8001072:	4313      	orrs	r3, r2
 8001074:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8001076:	f7ff fa41 	bl	80004fc <HAL_GetTick>
 800107a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107c:	6933      	ldr	r3, [r6, #16]
 800107e:	6862      	ldr	r2, [r4, #4]
 8001080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001084:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001088:	f43f af6f 	beq.w	8000f6a <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800108c:	f7ff fa36 	bl	80004fc <HAL_GetTick>
 8001090:	1bc0      	subs	r0, r0, r7
 8001092:	4540      	cmp	r0, r8
 8001094:	d9f2      	bls.n	800107c <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8001096:	2003      	movs	r0, #3
 8001098:	e720      	b.n	8000edc <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800109a:	2a03      	cmp	r2, #3
 800109c:	d102      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800109e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010a2:	e7de      	b.n	8001062 <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80010a4:	2a01      	cmp	r2, #1
 80010a6:	d102      	bne.n	80010ae <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80010a8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010ac:	e7d9      	b.n	8001062 <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ae:	f013 0f04 	tst.w	r3, #4
 80010b2:	e7d6      	b.n	8001062 <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80010b4:	4914      	ldr	r1, [pc, #80]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 80010b6:	68e6      	ldr	r6, [r4, #12]
 80010b8:	6988      	ldr	r0, [r1, #24]
 80010ba:	f000 000f 	and.w	r0, r0, #15
 80010be:	4286      	cmp	r6, r0
 80010c0:	f4bf af57 	bcs.w	8000f72 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c4:	698a      	ldr	r2, [r1, #24]
 80010c6:	f022 020f 	bic.w	r2, r2, #15
 80010ca:	4332      	orrs	r2, r6
 80010cc:	618a      	str	r2, [r1, #24]
 80010ce:	e750      	b.n	8000f72 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d0:	680a      	ldr	r2, [r1, #0]
 80010d2:	f022 020f 	bic.w	r2, r2, #15
 80010d6:	432a      	orrs	r2, r5
 80010d8:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	680a      	ldr	r2, [r1, #0]
 80010dc:	f002 020f 	and.w	r2, r2, #15
 80010e0:	42aa      	cmp	r2, r5
 80010e2:	f47f aefa 	bne.w	8000eda <HAL_RCC_ClockConfig+0xa>
 80010e6:	e74b      	b.n	8000f80 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <HAL_RCC_ClockConfig+0x238>)
 80010ea:	6925      	ldr	r5, [r4, #16]
 80010ec:	6988      	ldr	r0, [r1, #24]
 80010ee:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80010f2:	4285      	cmp	r5, r0
 80010f4:	f4bf af47 	bcs.w	8000f86 <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80010f8:	698a      	ldr	r2, [r1, #24]
 80010fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80010fe:	432a      	orrs	r2, r5
 8001100:	618a      	str	r2, [r1, #24]
 8001102:	e740      	b.n	8000f86 <HAL_RCC_ClockConfig+0xb6>
 8001104:	52002000 	.word	0x52002000
 8001108:	58024400 	.word	0x58024400
 800110c:	080013dc 	.word	0x080013dc
 8001110:	20000004 	.word	0x20000004
 8001114:	20000000 	.word	0x20000000
 8001118:	2000000c 	.word	0x2000000c

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001122:	e003      	b.n	800112c <LoopCopyDataInit>

08001124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800112a:	3104      	adds	r1, #4

0800112c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001134:	d3f6      	bcc.n	8001124 <CopyDataInit>
  ldr  r2, =_sbss
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001138:	e002      	b.n	8001140 <LoopFillZerobss>

0800113a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800113a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800113c:	f842 3b04 	str.w	r3, [r2], #4

08001140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001144:	d3f9      	bcc.n	800113a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001146:	f7ff f937 	bl	80003b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114a:	f000 f90d 	bl	8001368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f000 f80f 	bl	8001170 <main>
  bx  lr    
 8001152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001158:	080013f4 	.word	0x080013f4
  ldr  r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001160:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001164:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001168:	20000034 	.word	0x20000034

0800116c <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC3_IRQHandler>
	...

08001170 <main>:
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001170:	4b6a      	ldr	r3, [pc, #424]	; (800131c <main+0x1ac>)
 8001172:	695a      	ldr	r2, [r3, #20]
 8001174:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001178:	b500      	push	{lr}
 800117a:	b09f      	sub	sp, #124	; 0x7c
 800117c:	d111      	bne.n	80011a2 <main+0x32>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800117e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001182:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001186:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800118a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800118e:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001198:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800119a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800119e:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <main+0x1ac>)
 80011a4:	6953      	ldr	r3, [r2, #20]
 80011a6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80011aa:	d123      	bne.n	80011f4 <main+0x84>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80011ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80011b0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80011b4:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011b8:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011bc:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80011c0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80011c4:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011c6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80011ca:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011cc:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80011d0:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80011d2:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80011d6:	d2f9      	bcs.n	80011cc <main+0x5c>
    } while(sets-- != 0U);
 80011d8:	3b20      	subs	r3, #32
 80011da:	f113 0f20 	cmn.w	r3, #32
 80011de:	d1f2      	bne.n	80011c6 <main+0x56>
 80011e0:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80011e4:	6953      	ldr	r3, [r2, #20]
 80011e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ea:	6153      	str	r3, [r2, #20]
 80011ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80011f0:	f3bf 8f6f 	isb	sy
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 80011f4:	f7ff f948 	bl	8000488 <HAL_Init>
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;

  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011f8:	2002      	movs	r0, #2
 80011fa:	f7ff fb0d 	bl	8000818 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fe:	2300      	movs	r3, #0
 8001200:	9301      	str	r3, [sp, #4]
 8001202:	4b47      	ldr	r3, [pc, #284]	; (8001320 <main+0x1b0>)
 8001204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001206:	f022 0201 	bic.w	r2, r2, #1
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
 800120c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	4b43      	ldr	r3, [pc, #268]	; (8001324 <main+0x1b4>)
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800121c:	619a      	str	r2, [r3, #24]
 800121e:	699a      	ldr	r2, [r3, #24]
 8001220:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001224:	9201      	str	r2, [sp, #4]
 8001226:	9a01      	ldr	r2, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001228:	699a      	ldr	r2, [r3, #24]
 800122a:	0494      	lsls	r4, r2, #18
 800122c:	d5fc      	bpl.n	8001228 <main+0xb8>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800122e:	2001      	movs	r0, #1
 8001230:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001234:	2602      	movs	r6, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;

  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001236:	2404      	movs	r4, #4
 8001238:	f44f 72c8 	mov.w	r2, #400	; 0x190
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  RCC_OscInitStruct.PLL.PLLP = 2;
 800123c:	9618      	str	r6, [sp, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800123e:	e9cd 030b 	strd	r0, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001242:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001244:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001246:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8001248:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800124a:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124c:	e9cd 6614 	strd	r6, r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001250:	e9cd 4216 	strd	r4, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001254:	e9cd 4619 	strd	r4, r6, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001258:	e9cd 431b 	strd	r4, r3, [sp, #108]	; 0x6c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800125c:	f7ff fb00 	bl	8000860 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8001260:	b118      	cbz	r0, 800126a <main+0xfa>
  BSP_LED_On(LED3);
 8001262:	4630      	mov	r0, r6
 8001264:	f7ff f882 	bl	800036c <BSP_LED_On>
  while(1)
 8001268:	e7fe      	b.n	8001268 <main+0xf8>

/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	223f      	movs	r2, #63	; 0x3f
 800126c:	2303      	movs	r3, #3
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800126e:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001272:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001274:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001278:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800127a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800127e:	e9cd 1306 	strd	r1, r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8001282:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001284:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001286:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800128a:	f7ff fe21 	bl	8000ed0 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 800128e:	4604      	mov	r4, r0
 8001290:	b118      	cbz	r0, 800129a <main+0x12a>
  BSP_LED_On(LED3);
 8001292:	4630      	mov	r0, r6
 8001294:	f7ff f86a 	bl	800036c <BSP_LED_On>
  while(1)
 8001298:	e7fe      	b.n	8001298 <main+0x128>
  {
    Error_Handler();
  }

  /*activate CSI clock mondatory for I/O Compensation Cell*/
  __HAL_RCC_CSI_ENABLE() ;
 800129a:	4d23      	ldr	r5, [pc, #140]	; (8001328 <main+0x1b8>)
 800129c:	682b      	ldr	r3, [r5, #0]
 800129e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a2:	602b      	str	r3, [r5, #0]

  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80012a4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80012b0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	9b02      	ldr	r3, [sp, #8]

  /* Enables the I/O Compensation Cell */
  HAL_EnableCompensationCell();
 80012bc:	f7ff f93c 	bl	8000538 <HAL_EnableCompensationCell>
  BSP_LED_Init(LED1);
 80012c0:	4620      	mov	r0, r4
 80012c2:	f7ff f809 	bl	80002d8 <BSP_LED_Init>
static void EXTI15_10_IRQHandler_Config(void)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable GPIOC clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0

  /* Configure PC.13 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Pull = GPIO_NOPULL;
  GPIO_InitStructure.Pin = GPIO_PIN_13;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80012ca:	a90b      	add	r1, sp, #44	; 0x2c
 80012cc:	4817      	ldr	r0, [pc, #92]	; (800132c <main+0x1bc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80012d6:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
    if(ButtonState != 0)
 80012da:	4d15      	ldr	r5, [pc, #84]	; (8001330 <main+0x1c0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012dc:	f003 0304 	and.w	r3, r3, #4
 80012e0:	9303      	str	r3, [sp, #12]
 80012e2:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <main+0x1c4>)
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80012e6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80012ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ee:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80012f0:	f7ff f992 	bl	8000618 <HAL_GPIO_Init>

  /* Enable and set EXTI lines 15 to 10 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80012f4:	4622      	mov	r2, r4
 80012f6:	4631      	mov	r1, r6
 80012f8:	2028      	movs	r0, #40	; 0x28
 80012fa:	f7ff f937 	bl	800056c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012fe:	2028      	movs	r0, #40	; 0x28
 8001300:	f7ff f966 	bl	80005d0 <HAL_NVIC_EnableIRQ>
    if(ButtonState != 0)
 8001304:	682b      	ldr	r3, [r5, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0fc      	beq.n	8001304 <main+0x194>
      BSP_LED_Toggle(LED1);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff f842 	bl	8000394 <BSP_LED_Toggle>
      HAL_Delay(5); /* to avoid bounce when button pressed */
 8001310:	2005      	movs	r0, #5
      ButtonState = 0;
 8001312:	602c      	str	r4, [r5, #0]
      HAL_Delay(5); /* to avoid bounce when button pressed */
 8001314:	f7ff f8f8 	bl	8000508 <HAL_Delay>
 8001318:	e7f4      	b.n	8001304 <main+0x194>
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	58000400 	.word	0x58000400
 8001324:	58024800 	.word	0x58024800
 8001328:	58024400 	.word	0x58024400
 800132c:	58020800 	.word	0x58020800
 8001330:	2000002c 	.word	0x2000002c
 8001334:	11110000 	.word	0x11110000

08001338 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == GPIO_PIN_13)
 8001338:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800133c:	d102      	bne.n	8001344 <HAL_GPIO_EXTI_Callback+0xc>
  {
    ButtonState = 1;
 800133e:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GPIO_EXTI_Callback+0x10>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]
  }
}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000002c 	.word	0x2000002c

0800134c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler>

08001350 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001350:	e7fe      	b.n	8001350 <MemManage_Handler>

08001352 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001352:	e7fe      	b.n	8001352 <BusFault_Handler>

08001354 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler>

08001356 <SVC_Handler>:
 8001356:	4770      	bx	lr

08001358 <DebugMon_Handler>:
 8001358:	4770      	bx	lr

0800135a <PendSV_Handler>:
 800135a:	4770      	bx	lr

0800135c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800135c:	f7ff b8c2 	b.w	80004e4 <HAL_IncTick>

08001360 <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_USER_PIN);
 8001360:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001364:	f7ff ba4c 	b.w	8000800 <HAL_GPIO_EXTI_IRQHandler>

08001368 <__libc_init_array>:
 8001368:	b570      	push	{r4, r5, r6, lr}
 800136a:	4d0d      	ldr	r5, [pc, #52]	; (80013a0 <__libc_init_array+0x38>)
 800136c:	4c0d      	ldr	r4, [pc, #52]	; (80013a4 <__libc_init_array+0x3c>)
 800136e:	1b64      	subs	r4, r4, r5
 8001370:	10a4      	asrs	r4, r4, #2
 8001372:	2600      	movs	r6, #0
 8001374:	42a6      	cmp	r6, r4
 8001376:	d109      	bne.n	800138c <__libc_init_array+0x24>
 8001378:	4d0b      	ldr	r5, [pc, #44]	; (80013a8 <__libc_init_array+0x40>)
 800137a:	4c0c      	ldr	r4, [pc, #48]	; (80013ac <__libc_init_array+0x44>)
 800137c:	f000 f818 	bl	80013b0 <_init>
 8001380:	1b64      	subs	r4, r4, r5
 8001382:	10a4      	asrs	r4, r4, #2
 8001384:	2600      	movs	r6, #0
 8001386:	42a6      	cmp	r6, r4
 8001388:	d105      	bne.n	8001396 <__libc_init_array+0x2e>
 800138a:	bd70      	pop	{r4, r5, r6, pc}
 800138c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001390:	4798      	blx	r3
 8001392:	3601      	adds	r6, #1
 8001394:	e7ee      	b.n	8001374 <__libc_init_array+0xc>
 8001396:	f855 3b04 	ldr.w	r3, [r5], #4
 800139a:	4798      	blx	r3
 800139c:	3601      	adds	r6, #1
 800139e:	e7f2      	b.n	8001386 <__libc_init_array+0x1e>
 80013a0:	080013ec 	.word	0x080013ec
 80013a4:	080013ec 	.word	0x080013ec
 80013a8:	080013ec 	.word	0x080013ec
 80013ac:	080013f0 	.word	0x080013f0

080013b0 <_init>:
 80013b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b2:	bf00      	nop
 80013b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013b6:	bc08      	pop	{r3}
 80013b8:	469e      	mov	lr, r3
 80013ba:	4770      	bx	lr

080013bc <_fini>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr
