
SPI_Module_Development.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023bc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080025b4  080025b4  000125b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080025c4  080025c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025cc  080025cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025cc  080025cc  000125cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d0  080025d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  080025e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080025e0  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006758  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001137  00000000  00000000  00026792  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  000278d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  00027f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000256fa  00000000  00000000  000284e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000054f6  00000000  00000000  0004dbe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e95cf  00000000  00000000  000530d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013c6a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018ec  00000000  00000000  0013c724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800259c 	.word	0x0800259c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800259c 	.word	0x0800259c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b08c      	sub	sp, #48	; 0x30
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fca6 	bl	8000e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f827 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f881 	bl	800064c <MX_GPIO_Init>
  //MX_SPI4_Init();
  //MX_SPI5_Init();
  /* USER CODE BEGIN 2 */
  //SPI_Init(4, 2, 8, 125);
  //SPI_Init(5, 2, 8, 125);
  SPI_Accel_Init();
 800054a:	f000 f9db 	bl	8000904 <SPI_Accel_Init>

  HAL_GPIO_WritePin(SPI4_SS_GPIO_Port, SPI4_SS_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	480f      	ldr	r0, [pc, #60]	; (8000590 <main+0x58>)
 8000554:	f000 ffaa 	bl	80014ac <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  spi_buf[0] = 0x64;
 8000558:	2364      	movs	r3, #100	; 0x64
 800055a:	763b      	strb	r3, [r7, #24]
		spi_buf[1] = 0x00;
 800055c:	2300      	movs	r3, #0
 800055e:	767b      	strb	r3, [r7, #25]
		spi_buf[2] = 0x03;
 8000560:	2303      	movs	r3, #3
 8000562:	76bb      	strb	r3, [r7, #26]
		spi_buf[3] = 0x64;
 8000564:	2364      	movs	r3, #100	; 0x64
 8000566:	76fb      	strb	r3, [r7, #27]
		uint8_t buf_len = 4;
 8000568:	2304      	movs	r3, #4
 800056a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		//spi_buf[3] = 0x0a;
	   // spi_buf[4] = 122;
		HAL_Delay(50);
 800056e:	2032      	movs	r0, #50	; 0x32
 8000570:	f000 fcea 	bl	8000f48 <HAL_Delay>
		//SPI_Transmit_Receive(&hspi5, &spi_buf, &Rx_buf, buf_len);

		//SPI_Test_Transmit(&hspi4, spi_buf, buf_len, SPI5_SS_GPIO_Port, SPI5_SS_Pin);


		SPI_Accel_Transmit_Receive(&spi_buf, &Rx_buf, 4);
 8000574:	1d39      	adds	r1, r7, #4
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2204      	movs	r2, #4
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f9cd 	bl	800091c <SPI_Accel_Transmit_Receive>

		/*HAL_GPIO_WritePin(SPI4_SS_GPIO_Port, SPI4_SS_Pin, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi4, (uint8_t *)spi_buf, 8, 100);
		HAL_GPIO_WritePin(SPI4_SS_GPIO_Port, SPI4_SS_Pin, GPIO_PIN_SET);*/

		spi_buf[0] = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	763b      	strb	r3, [r7, #24]
		spi_buf[1] = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	767b      	strb	r3, [r7, #25]
		spi_buf[2] = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	76bb      	strb	r3, [r7, #26]
  {
 800058e:	e7e3      	b.n	8000558 <main+0x20>
 8000590:	40021000 	.word	0x40021000

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2234      	movs	r2, #52	; 0x34
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fff2 	bl	800258c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xb0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xb0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xb0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d0:	4b1d      	ldr	r3, [pc, #116]	; (8000648 <SystemClock_Config+0xb4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <SystemClock_Config+0xb4>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <SystemClock_Config+0xb4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4618      	mov	r0, r3
 8000602:	f000 ff6d 	bl	80014e0 <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800060c:	f000 fb37 	bl	8000c7e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa05 	bl	8001a3c <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000638:	f000 fb21 	bl	8000c7e <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	; 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000662:	4b9f      	ldr	r3, [pc, #636]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	4a9e      	ldr	r2, [pc, #632]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000668:	f043 0310 	orr.w	r3, r3, #16
 800066c:	6313      	str	r3, [r2, #48]	; 0x30
 800066e:	4b9c      	ldr	r3, [pc, #624]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	623b      	str	r3, [r7, #32]
 8000678:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b99      	ldr	r3, [pc, #612]	; (80008e0 <MX_GPIO_Init+0x294>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a98      	ldr	r2, [pc, #608]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000680:	f043 0304 	orr.w	r3, r3, #4
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b96      	ldr	r3, [pc, #600]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0304 	and.w	r3, r3, #4
 800068e:	61fb      	str	r3, [r7, #28]
 8000690:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b93      	ldr	r3, [pc, #588]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a92      	ldr	r2, [pc, #584]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000698:	f043 0320 	orr.w	r3, r3, #32
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b90      	ldr	r3, [pc, #576]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0320 	and.w	r3, r3, #32
 80006a6:	61bb      	str	r3, [r7, #24]
 80006a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006aa:	4b8d      	ldr	r3, [pc, #564]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a8c      	ldr	r2, [pc, #560]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b8a      	ldr	r3, [pc, #552]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	4b87      	ldr	r3, [pc, #540]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a86      	ldr	r2, [pc, #536]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b84      	ldr	r3, [pc, #528]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
 80006d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	4b81      	ldr	r3, [pc, #516]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a80      	ldr	r2, [pc, #512]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006e0:	f043 0302 	orr.w	r3, r3, #2
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b7e      	ldr	r3, [pc, #504]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0302 	and.w	r3, r3, #2
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	4b7b      	ldr	r3, [pc, #492]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a7a      	ldr	r2, [pc, #488]	; (80008e0 <MX_GPIO_Init+0x294>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b78      	ldr	r3, [pc, #480]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070a:	4b75      	ldr	r3, [pc, #468]	; (80008e0 <MX_GPIO_Init+0x294>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a74      	ldr	r2, [pc, #464]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b72      	ldr	r3, [pc, #456]	; (80008e0 <MX_GPIO_Init+0x294>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI4_SS_GPIO_Port, SPI4_SS_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2110      	movs	r1, #16
 8000726:	486f      	ldr	r0, [pc, #444]	; (80008e4 <MX_GPIO_Init+0x298>)
 8000728:	f000 fec0 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI5_SS_GPIO_Port, SPI5_SS_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000732:	486d      	ldr	r0, [pc, #436]	; (80008e8 <MX_GPIO_Init+0x29c>)
 8000734:	f000 feba 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000738:	2200      	movs	r2, #0
 800073a:	f244 0181 	movw	r1, #16513	; 0x4081
 800073e:	486b      	ldr	r0, [pc, #428]	; (80008ec <MX_GPIO_Init+0x2a0>)
 8000740:	f000 feb4 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	4869      	ldr	r0, [pc, #420]	; (80008f0 <MX_GPIO_Init+0x2a4>)
 800074a:	f000 feaf 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI4_SS_Pin */
  GPIO_InitStruct.Pin = SPI4_SS_Pin;
 800074e:	2310      	movs	r3, #16
 8000750:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI4_SS_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000762:	4619      	mov	r1, r3
 8000764:	485f      	ldr	r0, [pc, #380]	; (80008e4 <MX_GPIO_Init+0x298>)
 8000766:	f000 fcf7 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800076a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000770:	4b60      	ldr	r3, [pc, #384]	; (80008f4 <MX_GPIO_Init+0x2a8>)
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	485e      	ldr	r0, [pc, #376]	; (80008f8 <MX_GPIO_Init+0x2ac>)
 8000780:	f000 fcea 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI5_SS_Pin */
  GPIO_InitStruct.Pin = SPI5_SS_Pin;
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI5_SS_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	4852      	ldr	r0, [pc, #328]	; (80008e8 <MX_GPIO_Init+0x29c>)
 800079e:	f000 fcdb 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007a2:	2332      	movs	r3, #50	; 0x32
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	484e      	ldr	r0, [pc, #312]	; (80008f8 <MX_GPIO_Init+0x2ac>)
 80007be:	f000 fccb 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c2:	2386      	movs	r3, #134	; 0x86
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4847      	ldr	r0, [pc, #284]	; (80008fc <MX_GPIO_Init+0x2b0>)
 80007de:	f000 fcbb 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007e2:	f244 0381 	movw	r3, #16513	; 0x4081
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	483c      	ldr	r0, [pc, #240]	; (80008ec <MX_GPIO_Init+0x2a0>)
 80007fc:	f000 fcac 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4833      	ldr	r0, [pc, #204]	; (80008ec <MX_GPIO_Init+0x2a0>)
 800081e:	f000 fc9b 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000822:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000830:	2303      	movs	r3, #3
 8000832:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000834:	2307      	movs	r3, #7
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4830      	ldr	r0, [pc, #192]	; (8000900 <MX_GPIO_Init+0x2b4>)
 8000840:	f000 fc8a 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000844:	2340      	movs	r3, #64	; 0x40
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4825      	ldr	r0, [pc, #148]	; (80008f0 <MX_GPIO_Init+0x2a4>)
 800085c:	f000 fc7c 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000870:	4619      	mov	r1, r3
 8000872:	481f      	ldr	r0, [pc, #124]	; (80008f0 <MX_GPIO_Init+0x2a4>)
 8000874:	f000 fc70 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000878:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800088a:	230a      	movs	r3, #10
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	4819      	ldr	r0, [pc, #100]	; (80008fc <MX_GPIO_Init+0x2b0>)
 8000896:	f000 fc5f 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800089a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ac:	4619      	mov	r1, r3
 80008ae:	4813      	ldr	r0, [pc, #76]	; (80008fc <MX_GPIO_Init+0x2b0>)
 80008b0:	f000 fc52 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ba:	2302      	movs	r3, #2
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c2:	2303      	movs	r3, #3
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c6:	230b      	movs	r3, #11
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_GPIO_Init+0x2a4>)
 80008d2:	f000 fc41 	bl	8001158 <HAL_GPIO_Init>

}
 80008d6:	bf00      	nop
 80008d8:	3738      	adds	r7, #56	; 0x38
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40021400 	.word	0x40021400
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	10110000 	.word	0x10110000
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40020c00 	.word	0x40020c00

08000904 <SPI_Accel_Init>:

/* USER CODE BEGIN 4 */

static void SPI_Accel_Init()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	//Initialize SPI4 on appropriate pins with a clock rate of 1MHz (baudrate prescaler of 16/ 1000 Kilobits per second)
	//Carries 8 bits of data and initialized on mode 3

	SPI_Init(4,2,8,1000);
 8000908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090c:	2208      	movs	r2, #8
 800090e:	2102      	movs	r1, #2
 8000910:	2004      	movs	r0, #4
 8000912:	f000 f81d 	bl	8000950 <SPI_Init>

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
	...

0800091c <SPI_Accel_Transmit_Receive>:

static void SPI_Accel_Transmit_Receive(char *Tx_buf, char *Rx_buf, uint8_t buf_len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af02      	add	r7, sp, #8
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	71fb      	strb	r3, [r7, #7]
	SPI_Transmit_Receive(&hspi4, Tx_buf, Rx_buf, buf_len, SPI4_SS_GPIO_Port, SPI4_SS_Pin);
 800092a:	79fa      	ldrb	r2, [r7, #7]
 800092c:	2310      	movs	r3, #16
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <SPI_Accel_Transmit_Receive+0x2c>)
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	4613      	mov	r3, r2
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	68f9      	ldr	r1, [r7, #12]
 800093a:	4804      	ldr	r0, [pc, #16]	; (800094c <SPI_Accel_Transmit_Receive+0x30>)
 800093c:	f000 f97e 	bl	8000c3c <SPI_Transmit_Receive>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	200001c8 	.word	0x200001c8

08000950 <SPI_Init>:

static void SPI_Init(uint8_t desired_SPI, uint8_t SPI_mode, uint8_t SPI_datasize, uint32_t KBits_per_sec)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	460b      	mov	r3, r1
 800095e:	71bb      	strb	r3, [r7, #6]
 8000960:	4613      	mov	r3, r2
 8000962:	717b      	strb	r3, [r7, #5]
	//selects appropriate SPI line, sets the pointer hspi to the address of corresponding SPI line e.g. &hspi1
	SPI_HandleTypeDef *hspi = SPI_Select(desired_SPI);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f8d4 	bl	8000b14 <SPI_Select>
 800096c:	60f8      	str	r0, [r7, #12]

	//Selects appropriate baud rate depending on the desired Kilobits per second
	SPI_Calculate_Baudrate_Prescaler(hspi, KBits_per_sec);
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	68f8      	ldr	r0, [r7, #12]
 8000972:	f000 f85c 	bl	8000a2e <SPI_Calculate_Baudrate_Prescaler>

	//all non changeable (as of now) configurations
	SPI_Default_Configs(hspi);
 8000976:	68f8      	ldr	r0, [r7, #12]
 8000978:	f000 f8a4 	bl	8000ac4 <SPI_Default_Configs>
	//Selects mode (refer to SPI mode table, differs from master/slave mode select)
	SPI_Mode_Select(hspi, SPI_mode);
 800097c:	79bb      	ldrb	r3, [r7, #6]
 800097e:	4619      	mov	r1, r3
 8000980:	68f8      	ldr	r0, [r7, #12]
 8000982:	f000 f923 	bl	8000bcc <SPI_Mode_Select>
	//Sets correct datasize (in number of bits)
	SPI_Datasize_Select(hspi, SPI_datasize);
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	4619      	mov	r1, r3
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 f80c 	bl	80009a8 <SPI_Datasize_Select>

	if (HAL_SPI_Init(hspi) != HAL_OK)
 8000990:	68f8      	ldr	r0, [r7, #12]
 8000992:	f001 fa15 	bl	8001dc0 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SPI_Init+0x50>
	    {
	    	Error_Handler();
 800099c:	f000 f96f 	bl	8000c7e <Error_Handler>
//    hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
//    hspi4.Init.CRCPolynomial = 7;
//    hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
//    hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SPI_Datasize_Select>:

static void SPI_Datasize_Select(SPI_HandleTypeDef *hspi, uint8_t SPI_datasize)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b090      	sub	sp, #64	; 0x40
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	uint32_t datasize_arr[13] = {SPI_DATASIZE_4BIT, SPI_DATASIZE_5BIT, SPI_DATASIZE_6BIT, SPI_DATASIZE_7BIT, SPI_DATASIZE_8BIT, SPI_DATASIZE_9BIT, SPI_DATASIZE_10BIT, SPI_DATASIZE_11BIT, SPI_DATASIZE_12BIT, SPI_DATASIZE_13BIT, SPI_DATASIZE_15BIT, SPI_DATASIZE_16BIT};
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	2234      	movs	r2, #52	; 0x34
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fde5 	bl	800258c <memset>
 80009c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009de:	61bb      	str	r3, [r7, #24]
 80009e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009e4:	61fb      	str	r3, [r7, #28]
 80009e6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80009ea:	623b      	str	r3, [r7, #32]
 80009ec:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
 80009f2:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80009f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009fe:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000a02:	633b      	str	r3, [r7, #48]	; 0x30
 8000a04:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34

	//index adjustment for finding correct datasize in datasizes array
	uint8_t datasize_index = SPI_datasize - 4;
 8000a0a:	78fb      	ldrb	r3, [r7, #3]
 8000a0c:	3b04      	subs	r3, #4
 8000a0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	hspi->Init.DataSize = datasize_arr[datasize_index];
 8000a12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000a1c:	4413      	add	r3, r2
 8000a1e:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60da      	str	r2, [r3, #12]
}
 8000a26:	bf00      	nop
 8000a28:	3740      	adds	r7, #64	; 0x40
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <SPI_Calculate_Baudrate_Prescaler>:

static void SPI_Calculate_Baudrate_Prescaler(SPI_HandleTypeDef *hspi, uint32_t KBits_per_sec)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b084      	sub	sp, #16
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
 8000a36:	6039      	str	r1, [r7, #0]
	uint32_t quotient = HAL_RCC_GetSysClockFreq()/(KBits_per_sec*1000);
 8000a38:	f001 f8ec 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8000a3c:	4601      	mov	r1, r0
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a4c:	60fb      	str	r3, [r7, #12]

	if (quotient <=2)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	2b02      	cmp	r3, #2
 8000a52:	d803      	bhi.n	8000a5c <SPI_Calculate_Baudrate_Prescaler+0x2e>
	{
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]

	else
	{
		//Error handling
	}
}
 8000a5a:	e02f      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=4)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b04      	cmp	r3, #4
 8000a60:	d803      	bhi.n	8000a6a <SPI_Calculate_Baudrate_Prescaler+0x3c>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2208      	movs	r2, #8
 8000a66:	61da      	str	r2, [r3, #28]
}
 8000a68:	e028      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=8)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d803      	bhi.n	8000a78 <SPI_Calculate_Baudrate_Prescaler+0x4a>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2210      	movs	r2, #16
 8000a74:	61da      	str	r2, [r3, #28]
}
 8000a76:	e021      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=16)
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b10      	cmp	r3, #16
 8000a7c:	d803      	bhi.n	8000a86 <SPI_Calculate_Baudrate_Prescaler+0x58>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2218      	movs	r2, #24
 8000a82:	61da      	str	r2, [r3, #28]
}
 8000a84:	e01a      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=32)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b20      	cmp	r3, #32
 8000a8a:	d803      	bhi.n	8000a94 <SPI_Calculate_Baudrate_Prescaler+0x66>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2220      	movs	r2, #32
 8000a90:	61da      	str	r2, [r3, #28]
}
 8000a92:	e013      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=64)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b40      	cmp	r3, #64	; 0x40
 8000a98:	d803      	bhi.n	8000aa2 <SPI_Calculate_Baudrate_Prescaler+0x74>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2228      	movs	r2, #40	; 0x28
 8000a9e:	61da      	str	r2, [r3, #28]
}
 8000aa0:	e00c      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=128)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	2b80      	cmp	r3, #128	; 0x80
 8000aa6:	d803      	bhi.n	8000ab0 <SPI_Calculate_Baudrate_Prescaler+0x82>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2230      	movs	r2, #48	; 0x30
 8000aac:	61da      	str	r2, [r3, #28]
}
 8000aae:	e005      	b.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient > 128)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b80      	cmp	r3, #128	; 0x80
 8000ab4:	d902      	bls.n	8000abc <SPI_Calculate_Baudrate_Prescaler+0x8e>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2238      	movs	r2, #56	; 0x38
 8000aba:	61da      	str	r2, [r3, #28]
}
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <SPI_Default_Configs>:

static void SPI_Default_Configs(SPI_HandleTypeDef *hspi)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	hspi->Init.Mode = SPI_MODE_MASTER;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad2:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ae0:	619a      	str	r2, [r3, #24]
	//hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //Function now made to simplify the process
	hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 7;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2207      	movs	r2, #7
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	631a      	str	r2, [r3, #48]	; 0x30
// FLAG ALERT ERROR - not an actual error, but now that i have your attention below should be disabled, just makes it easier to view on logic analyzer
	hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2208      	movs	r2, #8
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SPI_Select>:


//below was removed as a param, kept there to remind myself
//SPI_HandleTypeDef* hspi
static SPI_HandleTypeDef* SPI_Select(uint8_t desired_SPI)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	SPI_HandleTypeDef *hspi;
	switch(desired_SPI)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	2b05      	cmp	r3, #5
 8000b24:	d832      	bhi.n	8000b8c <SPI_Select+0x78>
 8000b26:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <SPI_Select+0x18>)
 8000b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2c:	08000b45 	.word	0x08000b45
 8000b30:	08000b51 	.word	0x08000b51
 8000b34:	08000b5d 	.word	0x08000b5d
 8000b38:	08000b69 	.word	0x08000b69
 8000b3c:	08000b75 	.word	0x08000b75
 8000b40:	08000b81 	.word	0x08000b81
	{
		case(1):
			hspi = &hspi1;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <SPI_Select+0x88>)
 8000b46:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI1;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <SPI_Select+0x8c>)
 8000b4c:	601a      	str	r2, [r3, #0]
			break;
 8000b4e:	e01e      	b.n	8000b8e <SPI_Select+0x7a>
		case(2):
			hspi = &hspi2;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <SPI_Select+0x90>)
 8000b52:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI2;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4a14      	ldr	r2, [pc, #80]	; (8000ba8 <SPI_Select+0x94>)
 8000b58:	601a      	str	r2, [r3, #0]
			break;
 8000b5a:	e018      	b.n	8000b8e <SPI_Select+0x7a>
		case(3):
			hspi = &hspi3;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <SPI_Select+0x98>)
 8000b5e:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI3;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <SPI_Select+0x9c>)
 8000b64:	601a      	str	r2, [r3, #0]
			break;
 8000b66:	e012      	b.n	8000b8e <SPI_Select+0x7a>
		case(4):
			hspi = &hspi4;
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <SPI_Select+0xa0>)
 8000b6a:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI4;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <SPI_Select+0xa4>)
 8000b70:	601a      	str	r2, [r3, #0]
			break;
 8000b72:	e00c      	b.n	8000b8e <SPI_Select+0x7a>
		case(5):
			hspi = &hspi5;
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <SPI_Select+0xa8>)
 8000b76:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI5;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4a11      	ldr	r2, [pc, #68]	; (8000bc0 <SPI_Select+0xac>)
 8000b7c:	601a      	str	r2, [r3, #0]
			break;
 8000b7e:	e006      	b.n	8000b8e <SPI_Select+0x7a>
		case(6):
			hspi = &hspi6;
 8000b80:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <SPI_Select+0xb0>)
 8000b82:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI6;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <SPI_Select+0xb4>)
 8000b88:	601a      	str	r2, [r3, #0]
			break;
 8000b8a:	e000      	b.n	8000b8e <SPI_Select+0x7a>
		default:
			//handle error
			break;
 8000b8c:	bf00      	nop
	}
	return hspi;
 8000b8e:	68fb      	ldr	r3, [r7, #12]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	20000238 	.word	0x20000238
 8000ba0:	40013000 	.word	0x40013000
 8000ba4:	2000002c 	.word	0x2000002c
 8000ba8:	40003800 	.word	0x40003800
 8000bac:	20000160 	.word	0x20000160
 8000bb0:	40003c00 	.word	0x40003c00
 8000bb4:	200001c8 	.word	0x200001c8
 8000bb8:	40013400 	.word	0x40013400
 8000bbc:	20000090 	.word	0x20000090
 8000bc0:	40015000 	.word	0x40015000
 8000bc4:	200000f8 	.word	0x200000f8
 8000bc8:	40015400 	.word	0x40015400

08000bcc <SPI_Mode_Select>:

static void SPI_Mode_Select(SPI_HandleTypeDef *hspi, uint8_t SPI_mode)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
	switch(SPI_mode)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b03      	cmp	r3, #3
 8000bdc:	d826      	bhi.n	8000c2c <SPI_Mode_Select+0x60>
 8000bde:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <SPI_Mode_Select+0x18>)
 8000be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be4:	08000bf5 	.word	0x08000bf5
 8000be8:	08000c03 	.word	0x08000c03
 8000bec:	08000c11 	.word	0x08000c11
 8000bf0:	08000c1f 	.word	0x08000c1f
	{
	case(0):
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
		break;
 8000c00:	e015      	b.n	8000c2e <SPI_Mode_Select+0x62>
	case(1):
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	615a      	str	r2, [r3, #20]
		break;
 8000c0e:	e00e      	b.n	8000c2e <SPI_Mode_Select+0x62>
	case(2):
		hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2202      	movs	r2, #2
 8000c14:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	615a      	str	r2, [r3, #20]
		break;
 8000c1c:	e007      	b.n	8000c2e <SPI_Mode_Select+0x62>
	case(3):
		hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2202      	movs	r2, #2
 8000c22:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	615a      	str	r2, [r3, #20]
		break;
 8000c2a:	e000      	b.n	8000c2e <SPI_Mode_Select+0x62>
	default:
		//handle error
		break;
 8000c2c:	bf00      	nop
	}
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <SPI_Transmit_Receive>:
	HAL_SPI_Transmit(hspi, (uint8_t *)Tx_buf, buf_len, 100);
	HAL_GPIO_WritePin(SS_Port, SS_Pin, GPIO_PIN_SET);
}

static void SPI_Transmit_Receive(SPI_HandleTypeDef *hspi, char *Tx_buf, char *Rx_buf, uint8_t buf_len, GPIO_TypeDef* SS_Port, uint16_t SS_Pin)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
 8000c48:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SS_Port, SS_Pin, GPIO_PIN_RESET);
 8000c4a:	8bbb      	ldrh	r3, [r7, #28]
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	4619      	mov	r1, r3
 8000c50:	69b8      	ldr	r0, [r7, #24]
 8000c52:	f000 fc2b 	bl	80014ac <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, (uint8_t *)Tx_buf, (uint8_t *)Rx_buf, buf_len, 100);
 8000c56:	78fb      	ldrb	r3, [r7, #3]
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	4613      	mov	r3, r2
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68b9      	ldr	r1, [r7, #8]
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	f001 f93d 	bl	8001ee4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SS_Port, SS_Pin, GPIO_PIN_SET);
 8000c6a:	8bbb      	ldrh	r3, [r7, #28]
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4619      	mov	r1, r3
 8000c70:	69b8      	ldr	r0, [r7, #24]
 8000c72:	f000 fc1b 	bl	80014ac <HAL_GPIO_WritePin>
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c82:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <Error_Handler+0x6>
	...

08000c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2e      	ldr	r2, [pc, #184]	; (8000da8 <HAL_SPI_MspInit+0xd8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d128      	bne.n	8000d44 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000cf2:	4b2e      	ldr	r3, [pc, #184]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a2d      	ldr	r2, [pc, #180]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000cf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b2b      	ldr	r3, [pc, #172]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d06:	61bb      	str	r3, [r7, #24]
 8000d08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a27      	ldr	r2, [pc, #156]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d10:	f043 0310 	orr.w	r3, r3, #16
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b25      	ldr	r3, [pc, #148]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d32:	2305      	movs	r3, #5
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	481c      	ldr	r0, [pc, #112]	; (8000db0 <HAL_SPI_MspInit+0xe0>)
 8000d3e:	f000 fa0b 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000d42:	e02d      	b.n	8000da0 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI5)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <HAL_SPI_MspInit+0xe4>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d128      	bne.n	8000da0 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d58:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d6c:	f043 0320 	orr.w	r3, r3, #32
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_SPI_MspInit+0xdc>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d7e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000d90:	2305      	movs	r3, #5
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4807      	ldr	r0, [pc, #28]	; (8000db8 <HAL_SPI_MspInit+0xe8>)
 8000d9c:	f000 f9dc 	bl	8001158 <HAL_GPIO_Init>
}
 8000da0:	bf00      	nop
 8000da2:	3730      	adds	r7, #48	; 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40013400 	.word	0x40013400
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40015000 	.word	0x40015000
 8000db8:	40021400 	.word	0x40021400

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <MemManage_Handler+0x4>

08000dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <BusFault_Handler+0x4>

08000dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <UsageFault_Handler+0x4>

08000dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e08:	f000 f87e 	bl	8000f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <SystemInit+0x28>)
 8000e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <SystemInit+0x28>)
 8000e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SystemInit+0x28>)
 8000e26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
  ldr  r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e66:	f7ff ffd3 	bl	8000e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f001 fb6b 	bl	8002544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fb63 	bl	8000538 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e78:	080025d4 	.word	0x080025d4
  ldr  r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e80:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000e84:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000e88:	200002b0 	.word	0x200002b0

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>

08000e8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e92:	2003      	movs	r0, #3
 8000e94:	f000 f92c 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f000 f805 	bl	8000ea8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e9e:	f7ff fef3 	bl	8000c88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x54>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_InitTick+0x58>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f000 f939 	bl	800113e <HAL_SYSTICK_Config>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e00e      	b.n	8000ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b0f      	cmp	r3, #15
 8000eda:	d80a      	bhi.n	8000ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	2200      	movs	r2, #0
 8000ede:	6879      	ldr	r1, [r7, #4]
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f90f 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_InitTick+0x5c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e000      	b.n	8000ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000004 	.word	0x20000004

08000f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x20>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	461a      	mov	r2, r3
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x24>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4413      	add	r3, r2
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_IncTick+0x24>)
 8000f1a:	6013      	str	r3, [r2, #0]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200002ac 	.word	0x200002ac

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	200002ac 	.word	0x200002ac

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f50:	f7ff ffee 	bl	8000f30 <HAL_GetTick>
 8000f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f60:	d005      	beq.n	8000f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_Delay+0x40>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6e:	bf00      	nop
 8000f70:	f7ff ffde 	bl	8000f30 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f7      	bhi.n	8000f70 <HAL_Delay+0x28>
  {
  }
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000008 	.word	0x20000008

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x40>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00
 8000fd0:	05fa0000 	.word	0x05fa0000

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5c 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e175      	b.n	8001464 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8164 	bne.w	800145e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011aa:	2b11      	cmp	r3, #17
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2b12      	cmp	r3, #18
 80011b4:	d130      	bne.n	8001218 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	2201      	movs	r2, #1
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	091b      	lsrs	r3, r3, #4
 8001202:	f003 0201 	and.w	r2, r3, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x100>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b12      	cmp	r3, #18
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80be 	beq.w	800145e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_GPIO_Init+0x320>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a64      	ldr	r2, [pc, #400]	; (8001478 <HAL_GPIO_Init+0x320>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b62      	ldr	r3, [pc, #392]	; (8001478 <HAL_GPIO_Init+0x320>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012fa:	4a60      	ldr	r2, [pc, #384]	; (800147c <HAL_GPIO_Init+0x324>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a57      	ldr	r2, [pc, #348]	; (8001480 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d037      	beq.n	8001396 <HAL_GPIO_Init+0x23e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a56      	ldr	r2, [pc, #344]	; (8001484 <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d031      	beq.n	8001392 <HAL_GPIO_Init+0x23a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a55      	ldr	r2, [pc, #340]	; (8001488 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d02b      	beq.n	800138e <HAL_GPIO_Init+0x236>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a54      	ldr	r2, [pc, #336]	; (800148c <HAL_GPIO_Init+0x334>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x232>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a53      	ldr	r2, [pc, #332]	; (8001490 <HAL_GPIO_Init+0x338>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x22e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a52      	ldr	r2, [pc, #328]	; (8001494 <HAL_GPIO_Init+0x33c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x22a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a51      	ldr	r2, [pc, #324]	; (8001498 <HAL_GPIO_Init+0x340>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a50      	ldr	r2, [pc, #320]	; (800149c <HAL_GPIO_Init+0x344>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4f      	ldr	r2, [pc, #316]	; (80014a0 <HAL_GPIO_Init+0x348>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a4e      	ldr	r2, [pc, #312]	; (80014a4 <HAL_GPIO_Init+0x34c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x21a>
 800136e:	2309      	movs	r3, #9
 8001370:	e012      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001372:	230a      	movs	r3, #10
 8001374:	e010      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001376:	2308      	movs	r3, #8
 8001378:	e00e      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800137a:	2307      	movs	r3, #7
 800137c:	e00c      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800137e:	2306      	movs	r3, #6
 8001380:	e00a      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001382:	2305      	movs	r3, #5
 8001384:	e008      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001386:	2304      	movs	r3, #4
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800138a:	2303      	movs	r3, #3
 800138c:	e004      	b.n	8001398 <HAL_GPIO_Init+0x240>
 800138e:	2302      	movs	r3, #2
 8001390:	e002      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001392:	2301      	movs	r3, #1
 8001394:	e000      	b.n	8001398 <HAL_GPIO_Init+0x240>
 8001396:	2300      	movs	r3, #0
 8001398:	69fa      	ldr	r2, [r7, #28]
 800139a:	f002 0203 	and.w	r2, r2, #3
 800139e:	0092      	lsls	r2, r2, #2
 80013a0:	4093      	lsls	r3, r2
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80013a8:	4934      	ldr	r1, [pc, #208]	; (800147c <HAL_GPIO_Init+0x324>)
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	089b      	lsrs	r3, r3, #2
 80013ae:	3302      	adds	r3, #2
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013da:	4a33      	ldr	r2, [pc, #204]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <HAL_GPIO_Init+0x350>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140a:	4b27      	ldr	r3, [pc, #156]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800142e:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <HAL_GPIO_Init+0x350>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	4313      	orrs	r3, r2
 8001456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_GPIO_Init+0x350>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	61fb      	str	r3, [r7, #28]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	2b0f      	cmp	r3, #15
 8001468:	f67f ae86 	bls.w	8001178 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800146c:	bf00      	nop
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40022400 	.word	0x40022400
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e29b      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8087 	beq.w	8001612 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001504:	4b96      	ldr	r3, [pc, #600]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
 800150c:	2b04      	cmp	r3, #4
 800150e:	d00c      	beq.n	800152a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001510:	4b93      	ldr	r3, [pc, #588]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d112      	bne.n	8001542 <HAL_RCC_OscConfig+0x62>
 800151c:	4b90      	ldr	r3, [pc, #576]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001528:	d10b      	bne.n	8001542 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152a:	4b8d      	ldr	r3, [pc, #564]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d06c      	beq.n	8001610 <HAL_RCC_OscConfig+0x130>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d168      	bne.n	8001610 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e275      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x7a>
 800154c:	4b84      	ldr	r3, [pc, #528]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a83      	ldr	r2, [pc, #524]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e02e      	b.n	80015b8 <HAL_RCC_OscConfig+0xd8>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d10c      	bne.n	800157c <HAL_RCC_OscConfig+0x9c>
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	4b7c      	ldr	r3, [pc, #496]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7b      	ldr	r2, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001574:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xd8>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0xc0>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b73      	ldr	r3, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a72      	ldr	r2, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xd8>
 80015a0:	4b6f      	ldr	r3, [pc, #444]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a6e      	ldr	r2, [pc, #440]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b6c      	ldr	r3, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6b      	ldr	r2, [pc, #428]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fcb6 	bl	8000f30 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fcb2 	bl	8000f30 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e229      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b61      	ldr	r3, [pc, #388]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xe8>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fca2 	bl	8000f30 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fc9e 	bl	8000f30 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e215      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x110>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d069      	beq.n	80016f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800161e:	4b50      	ldr	r3, [pc, #320]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x190>
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x17a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1e9      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b41      	ldr	r3, [pc, #260]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	493d      	ldr	r1, [pc, #244]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e040      	b.n	80016f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a38      	ldr	r2, [pc, #224]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001684:	f7ff fc54 	bl	8000f30 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168c:	f7ff fc50 	bl	8000f30 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e1c7      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b2d      	ldr	r3, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4929      	ldr	r1, [pc, #164]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
 80016be:	e018      	b.n	80016f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a26      	ldr	r2, [pc, #152]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc30 	bl	8000f30 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc2c 	bl	8000f30 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1a3      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1e      	ldr	r3, [pc, #120]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d038      	beq.n	8001770 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d019      	beq.n	800173a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001712:	f7ff fc0d 	bl	8000f30 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fc09 	bl	8000f30 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e180      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x23a>
 8001738:	e01a      	b.n	8001770 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 800173c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173e:	4a08      	ldr	r2, [pc, #32]	; (8001760 <HAL_RCC_OscConfig+0x280>)
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001746:	f7ff fbf3 	bl	8000f30 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800174e:	f7ff fbef 	bl	8000f30 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d903      	bls.n	8001764 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e166      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
 8001760:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ee      	bne.n	800174e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80a4 	beq.w	80018c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177e:	4b8c      	ldr	r3, [pc, #560]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b89      	ldr	r3, [pc, #548]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a88      	ldr	r2, [pc, #544]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a6:	4b83      	ldr	r3, [pc, #524]	; (80019b4 <HAL_RCC_OscConfig+0x4d4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d118      	bne.n	80017e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017b2:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <HAL_RCC_OscConfig+0x4d4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a7f      	ldr	r2, [pc, #508]	; (80019b4 <HAL_RCC_OscConfig+0x4d4>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7ff fbb7 	bl	8000f30 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7ff fbb3 	bl	8000f30 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e12a      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017d8:	4b76      	ldr	r3, [pc, #472]	; (80019b4 <HAL_RCC_OscConfig+0x4d4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x31a>
 80017ec:	4b70      	ldr	r3, [pc, #448]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f0:	4a6f      	ldr	r2, [pc, #444]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6713      	str	r3, [r2, #112]	; 0x70
 80017f8:	e02d      	b.n	8001856 <HAL_RCC_OscConfig+0x376>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x33c>
 8001802:	4b6b      	ldr	r3, [pc, #428]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	4a6a      	ldr	r2, [pc, #424]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6713      	str	r3, [r2, #112]	; 0x70
 800180e:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a67      	ldr	r2, [pc, #412]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
 800181a:	e01c      	b.n	8001856 <HAL_RCC_OscConfig+0x376>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x35e>
 8001824:	4b62      	ldr	r3, [pc, #392]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001828:	4a61      	ldr	r2, [pc, #388]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6713      	str	r3, [r2, #112]	; 0x70
 8001830:	4b5f      	ldr	r3, [pc, #380]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a5e      	ldr	r2, [pc, #376]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0x376>
 800183e:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	4a5b      	ldr	r2, [pc, #364]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6713      	str	r3, [r2, #112]	; 0x70
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d015      	beq.n	800188a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185e:	f7ff fb67 	bl	8000f30 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fb63 	bl	8000f30 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0d8      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	4b4c      	ldr	r3, [pc, #304]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ee      	beq.n	8001866 <HAL_RCC_OscConfig+0x386>
 8001888:	e014      	b.n	80018b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800188a:	f7ff fb51 	bl	8000f30 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fb4d 	bl	8000f30 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e0c2      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	4b41      	ldr	r3, [pc, #260]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a3c      	ldr	r2, [pc, #240]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80018c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80ae 	beq.w	8001a2c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d06d      	beq.n	80019b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d14b      	bne.n	800197c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80018ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff fb1e 	bl	8000f30 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fb1a 	bl	8000f30 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e091      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	071b      	lsls	r3, r3, #28
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001954:	f7ff faec 	bl	8000f30 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195c:	f7ff fae8 	bl	8000f30 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e05f      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x47c>
 800197a:	e057      	b.n	8001a2c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 8001982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff fad2 	bl	8000f30 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001990:	f7ff face 	bl	8000f30 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e045      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <HAL_RCC_OscConfig+0x4d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x4b0>
 80019ae:	e03d      	b.n	8001a2c <HAL_RCC_OscConfig+0x54c>
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80019b8:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <HAL_RCC_OscConfig+0x558>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d030      	beq.n	8001a28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d129      	bne.n	8001a28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d122      	bne.n	8001a28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d119      	bne.n	8001a28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d10f      	bne.n	8001a28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800

08001a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0d0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b67      	ldr	r3, [pc, #412]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 020f 	bic.w	r2, r3, #15
 8001a6a:	4965      	ldr	r1, [pc, #404]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0b8      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d020      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a9c:	4b59      	ldr	r3, [pc, #356]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001aa6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ab4:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001aba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001abe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac0:	4b50      	ldr	r3, [pc, #320]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	494d      	ldr	r1, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d040      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d115      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07f      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e073      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06b      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b30:	f7ff f9fe 	bl	8000f30 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f9fa 	bl	8000f30 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e053      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d210      	bcs.n	8001b90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 020f 	bic.w	r2, r3, #15
 8001b76:	4922      	ldr	r1, [pc, #136]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e032      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d008      	beq.n	8001bae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4916      	ldr	r1, [pc, #88]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d009      	beq.n	8001bce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	490e      	ldr	r1, [pc, #56]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bce:	f000 f821 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4601      	mov	r1, r0
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x1cc>)
 8001be0:	5cd3      	ldrb	r3, [r2, r3]
 8001be2:	fa21 f303 	lsr.w	r3, r1, r3
 8001be6:	4a09      	ldr	r2, [pc, #36]	; (8001c0c <HAL_RCC_ClockConfig+0x1d0>)
 8001be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <HAL_RCC_ClockConfig+0x1d4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f95a 	bl	8000ea8 <HAL_InitTick>

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00
 8001c04:	40023800 	.word	0x40023800
 8001c08:	080025b4 	.word	0x080025b4
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c2a:	4b63      	ldr	r3, [pc, #396]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	d007      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x32>
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d008      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x38>
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f040 80b4 	bne.w	8001da8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c42:	60bb      	str	r3, [r7, #8]
      break;
 8001c44:	e0b3      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c48:	60bb      	str	r3, [r7, #8]
      break;
 8001c4a:	e0b0      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c4c:	4b5a      	ldr	r3, [pc, #360]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c54:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c56:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d04a      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	f04f 0400 	mov.w	r4, #0
 8001c6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	ea03 0501 	and.w	r5, r3, r1
 8001c78:	ea04 0602 	and.w	r6, r4, r2
 8001c7c:	4629      	mov	r1, r5
 8001c7e:	4632      	mov	r2, r6
 8001c80:	f04f 0300 	mov.w	r3, #0
 8001c84:	f04f 0400 	mov.w	r4, #0
 8001c88:	0154      	lsls	r4, r2, #5
 8001c8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c8e:	014b      	lsls	r3, r1, #5
 8001c90:	4619      	mov	r1, r3
 8001c92:	4622      	mov	r2, r4
 8001c94:	1b49      	subs	r1, r1, r5
 8001c96:	eb62 0206 	sbc.w	r2, r2, r6
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	f04f 0400 	mov.w	r4, #0
 8001ca2:	0194      	lsls	r4, r2, #6
 8001ca4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ca8:	018b      	lsls	r3, r1, #6
 8001caa:	1a5b      	subs	r3, r3, r1
 8001cac:	eb64 0402 	sbc.w	r4, r4, r2
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	f04f 0200 	mov.w	r2, #0
 8001cb8:	00e2      	lsls	r2, r4, #3
 8001cba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cbe:	00d9      	lsls	r1, r3, #3
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4614      	mov	r4, r2
 8001cc4:	195b      	adds	r3, r3, r5
 8001cc6:	eb44 0406 	adc.w	r4, r4, r6
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	02a2      	lsls	r2, r4, #10
 8001cd4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cd8:	0299      	lsls	r1, r3, #10
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4614      	mov	r4, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4621      	mov	r1, r4
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4623      	mov	r3, r4
 8001cec:	f7fe faa4 	bl	8000238 <__aeabi_uldivmod>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e049      	b.n	8001d8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	f04f 0400 	mov.w	r4, #0
 8001d02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	ea03 0501 	and.w	r5, r3, r1
 8001d0e:	ea04 0602 	and.w	r6, r4, r2
 8001d12:	4629      	mov	r1, r5
 8001d14:	4632      	mov	r2, r6
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	f04f 0400 	mov.w	r4, #0
 8001d1e:	0154      	lsls	r4, r2, #5
 8001d20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d24:	014b      	lsls	r3, r1, #5
 8001d26:	4619      	mov	r1, r3
 8001d28:	4622      	mov	r2, r4
 8001d2a:	1b49      	subs	r1, r1, r5
 8001d2c:	eb62 0206 	sbc.w	r2, r2, r6
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	f04f 0400 	mov.w	r4, #0
 8001d38:	0194      	lsls	r4, r2, #6
 8001d3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d3e:	018b      	lsls	r3, r1, #6
 8001d40:	1a5b      	subs	r3, r3, r1
 8001d42:	eb64 0402 	sbc.w	r4, r4, r2
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	00e2      	lsls	r2, r4, #3
 8001d50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d54:	00d9      	lsls	r1, r3, #3
 8001d56:	460b      	mov	r3, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	195b      	adds	r3, r3, r5
 8001d5c:	eb44 0406 	adc.w	r4, r4, r6
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	02a2      	lsls	r2, r4, #10
 8001d6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d6e:	0299      	lsls	r1, r3, #10
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	4621      	mov	r1, r4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0400 	mov.w	r4, #0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4623      	mov	r3, r4
 8001d82:	f7fe fa59 	bl	8000238 <__aeabi_uldivmod>
 8001d86:	4603      	mov	r3, r0
 8001d88:	460c      	mov	r4, r1
 8001d8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	0c1b      	lsrs	r3, r3, #16
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	3301      	adds	r3, #1
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	60bb      	str	r3, [r7, #8]
      break;
 8001da6:	e002      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001daa:	60bb      	str	r3, [r7, #8]
      break;
 8001dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dae:	68bb      	ldr	r3, [r7, #8]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	00f42400 	.word	0x00f42400

08001dc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e084      	b.n	8001edc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d106      	bne.n	8001df2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe ff6f 	bl	8000cd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e08:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e12:	d902      	bls.n	8001e1a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e002      	b.n	8001e20 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001e28:	d007      	beq.n	8001e3a <HAL_SPI_Init+0x7a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e32:	d002      	beq.n	8001e3a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10b      	bne.n	8001e5a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001e4a:	d903      	bls.n	8001e54 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2202      	movs	r2, #2
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
 8001e52:	e002      	b.n	8001e5a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	431a      	orrs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	ea42 0103 	orr.w	r1, r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	0c1b      	lsrs	r3, r3, #16
 8001e9a:	f003 0204 	and.w	r2, r3, #4
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	ea42 0103 	orr.w	r1, r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x26>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e1fb      	b.n	8002302 <HAL_SPI_TransmitReceive+0x41e>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f12:	f7ff f80d 	bl	8000f30 <HAL_GetTick>
 8001f16:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f1e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001f26:	887b      	ldrh	r3, [r7, #2]
 8001f28:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001f2e:	7efb      	ldrb	r3, [r7, #27]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d00e      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x6e>
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f3a:	d106      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <HAL_SPI_TransmitReceive+0x66>
 8001f44:	7efb      	ldrb	r3, [r7, #27]
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d003      	beq.n	8001f52 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001f50:	e1cd      	b.n	80022ee <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x80>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <HAL_SPI_TransmitReceive+0x80>
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001f6a:	e1c0      	b.n	80022ee <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d003      	beq.n	8001f80 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2205      	movs	r2, #5
 8001f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	887a      	ldrh	r2, [r7, #2]
 8001f98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	887a      	ldrh	r2, [r7, #2]
 8001fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fc2:	d802      	bhi.n	8001fca <HAL_SPI_TransmitReceive+0xe6>
 8001fc4:	8a3b      	ldrh	r3, [r7, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d908      	bls.n	8001fdc <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	e007      	b.n	8001fec <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fea:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d007      	beq.n	800200a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002012:	d97c      	bls.n	800210e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_SPI_TransmitReceive+0x13e>
 800201c:	8a7b      	ldrh	r3, [r7, #18]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d169      	bne.n	80020f6 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002026:	881a      	ldrh	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	1c9a      	adds	r2, r3, #2
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800203c:	b29b      	uxth	r3, r3
 800203e:	3b01      	subs	r3, #1
 8002040:	b29a      	uxth	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002046:	e056      	b.n	80020f6 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d11b      	bne.n	800208e <HAL_SPI_TransmitReceive+0x1aa>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d016      	beq.n	800208e <HAL_SPI_TransmitReceive+0x1aa>
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	2b01      	cmp	r3, #1
 8002064:	d113      	bne.n	800208e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	881a      	ldrh	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002076:	1c9a      	adds	r2, r3, #2
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002080:	b29b      	uxth	r3, r3
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d11c      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x1f2>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d016      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	b292      	uxth	r2, r2
 80020b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	1c9a      	adds	r2, r3, #2
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020d2:	2301      	movs	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80020d6:	f7fe ff2b 	bl	8000f30 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d807      	bhi.n	80020f6 <HAL_SPI_TransmitReceive+0x212>
 80020e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d003      	beq.n	80020f6 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80020f4:	e0fb      	b.n	80022ee <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1a3      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x164>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d19d      	bne.n	8002048 <HAL_SPI_TransmitReceive+0x164>
 800210c:	e0df      	b.n	80022ce <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_SPI_TransmitReceive+0x23a>
 8002116:	8a7b      	ldrh	r3, [r7, #18]
 8002118:	2b01      	cmp	r3, #1
 800211a:	f040 80cb 	bne.w	80022b4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b01      	cmp	r3, #1
 8002126:	d912      	bls.n	800214e <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	881a      	ldrh	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002138:	1c9a      	adds	r2, r3, #2
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002142:	b29b      	uxth	r3, r3
 8002144:	3b02      	subs	r3, #2
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800214c:	e0b2      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	330c      	adds	r3, #12
 8002158:	7812      	ldrb	r2, [r2, #0]
 800215a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002174:	e09e      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b02      	cmp	r3, #2
 8002182:	d134      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x30a>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d02f      	beq.n	80021ee <HAL_SPI_TransmitReceive+0x30a>
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	2b01      	cmp	r3, #1
 8002192:	d12c      	bne.n	80021ee <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d912      	bls.n	80021c4 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	881a      	ldrh	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ae:	1c9a      	adds	r2, r3, #2
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	3b02      	subs	r3, #2
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021c2:	e012      	b.n	80021ea <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	330c      	adds	r3, #12
 80021ce:	7812      	ldrb	r2, [r2, #0]
 80021d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d148      	bne.n	800228e <HAL_SPI_TransmitReceive+0x3aa>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d042      	beq.n	800228e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	d923      	bls.n	800225c <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	b292      	uxth	r2, r2
 8002220:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	1c9a      	adds	r2, r3, #2
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002232:	b29b      	uxth	r3, r3
 8002234:	3b02      	subs	r3, #2
 8002236:	b29a      	uxth	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b01      	cmp	r3, #1
 8002248:	d81f      	bhi.n	800228a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	e016      	b.n	800228a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f103 020c 	add.w	r2, r3, #12
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800228a:	2301      	movs	r3, #1
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800228e:	f7fe fe4f 	bl	8000f30 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800229a:	429a      	cmp	r2, r3
 800229c:	d803      	bhi.n	80022a6 <HAL_SPI_TransmitReceive+0x3c2>
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d102      	bne.n	80022ac <HAL_SPI_TransmitReceive+0x3c8>
 80022a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d103      	bne.n	80022b4 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80022b2:	e01c      	b.n	80022ee <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f47f af5b 	bne.w	8002176 <HAL_SPI_TransmitReceive+0x292>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f af54 	bne.w	8002176 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 f8f0 	bl	80024b8 <SPI_EndRxTxTransaction>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	661a      	str	r2, [r3, #96]	; 0x60
 80022ea:	e000      	b.n	80022ee <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80022ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80022fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002302:	4618      	mov	r0, r3
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b084      	sub	sp, #16
 800230e:	af00      	add	r7, sp, #0
 8002310:	60f8      	str	r0, [r7, #12]
 8002312:	60b9      	str	r1, [r7, #8]
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4613      	mov	r3, r2
 8002318:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800231a:	e04c      	b.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002322:	d048      	beq.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002324:	f7fe fe04 	bl	8000f30 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d902      	bls.n	800233a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d13d      	bne.n	80023b6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002352:	d111      	bne.n	8002378 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800235c:	d004      	beq.n	8002368 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002366:	d107      	bne.n	8002378 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002380:	d10f      	bne.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e00f      	b.n	80023d6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4013      	ands	r3, r2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	461a      	mov	r2, r3
 80023ce:	79fb      	ldrb	r3, [r7, #7]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1a3      	bne.n	800231c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b084      	sub	sp, #16
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80023ec:	e057      	b.n	800249e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023f4:	d106      	bne.n	8002404 <SPI_WaitFifoStateUntilTimeout+0x26>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d103      	bne.n	8002404 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	330c      	adds	r3, #12
 8002402:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800240a:	d048      	beq.n	800249e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800240c:	f7fe fd90 	bl	8000f30 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d902      	bls.n	8002422 <SPI_WaitFifoStateUntilTimeout+0x44>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d13d      	bne.n	800249e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002430:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800243a:	d111      	bne.n	8002460 <SPI_WaitFifoStateUntilTimeout+0x82>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002444:	d004      	beq.n	8002450 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244e:	d107      	bne.n	8002460 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800245e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002468:	d10f      	bne.n	800248a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002488:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e008      	b.n	80024b0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4013      	ands	r3, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d19f      	bne.n	80023ee <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff84 	bl	80023de <SPI_WaitFifoStateUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e027      	b.n	800253c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2200      	movs	r2, #0
 80024f4:	2180      	movs	r1, #128	; 0x80
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff07 	bl	800230a <SPI_WaitFlagStateUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002506:	f043 0220 	orr.w	r2, r3, #32
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e014      	b.n	800253c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2200      	movs	r2, #0
 800251a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff ff5d 	bl	80023de <SPI_WaitFifoStateUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252e:	f043 0220 	orr.w	r2, r3, #32
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e000      	b.n	800253c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <__libc_init_array>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	4e0d      	ldr	r6, [pc, #52]	; (800257c <__libc_init_array+0x38>)
 8002548:	4c0d      	ldr	r4, [pc, #52]	; (8002580 <__libc_init_array+0x3c>)
 800254a:	1ba4      	subs	r4, r4, r6
 800254c:	10a4      	asrs	r4, r4, #2
 800254e:	2500      	movs	r5, #0
 8002550:	42a5      	cmp	r5, r4
 8002552:	d109      	bne.n	8002568 <__libc_init_array+0x24>
 8002554:	4e0b      	ldr	r6, [pc, #44]	; (8002584 <__libc_init_array+0x40>)
 8002556:	4c0c      	ldr	r4, [pc, #48]	; (8002588 <__libc_init_array+0x44>)
 8002558:	f000 f820 	bl	800259c <_init>
 800255c:	1ba4      	subs	r4, r4, r6
 800255e:	10a4      	asrs	r4, r4, #2
 8002560:	2500      	movs	r5, #0
 8002562:	42a5      	cmp	r5, r4
 8002564:	d105      	bne.n	8002572 <__libc_init_array+0x2e>
 8002566:	bd70      	pop	{r4, r5, r6, pc}
 8002568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800256c:	4798      	blx	r3
 800256e:	3501      	adds	r5, #1
 8002570:	e7ee      	b.n	8002550 <__libc_init_array+0xc>
 8002572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002576:	4798      	blx	r3
 8002578:	3501      	adds	r5, #1
 800257a:	e7f2      	b.n	8002562 <__libc_init_array+0x1e>
 800257c:	080025cc 	.word	0x080025cc
 8002580:	080025cc 	.word	0x080025cc
 8002584:	080025cc 	.word	0x080025cc
 8002588:	080025d0 	.word	0x080025d0

0800258c <memset>:
 800258c:	4402      	add	r2, r0
 800258e:	4603      	mov	r3, r0
 8002590:	4293      	cmp	r3, r2
 8002592:	d100      	bne.n	8002596 <memset+0xa>
 8002594:	4770      	bx	lr
 8002596:	f803 1b01 	strb.w	r1, [r3], #1
 800259a:	e7f9      	b.n	8002590 <memset+0x4>

0800259c <_init>:
 800259c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259e:	bf00      	nop
 80025a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a2:	bc08      	pop	{r3}
 80025a4:	469e      	mov	lr, r3
 80025a6:	4770      	bx	lr

080025a8 <_fini>:
 80025a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025aa:	bf00      	nop
 80025ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ae:	bc08      	pop	{r3}
 80025b0:	469e      	mov	lr, r3
 80025b2:	4770      	bx	lr
