
SPI_Receive_Test_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005848  08005848  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005850  08005850  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005850  08005850  00015850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005854  08005854  00015854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000070  080058c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  080058c8  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5f4  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ace  00000000  00000000  0002d692  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d00  00000000  00000000  0002f160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  0002fe60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000282f1  00000000  00000000  00030a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a24f  00000000  00000000  00058d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f8fbf  00000000  00000000  00062fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bf87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003de0  00000000  00000000  0015c004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08005294 	.word	0x08005294

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08005294 	.word	0x08005294

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param Prescaler, Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init,
  * @retval None
  */
static void MX_TIM1_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b09c      	sub	sp, #112	; 0x70
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	4608      	mov	r0, r1
 80005ea:	4611      	mov	r1, r2
 80005ec:	461a      	mov	r2, r3
 80005ee:	4603      	mov	r3, r0
 80005f0:	70fb      	strb	r3, [r7, #3]
 80005f2:	460b      	mov	r3, r1
 80005f4:	70bb      	strb	r3, [r7, #2]
 80005f6:	4613      	mov	r3, r2
 80005f8:	707b      	strb	r3, [r7, #1]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	222c      	movs	r2, #44	; 0x2c
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f003 ff43 	bl	80044bc <memset>

  htim1.Init.Prescaler = prescaler;
 8000636:	4a57      	ldr	r2, [pc, #348]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	6053      	str	r3, [r2, #4]
  htim1.Init.Period = COUNTER_PERIOD;
 800063c:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000640:	461a      	mov	r2, r3
 8000642:	4b54      	ldr	r3, [pc, #336]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000644:	60da      	str	r2, [r3, #12]

  htim1.Instance = TIM1;
 8000646:	4b53      	ldr	r3, [pc, #332]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000648:	4a53      	ldr	r2, [pc, #332]	; (8000798 <MX_TIM1_Init+0x1b8>)
 800064a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = prescaler;
 800064c:	4a51      	ldr	r2, [pc, #324]	; (8000794 <MX_TIM1_Init+0x1b4>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6053      	str	r3, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = COUNTER_PERIOD;
 8000658:	f644 631f 	movw	r3, #19999	; 0x4e1f
 800065c:	461a      	mov	r2, r3
 800065e:	4b4d      	ldr	r3, [pc, #308]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000668:	4b4a      	ldr	r3, [pc, #296]	; (8000794 <MX_TIM1_Init+0x1b4>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000674:	4847      	ldr	r0, [pc, #284]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000676:	f002 fe37 	bl	80032e8 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000680:	f000 ff26 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000688:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800068e:	4619      	mov	r1, r3
 8000690:	4840      	ldr	r0, [pc, #256]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000692:	f003 f965 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 800069c:	f000 ff18 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a0:	483c      	ldr	r0, [pc, #240]	; (8000794 <MX_TIM1_Init+0x1b4>)
 80006a2:	f002 fef1 	bl	8003488 <HAL_TIM_PWM_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80006ac:	f000 ff10 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c0:	4619      	mov	r1, r3
 80006c2:	4834      	ldr	r0, [pc, #208]	; (8000794 <MX_TIM1_Init+0x1b4>)
 80006c4:	f003 fdc4 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80006ce:	f000 feff 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d2:	2360      	movs	r3, #96	; 0x60
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	653b      	str	r3, [r7, #80]	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000706:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	4619      	mov	r1, r3
 8000724:	481b      	ldr	r0, [pc, #108]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000726:	f003 fe21 	bl	800436c <HAL_TIMEx_ConfigBreakDeadTime>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 8000730:	f000 fece 	bl	80014d0 <Error_Handler>
  }

  //Channel configuration
  if (channel_1==1)
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d106      	bne.n	8000748 <MX_TIM1_Init+0x168>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 800073a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	4814      	ldr	r0, [pc, #80]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000744:	f002 fffc 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 8000748:	78bb      	ldrb	r3, [r7, #2]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d106      	bne.n	800075c <MX_TIM1_Init+0x17c>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2);
 800074e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000752:	2204      	movs	r2, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480f      	ldr	r0, [pc, #60]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000758:	f002 fff2 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 800075c:	787b      	ldrb	r3, [r7, #1]
 800075e:	2b01      	cmp	r3, #1
 8000760:	d106      	bne.n	8000770 <MX_TIM1_Init+0x190>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3);
 8000762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000766:	2208      	movs	r2, #8
 8000768:	4619      	mov	r1, r3
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <MX_TIM1_Init+0x1b4>)
 800076c:	f002 ffe8 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 8000770:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000774:	2b01      	cmp	r3, #1
 8000776:	d106      	bne.n	8000786 <MX_TIM1_Init+0x1a6>
  {
  	  HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4);
 8000778:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800077c:	220c      	movs	r2, #12
 800077e:	4619      	mov	r1, r3
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000782:	f002 ffdd 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000786:	4803      	ldr	r0, [pc, #12]	; (8000794 <MX_TIM1_Init+0x1b4>)
 8000788:	f000 ff2e 	bl	80015e8 <HAL_TIM_MspPostInit>
}
 800078c:	bf00      	nop
 800078e:	3770      	adds	r7, #112	; 0x70
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200002bc 	.word	0x200002bc
 8000798:	40010000 	.word	0x40010000

0800079c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param Prescaler, Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init,
  * @retval None
  */
static void MX_TIM2_Init(uint32_t prescaler, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b090      	sub	sp, #64	; 0x40
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
 80007a4:	4608      	mov	r0, r1
 80007a6:	4611      	mov	r1, r2
 80007a8:	461a      	mov	r2, r3
 80007aa:	4603      	mov	r3, r0
 80007ac:	70fb      	strb	r3, [r7, #3]
 80007ae:	460b      	mov	r3, r1
 80007b0:	70bb      	strb	r3, [r7, #2]
 80007b2:	4613      	mov	r3, r2
 80007b4:	707b      	strb	r3, [r7, #1]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
 80007e0:	615a      	str	r2, [r3, #20]
 80007e2:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80007e4:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <MX_TIM2_Init+0x13c>)
 80007e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = prescaler;
 80007ec:	4a3a      	ldr	r2, [pc, #232]	; (80008d8 <MX_TIM2_Init+0x13c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <MX_TIM2_Init+0x13c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = COUNTER_PERIOD;
 80007f8:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MX_TIM2_Init+0x13c>)
 8000800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <MX_TIM2_Init+0x13c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <MX_TIM2_Init+0x13c>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080e:	4832      	ldr	r0, [pc, #200]	; (80008d8 <MX_TIM2_Init+0x13c>)
 8000810:	f002 fd6a 	bl	80032e8 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800081a:	f000 fe59 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000828:	4619      	mov	r1, r3
 800082a:	482b      	ldr	r0, [pc, #172]	; (80008d8 <MX_TIM2_Init+0x13c>)
 800082c:	f003 f898 	bl	8003960 <HAL_TIM_ConfigClockSource>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000836:	f000 fe4b 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800083a:	4827      	ldr	r0, [pc, #156]	; (80008d8 <MX_TIM2_Init+0x13c>)
 800083c:	f002 fe24 	bl	8003488 <HAL_TIM_PWM_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000846:	f000 fe43 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	481f      	ldr	r0, [pc, #124]	; (80008d8 <MX_TIM2_Init+0x13c>)
 800085a:	f003 fcf9 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000864:	f000 fe34 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	; 0x60
 800086a:	60bb      	str	r3, [r7, #8]
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	61bb      	str	r3, [r7, #24]

  //Channel configuration
  if (channel_1==1)
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d106      	bne.n	800088c <MX_TIM2_Init+0xf0>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1);
 800087e:	f107 0308 	add.w	r3, r7, #8
 8000882:	2200      	movs	r2, #0
 8000884:	4619      	mov	r1, r3
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <MX_TIM2_Init+0x13c>)
 8000888:	f002 ff5a 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_2==1)
 800088c:	78bb      	ldrb	r3, [r7, #2]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d106      	bne.n	80008a0 <MX_TIM2_Init+0x104>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2);
 8000892:	f107 0308 	add.w	r3, r7, #8
 8000896:	2204      	movs	r2, #4
 8000898:	4619      	mov	r1, r3
 800089a:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_TIM2_Init+0x13c>)
 800089c:	f002 ff50 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_3==1)
 80008a0:	787b      	ldrb	r3, [r7, #1]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d106      	bne.n	80008b4 <MX_TIM2_Init+0x118>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2208      	movs	r2, #8
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_TIM2_Init+0x13c>)
 80008b0:	f002 ff46 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }
  if (channel_4==1)
 80008b4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d106      	bne.n	80008ca <MX_TIM2_Init+0x12e>
  {
	  HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4);
 80008bc:	f107 0308 	add.w	r3, r7, #8
 80008c0:	220c      	movs	r2, #12
 80008c2:	4619      	mov	r1, r3
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_TIM2_Init+0x13c>)
 80008c6:	f002 ff3b 	bl	8003740 <HAL_TIM_PWM_ConfigChannel>
  }

  HAL_TIM_MspPostInit(&htim2);
 80008ca:	4803      	ldr	r0, [pc, #12]	; (80008d8 <MX_TIM2_Init+0x13c>)
 80008cc:	f000 fe8c 	bl	80015e8 <HAL_TIM_MspPostInit>
}
 80008d0:	bf00      	nop
 80008d2:	3740      	adds	r7, #64	; 0x40
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000378 	.word	0x20000378

080008dc <Timer_Init_Base>:
  * @brief Initialize timer n on channel m for s milli seconds with ISR
  * @param Timer number, period (milliseconds), Trigger the Interrupt Service Routine(2=True 1=False), Channel 1 init, Channel 2 init, Channel 3 init, Channel 4 init, ISR_period (milliseconds)
  * @retval None
  */
static void Timer_Init_Base(uint8_t timer, uint16_t period, uint8_t do_trigger_ISR, uint8_t channel_1, uint8_t channel_2, uint8_t channel_3, uint8_t channel_4, uint16_t ISR_period)
{
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b087      	sub	sp, #28
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	4623      	mov	r3, r4
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	4603      	mov	r3, r0
 80008f0:	80bb      	strh	r3, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	71bb      	strb	r3, [r7, #6]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70fb      	strb	r3, [r7, #3]
	//Checks to see that all arguments passed to the function are valid (*note that -1 evaluates to 255)
	if ((timer >= 1 && timer <= 2) && (period > 0 && period < 65536) && (do_trigger_ISR == 255 || do_trigger_ISR == 1 || do_trigger_ISR == 0) && (channel_1 == 255 || channel_1 == 1 || channel_1 == 0) && (channel_2 == 255 || channel_2 == 1 || channel_2 == 0) && (channel_3 == 255 || channel_3 == 1 || channel_3 == 0) && (channel_4 == 255 || channel_4 == 1 || channel_4 == 0) && ISR_period % period == 0)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	f000 808c 	beq.w	8000a1a <Timer_Init_Base+0x13e>
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	2b02      	cmp	r3, #2
 8000906:	f200 8088 	bhi.w	8000a1a <Timer_Init_Base+0x13e>
 800090a:	88bb      	ldrh	r3, [r7, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	f000 8084 	beq.w	8000a1a <Timer_Init_Base+0x13e>
 8000912:	79bb      	ldrb	r3, [r7, #6]
 8000914:	2bff      	cmp	r3, #255	; 0xff
 8000916:	d005      	beq.n	8000924 <Timer_Init_Base+0x48>
 8000918:	79bb      	ldrb	r3, [r7, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d002      	beq.n	8000924 <Timer_Init_Base+0x48>
 800091e:	79bb      	ldrb	r3, [r7, #6]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d17a      	bne.n	8000a1a <Timer_Init_Base+0x13e>
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d005      	beq.n	8000936 <Timer_Init_Base+0x5a>
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d002      	beq.n	8000936 <Timer_Init_Base+0x5a>
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d171      	bne.n	8000a1a <Timer_Init_Base+0x13e>
 8000936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800093a:	2bff      	cmp	r3, #255	; 0xff
 800093c:	d007      	beq.n	800094e <Timer_Init_Base+0x72>
 800093e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d003      	beq.n	800094e <Timer_Init_Base+0x72>
 8000946:	f897 3020 	ldrb.w	r3, [r7, #32]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d165      	bne.n	8000a1a <Timer_Init_Base+0x13e>
 800094e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000952:	2bff      	cmp	r3, #255	; 0xff
 8000954:	d007      	beq.n	8000966 <Timer_Init_Base+0x8a>
 8000956:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800095a:	2b01      	cmp	r3, #1
 800095c:	d003      	beq.n	8000966 <Timer_Init_Base+0x8a>
 800095e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000962:	2b00      	cmp	r3, #0
 8000964:	d159      	bne.n	8000a1a <Timer_Init_Base+0x13e>
 8000966:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800096a:	2bff      	cmp	r3, #255	; 0xff
 800096c:	d007      	beq.n	800097e <Timer_Init_Base+0xa2>
 800096e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000972:	2b01      	cmp	r3, #1
 8000974:	d003      	beq.n	800097e <Timer_Init_Base+0xa2>
 8000976:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800097a:	2b00      	cmp	r3, #0
 800097c:	d14d      	bne.n	8000a1a <Timer_Init_Base+0x13e>
 800097e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000980:	88ba      	ldrh	r2, [r7, #4]
 8000982:	fbb3 f1f2 	udiv	r1, r3, r2
 8000986:	fb02 f201 	mul.w	r2, r2, r1
 800098a:	1a9b      	subs	r3, r3, r2
 800098c:	b29b      	uxth	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d143      	bne.n	8000a1a <Timer_Init_Base+0x13e>
	{
		uint32_t prescaler = Calculate_Prescaler(period); //max period value is 2^16-1
 8000992:	88bb      	ldrh	r3, [r7, #4]
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f8c5 	bl	8000b24 <Calculate_Prescaler>
 800099a:	60f8      	str	r0, [r7, #12]
		Calculate_Timer_Period_Multiplier(timer, period, ISR_period); //This allows you to slow down the ISR_period in relation to the timer period
 800099c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800099e:	88b9      	ldrh	r1, [r7, #4]
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f8f0 	bl	8000b88 <Calculate_Timer_Period_Multiplier>

		switch (timer)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d002      	beq.n	80009b4 <Timer_Init_Base+0xd8>
 80009ae:	2b02      	cmp	r3, #2
 80009b0:	d016      	beq.n	80009e0 <Timer_Init_Base+0x104>
 80009b2:	e02b      	b.n	8000a0c <Timer_Init_Base+0x130>
		{
			case (1):
				timer_1_repetition_counter = 0; //Because the timer is being reinitialized the timer count must be reset
 80009b4:	4b51      	ldr	r3, [pc, #324]	; (8000afc <Timer_Init_Base+0x220>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	801a      	strh	r2, [r3, #0]
				MX_TIM1_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 80009ba:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80009be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80009c2:	78f9      	ldrb	r1, [r7, #3]
 80009c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	4603      	mov	r3, r0
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f7ff fe07 	bl	80005e0 <MX_TIM1_Init>
				if(do_trigger_ISR==1)
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d122      	bne.n	8000a1e <Timer_Init_Base+0x142>
				{
					HAL_TIM_Base_Start_IT(&htim1);
 80009d8:	4849      	ldr	r0, [pc, #292]	; (8000b00 <Timer_Init_Base+0x224>)
 80009da:	f002 fcdd 	bl	8003398 <HAL_TIM_Base_Start_IT>
				}
				break;
 80009de:	e01e      	b.n	8000a1e <Timer_Init_Base+0x142>
			case (2):
				timer_2_repetition_counter = 0;
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <Timer_Init_Base+0x228>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	801a      	strh	r2, [r3, #0]
				MX_TIM2_Init(prescaler,channel_1,channel_2,channel_3,channel_4);
 80009e6:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80009ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 80009ee:	78f9      	ldrb	r1, [r7, #3]
 80009f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	4603      	mov	r3, r0
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff fecf 	bl	800079c <MX_TIM2_Init>
				if(do_trigger_ISR==1)
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d10e      	bne.n	8000a22 <Timer_Init_Base+0x146>
						{
							HAL_TIM_Base_Start_IT(&htim2);
 8000a04:	4840      	ldr	r0, [pc, #256]	; (8000b08 <Timer_Init_Base+0x22c>)
 8000a06:	f002 fcc7 	bl	8003398 <HAL_TIM_Base_Start_IT>
						}
				break;
 8000a0a:	e00a      	b.n	8000a22 <Timer_Init_Base+0x146>
			default:
				printf("'Timer_Init(%d, %d, ...)' - This is the default message for timer switch, check timer_pwm_lib.h\n", timer, period);
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	88ba      	ldrh	r2, [r7, #4]
 8000a10:	4619      	mov	r1, r3
 8000a12:	483e      	ldr	r0, [pc, #248]	; (8000b0c <Timer_Init_Base+0x230>)
 8000a14:	f003 fd5a 	bl	80044cc <iprintf>
 8000a18:	e004      	b.n	8000a24 <Timer_Init_Base+0x148>

		}
	}
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <Timer_Init_Base+0x148>
				break;
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <Timer_Init_Base+0x148>
				break;
 8000a22:	bf00      	nop

	//Argument specific error statements
	if (!(timer >= 1 && timer <= 2))
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <Timer_Init_Base+0x154>
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d905      	bls.n	8000a3c <Timer_Init_Base+0x160>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid timer argument. Should be either '1' or '2'.\n", timer, period);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	4619      	mov	r1, r3
 8000a36:	4836      	ldr	r0, [pc, #216]	; (8000b10 <Timer_Init_Base+0x234>)
 8000a38:	f003 fd48 	bl	80044cc <iprintf>
	}
	if (!(period > 0 && period < 65536))
 8000a3c:	88bb      	ldrh	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d105      	bne.n	8000a4e <Timer_Init_Base+0x172>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid period argument. Should be an int in range of (0,65536).\n", timer, period);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	88ba      	ldrh	r2, [r7, #4]
 8000a46:	4619      	mov	r1, r3
 8000a48:	4832      	ldr	r0, [pc, #200]	; (8000b14 <Timer_Init_Base+0x238>)
 8000a4a:	f003 fd3f 	bl	80044cc <iprintf>
	}
	if (!(do_trigger_ISR == 255 || do_trigger_ISR == 1 || do_trigger_ISR == 0))
 8000a4e:	79bb      	ldrb	r3, [r7, #6]
 8000a50:	2bff      	cmp	r3, #255	; 0xff
 8000a52:	d00b      	beq.n	8000a6c <Timer_Init_Base+0x190>
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d008      	beq.n	8000a6c <Timer_Init_Base+0x190>
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d005      	beq.n	8000a6c <Timer_Init_Base+0x190>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid do_trigger_ISR argument. Should be either '-1' or '1'.\n", timer, period);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	88ba      	ldrh	r2, [r7, #4]
 8000a64:	4619      	mov	r1, r3
 8000a66:	482c      	ldr	r0, [pc, #176]	; (8000b18 <Timer_Init_Base+0x23c>)
 8000a68:	f003 fd30 	bl	80044cc <iprintf>
	}
	if (!(ISR_period % period == 0))
 8000a6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000a6e:	88ba      	ldrh	r2, [r7, #4]
 8000a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a74:	fb02 f201 	mul.w	r2, r2, r1
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d005      	beq.n	8000a8c <Timer_Init_Base+0x1b0>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid ISR_period argument. Should be a multiple of the timer period.\n", timer, period);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	88ba      	ldrh	r2, [r7, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4825      	ldr	r0, [pc, #148]	; (8000b1c <Timer_Init_Base+0x240>)
 8000a88:	f003 fd20 	bl	80044cc <iprintf>
	}
	if (!((channel_1 == 255 || channel_1 == 1 || channel_1 == 0) && (channel_2 == 255 || channel_2 == 1 || channel_2 == 0) && (channel_3 == 255 || channel_3 == 1 || channel_3 == 0) && (channel_4 == 255 || channel_4 == 1 || channel_4 == 0)))
 8000a8c:	78fb      	ldrb	r3, [r7, #3]
 8000a8e:	2bff      	cmp	r3, #255	; 0xff
 8000a90:	d005      	beq.n	8000a9e <Timer_Init_Base+0x1c2>
 8000a92:	78fb      	ldrb	r3, [r7, #3]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d002      	beq.n	8000a9e <Timer_Init_Base+0x1c2>
 8000a98:	78fb      	ldrb	r3, [r7, #3]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d123      	bne.n	8000ae6 <Timer_Init_Base+0x20a>
 8000a9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aa2:	2bff      	cmp	r3, #255	; 0xff
 8000aa4:	d007      	beq.n	8000ab6 <Timer_Init_Base+0x1da>
 8000aa6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d003      	beq.n	8000ab6 <Timer_Init_Base+0x1da>
 8000aae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d117      	bne.n	8000ae6 <Timer_Init_Base+0x20a>
 8000ab6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aba:	2bff      	cmp	r3, #255	; 0xff
 8000abc:	d007      	beq.n	8000ace <Timer_Init_Base+0x1f2>
 8000abe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d003      	beq.n	8000ace <Timer_Init_Base+0x1f2>
 8000ac6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10b      	bne.n	8000ae6 <Timer_Init_Base+0x20a>
 8000ace:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ad2:	2bff      	cmp	r3, #255	; 0xff
 8000ad4:	d00d      	beq.n	8000af2 <Timer_Init_Base+0x216>
 8000ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d009      	beq.n	8000af2 <Timer_Init_Base+0x216>
 8000ade:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d005      	beq.n	8000af2 <Timer_Init_Base+0x216>
	{
		printf("'Timer_Init(%d, %d, ...)' - Invalid channel_x argument. Should be either '-1' or '1'.\n", timer, period);
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	88ba      	ldrh	r2, [r7, #4]
 8000aea:	4619      	mov	r1, r3
 8000aec:	480c      	ldr	r0, [pc, #48]	; (8000b20 <Timer_Init_Base+0x244>)
 8000aee:	f003 fced 	bl	80044cc <iprintf>
	}
}
 8000af2:	bf00      	nop
 8000af4:	3714      	adds	r7, #20
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000008c 	.word	0x2000008c
 8000b00:	200002bc 	.word	0x200002bc
 8000b04:	2000008e 	.word	0x2000008e
 8000b08:	20000378 	.word	0x20000378
 8000b0c:	080052ac 	.word	0x080052ac
 8000b10:	08005310 	.word	0x08005310
 8000b14:	08005364 	.word	0x08005364
 8000b18:	080053c4 	.word	0x080053c4
 8000b1c:	08005420 	.word	0x08005420
 8000b20:	08005484 	.word	0x08005484

08000b24 <Calculate_Prescaler>:
  * @brief Calculate the prescaler necessary to operate desired PWM
  * @param period
  * @retval prescaler
  */
uint32_t Calculate_Prescaler(uint16_t period)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	80fb      	strh	r3, [r7, #6]
	uint32_t prescaler = ((HAL_RCC_GetSysClockFreq()*(float)period)/(COUNTER_PERIOD+1))-1;
 8000b2e:	f001 fd5f 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8000b32:	ee07 0a90 	vmov	s15, r0
 8000b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	ee07 3a90 	vmov	s15, r3
 8000b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000b48:	f644 631f 	movw	r3, #19999	; 0x4e1f
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	ee07 3a90 	vmov	s15, r3
 8000b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000b5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b66:	ee17 3a90 	vmov	r3, s15
 8000b6a:	60fb      	str	r3, [r7, #12]
	prescaler /= 1000;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <Calculate_Prescaler+0x60>)
 8000b70:	fba2 2303 	umull	r2, r3, r2, r3
 8000b74:	099b      	lsrs	r3, r3, #6
 8000b76:	60fb      	str	r3, [r7, #12]
	return prescaler;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3710      	adds	r7, #16
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	10624dd3 	.word	0x10624dd3

08000b88 <Calculate_Timer_Period_Multiplier>:
  * @param timer number, period and ISR_period
  * @retval None
  * @note: copy this into the user code 4 section
  */
static void Calculate_Timer_Period_Multiplier(uint8_t timer,uint16_t period, uint16_t ISR_period)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	460b      	mov	r3, r1
 8000b94:	80bb      	strh	r3, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	807b      	strh	r3, [r7, #2]
	switch (timer)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d002      	beq.n	8000ba6 <Calculate_Timer_Period_Multiplier+0x1e>
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d008      	beq.n	8000bb6 <Calculate_Timer_Period_Multiplier+0x2e>
			break;
		case(2):
			TIMER_2_PERIOD_MULTIPLIER = ISR_period/period;
			break;
	}
}
 8000ba4:	e00f      	b.n	8000bc6 <Calculate_Timer_Period_Multiplier+0x3e>
			TIMER_1_PERIOD_MULTIPLIER = ISR_period/period;
 8000ba6:	887a      	ldrh	r2, [r7, #2]
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	b29a      	uxth	r2, r3
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <Calculate_Timer_Period_Multiplier+0x4c>)
 8000bb2:	801a      	strh	r2, [r3, #0]
			break;
 8000bb4:	e007      	b.n	8000bc6 <Calculate_Timer_Period_Multiplier+0x3e>
			TIMER_2_PERIOD_MULTIPLIER = ISR_period/period;
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	88bb      	ldrh	r3, [r7, #4]
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <Calculate_Timer_Period_Multiplier+0x50>)
 8000bc2:	801a      	strh	r2, [r3, #0]
			break;
 8000bc4:	bf00      	nop
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	20000374 	.word	0x20000374
 8000bd8:	200003c4 	.word	0x200003c4

08000bdc <PWM_Init>:
  * @brief Take initialized timer, channel and desired duty cycle and initialize PWM
  * @param Timer, channel, duty cycle
  * @retval None
  */
static void PWM_Init(uint8_t timer, uint8_t channel, uint8_t duty_cycle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
 8000be6:	460b      	mov	r3, r1
 8000be8:	71bb      	strb	r3, [r7, #6]
 8000bea:	4613      	mov	r3, r2
 8000bec:	717b      	strb	r3, [r7, #5]
	if (timer >= 1 && timer <= 2 && channel >= 1 && channel <= 4 && duty_cycle >= 0 && duty_cycle <= 100)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d075      	beq.n	8000ce0 <PWM_Init+0x104>
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d872      	bhi.n	8000ce0 <PWM_Init+0x104>
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d06f      	beq.n	8000ce0 <PWM_Init+0x104>
 8000c00:	79bb      	ldrb	r3, [r7, #6]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d86c      	bhi.n	8000ce0 <PWM_Init+0x104>
 8000c06:	797b      	ldrb	r3, [r7, #5]
 8000c08:	2b64      	cmp	r3, #100	; 0x64
 8000c0a:	d869      	bhi.n	8000ce0 <PWM_Init+0x104>
	{
		TIM_HandleTypeDef* desired_timer;
		uint32_t desired_channel;

		//Calculate the pulse
		uint16_t ticks_on_per_cycle = Calculate_Ticks_On_Per_Cycle(duty_cycle);
 8000c0c:	797b      	ldrb	r3, [r7, #5]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f898 	bl	8000d44 <Calculate_Ticks_On_Per_Cycle>
 8000c14:	4603      	mov	r3, r0
 8000c16:	81fb      	strh	r3, [r7, #14]

		//Find desired timer
		switch(timer)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d002      	beq.n	8000c24 <PWM_Init+0x48>
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d003      	beq.n	8000c2a <PWM_Init+0x4e>
 8000c22:	e005      	b.n	8000c30 <PWM_Init+0x54>
		{
			case(1):
				desired_timer = &htim1;
 8000c24:	4b40      	ldr	r3, [pc, #256]	; (8000d28 <PWM_Init+0x14c>)
 8000c26:	617b      	str	r3, [r7, #20]
				break;
 8000c28:	e008      	b.n	8000c3c <PWM_Init+0x60>
			case(2):
				desired_timer = &htim2;
 8000c2a:	4b40      	ldr	r3, [pc, #256]	; (8000d2c <PWM_Init+0x150>)
 8000c2c:	617b      	str	r3, [r7, #20]
				break;
 8000c2e:	e005      	b.n	8000c3c <PWM_Init+0x60>
			default:
				printf("'PWM_Init(%d, %d, %d)' - This is the default message for timer switch, check timer_pwm_lib.h.\n", timer, channel, duty_cycle);
 8000c30:	79f9      	ldrb	r1, [r7, #7]
 8000c32:	79ba      	ldrb	r2, [r7, #6]
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	483e      	ldr	r0, [pc, #248]	; (8000d30 <PWM_Init+0x154>)
 8000c38:	f003 fc48 	bl	80044cc <iprintf>
		}

		//Find desired channel
		switch(channel)
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d817      	bhi.n	8000c74 <PWM_Init+0x98>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <PWM_Init+0x70>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c5d 	.word	0x08000c5d
 8000c50:	08000c63 	.word	0x08000c63
 8000c54:	08000c69 	.word	0x08000c69
 8000c58:	08000c6f 	.word	0x08000c6f
		{
			case(1):
				desired_channel = TIM_CHANNEL_1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
				break;
 8000c60:	e00e      	b.n	8000c80 <PWM_Init+0xa4>
			case(2):
				desired_channel = TIM_CHANNEL_2;
 8000c62:	2304      	movs	r3, #4
 8000c64:	613b      	str	r3, [r7, #16]
				break;
 8000c66:	e00b      	b.n	8000c80 <PWM_Init+0xa4>
			case(3):
				desired_channel = TIM_CHANNEL_3;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	613b      	str	r3, [r7, #16]
				break;
 8000c6c:	e008      	b.n	8000c80 <PWM_Init+0xa4>
			case(4):
				desired_channel = TIM_CHANNEL_4;
 8000c6e:	230c      	movs	r3, #12
 8000c70:	613b      	str	r3, [r7, #16]
				break;
 8000c72:	e005      	b.n	8000c80 <PWM_Init+0xa4>
			default:
				printf("'PWM_Init(%d, %d, %d)' - This is the default message for channel switch, check timer_pwm_lib.h.\n", timer, channel, duty_cycle);
 8000c74:	79f9      	ldrb	r1, [r7, #7]
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	797b      	ldrb	r3, [r7, #5]
 8000c7a:	482e      	ldr	r0, [pc, #184]	; (8000d34 <PWM_Init+0x158>)
 8000c7c:	f003 fc26 	bl	80044cc <iprintf>
		}

		//Initiate the PWM and desired duty cycle
		HAL_TIM_PWM_Start(desired_timer, desired_channel);
 8000c80:	6939      	ldr	r1, [r7, #16]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f002 fc62 	bl	800354c <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(desired_timer, desired_channel, ticks_on_per_cycle);
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d104      	bne.n	8000c98 <PWM_Init+0xbc>
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	89fa      	ldrh	r2, [r7, #14]
 8000c94:	635a      	str	r2, [r3, #52]	; 0x34
 8000c96:	e023      	b.n	8000ce0 <PWM_Init+0x104>
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d104      	bne.n	8000ca8 <PWM_Init+0xcc>
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	89fa      	ldrh	r2, [r7, #14]
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca6:	e01b      	b.n	8000ce0 <PWM_Init+0x104>
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d104      	bne.n	8000cb8 <PWM_Init+0xdc>
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	89fa      	ldrh	r2, [r7, #14]
 8000cb4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000cb6:	e013      	b.n	8000ce0 <PWM_Init+0x104>
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	2b0c      	cmp	r3, #12
 8000cbc:	d104      	bne.n	8000cc8 <PWM_Init+0xec>
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	89fa      	ldrh	r2, [r7, #14]
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8000cc6:	e00b      	b.n	8000ce0 <PWM_Init+0x104>
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d104      	bne.n	8000cd8 <PWM_Init+0xfc>
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	89fa      	ldrh	r2, [r7, #14]
 8000cd4:	659a      	str	r2, [r3, #88]	; 0x58
 8000cd6:	e003      	b.n	8000ce0 <PWM_Init+0x104>
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	89fa      	ldrh	r2, [r7, #14]
 8000cde:	65da      	str	r2, [r3, #92]	; 0x5c
	}

	if (!(timer >= 1 && timer <= 2))
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d002      	beq.n	8000cec <PWM_Init+0x110>
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d905      	bls.n	8000cf8 <PWM_Init+0x11c>
		{
			printf("'PWM_Init(%d, %d, %d)' - Invalid timer argument. Should be either '1' or '2'.\n", timer, channel, duty_cycle);
 8000cec:	79f9      	ldrb	r1, [r7, #7]
 8000cee:	79ba      	ldrb	r2, [r7, #6]
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <PWM_Init+0x15c>)
 8000cf4:	f003 fbea 	bl	80044cc <iprintf>
		}
	if (!(channel >= 1 && channel <= 4))
 8000cf8:	79bb      	ldrb	r3, [r7, #6]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <PWM_Init+0x128>
 8000cfe:	79bb      	ldrb	r3, [r7, #6]
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d905      	bls.n	8000d10 <PWM_Init+0x134>
	{
		printf("'PWM_Init(%d, %d, %d)' - Invalid Channel argument. Should be an integer within range [1,4].\n", timer, channel, duty_cycle);
 8000d04:	79f9      	ldrb	r1, [r7, #7]
 8000d06:	79ba      	ldrb	r2, [r7, #6]
 8000d08:	797b      	ldrb	r3, [r7, #5]
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <PWM_Init+0x160>)
 8000d0c:	f003 fbde 	bl	80044cc <iprintf>
	}
	if (!(duty_cycle >= 0 && duty_cycle <= 100))
 8000d10:	797b      	ldrb	r3, [r7, #5]
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d904      	bls.n	8000d20 <PWM_Init+0x144>
	{
		printf("'PWM_Init(.duty_cycle = %d)' - Invalid Duty Cycle argument. Should be within range [0,100].\n", duty_cycle);
 8000d16:	797b      	ldrb	r3, [r7, #5]
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <PWM_Init+0x164>)
 8000d1c:	f003 fbd6 	bl	80044cc <iprintf>
	}
}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200002bc 	.word	0x200002bc
 8000d2c:	20000378 	.word	0x20000378
 8000d30:	080054dc 	.word	0x080054dc
 8000d34:	0800553c 	.word	0x0800553c
 8000d38:	080055a0 	.word	0x080055a0
 8000d3c:	080055f0 	.word	0x080055f0
 8000d40:	08005650 	.word	0x08005650

08000d44 <Calculate_Ticks_On_Per_Cycle>:
  * @brief Calculate the duty cycle in ticks
  * @param duty cycle
  * @retval Ticks per cycle
  */
uint16_t Calculate_Ticks_On_Per_Cycle(uint8_t duty_cycle)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	uint16_t ticks_on_per_cycle;

	ticks_on_per_cycle = (duty_cycle*COUNTER_PERIOD)/100;
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000d54:	fb02 f303 	mul.w	r3, r2, r3
 8000d58:	4a06      	ldr	r2, [pc, #24]	; (8000d74 <Calculate_Ticks_On_Per_Cycle+0x30>)
 8000d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5e:	1152      	asrs	r2, r2, #5
 8000d60:	17db      	asrs	r3, r3, #31
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	81fb      	strh	r3, [r7, #14]

	return ticks_on_per_cycle;
 8000d66:	89fb      	ldrh	r3, [r7, #14]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	51eb851f 	.word	0x51eb851f

08000d78 <SPI_Init>:
{
	SPI_Transmit_Receive(&hspi4, Tx_buf, Rx_buf, buf_len, GPIO_PIN_4, GPIOE);
}

static void SPI_Init(uint8_t desired_SPI, uint8_t SPI_mode, uint8_t SPI_datasize, uint32_t KBits_per_sec, uint8_t MSBFirst)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	4603      	mov	r3, r0
 8000d82:	71fb      	strb	r3, [r7, #7]
 8000d84:	460b      	mov	r3, r1
 8000d86:	71bb      	strb	r3, [r7, #6]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	717b      	strb	r3, [r7, #5]
	//selects appropriate SPI line, sets the pointer hspi to the address of corresponding SPI line e.g. &hspi1
	SPI_HandleTypeDef *hspi = SPI_Select(desired_SPI);
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f8d6 	bl	8000f40 <SPI_Select>
 8000d94:	60f8      	str	r0, [r7, #12]

	//Selects appropriate baud rate depending on the desired Kilobits per second
	SPI_Calculate_Baudrate_Prescaler(hspi, KBits_per_sec);
 8000d96:	6839      	ldr	r1, [r7, #0]
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f861 	bl	8000e60 <SPI_Calculate_Baudrate_Prescaler>

	//all non changeable (as of now) configurations
	SPI_Default_Configs(hspi);
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f000 f8a9 	bl	8000ef6 <SPI_Default_Configs>
	//Selects mode (refer to SPI mode table, differs from master/slave mode select)
	SPI_Mode_Select(hspi, SPI_mode);
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	4619      	mov	r1, r3
 8000da8:	68f8      	ldr	r0, [r7, #12]
 8000daa:	f000 f925 	bl	8000ff8 <SPI_Mode_Select>
	//Sets correct datasize (in number of bits)
	SPI_Datasize_Select(hspi, SPI_datasize);
 8000dae:	797b      	ldrb	r3, [r7, #5]
 8000db0:	4619      	mov	r1, r3
 8000db2:	68f8      	ldr	r0, [r7, #12]
 8000db4:	f000 f811 	bl	8000dda <SPI_Datasize_Select>
	//Selects if the MSB goes first or last
	SPI_MSB_Select(hspi, MSBFirst);
 8000db8:	7e3b      	ldrb	r3, [r7, #24]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f000 f953 	bl	8001068 <SPI_MSB_Select>

	if (HAL_SPI_Init(hspi) != HAL_OK)
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f001 fcea 	bl	800279c <HAL_SPI_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SPI_Init+0x5a>
	    {
	    	Error_Handler();
 8000dce:	f000 fb7f 	bl	80014d0 <Error_Handler>
	    }
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <SPI_Datasize_Select>:

static void SPI_Datasize_Select(SPI_HandleTypeDef *hspi, uint8_t SPI_datasize)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b090      	sub	sp, #64	; 0x40
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	460b      	mov	r3, r1
 8000de4:	70fb      	strb	r3, [r7, #3]
	uint32_t datasize_arr[13] = {SPI_DATASIZE_4BIT, SPI_DATASIZE_5BIT, SPI_DATASIZE_6BIT, SPI_DATASIZE_7BIT, SPI_DATASIZE_8BIT, SPI_DATASIZE_9BIT, SPI_DATASIZE_10BIT, SPI_DATASIZE_11BIT, SPI_DATASIZE_12BIT, SPI_DATASIZE_13BIT, SPI_DATASIZE_15BIT, SPI_DATASIZE_16BIT};
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	2234      	movs	r2, #52	; 0x34
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f003 fb64 	bl	80044bc <memset>
 8000df4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e16:	61fb      	str	r3, [r7, #28]
 8000e18:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000e1c:	623b      	str	r3, [r7, #32]
 8000e1e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
 8000e24:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e30:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8000e34:	633b      	str	r3, [r7, #48]	; 0x30
 8000e36:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34

	//index adjustment for finding correct datasize in datasizes array
	uint8_t datasize_index = SPI_datasize - 4;
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	hspi->Init.DataSize = datasize_arr[datasize_index];
 8000e44:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000e4e:	4413      	add	r3, r2
 8000e50:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	60da      	str	r2, [r3, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3740      	adds	r7, #64	; 0x40
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <SPI_Calculate_Baudrate_Prescaler>:

static void SPI_Calculate_Baudrate_Prescaler(SPI_HandleTypeDef *hspi, uint32_t KBits_per_sec)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
	uint32_t quotient = HAL_RCC_GetSysClockFreq()/(KBits_per_sec*1000);
 8000e6a:	f001 fbc1 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8000e6e:	4601      	mov	r1, r0
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e76:	fb02 f303 	mul.w	r3, r2, r3
 8000e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e7e:	60fb      	str	r3, [r7, #12]

	if (quotient <=2)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d803      	bhi.n	8000e8e <SPI_Calculate_Baudrate_Prescaler+0x2e>
	{
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]

	else
	{
		//Error handling
	}
}
 8000e8c:	e02f      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=4)
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2b04      	cmp	r3, #4
 8000e92:	d803      	bhi.n	8000e9c <SPI_Calculate_Baudrate_Prescaler+0x3c>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2208      	movs	r2, #8
 8000e98:	61da      	str	r2, [r3, #28]
}
 8000e9a:	e028      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=8)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d803      	bhi.n	8000eaa <SPI_Calculate_Baudrate_Prescaler+0x4a>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	61da      	str	r2, [r3, #28]
}
 8000ea8:	e021      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=16)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	2b10      	cmp	r3, #16
 8000eae:	d803      	bhi.n	8000eb8 <SPI_Calculate_Baudrate_Prescaler+0x58>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2218      	movs	r2, #24
 8000eb4:	61da      	str	r2, [r3, #28]
}
 8000eb6:	e01a      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=32)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b20      	cmp	r3, #32
 8000ebc:	d803      	bhi.n	8000ec6 <SPI_Calculate_Baudrate_Prescaler+0x66>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2220      	movs	r2, #32
 8000ec2:	61da      	str	r2, [r3, #28]
}
 8000ec4:	e013      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=64)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b40      	cmp	r3, #64	; 0x40
 8000eca:	d803      	bhi.n	8000ed4 <SPI_Calculate_Baudrate_Prescaler+0x74>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2228      	movs	r2, #40	; 0x28
 8000ed0:	61da      	str	r2, [r3, #28]
}
 8000ed2:	e00c      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient <=128)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b80      	cmp	r3, #128	; 0x80
 8000ed8:	d803      	bhi.n	8000ee2 <SPI_Calculate_Baudrate_Prescaler+0x82>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2230      	movs	r2, #48	; 0x30
 8000ede:	61da      	str	r2, [r3, #28]
}
 8000ee0:	e005      	b.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
	else if (quotient > 128)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2b80      	cmp	r3, #128	; 0x80
 8000ee6:	d902      	bls.n	8000eee <SPI_Calculate_Baudrate_Prescaler+0x8e>
		hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2238      	movs	r2, #56	; 0x38
 8000eec:	61da      	str	r2, [r3, #28]
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <SPI_Default_Configs>:

static void SPI_Default_Configs(SPI_HandleTypeDef *hspi)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
	hspi->Init.Mode = SPI_MODE_MASTER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f04:	605a      	str	r2, [r3, #4]
	hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
	hspi->Init.NSS = SPI_NSS_SOFT;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f12:	619a      	str	r2, [r3, #24]
	//hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16; //Function now made to simplify the process
	//hspi->Init.FirstBit = SPI_FIRSTBIT_MSB; // Find a function to change this
	hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi->Init.CRCPolynomial = 7;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2207      	movs	r2, #7
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	631a      	str	r2, [r3, #48]	; 0x30
// FLAG ALERT ERROR - not an actual error, but now that i have your attention below should be disabled, just makes it easier to view on logic analyzer
	hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2208      	movs	r2, #8
 8000f30:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <SPI_Select>:

//below was removed as a param, kept there to remind myself
//SPI_HandleTypeDef* hspi
static SPI_HandleTypeDef* SPI_Select(uint8_t desired_SPI)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	SPI_HandleTypeDef *hspi;
	switch(desired_SPI)
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d832      	bhi.n	8000fb8 <SPI_Select+0x78>
 8000f52:	a201      	add	r2, pc, #4	; (adr r2, 8000f58 <SPI_Select+0x18>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f71 	.word	0x08000f71
 8000f5c:	08000f7d 	.word	0x08000f7d
 8000f60:	08000f89 	.word	0x08000f89
 8000f64:	08000f95 	.word	0x08000f95
 8000f68:	08000fa1 	.word	0x08000fa1
 8000f6c:	08000fad 	.word	0x08000fad
	{
		case(1):
			hspi = &hspi1;
 8000f70:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <SPI_Select+0x88>)
 8000f72:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI1;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <SPI_Select+0x8c>)
 8000f78:	601a      	str	r2, [r3, #0]
			break;
 8000f7a:	e01e      	b.n	8000fba <SPI_Select+0x7a>
		case(2):
			hspi = &hspi2;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <SPI_Select+0x90>)
 8000f7e:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI2;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <SPI_Select+0x94>)
 8000f84:	601a      	str	r2, [r3, #0]
			break;
 8000f86:	e018      	b.n	8000fba <SPI_Select+0x7a>
		case(3):
			hspi = &hspi3;
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <SPI_Select+0x98>)
 8000f8a:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI3;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <SPI_Select+0x9c>)
 8000f90:	601a      	str	r2, [r3, #0]
			break;
 8000f92:	e012      	b.n	8000fba <SPI_Select+0x7a>
		case(4):
			hspi = &hspi4;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <SPI_Select+0xa0>)
 8000f96:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI4;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <SPI_Select+0xa4>)
 8000f9c:	601a      	str	r2, [r3, #0]
			break;
 8000f9e:	e00c      	b.n	8000fba <SPI_Select+0x7a>
		case(5):
			hspi = &hspi5;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <SPI_Select+0xa8>)
 8000fa2:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI5;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <SPI_Select+0xac>)
 8000fa8:	601a      	str	r2, [r3, #0]
			break;
 8000faa:	e006      	b.n	8000fba <SPI_Select+0x7a>
		case(6):
			hspi = &hspi6;
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <SPI_Select+0xb0>)
 8000fae:	60fb      	str	r3, [r7, #12]
			hspi-> Instance = SPI6;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <SPI_Select+0xb4>)
 8000fb4:	601a      	str	r2, [r3, #0]
			break;
 8000fb6:	e000      	b.n	8000fba <SPI_Select+0x7a>
		default:
			//handle error
			break;
 8000fb8:	bf00      	nop
	}
	return hspi;
 8000fba:	68fb      	ldr	r3, [r7, #12]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3714      	adds	r7, #20
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	20000310 	.word	0x20000310
 8000fcc:	40013000 	.word	0x40013000
 8000fd0:	200000a0 	.word	0x200000a0
 8000fd4:	40003800 	.word	0x40003800
 8000fd8:	200001e8 	.word	0x200001e8
 8000fdc:	40003c00 	.word	0x40003c00
 8000fe0:	20000254 	.word	0x20000254
 8000fe4:	40013400 	.word	0x40013400
 8000fe8:	20000104 	.word	0x20000104
 8000fec:	40015000 	.word	0x40015000
 8000ff0:	2000016c 	.word	0x2000016c
 8000ff4:	40015400 	.word	0x40015400

08000ff8 <SPI_Mode_Select>:

static void SPI_Mode_Select(SPI_HandleTypeDef *hspi, uint8_t SPI_mode)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	70fb      	strb	r3, [r7, #3]
	switch(SPI_mode)
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d826      	bhi.n	8001058 <SPI_Mode_Select+0x60>
 800100a:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <SPI_Mode_Select+0x18>)
 800100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001010:	08001021 	.word	0x08001021
 8001014:	0800102f 	.word	0x0800102f
 8001018:	0800103d 	.word	0x0800103d
 800101c:	0800104b 	.word	0x0800104b
	{
	case(0):
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
		break;
 800102c:	e015      	b.n	800105a <SPI_Mode_Select+0x62>
	case(1):
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	615a      	str	r2, [r3, #20]
		break;
 800103a:	e00e      	b.n	800105a <SPI_Mode_Select+0x62>
	case(2):
		hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2202      	movs	r2, #2
 8001040:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
		break;
 8001048:	e007      	b.n	800105a <SPI_Mode_Select+0x62>
	case(3):
		hspi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2202      	movs	r2, #2
 800104e:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
		break;
 8001056:	e000      	b.n	800105a <SPI_Mode_Select+0x62>
	default:
		//handle error
		break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <SPI_MSB_Select>:

static void SPI_MSB_Select(SPI_HandleTypeDef *hspi, uint8_t MSBFirst)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	switch(MSBFirst)
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <SPI_MSB_Select+0x18>
 800107a:	2b01      	cmp	r3, #1
 800107c:	d004      	beq.n	8001088 <SPI_MSB_Select+0x20>
	case(1):
		hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
		break;
	default:
		//error handling
		break;
 800107e:	e007      	b.n	8001090 <SPI_MSB_Select+0x28>
		hspi->Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2280      	movs	r2, #128	; 0x80
 8001084:	621a      	str	r2, [r3, #32]
		break;
 8001086:	e003      	b.n	8001090 <SPI_MSB_Select+0x28>
		hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
		break;
 800108e:	bf00      	nop

	}
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <SPI_Receive>:

static void SPI_Receive(SPI_HandleTypeDef *hspi, char *Rx_buf, uint8_t buf_len, GPIO_TypeDef* SS_Port, uint16_t SS_Pin)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SS_Port, SS_Pin, GPIO_PIN_RESET);
 80010ac:	8b3b      	ldrh	r3, [r7, #24]
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f000 fee8 	bl	8001e88 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(hspi, (uint8_t *)Rx_buf, buf_len, 100);
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	2364      	movs	r3, #100	; 0x64
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f001 fc16 	bl	80028f2 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SS_Port, SS_Pin, GPIO_PIN_SET);
 80010c6:	8b3b      	ldrh	r3, [r7, #24]
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	6838      	ldr	r0, [r7, #0]
 80010ce:	f000 fedb 	bl	8001e88 <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e2:	f000 fbc2 	bl	800186a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e6:	f000 f85f 	bl	80011a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ea:	f000 f8b9 	bl	8001260 <MX_GPIO_Init>
  //MX_TIM1_Init();
  //MX_SPI4_Init();
  /* USER CODE BEGIN 2 */
  Tx_buf[0]= (uint8_t)1; // will be sent to the arduino
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <main+0xb4>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]

  Timer_Init_Base(1, 1, -1, 1, 1, 1, -1, 1); //initialize timer1 running on channels 1-3 with 1ms period
 80010f4:	2301      	movs	r3, #1
 80010f6:	9303      	str	r3, [sp, #12]
 80010f8:	23ff      	movs	r3, #255	; 0xff
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	2301      	movs	r3, #1
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	2101      	movs	r1, #1
 800110a:	2001      	movs	r0, #1
 800110c:	f7ff fbe6 	bl	80008dc <Timer_Init_Base>
  SPI_Init(4, 0, 8, 1000, 1); //Initialize the SPI4 on mode 0 with 8 bit datasize 1MHz and MSB
 8001110:	2301      	movs	r3, #1
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001118:	2208      	movs	r2, #8
 800111a:	2100      	movs	r1, #0
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff fe2b 	bl	8000d78 <SPI_Init>
  HAL_GPIO_WritePin(SS4_GPIO_Port, SS4_Pin, GPIO_PIN_SET); //Set SS line high
 8001122:	2201      	movs	r2, #1
 8001124:	2110      	movs	r1, #16
 8001126:	481b      	ldr	r0, [pc, #108]	; (8001194 <main+0xb8>)
 8001128:	f000 feae 	bl	8001e88 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//SPI_Tranmit_Receive(&hspi4,&Tx_buf, &Rx_buf, 1, SS4_GPIO_Port, SS4_Pin);
	SPI_Receive(&hspi4, &Rx_buf, 1, SS4_GPIO_Port, SS4_Pin);
 800112c:	2310      	movs	r3, #16
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <main+0xb8>)
 8001132:	2201      	movs	r2, #1
 8001134:	4918      	ldr	r1, [pc, #96]	; (8001198 <main+0xbc>)
 8001136:	4819      	ldr	r0, [pc, #100]	; (800119c <main+0xc0>)
 8001138:	f7ff ffb0 	bl	800109c <SPI_Receive>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (abs(x-Rx_buf[0])>0)
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <main+0xc4>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <main+0xbc>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	bfb8      	it	lt
 800114c:	425b      	neglt	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	dd1a      	ble.n	8001188 <main+0xac>
	{
		x = Rx_buf[0];
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <main+0xbc>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <main+0xc4>)
 8001158:	701a      	strb	r2, [r3, #0]

		if (x<=1)
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <main+0xc4>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d802      	bhi.n	8001168 <main+0x8c>
		{
			x=1;
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <main+0xc4>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
		}

		duty_cycle = 100/(x);
 8001168:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <main+0xc4>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	fb93 f3f2 	sdiv	r3, r3, r2
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <main+0xc8>)
 8001178:	701a      	strb	r2, [r3, #0]
		PWM_Init(1, 1, duty_cycle);
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <main+0xc8>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	2101      	movs	r1, #1
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fd2a 	bl	8000bdc <PWM_Init>
	}
    HAL_Delay(10);
 8001188:	200a      	movs	r0, #10
 800118a:	f000 fbcb 	bl	8001924 <HAL_Delay>
	SPI_Receive(&hspi4, &Rx_buf, 1, SS4_GPIO_Port, SS4_Pin);
 800118e:	e7cd      	b.n	800112c <main+0x50>
 8001190:	200001d0 	.word	0x200001d0
 8001194:	40021000 	.word	0x40021000
 8001198:	2000024c 	.word	0x2000024c
 800119c:	20000254 	.word	0x20000254
 80011a0:	2000009e 	.word	0x2000009e
 80011a4:	200003d0 	.word	0x200003d0

080011a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	2234      	movs	r2, #52	; 0x34
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f003 f980 	bl	80044bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011bc:	f107 0308 	add.w	r3, r7, #8
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xb0>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemClock_Config+0xb0>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <SystemClock_Config+0xb0>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <SystemClock_Config+0xb4>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <SystemClock_Config+0xb4>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <SystemClock_Config+0xb4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800120c:	2300      	movs	r3, #0
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4618      	mov	r0, r3
 8001216:	f000 fe51 	bl	8001ebc <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001220:	f000 f956 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001234:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f001 f8e9 	bl	8002418 <HAL_RCC_ClockConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800124c:	f000 f940 	bl	80014d0 <Error_Handler>
  }
}
 8001250:	bf00      	nop
 8001252:	3750      	adds	r7, #80	; 0x50
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000

08001260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08c      	sub	sp, #48	; 0x30
 8001264:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001276:	4b8e      	ldr	r3, [pc, #568]	; (80014b0 <MX_GPIO_Init+0x250>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a8d      	ldr	r2, [pc, #564]	; (80014b0 <MX_GPIO_Init+0x250>)
 800127c:	f043 0310 	orr.w	r3, r3, #16
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <MX_GPIO_Init+0x250>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0310 	and.w	r3, r3, #16
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	4b88      	ldr	r3, [pc, #544]	; (80014b0 <MX_GPIO_Init+0x250>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a87      	ldr	r2, [pc, #540]	; (80014b0 <MX_GPIO_Init+0x250>)
 8001294:	f043 0304 	orr.w	r3, r3, #4
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b85      	ldr	r3, [pc, #532]	; (80014b0 <MX_GPIO_Init+0x250>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a6:	4b82      	ldr	r3, [pc, #520]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a81      	ldr	r2, [pc, #516]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	4b7c      	ldr	r3, [pc, #496]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a7b      	ldr	r2, [pc, #492]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b73      	ldr	r3, [pc, #460]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ee:	4b70      	ldr	r3, [pc, #448]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a6f      	ldr	r2, [pc, #444]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <MX_GPIO_Init+0x250>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001306:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <MX_GPIO_Init+0x250>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a69      	ldr	r2, [pc, #420]	; (80014b0 <MX_GPIO_Init+0x250>)
 800130c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b67      	ldr	r3, [pc, #412]	; (80014b0 <MX_GPIO_Init+0x250>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS4_GPIO_Port, SS4_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2110      	movs	r1, #16
 8001322:	4864      	ldr	r0, [pc, #400]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001324:	f000 fdb0 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f244 0181 	movw	r1, #16513	; 0x4081
 800132e:	4862      	ldr	r0, [pc, #392]	; (80014b8 <MX_GPIO_Init+0x258>)
 8001330:	f000 fdaa 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001334:	2200      	movs	r2, #0
 8001336:	2140      	movs	r1, #64	; 0x40
 8001338:	4860      	ldr	r0, [pc, #384]	; (80014bc <MX_GPIO_Init+0x25c>)
 800133a:	f000 fda5 	bl	8001e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS4_Pin */
  GPIO_InitStruct.Pin = SS4_Pin;
 800133e:	2310      	movs	r3, #16
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SS4_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4857      	ldr	r0, [pc, #348]	; (80014b4 <MX_GPIO_Init+0x254>)
 8001356:	f000 fbed 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800135a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001360:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <MX_GPIO_Init+0x260>)
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4855      	ldr	r0, [pc, #340]	; (80014c4 <MX_GPIO_Init+0x264>)
 8001370:	f000 fbe0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001374:	2332      	movs	r3, #50	; 0x32
 8001376:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001384:	230b      	movs	r3, #11
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	484d      	ldr	r0, [pc, #308]	; (80014c4 <MX_GPIO_Init+0x264>)
 8001390:	f000 fbd0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001394:	2386      	movs	r3, #134	; 0x86
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a4:	230b      	movs	r3, #11
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4846      	ldr	r0, [pc, #280]	; (80014c8 <MX_GPIO_Init+0x268>)
 80013b0:	f000 fbc0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013b4:	f244 0381 	movw	r3, #16513	; 0x4081
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	2301      	movs	r3, #1
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	483a      	ldr	r0, [pc, #232]	; (80014b8 <MX_GPIO_Init+0x258>)
 80013ce:	f000 fbb1 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013e4:	230b      	movs	r3, #11
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4832      	ldr	r0, [pc, #200]	; (80014b8 <MX_GPIO_Init+0x258>)
 80013f0:	f000 fba0 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001406:	2307      	movs	r3, #7
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	482e      	ldr	r0, [pc, #184]	; (80014cc <MX_GPIO_Init+0x26c>)
 8001412:	f000 fb8f 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001416:	2340      	movs	r3, #64	; 0x40
 8001418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	4619      	mov	r1, r3
 800142c:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_GPIO_Init+0x25c>)
 800142e:	f000 fb81 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001432:	2380      	movs	r3, #128	; 0x80
 8001434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	4619      	mov	r1, r3
 8001444:	481d      	ldr	r0, [pc, #116]	; (80014bc <MX_GPIO_Init+0x25c>)
 8001446:	f000 fb75 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800144a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800144e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800145c:	230a      	movs	r3, #10
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4818      	ldr	r0, [pc, #96]	; (80014c8 <MX_GPIO_Init+0x268>)
 8001468:	f000 fb64 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800146c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4811      	ldr	r0, [pc, #68]	; (80014c8 <MX_GPIO_Init+0x268>)
 8001482:	f000 fb57 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001486:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001498:	230b      	movs	r3, #11
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <MX_GPIO_Init+0x25c>)
 80014a4:	f000 fb46 	bl	8001b34 <HAL_GPIO_Init>

}
 80014a8:	bf00      	nop
 80014aa:	3730      	adds	r7, #48	; 0x30
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40021800 	.word	0x40021800
 80014c0:	10110000 	.word	0x10110000
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020c00 	.word	0x40020c00

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <Error_Handler+0x6>

080014d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <HAL_MspInit+0x44>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	4a0e      	ldr	r2, [pc, #56]	; (800151c <HAL_MspInit+0x44>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <HAL_MspInit+0x44>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x44>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x44>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x44>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	; 0x28
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 0314 	add.w	r3, r7, #20
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_SPI_MspInit+0x7c>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d127      	bne.n	8001592 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a16      	ldr	r2, [pc, #88]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001548:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001556:	613b      	str	r3, [r7, #16]
 8001558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a10      	ldr	r2, [pc, #64]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_SPI_MspInit+0x80>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0310 	and.w	r3, r3, #16
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	2303      	movs	r3, #3
 8001580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001582:	2305      	movs	r3, #5
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4805      	ldr	r0, [pc, #20]	; (80015a4 <HAL_SPI_MspInit+0x84>)
 800158e:	f000 fad1 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40013400 	.word	0x40013400
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <HAL_TIM_Base_MspInit+0x38>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d10b      	bne.n	80015d2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_TIM_Base_MspInit+0x3c>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_TIM_Base_MspInit+0x3c>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6453      	str	r3, [r2, #68]	; 0x44
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HAL_TIM_Base_MspInit+0x3c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40010000 	.word	0x40010000
 80015e4:	40023800 	.word	0x40023800

080015e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_TIM_MspPostInit+0x64>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11c      	bne.n	8001644 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_TIM_MspPostInit+0x68>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = CH1_RED_Pin|CH2_GREEN_Pin|CH3_BLUE_Pin;
 8001622:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8001626:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001634:	2301      	movs	r3, #1
 8001636:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	4619      	mov	r1, r3
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_TIM_MspPostInit+0x6c>)
 8001640:	f000 fa78 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3720      	adds	r7, #32
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40010000 	.word	0x40010000
 8001650:	40023800 	.word	0x40023800
 8001654:	40021000 	.word	0x40021000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f91e 	bl	80018e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	e00a      	b.n	80016d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016be:	f3af 8000 	nop.w
 80016c2:	4601      	mov	r1, r0
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	b2ca      	uxtb	r2, r1
 80016cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	3301      	adds	r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697a      	ldr	r2, [r7, #20]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	dbf0      	blt.n	80016be <_read+0x12>
	}

return len;
 80016dc:	687b      	ldr	r3, [r7, #4]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3718      	adds	r7, #24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e009      	b.n	800170c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	60ba      	str	r2, [r7, #8]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	429a      	cmp	r2, r3
 8001712:	dbf1      	blt.n	80016f8 <_write+0x12>
	}
	return len;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_close>:

int _close(int file)
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001746:	605a      	str	r2, [r3, #4]
	return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_isatty>:

int _isatty(int file)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	return 1;
 800175e:	2301      	movs	r3, #1
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	; (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f002 fe56 	bl	8004468 <__errno>
 80017bc:	4602      	mov	r2, r0
 80017be:	230c      	movs	r3, #12
 80017c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20080000 	.word	0x20080000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000090 	.word	0x20000090
 80017f0:	200003e0 	.word	0x200003e0

080017f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <SystemInit+0x20>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <SystemInit+0x20>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001850 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800181e:	490e      	ldr	r1, [pc, #56]	; (8001858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001820:	4a0e      	ldr	r2, [pc, #56]	; (800185c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0b      	ldr	r2, [pc, #44]	; (8001860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001834:	4c0b      	ldr	r4, [pc, #44]	; (8001864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001842:	f7ff ffd7 	bl	80017f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001846:	f002 fe15 	bl	8004474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184a:	f7ff fc47 	bl	80010dc <main>
  bx  lr    
 800184e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001858:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800185c:	08005858 	.word	0x08005858
  ldr r2, =_sbss
 8001860:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001864:	200003e0 	.word	0x200003e0

08001868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001868:	e7fe      	b.n	8001868 <ADC_IRQHandler>

0800186a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186e:	2003      	movs	r0, #3
 8001870:	f000 f92c 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001874:	2000      	movs	r0, #0
 8001876:	f000 f805 	bl	8001884 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800187a:	f7ff fe2d 	bl	80014d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x54>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x58>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	4619      	mov	r1, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	fbb3 f3f1 	udiv	r3, r3, r1
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 f939 	bl	8001b1a <HAL_SYSTICK_Config>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e00e      	b.n	80018d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b0f      	cmp	r3, #15
 80018b6:	d80a      	bhi.n	80018ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b8:	2200      	movs	r2, #0
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	f04f 30ff 	mov.w	r0, #4294967295
 80018c0:	f000 f90f 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <HAL_InitTick+0x5c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
 80018cc:	e000      	b.n	80018d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x20>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x24>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	4a04      	ldr	r2, [pc, #16]	; (8001908 <HAL_IncTick+0x24>)
 80018f6:	6013      	str	r3, [r2, #0]
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008
 8001908:	200003d8 	.word	0x200003d8

0800190c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return uwTick;
 8001910:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_GetTick+0x14>)
 8001912:	681b      	ldr	r3, [r3, #0]
}
 8001914:	4618      	mov	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200003d8 	.word	0x200003d8

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff ffee 	bl	800190c <HAL_GetTick>
 8001930:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_Delay+0x40>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194a:	bf00      	nop
 800194c:	f7ff ffde 	bl	800190c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <__NVIC_SetPriorityGrouping+0x40>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 8001992:	4313      	orrs	r3, r2
 8001994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001996:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	60d3      	str	r3, [r2, #12]
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00
 80019ac:	05fa0000 	.word	0x05fa0000

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e175      	b.n	8001e40 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8164 	bne.w	8001e3a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d00b      	beq.n	8001b92 <HAL_GPIO_Init+0x5e>
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b86:	2b11      	cmp	r3, #17
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d130      	bne.n	8001bf4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	091b      	lsrs	r3, r3, #4
 8001bde:	f003 0201 	and.w	r2, r3, #1
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x100>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b12      	cmp	r3, #18
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80be 	beq.w	8001e3a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a64      	ldr	r2, [pc, #400]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b62      	ldr	r3, [pc, #392]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cd6:	4a60      	ldr	r2, [pc, #384]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <HAL_GPIO_Init+0x328>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d037      	beq.n	8001d72 <HAL_GPIO_Init+0x23e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a56      	ldr	r2, [pc, #344]	; (8001e60 <HAL_GPIO_Init+0x32c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d031      	beq.n	8001d6e <HAL_GPIO_Init+0x23a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a55      	ldr	r2, [pc, #340]	; (8001e64 <HAL_GPIO_Init+0x330>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d02b      	beq.n	8001d6a <HAL_GPIO_Init+0x236>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a54      	ldr	r2, [pc, #336]	; (8001e68 <HAL_GPIO_Init+0x334>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d025      	beq.n	8001d66 <HAL_GPIO_Init+0x232>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a53      	ldr	r2, [pc, #332]	; (8001e6c <HAL_GPIO_Init+0x338>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d01f      	beq.n	8001d62 <HAL_GPIO_Init+0x22e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a52      	ldr	r2, [pc, #328]	; (8001e70 <HAL_GPIO_Init+0x33c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d019      	beq.n	8001d5e <HAL_GPIO_Init+0x22a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a51      	ldr	r2, [pc, #324]	; (8001e74 <HAL_GPIO_Init+0x340>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d013      	beq.n	8001d5a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_GPIO_Init+0x344>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00d      	beq.n	8001d56 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a4f      	ldr	r2, [pc, #316]	; (8001e7c <HAL_GPIO_Init+0x348>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4e      	ldr	r2, [pc, #312]	; (8001e80 <HAL_GPIO_Init+0x34c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d101      	bne.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d4a:	2309      	movs	r3, #9
 8001d4c:	e012      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d4e:	230a      	movs	r3, #10
 8001d50:	e010      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d52:	2308      	movs	r3, #8
 8001d54:	e00e      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d56:	2307      	movs	r3, #7
 8001d58:	e00c      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d5a:	2306      	movs	r3, #6
 8001d5c:	e00a      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d5e:	2305      	movs	r3, #5
 8001d60:	e008      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d62:	2304      	movs	r3, #4
 8001d64:	e006      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d66:	2303      	movs	r3, #3
 8001d68:	e004      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e002      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x240>
 8001d72:	2300      	movs	r3, #0
 8001d74:	69fa      	ldr	r2, [r7, #28]
 8001d76:	f002 0203 	and.w	r2, r2, #3
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	4093      	lsls	r3, r2
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d84:	4934      	ldr	r1, [pc, #208]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d92:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001db6:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de0:	4a28      	ldr	r2, [pc, #160]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a13      	ldr	r2, [pc, #76]	; (8001e84 <HAL_GPIO_Init+0x350>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	61fb      	str	r3, [r7, #28]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	2b0f      	cmp	r3, #15
 8001e44:	f67f ae86 	bls.w	8001b54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e48:	bf00      	nop
 8001e4a:	3724      	adds	r7, #36	; 0x24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40013800 	.word	0x40013800
 8001e5c:	40020000 	.word	0x40020000
 8001e60:	40020400 	.word	0x40020400
 8001e64:	40020800 	.word	0x40020800
 8001e68:	40020c00 	.word	0x40020c00
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40021400 	.word	0x40021400
 8001e74:	40021800 	.word	0x40021800
 8001e78:	40021c00 	.word	0x40021c00
 8001e7c:	40022000 	.word	0x40022000
 8001e80:	40022400 	.word	0x40022400
 8001e84:	40013c00 	.word	0x40013c00

08001e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	807b      	strh	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e98:	787b      	ldrb	r3, [r7, #1]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ea4:	e003      	b.n	8001eae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ea6:	887b      	ldrh	r3, [r7, #2]
 8001ea8:	041a      	lsls	r2, r3, #16
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	619a      	str	r2, [r3, #24]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
	...

08001ebc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e29b      	b.n	800240a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8087 	beq.w	8001fee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	4b96      	ldr	r3, [pc, #600]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d00c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eec:	4b93      	ldr	r3, [pc, #588]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030c 	and.w	r3, r3, #12
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d112      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62>
 8001ef8:	4b90      	ldr	r3, [pc, #576]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f04:	d10b      	bne.n	8001f1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	4b8d      	ldr	r3, [pc, #564]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d06c      	beq.n	8001fec <HAL_RCC_OscConfig+0x130>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d168      	bne.n	8001fec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e275      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f26:	d106      	bne.n	8001f36 <HAL_RCC_OscConfig+0x7a>
 8001f28:	4b84      	ldr	r3, [pc, #528]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a83      	ldr	r2, [pc, #524]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e02e      	b.n	8001f94 <HAL_RCC_OscConfig+0xd8>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d10c      	bne.n	8001f58 <HAL_RCC_OscConfig+0x9c>
 8001f3e:	4b7f      	ldr	r3, [pc, #508]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a7e      	ldr	r2, [pc, #504]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b7c      	ldr	r3, [pc, #496]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7b      	ldr	r2, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f54:	6013      	str	r3, [r2, #0]
 8001f56:	e01d      	b.n	8001f94 <HAL_RCC_OscConfig+0xd8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0xc0>
 8001f62:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a75      	ldr	r2, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f6c:	6013      	str	r3, [r2, #0]
 8001f6e:	4b73      	ldr	r3, [pc, #460]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a72      	ldr	r2, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCC_OscConfig+0xd8>
 8001f7c:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6e      	ldr	r2, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b6c      	ldr	r3, [pc, #432]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6b      	ldr	r2, [pc, #428]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fcb6 	bl	800190c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fcb2 	bl	800190c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e229      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b61      	ldr	r3, [pc, #388]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0xe8>
 8001fc2:	e014      	b.n	8001fee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fca2 	bl	800190c <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fcc:	f7ff fc9e 	bl	800190c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b64      	cmp	r3, #100	; 0x64
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e215      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fde:	4b57      	ldr	r3, [pc, #348]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x110>
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d069      	beq.n	80020ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffa:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00b      	beq.n	800201e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002006:	4b4d      	ldr	r3, [pc, #308]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b08      	cmp	r3, #8
 8002010:	d11c      	bne.n	800204c <HAL_RCC_OscConfig+0x190>
 8002012:	4b4a      	ldr	r3, [pc, #296]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d116      	bne.n	800204c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800201e:	4b47      	ldr	r3, [pc, #284]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d005      	beq.n	8002036 <HAL_RCC_OscConfig+0x17a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d001      	beq.n	8002036 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1e9      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	493d      	ldr	r1, [pc, #244]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002046:	4313      	orrs	r3, r2
 8002048:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	e040      	b.n	80020ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d023      	beq.n	800209c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002054:	4b39      	ldr	r3, [pc, #228]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a38      	ldr	r2, [pc, #224]	; (800213c <HAL_RCC_OscConfig+0x280>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fc54 	bl	800190c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7ff fc50 	bl	800190c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1c7      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <HAL_RCC_OscConfig+0x280>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4929      	ldr	r1, [pc, #164]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
 800209a:	e018      	b.n	80020ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x280>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <HAL_RCC_OscConfig+0x280>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7ff fc30 	bl	800190c <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b0:	f7ff fc2c 	bl	800190c <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e1a3      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <HAL_RCC_OscConfig+0x280>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d038      	beq.n	800214c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d019      	beq.n	8002116 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e2:	4b16      	ldr	r3, [pc, #88]	; (800213c <HAL_RCC_OscConfig+0x280>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	4a15      	ldr	r2, [pc, #84]	; (800213c <HAL_RCC_OscConfig+0x280>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ee:	f7ff fc0d 	bl	800190c <HAL_GetTick>
 80020f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f6:	f7ff fc09 	bl	800190c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e180      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_RCC_OscConfig+0x280>)
 800210a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x23a>
 8002114:	e01a      	b.n	800214c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_OscConfig+0x280>)
 8002118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <HAL_RCC_OscConfig+0x280>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002122:	f7ff fbf3 	bl	800190c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800212a:	f7ff fbef 	bl	800190c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d903      	bls.n	8002140 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e166      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
 800213c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ee      	bne.n	800212a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a4 	beq.w	80022a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b8c      	ldr	r3, [pc, #560]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10d      	bne.n	8002182 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b89      	ldr	r3, [pc, #548]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a88      	ldr	r2, [pc, #544]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b86      	ldr	r3, [pc, #536]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002182:	4b83      	ldr	r3, [pc, #524]	; (8002390 <HAL_RCC_OscConfig+0x4d4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800218e:	4b80      	ldr	r3, [pc, #512]	; (8002390 <HAL_RCC_OscConfig+0x4d4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a7f      	ldr	r2, [pc, #508]	; (8002390 <HAL_RCC_OscConfig+0x4d4>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7ff fbb7 	bl	800190c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7ff fbb3 	bl	800190c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b64      	cmp	r3, #100	; 0x64
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e12a      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b4:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCC_OscConfig+0x4d4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x31a>
 80021c8:	4b70      	ldr	r3, [pc, #448]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a6f      	ldr	r2, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	e02d      	b.n	8002232 <HAL_RCC_OscConfig+0x376>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x33c>
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	4a6a      	ldr	r2, [pc, #424]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ea:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80021ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ee:	4a67      	ldr	r2, [pc, #412]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6713      	str	r3, [r2, #112]	; 0x70
 80021f6:	e01c      	b.n	8002232 <HAL_RCC_OscConfig+0x376>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0x35e>
 8002200:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	4a61      	ldr	r2, [pc, #388]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6713      	str	r3, [r2, #112]	; 0x70
 800220c:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800220e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002210:	4a5e      	ldr	r2, [pc, #376]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6713      	str	r3, [r2, #112]	; 0x70
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0x376>
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a5b      	ldr	r2, [pc, #364]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6713      	str	r3, [r2, #112]	; 0x70
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222a:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7ff fb67 	bl	800190c <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7ff fb63 	bl	800190c <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0d8      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ee      	beq.n	8002242 <HAL_RCC_OscConfig+0x386>
 8002264:	e014      	b.n	8002290 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002266:	f7ff fb51 	bl	800190c <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7ff fb4d 	bl	800190c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	; 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0c2      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	4b41      	ldr	r3, [pc, #260]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ee      	bne.n	800226e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a3c      	ldr	r2, [pc, #240]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80ae 	beq.w	8002408 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	4b37      	ldr	r3, [pc, #220]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d06d      	beq.n	8002394 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d14b      	bne.n	8002358 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b32      	ldr	r3, [pc, #200]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a31      	ldr	r2, [pc, #196]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80022c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7ff fb1e 	bl	800190c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff fb1a 	bl	800190c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e091      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e6:	4b29      	ldr	r3, [pc, #164]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	3b01      	subs	r3, #1
 800230c:	041b      	lsls	r3, r3, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002314:	061b      	lsls	r3, r3, #24
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231c:	071b      	lsls	r3, r3, #28
 800231e:	491b      	ldr	r1, [pc, #108]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff faec 	bl	800190c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7ff fae8 	bl	800190c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e05f      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234a:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x47c>
 8002356:	e057      	b.n	8002408 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0b      	ldr	r2, [pc, #44]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 800235e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7ff fad2 	bl	800190c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff face 	bl	800190c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e045      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_OscConfig+0x4d0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x4b0>
 800238a:	e03d      	b.n	8002408 <HAL_RCC_OscConfig+0x54c>
 800238c:	40023800 	.word	0x40023800
 8002390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCC_OscConfig+0x558>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d030      	beq.n	8002404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d129      	bne.n	8002404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d122      	bne.n	8002404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023c4:	4013      	ands	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d119      	bne.n	8002404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	085b      	lsrs	r3, r3, #1
 80023dc:	3b01      	subs	r3, #1
 80023de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d10f      	bne.n	8002404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800

08002418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0d0      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b6a      	ldr	r3, [pc, #424]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d910      	bls.n	8002460 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b67      	ldr	r3, [pc, #412]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	4965      	ldr	r1, [pc, #404]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b63      	ldr	r3, [pc, #396]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b8      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002478:	4b59      	ldr	r3, [pc, #356]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4a58      	ldr	r2, [pc, #352]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 800247e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002482:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	494d      	ldr	r1, [pc, #308]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d040      	beq.n	800253c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b47      	ldr	r3, [pc, #284]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d115      	bne.n	80024fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e073      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4936      	ldr	r1, [pc, #216]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800250c:	f7ff f9fe 	bl	800190c <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff f9fa 	bl	800190c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e053      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2d      	ldr	r3, [pc, #180]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d210      	bcs.n	800256c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 020f 	bic.w	r2, r3, #15
 8002552:	4922      	ldr	r1, [pc, #136]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e032      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4916      	ldr	r1, [pc, #88]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490e      	ldr	r1, [pc, #56]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025aa:	f000 f821 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025ae:	4601      	mov	r1, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025bc:	5cd3      	ldrb	r3, [r2, r3]
 80025be:	fa21 f303 	lsr.w	r3, r1, r3
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1d4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f95a 	bl	8001884 <HAL_InitTick>

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023c00 	.word	0x40023c00
 80025e0:	40023800 	.word	0x40023800
 80025e4:	080057a0 	.word	0x080057a0
 80025e8:	20000000 	.word	0x20000000
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025f6:	2300      	movs	r3, #0
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	2300      	movs	r3, #0
 8002600:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002606:	4b63      	ldr	r3, [pc, #396]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
 800260e:	2b04      	cmp	r3, #4
 8002610:	d007      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x32>
 8002612:	2b08      	cmp	r3, #8
 8002614:	d008      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x38>
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 80b4 	bne.w	8002784 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b5e      	ldr	r3, [pc, #376]	; (8002798 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800261e:	60bb      	str	r3, [r7, #8]
      break;
 8002620:	e0b3      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002622:	4b5d      	ldr	r3, [pc, #372]	; (8002798 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002624:	60bb      	str	r3, [r7, #8]
      break;
 8002626:	e0b0      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002628:	4b5a      	ldr	r3, [pc, #360]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002630:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002632:	4b58      	ldr	r3, [pc, #352]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d04a      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263e:	4b55      	ldr	r3, [pc, #340]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	099b      	lsrs	r3, r3, #6
 8002644:	f04f 0400 	mov.w	r4, #0
 8002648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	ea03 0501 	and.w	r5, r3, r1
 8002654:	ea04 0602 	and.w	r6, r4, r2
 8002658:	4629      	mov	r1, r5
 800265a:	4632      	mov	r2, r6
 800265c:	f04f 0300 	mov.w	r3, #0
 8002660:	f04f 0400 	mov.w	r4, #0
 8002664:	0154      	lsls	r4, r2, #5
 8002666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800266a:	014b      	lsls	r3, r1, #5
 800266c:	4619      	mov	r1, r3
 800266e:	4622      	mov	r2, r4
 8002670:	1b49      	subs	r1, r1, r5
 8002672:	eb62 0206 	sbc.w	r2, r2, r6
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f04f 0400 	mov.w	r4, #0
 800267e:	0194      	lsls	r4, r2, #6
 8002680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002684:	018b      	lsls	r3, r1, #6
 8002686:	1a5b      	subs	r3, r3, r1
 8002688:	eb64 0402 	sbc.w	r4, r4, r2
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	00e2      	lsls	r2, r4, #3
 8002696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800269a:	00d9      	lsls	r1, r3, #3
 800269c:	460b      	mov	r3, r1
 800269e:	4614      	mov	r4, r2
 80026a0:	195b      	adds	r3, r3, r5
 80026a2:	eb44 0406 	adc.w	r4, r4, r6
 80026a6:	f04f 0100 	mov.w	r1, #0
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	02a2      	lsls	r2, r4, #10
 80026b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026b4:	0299      	lsls	r1, r3, #10
 80026b6:	460b      	mov	r3, r1
 80026b8:	4614      	mov	r4, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	4621      	mov	r1, r4
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	f7fd fe0a 	bl	80002e0 <__aeabi_uldivmod>
 80026cc:	4603      	mov	r3, r0
 80026ce:	460c      	mov	r4, r1
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	e049      	b.n	8002768 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	f04f 0400 	mov.w	r4, #0
 80026de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	ea03 0501 	and.w	r5, r3, r1
 80026ea:	ea04 0602 	and.w	r6, r4, r2
 80026ee:	4629      	mov	r1, r5
 80026f0:	4632      	mov	r2, r6
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	f04f 0400 	mov.w	r4, #0
 80026fa:	0154      	lsls	r4, r2, #5
 80026fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002700:	014b      	lsls	r3, r1, #5
 8002702:	4619      	mov	r1, r3
 8002704:	4622      	mov	r2, r4
 8002706:	1b49      	subs	r1, r1, r5
 8002708:	eb62 0206 	sbc.w	r2, r2, r6
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	0194      	lsls	r4, r2, #6
 8002716:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800271a:	018b      	lsls	r3, r1, #6
 800271c:	1a5b      	subs	r3, r3, r1
 800271e:	eb64 0402 	sbc.w	r4, r4, r2
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	f04f 0200 	mov.w	r2, #0
 800272a:	00e2      	lsls	r2, r4, #3
 800272c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002730:	00d9      	lsls	r1, r3, #3
 8002732:	460b      	mov	r3, r1
 8002734:	4614      	mov	r4, r2
 8002736:	195b      	adds	r3, r3, r5
 8002738:	eb44 0406 	adc.w	r4, r4, r6
 800273c:	f04f 0100 	mov.w	r1, #0
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	02a2      	lsls	r2, r4, #10
 8002746:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800274a:	0299      	lsls	r1, r3, #10
 800274c:	460b      	mov	r3, r1
 800274e:	4614      	mov	r4, r2
 8002750:	4618      	mov	r0, r3
 8002752:	4621      	mov	r1, r4
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	f7fd fdbf 	bl	80002e0 <__aeabi_uldivmod>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002768:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	3301      	adds	r3, #1
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002780:	60bb      	str	r3, [r7, #8]
      break;
 8002782:	e002      	b.n	800278a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002786:	60bb      	str	r3, [r7, #8]
      break;
 8002788:	bf00      	nop
    }
  }
  return sysclockfreq;
 800278a:	68bb      	ldr	r3, [r7, #8]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400

0800279c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e09d      	b.n	80028ea <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027be:	d009      	beq.n	80027d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	61da      	str	r2, [r3, #28]
 80027c6:	e005      	b.n	80027d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d106      	bne.n	80027f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f7fe fe96 	bl	8001520 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800280a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002814:	d902      	bls.n	800281c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e002      	b.n	8002822 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800281c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002820:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800282a:	d007      	beq.n	800283c <HAL_SPI_Init+0xa0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002834:	d002      	beq.n	800283c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	431a      	orrs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	69db      	ldr	r3, [r3, #28]
 8002870:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	ea42 0103 	orr.w	r1, r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0204 	and.w	r2, r3, #4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80028b8:	ea42 0103 	orr.w	r1, r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	430a      	orrs	r2, r1
 80028c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b088      	sub	sp, #32
 80028f6:	af02      	add	r7, sp, #8
 80028f8:	60f8      	str	r0, [r7, #12]
 80028fa:	60b9      	str	r1, [r7, #8]
 80028fc:	603b      	str	r3, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002902:	2300      	movs	r3, #0
 8002904:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290e:	d112      	bne.n	8002936 <HAL_SPI_Receive+0x44>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10e      	bne.n	8002936 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2204      	movs	r2, #4
 800291c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002920:	88fa      	ldrh	r2, [r7, #6]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	68b9      	ldr	r1, [r7, #8]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 f910 	bl	8002b52 <HAL_SPI_TransmitReceive>
 8002932:	4603      	mov	r3, r0
 8002934:	e109      	b.n	8002b4a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_SPI_Receive+0x52>
 8002940:	2302      	movs	r3, #2
 8002942:	e102      	b.n	8002b4a <HAL_SPI_Receive+0x258>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800294c:	f7fe ffde 	bl	800190c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d002      	beq.n	8002964 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800295e:	2302      	movs	r3, #2
 8002960:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002962:	e0e9      	b.n	8002b38 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_SPI_Receive+0x7e>
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002974:	e0e0      	b.n	8002b38 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2204      	movs	r2, #4
 800297a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	88fa      	ldrh	r2, [r7, #6]
 800298e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029c0:	d908      	bls.n	80029d4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	e007      	b.n	80029e4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029e2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ec:	d10f      	bne.n	8002a0e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d007      	beq.n	8002a2c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a34:	d867      	bhi.n	8002b06 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002a36:	e030      	b.n	8002a9a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d117      	bne.n	8002a76 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f103 020c 	add.w	r2, r3, #12
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	7812      	ldrb	r2, [r2, #0]
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002a74:	e011      	b.n	8002a9a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a76:	f7fe ff49 	bl	800190c <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d803      	bhi.n	8002a8e <HAL_SPI_Receive+0x19c>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d102      	bne.n	8002a94 <HAL_SPI_Receive+0x1a2>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002a98:	e04e      	b.n	8002b38 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1c8      	bne.n	8002a38 <HAL_SPI_Receive+0x146>
 8002aa6:	e034      	b.n	8002b12 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d115      	bne.n	8002ae2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	b292      	uxth	r2, r2
 8002ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ae0:	e011      	b.n	8002b06 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ae2:	f7fe ff13 	bl	800190c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d803      	bhi.n	8002afa <HAL_SPI_Receive+0x208>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af8:	d102      	bne.n	8002b00 <HAL_SPI_Receive+0x20e>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d102      	bne.n	8002b06 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002b04:	e018      	b.n	8002b38 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1ca      	bne.n	8002aa8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fb48 	bl	80031ac <SPI_EndRxTransaction>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2220      	movs	r2, #32
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
 8002b34:	e000      	b.n	8002b38 <HAL_SPI_Receive+0x246>
  }

error :
 8002b36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b08a      	sub	sp, #40	; 0x28
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_SPI_TransmitReceive+0x26>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e1fb      	b.n	8002f70 <HAL_SPI_TransmitReceive+0x41e>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b80:	f7fe fec4 	bl	800190c <HAL_GetTick>
 8002b84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002b9c:	7efb      	ldrb	r3, [r7, #27]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x6e>
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba8:	d106      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x66>
 8002bb2:	7efb      	ldrb	r3, [r7, #27]
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	d003      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bbe:	e1cd      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_SPI_TransmitReceive+0x80>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_SPI_TransmitReceive+0x80>
 8002bcc:	887b      	ldrh	r3, [r7, #2]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d103      	bne.n	8002bda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002bd8:	e1c0      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d003      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2205      	movs	r2, #5
 8002bea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	887a      	ldrh	r2, [r7, #2]
 8002c06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	887a      	ldrh	r2, [r7, #2]
 8002c1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c30:	d802      	bhi.n	8002c38 <HAL_SPI_TransmitReceive+0xe6>
 8002c32:	8a3b      	ldrh	r3, [r7, #16]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d908      	bls.n	8002c4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c46:	605a      	str	r2, [r3, #4]
 8002c48:	e007      	b.n	8002c5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b40      	cmp	r3, #64	; 0x40
 8002c66:	d007      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c80:	d97c      	bls.n	8002d7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x13e>
 8002c8a:	8a7b      	ldrh	r3, [r7, #18]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d169      	bne.n	8002d64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	1c9a      	adds	r2, r3, #2
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cb4:	e056      	b.n	8002d64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d11b      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x1aa>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d016      	beq.n	8002cfc <HAL_SPI_TransmitReceive+0x1aa>
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d113      	bne.n	8002cfc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	881a      	ldrh	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	1c9a      	adds	r2, r3, #2
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d11c      	bne.n	8002d44 <HAL_SPI_TransmitReceive+0x1f2>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d016      	beq.n	8002d44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	b292      	uxth	r2, r2
 8002d22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d40:	2301      	movs	r3, #1
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002d44:	f7fe fde2 	bl	800190c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d807      	bhi.n	8002d64 <HAL_SPI_TransmitReceive+0x212>
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5a:	d003      	beq.n	8002d64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002d62:	e0fb      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1a3      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x164>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d19d      	bne.n	8002cb6 <HAL_SPI_TransmitReceive+0x164>
 8002d7a:	e0df      	b.n	8002f3c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_SPI_TransmitReceive+0x23a>
 8002d84:	8a7b      	ldrh	r3, [r7, #18]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	f040 80cb 	bne.w	8002f22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d912      	bls.n	8002dbc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	881a      	ldrh	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	1c9a      	adds	r2, r3, #2
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b02      	subs	r3, #2
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dba:	e0b2      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	7812      	ldrb	r2, [r2, #0]
 8002dc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de2:	e09e      	b.n	8002f22 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d134      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x30a>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d02f      	beq.n	8002e5c <HAL_SPI_TransmitReceive+0x30a>
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d12c      	bne.n	8002e5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d912      	bls.n	8002e32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1c:	1c9a      	adds	r2, r3, #2
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b02      	subs	r3, #2
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e30:	e012      	b.n	8002e58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	330c      	adds	r3, #12
 8002e3c:	7812      	ldrb	r2, [r2, #0]
 8002e3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d148      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x3aa>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d042      	beq.n	8002efc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d923      	bls.n	8002eca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68da      	ldr	r2, [r3, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	b292      	uxth	r2, r2
 8002e8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	1c9a      	adds	r2, r3, #2
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	3b02      	subs	r3, #2
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d81f      	bhi.n	8002ef8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	e016      	b.n	8002ef8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f103 020c 	add.w	r2, r3, #12
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002efc:	f7fe fd06 	bl	800190c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d803      	bhi.n	8002f14 <HAL_SPI_TransmitReceive+0x3c2>
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f12:	d102      	bne.n	8002f1a <HAL_SPI_TransmitReceive+0x3c8>
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d103      	bne.n	8002f22 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002f20:	e01c      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f47f af5b 	bne.w	8002de4 <HAL_SPI_TransmitReceive+0x292>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f47f af54 	bne.w	8002de4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f98b 	bl	800325c <SPI_EndRxTxTransaction>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	661a      	str	r2, [r3, #96]	; 0x60
 8002f58:	e000      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3728      	adds	r7, #40	; 0x28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	603b      	str	r3, [r7, #0]
 8002f84:	4613      	mov	r3, r2
 8002f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f88:	f7fe fcc0 	bl	800190c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f98:	f7fe fcb8 	bl	800190c <HAL_GetTick>
 8002f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	015b      	lsls	r3, r3, #5
 8002fa4:	0d1b      	lsrs	r3, r3, #20
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fae:	e054      	b.n	800305a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d050      	beq.n	800305a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fb8:	f7fe fca8 	bl	800190c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d902      	bls.n	8002fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d13d      	bne.n	800304a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe6:	d111      	bne.n	800300c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff0:	d004      	beq.n	8002ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffa:	d107      	bne.n	800300c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800300a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003014:	d10f      	bne.n	8003036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e017      	b.n	800307a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3b01      	subs	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4013      	ands	r3, r2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	429a      	cmp	r2, r3
 8003068:	bf0c      	ite	eq
 800306a:	2301      	moveq	r3, #1
 800306c:	2300      	movne	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	429a      	cmp	r2, r3
 8003076:	d19b      	bne.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000000 	.word	0x20000000

08003088 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
 8003094:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003096:	f7fe fc39 	bl	800190c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030a6:	f7fe fc31 	bl	800190c <HAL_GetTick>
 80030aa:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030ac:	4b3e      	ldr	r3, [pc, #248]	; (80031a8 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00da      	lsls	r2, r3, #3
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	0d1b      	lsrs	r3, r3, #20
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	fb02 f303 	mul.w	r3, r2, r3
 80030c2:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80030c4:	e062      	b.n	800318c <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030cc:	d109      	bne.n	80030e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d106      	bne.n	80030e2 <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80030e0:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d050      	beq.n	800318c <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030ea:	f7fe fc0f 	bl	800190c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d902      	bls.n	8003100 <SPI_WaitFifoStateUntilTimeout+0x78>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d13d      	bne.n	800317c <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800310e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003118:	d111      	bne.n	800313e <SPI_WaitFifoStateUntilTimeout+0xb6>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	d004      	beq.n	800312e <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312c:	d107      	bne.n	800313e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003146:	d10f      	bne.n	8003168 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003166:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e010      	b.n	800319e <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	3b01      	subs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	d194      	bne.n	80030c6 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000000 	.word	0x20000000

080031ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c0:	d111      	bne.n	80031e6 <SPI_EndRxTransaction+0x3a>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ca:	d004      	beq.n	80031d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d4:	d107      	bne.n	80031e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	2180      	movs	r1, #128	; 0x80
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fec1 	bl	8002f78 <SPI_WaitFlagStateUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e023      	b.n	8003254 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003214:	d11d      	bne.n	8003252 <SPI_EndRxTransaction+0xa6>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321e:	d004      	beq.n	800322a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	d113      	bne.n	8003252 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff ff26 	bl	8003088 <SPI_WaitFifoStateUntilTimeout>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003246:	f043 0220 	orr.w	r2, r3, #32
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e000      	b.n	8003254 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f7ff ff07 	bl	8003088 <SPI_WaitFifoStateUntilTimeout>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003284:	f043 0220 	orr.w	r2, r3, #32
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e027      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f7ff fe6c 	bl	8002f78 <SPI_WaitFlagStateUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e014      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2200      	movs	r2, #0
 80032be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f7ff fee0 	bl	8003088 <SPI_WaitFifoStateUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	f043 0220 	orr.w	r2, r3, #32
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e000      	b.n	80032e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e049      	b.n	800338e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fe f94a 	bl	80015a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f000 fbd4 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e054      	b.n	800345a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d022      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d01d      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_TIM_Base_Start_IT+0xd4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d018      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_TIM_Base_Start_IT+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_TIM_Base_Start_IT+0xe0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1c      	ldr	r2, [pc, #112]	; (800347c <HAL_TIM_Base_Start_IT+0xe4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_TIM_Base_Start_IT+0xe8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d115      	bne.n	8003444 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_TIM_Base_Start_IT+0xec>)
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b06      	cmp	r3, #6
 8003428:	d015      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0xbe>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d011      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	e008      	b.n	8003456 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e000      	b.n	8003458 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40001800 	.word	0x40001800
 8003484:	00010007 	.word	0x00010007

08003488 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e049      	b.n	800352e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f841 	bl	8003536 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3304      	adds	r3, #4
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f000 fb04 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_TIM_PWM_Start+0x24>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	bf14      	ite	ne
 8003568:	2301      	movne	r3, #1
 800356a:	2300      	moveq	r3, #0
 800356c:	b2db      	uxtb	r3, r3
 800356e:	e03c      	b.n	80035ea <HAL_TIM_PWM_Start+0x9e>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b04      	cmp	r3, #4
 8003574:	d109      	bne.n	800358a <HAL_TIM_PWM_Start+0x3e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	bf14      	ite	ne
 8003582:	2301      	movne	r3, #1
 8003584:	2300      	moveq	r3, #0
 8003586:	b2db      	uxtb	r3, r3
 8003588:	e02f      	b.n	80035ea <HAL_TIM_PWM_Start+0x9e>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b08      	cmp	r3, #8
 800358e:	d109      	bne.n	80035a4 <HAL_TIM_PWM_Start+0x58>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e022      	b.n	80035ea <HAL_TIM_PWM_Start+0x9e>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b0c      	cmp	r3, #12
 80035a8:	d109      	bne.n	80035be <HAL_TIM_PWM_Start+0x72>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e015      	b.n	80035ea <HAL_TIM_PWM_Start+0x9e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b10      	cmp	r3, #16
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x8c>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e008      	b.n	80035ea <HAL_TIM_PWM_Start+0x9e>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	bf14      	ite	ne
 80035e4:	2301      	movne	r3, #1
 80035e6:	2300      	moveq	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e092      	b.n	8003718 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <HAL_TIM_PWM_Start+0xb6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2202      	movs	r2, #2
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003600:	e023      	b.n	800364a <HAL_TIM_PWM_Start+0xfe>
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	2b04      	cmp	r3, #4
 8003606:	d104      	bne.n	8003612 <HAL_TIM_PWM_Start+0xc6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003610:	e01b      	b.n	800364a <HAL_TIM_PWM_Start+0xfe>
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d104      	bne.n	8003622 <HAL_TIM_PWM_Start+0xd6>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003620:	e013      	b.n	800364a <HAL_TIM_PWM_Start+0xfe>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	2b0c      	cmp	r3, #12
 8003626:	d104      	bne.n	8003632 <HAL_TIM_PWM_Start+0xe6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003630:	e00b      	b.n	800364a <HAL_TIM_PWM_Start+0xfe>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d104      	bne.n	8003642 <HAL_TIM_PWM_Start+0xf6>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2202      	movs	r2, #2
 800363c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003640:	e003      	b.n	800364a <HAL_TIM_PWM_Start+0xfe>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2202      	movs	r2, #2
 8003646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	6839      	ldr	r1, [r7, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fdd6 	bl	8004204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a30      	ldr	r2, [pc, #192]	; (8003720 <HAL_TIM_PWM_Start+0x1d4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <HAL_TIM_PWM_Start+0x120>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <HAL_TIM_PWM_Start+0x1d8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d101      	bne.n	8003670 <HAL_TIM_PWM_Start+0x124>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_TIM_PWM_Start+0x126>
 8003670:	2300      	movs	r3, #0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a25      	ldr	r2, [pc, #148]	; (8003720 <HAL_TIM_PWM_Start+0x1d4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d022      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d01d      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a22      	ldr	r2, [pc, #136]	; (8003728 <HAL_TIM_PWM_Start+0x1dc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d018      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a20      	ldr	r2, [pc, #128]	; (800372c <HAL_TIM_PWM_Start+0x1e0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1f      	ldr	r2, [pc, #124]	; (8003730 <HAL_TIM_PWM_Start+0x1e4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00e      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	; (8003724 <HAL_TIM_PWM_Start+0x1d8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d009      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1b      	ldr	r2, [pc, #108]	; (8003734 <HAL_TIM_PWM_Start+0x1e8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d004      	beq.n	80036d6 <HAL_TIM_PWM_Start+0x18a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_TIM_PWM_Start+0x1ec>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d115      	bne.n	8003702 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_TIM_PWM_Start+0x1f0>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b06      	cmp	r3, #6
 80036e6:	d015      	beq.n	8003714 <HAL_TIM_PWM_Start+0x1c8>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ee:	d011      	beq.n	8003714 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003700:	e008      	b.n	8003714 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e000      	b.n	8003716 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010000 	.word	0x40010000
 8003724:	40010400 	.word	0x40010400
 8003728:	40000400 	.word	0x40000400
 800372c:	40000800 	.word	0x40000800
 8003730:	40000c00 	.word	0x40000c00
 8003734:	40014000 	.word	0x40014000
 8003738:	40001800 	.word	0x40001800
 800373c:	00010007 	.word	0x00010007

08003740 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003756:	2302      	movs	r3, #2
 8003758:	e0fd      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x216>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b14      	cmp	r3, #20
 8003766:	f200 80f0 	bhi.w	800394a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800376a:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800376c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003770:	080037c5 	.word	0x080037c5
 8003774:	0800394b 	.word	0x0800394b
 8003778:	0800394b 	.word	0x0800394b
 800377c:	0800394b 	.word	0x0800394b
 8003780:	08003805 	.word	0x08003805
 8003784:	0800394b 	.word	0x0800394b
 8003788:	0800394b 	.word	0x0800394b
 800378c:	0800394b 	.word	0x0800394b
 8003790:	08003847 	.word	0x08003847
 8003794:	0800394b 	.word	0x0800394b
 8003798:	0800394b 	.word	0x0800394b
 800379c:	0800394b 	.word	0x0800394b
 80037a0:	08003887 	.word	0x08003887
 80037a4:	0800394b 	.word	0x0800394b
 80037a8:	0800394b 	.word	0x0800394b
 80037ac:	0800394b 	.word	0x0800394b
 80037b0:	080038c9 	.word	0x080038c9
 80037b4:	0800394b 	.word	0x0800394b
 80037b8:	0800394b 	.word	0x0800394b
 80037bc:	0800394b 	.word	0x0800394b
 80037c0:	08003909 	.word	0x08003909
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fa22 	bl	8003c14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	699a      	ldr	r2, [r3, #24]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0204 	bic.w	r2, r2, #4
 80037ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6999      	ldr	r1, [r3, #24]
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	619a      	str	r2, [r3, #24]
      break;
 8003802:	e0a3      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68b9      	ldr	r1, [r7, #8]
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fa74 	bl	8003cf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699a      	ldr	r2, [r3, #24]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800382e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6999      	ldr	r1, [r3, #24]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	021a      	lsls	r2, r3, #8
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	619a      	str	r2, [r3, #24]
      break;
 8003844:	e082      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 facb 	bl	8003de8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69da      	ldr	r2, [r3, #28]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f042 0208 	orr.w	r2, r2, #8
 8003860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	69da      	ldr	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0204 	bic.w	r2, r2, #4
 8003870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	69d9      	ldr	r1, [r3, #28]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	61da      	str	r2, [r3, #28]
      break;
 8003884:	e062      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fb21 	bl	8003ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	69da      	ldr	r2, [r3, #28]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69d9      	ldr	r1, [r3, #28]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	021a      	lsls	r2, r3, #8
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	61da      	str	r2, [r3, #28]
      break;
 80038c6:	e041      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68b9      	ldr	r1, [r7, #8]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fb58 	bl	8003f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0208 	orr.w	r2, r2, #8
 80038e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0204 	bic.w	r2, r2, #4
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003906:	e021      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68b9      	ldr	r1, [r7, #8]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fb8a 	bl	8004028 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003922:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003932:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	021a      	lsls	r2, r3, #8
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003948:	e000      	b.n	800394c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800394a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop

08003960 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_TIM_ConfigClockSource+0x18>
 8003974:	2302      	movs	r3, #2
 8003976:	e0a6      	b.n	8003ac6 <HAL_TIM_ConfigClockSource+0x166>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <HAL_TIM_ConfigClockSource+0x170>)
 8003994:	4013      	ands	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800399e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d067      	beq.n	8003a80 <HAL_TIM_ConfigClockSource+0x120>
 80039b0:	2b40      	cmp	r3, #64	; 0x40
 80039b2:	d80b      	bhi.n	80039cc <HAL_TIM_ConfigClockSource+0x6c>
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d073      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x140>
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d802      	bhi.n	80039c2 <HAL_TIM_ConfigClockSource+0x62>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d06f      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80039c0:	e078      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d06c      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x140>
 80039c6:	2b30      	cmp	r3, #48	; 0x30
 80039c8:	d06a      	beq.n	8003aa0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80039ca:	e073      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039cc:	2b70      	cmp	r3, #112	; 0x70
 80039ce:	d00d      	beq.n	80039ec <HAL_TIM_ConfigClockSource+0x8c>
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d804      	bhi.n	80039de <HAL_TIM_ConfigClockSource+0x7e>
 80039d4:	2b50      	cmp	r3, #80	; 0x50
 80039d6:	d033      	beq.n	8003a40 <HAL_TIM_ConfigClockSource+0xe0>
 80039d8:	2b60      	cmp	r3, #96	; 0x60
 80039da:	d041      	beq.n	8003a60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80039dc:	e06a      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	d066      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0x152>
 80039e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039e8:	d017      	beq.n	8003a1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80039ea:	e063      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6818      	ldr	r0, [r3, #0]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	6899      	ldr	r1, [r3, #8]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f000 fbe2 	bl	80041c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	609a      	str	r2, [r3, #8]
      break;
 8003a18:	e04c      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6818      	ldr	r0, [r3, #0]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6899      	ldr	r1, [r3, #8]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f000 fbcb 	bl	80041c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3c:	609a      	str	r2, [r3, #8]
      break;
 8003a3e:	e039      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	f000 fb3f 	bl	80040d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2150      	movs	r1, #80	; 0x50
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fb98 	bl	800418e <TIM_ITRx_SetConfig>
      break;
 8003a5e:	e029      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6818      	ldr	r0, [r3, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f000 fb5e 	bl	800412e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2160      	movs	r1, #96	; 0x60
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fb88 	bl	800418e <TIM_ITRx_SetConfig>
      break;
 8003a7e:	e019      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f000 fb1f 	bl	80040d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2140      	movs	r1, #64	; 0x40
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fb78 	bl	800418e <TIM_ITRx_SetConfig>
      break;
 8003a9e:	e009      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f000 fb6f 	bl	800418e <TIM_ITRx_SetConfig>
        break;
 8003ab0:	e000      	b.n	8003ab4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003ab2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	fffeff88 	.word	0xfffeff88

08003ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a40      	ldr	r2, [pc, #256]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d013      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af2:	d00f      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a3d      	ldr	r2, [pc, #244]	; (8003bec <TIM_Base_SetConfig+0x118>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00b      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a3c      	ldr	r2, [pc, #240]	; (8003bf0 <TIM_Base_SetConfig+0x11c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d007      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a3b      	ldr	r2, [pc, #236]	; (8003bf4 <TIM_Base_SetConfig+0x120>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0x40>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a3a      	ldr	r2, [pc, #232]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d108      	bne.n	8003b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2f      	ldr	r2, [pc, #188]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b34:	d027      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <TIM_Base_SetConfig+0x118>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d023      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <TIM_Base_SetConfig+0x11c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <TIM_Base_SetConfig+0x120>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d01b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a29      	ldr	r2, [pc, #164]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d017      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a28      	ldr	r2, [pc, #160]	; (8003bfc <TIM_Base_SetConfig+0x128>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d013      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <TIM_Base_SetConfig+0x12c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00f      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <TIM_Base_SetConfig+0x130>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a25      	ldr	r2, [pc, #148]	; (8003c08 <TIM_Base_SetConfig+0x134>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d007      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a24      	ldr	r2, [pc, #144]	; (8003c0c <TIM_Base_SetConfig+0x138>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d003      	beq.n	8003b86 <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <TIM_Base_SetConfig+0x13c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d108      	bne.n	8003b98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <TIM_Base_SetConfig+0x114>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_Base_SetConfig+0xf8>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0c      	ldr	r2, [pc, #48]	; (8003bf8 <TIM_Base_SetConfig+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d103      	bne.n	8003bd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	615a      	str	r2, [r3, #20]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40000800 	.word	0x40000800
 8003bf4:	40000c00 	.word	0x40000c00
 8003bf8:	40010400 	.word	0x40010400
 8003bfc:	40014000 	.word	0x40014000
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800
 8003c08:	40001800 	.word	0x40001800
 8003c0c:	40001c00 	.word	0x40001c00
 8003c10:	40002000 	.word	0x40002000

08003c14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f023 0201 	bic.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4b2b      	ldr	r3, [pc, #172]	; (8003cec <TIM_OC1_SetConfig+0xd8>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0302 	bic.w	r3, r3, #2
 8003c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <TIM_OC1_SetConfig+0xdc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_OC1_SetConfig+0x64>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <TIM_OC1_SetConfig+0xe0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10c      	bne.n	8003c92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 0308 	bic.w	r3, r3, #8
 8003c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f023 0304 	bic.w	r3, r3, #4
 8003c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a16      	ldr	r2, [pc, #88]	; (8003cf0 <TIM_OC1_SetConfig+0xdc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d003      	beq.n	8003ca2 <TIM_OC1_SetConfig+0x8e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a15      	ldr	r2, [pc, #84]	; (8003cf4 <TIM_OC1_SetConfig+0xe0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d111      	bne.n	8003cc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	fffeff8f 	.word	0xfffeff8f
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010400 	.word	0x40010400

08003cf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f023 0210 	bic.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <TIM_OC2_SetConfig+0xe4>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0320 	bic.w	r3, r3, #32
 8003d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <TIM_OC2_SetConfig+0xe8>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_OC2_SetConfig+0x68>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <TIM_OC2_SetConfig+0xec>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d10d      	bne.n	8003d7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a18      	ldr	r2, [pc, #96]	; (8003de0 <TIM_OC2_SetConfig+0xe8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC2_SetConfig+0x94>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <TIM_OC2_SetConfig+0xec>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d113      	bne.n	8003db4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	621a      	str	r2, [r3, #32]
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	feff8fff 	.word	0xfeff8fff
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400

08003de8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4b2d      	ldr	r3, [pc, #180]	; (8003ec8 <TIM_OC3_SetConfig+0xe0>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a22      	ldr	r2, [pc, #136]	; (8003ecc <TIM_OC3_SetConfig+0xe4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_OC3_SetConfig+0x66>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <TIM_OC3_SetConfig+0xe8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10d      	bne.n	8003e6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a17      	ldr	r2, [pc, #92]	; (8003ecc <TIM_OC3_SetConfig+0xe4>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <TIM_OC3_SetConfig+0x92>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <TIM_OC3_SetConfig+0xe8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d113      	bne.n	8003ea2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	fffeff8f 	.word	0xfffeff8f
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	69db      	ldr	r3, [r3, #28]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4b1e      	ldr	r3, [pc, #120]	; (8003f78 <TIM_OC4_SetConfig+0xa4>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	021b      	lsls	r3, r3, #8
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <TIM_OC4_SetConfig+0xa8>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_OC4_SetConfig+0x68>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <TIM_OC4_SetConfig+0xac>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d109      	bne.n	8003f50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	019b      	lsls	r3, r3, #6
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	feff8fff 	.word	0xfeff8fff
 8003f7c:	40010000 	.word	0x40010000
 8003f80:	40010400 	.word	0x40010400

08003f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4b1b      	ldr	r3, [pc, #108]	; (800401c <TIM_OC5_SetConfig+0x98>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a12      	ldr	r2, [pc, #72]	; (8004020 <TIM_OC5_SetConfig+0x9c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_OC5_SetConfig+0x5e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a11      	ldr	r2, [pc, #68]	; (8004024 <TIM_OC5_SetConfig+0xa0>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d109      	bne.n	8003ff6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	021b      	lsls	r3, r3, #8
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	621a      	str	r2, [r3, #32]
}
 8004010:	bf00      	nop
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	fffeff8f 	.word	0xfffeff8f
 8004020:	40010000 	.word	0x40010000
 8004024:	40010400 	.word	0x40010400

08004028 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <TIM_OC6_SetConfig+0x9c>)
 8004054:	4013      	ands	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	021b      	lsls	r3, r3, #8
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	051b      	lsls	r3, r3, #20
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a13      	ldr	r2, [pc, #76]	; (80040c8 <TIM_OC6_SetConfig+0xa0>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_OC6_SetConfig+0x60>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a12      	ldr	r2, [pc, #72]	; (80040cc <TIM_OC6_SetConfig+0xa4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	029b      	lsls	r3, r3, #10
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	4313      	orrs	r3, r2
 800409a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	621a      	str	r2, [r3, #32]
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	feff8fff 	.word	0xfeff8fff
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010400 	.word	0x40010400

080040d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0201 	bic.w	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	011b      	lsls	r3, r3, #4
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4313      	orrs	r3, r2
 8004104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 030a 	bic.w	r3, r3, #10
 800410c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800412e:	b480      	push	{r7}
 8004130:	b087      	sub	sp, #28
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0210 	bic.w	r2, r3, #16
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004158:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	031b      	lsls	r3, r3, #12
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800416a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f043 0307 	orr.w	r3, r3, #7
 80041b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	609a      	str	r2, [r3, #8]
}
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	021a      	lsls	r2, r3, #8
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f003 031f 	and.w	r3, r3, #31
 8004216:	2201      	movs	r2, #1
 8004218:	fa02 f303 	lsl.w	r3, r2, r3
 800421c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1a      	ldr	r2, [r3, #32]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	43db      	mvns	r3, r3
 8004226:	401a      	ands	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1a      	ldr	r2, [r3, #32]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f003 031f 	and.w	r3, r3, #31
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	fa01 f303 	lsl.w	r3, r1, r3
 800423c:	431a      	orrs	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	621a      	str	r2, [r3, #32]
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e06d      	b.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a30      	ldr	r2, [pc, #192]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a2f      	ldr	r2, [pc, #188]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d108      	bne.n	80042ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80042a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	4313      	orrs	r3, r2
 80042be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d022      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042da:	d01d      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1d      	ldr	r2, [pc, #116]	; (8004358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d018      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a1c      	ldr	r2, [pc, #112]	; (800435c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00e      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a15      	ldr	r2, [pc, #84]	; (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d009      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a16      	ldr	r2, [pc, #88]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a15      	ldr	r2, [pc, #84]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d10c      	bne.n	8004332 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800431e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800
 8004360:	40000c00 	.word	0x40000c00
 8004364:	40014000 	.word	0x40014000
 8004368:	40001800 	.word	0x40001800

0800436c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004384:	2302      	movs	r3, #2
 8004386:	e065      	b.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a16      	ldr	r2, [pc, #88]	; (8004460 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d004      	beq.n	8004416 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a14      	ldr	r2, [pc, #80]	; (8004464 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d115      	bne.n	8004442 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	051b      	lsls	r3, r3, #20
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	4313      	orrs	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40010000 	.word	0x40010000
 8004464:	40010400 	.word	0x40010400

08004468 <__errno>:
 8004468:	4b01      	ldr	r3, [pc, #4]	; (8004470 <__errno+0x8>)
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	2000000c 	.word	0x2000000c

08004474 <__libc_init_array>:
 8004474:	b570      	push	{r4, r5, r6, lr}
 8004476:	4e0d      	ldr	r6, [pc, #52]	; (80044ac <__libc_init_array+0x38>)
 8004478:	4c0d      	ldr	r4, [pc, #52]	; (80044b0 <__libc_init_array+0x3c>)
 800447a:	1ba4      	subs	r4, r4, r6
 800447c:	10a4      	asrs	r4, r4, #2
 800447e:	2500      	movs	r5, #0
 8004480:	42a5      	cmp	r5, r4
 8004482:	d109      	bne.n	8004498 <__libc_init_array+0x24>
 8004484:	4e0b      	ldr	r6, [pc, #44]	; (80044b4 <__libc_init_array+0x40>)
 8004486:	4c0c      	ldr	r4, [pc, #48]	; (80044b8 <__libc_init_array+0x44>)
 8004488:	f000 ff04 	bl	8005294 <_init>
 800448c:	1ba4      	subs	r4, r4, r6
 800448e:	10a4      	asrs	r4, r4, #2
 8004490:	2500      	movs	r5, #0
 8004492:	42a5      	cmp	r5, r4
 8004494:	d105      	bne.n	80044a2 <__libc_init_array+0x2e>
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800449c:	4798      	blx	r3
 800449e:	3501      	adds	r5, #1
 80044a0:	e7ee      	b.n	8004480 <__libc_init_array+0xc>
 80044a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80044a6:	4798      	blx	r3
 80044a8:	3501      	adds	r5, #1
 80044aa:	e7f2      	b.n	8004492 <__libc_init_array+0x1e>
 80044ac:	08005850 	.word	0x08005850
 80044b0:	08005850 	.word	0x08005850
 80044b4:	08005850 	.word	0x08005850
 80044b8:	08005854 	.word	0x08005854

080044bc <memset>:
 80044bc:	4402      	add	r2, r0
 80044be:	4603      	mov	r3, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d100      	bne.n	80044c6 <memset+0xa>
 80044c4:	4770      	bx	lr
 80044c6:	f803 1b01 	strb.w	r1, [r3], #1
 80044ca:	e7f9      	b.n	80044c0 <memset+0x4>

080044cc <iprintf>:
 80044cc:	b40f      	push	{r0, r1, r2, r3}
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <iprintf+0x2c>)
 80044d0:	b513      	push	{r0, r1, r4, lr}
 80044d2:	681c      	ldr	r4, [r3, #0]
 80044d4:	b124      	cbz	r4, 80044e0 <iprintf+0x14>
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	b913      	cbnz	r3, 80044e0 <iprintf+0x14>
 80044da:	4620      	mov	r0, r4
 80044dc:	f000 f84e 	bl	800457c <__sinit>
 80044e0:	ab05      	add	r3, sp, #20
 80044e2:	9a04      	ldr	r2, [sp, #16]
 80044e4:	68a1      	ldr	r1, [r4, #8]
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 f955 	bl	8004798 <_vfiprintf_r>
 80044ee:	b002      	add	sp, #8
 80044f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044f4:	b004      	add	sp, #16
 80044f6:	4770      	bx	lr
 80044f8:	2000000c 	.word	0x2000000c

080044fc <std>:
 80044fc:	2300      	movs	r3, #0
 80044fe:	b510      	push	{r4, lr}
 8004500:	4604      	mov	r4, r0
 8004502:	e9c0 3300 	strd	r3, r3, [r0]
 8004506:	6083      	str	r3, [r0, #8]
 8004508:	8181      	strh	r1, [r0, #12]
 800450a:	6643      	str	r3, [r0, #100]	; 0x64
 800450c:	81c2      	strh	r2, [r0, #14]
 800450e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004512:	6183      	str	r3, [r0, #24]
 8004514:	4619      	mov	r1, r3
 8004516:	2208      	movs	r2, #8
 8004518:	305c      	adds	r0, #92	; 0x5c
 800451a:	f7ff ffcf 	bl	80044bc <memset>
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <std+0x38>)
 8004520:	6263      	str	r3, [r4, #36]	; 0x24
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <std+0x3c>)
 8004524:	62a3      	str	r3, [r4, #40]	; 0x28
 8004526:	4b05      	ldr	r3, [pc, #20]	; (800453c <std+0x40>)
 8004528:	62e3      	str	r3, [r4, #44]	; 0x2c
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <std+0x44>)
 800452c:	6224      	str	r4, [r4, #32]
 800452e:	6323      	str	r3, [r4, #48]	; 0x30
 8004530:	bd10      	pop	{r4, pc}
 8004532:	bf00      	nop
 8004534:	08004cf5 	.word	0x08004cf5
 8004538:	08004d17 	.word	0x08004d17
 800453c:	08004d4f 	.word	0x08004d4f
 8004540:	08004d73 	.word	0x08004d73

08004544 <_cleanup_r>:
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <_cleanup_r+0x8>)
 8004546:	f000 b885 	b.w	8004654 <_fwalk_reent>
 800454a:	bf00      	nop
 800454c:	0800504d 	.word	0x0800504d

08004550 <__sfmoreglue>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	1e4a      	subs	r2, r1, #1
 8004554:	2568      	movs	r5, #104	; 0x68
 8004556:	4355      	muls	r5, r2
 8004558:	460e      	mov	r6, r1
 800455a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800455e:	f000 f897 	bl	8004690 <_malloc_r>
 8004562:	4604      	mov	r4, r0
 8004564:	b140      	cbz	r0, 8004578 <__sfmoreglue+0x28>
 8004566:	2100      	movs	r1, #0
 8004568:	e9c0 1600 	strd	r1, r6, [r0]
 800456c:	300c      	adds	r0, #12
 800456e:	60a0      	str	r0, [r4, #8]
 8004570:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004574:	f7ff ffa2 	bl	80044bc <memset>
 8004578:	4620      	mov	r0, r4
 800457a:	bd70      	pop	{r4, r5, r6, pc}

0800457c <__sinit>:
 800457c:	6983      	ldr	r3, [r0, #24]
 800457e:	b510      	push	{r4, lr}
 8004580:	4604      	mov	r4, r0
 8004582:	bb33      	cbnz	r3, 80045d2 <__sinit+0x56>
 8004584:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004588:	6503      	str	r3, [r0, #80]	; 0x50
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <__sinit+0x58>)
 800458c:	4a12      	ldr	r2, [pc, #72]	; (80045d8 <__sinit+0x5c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6282      	str	r2, [r0, #40]	; 0x28
 8004592:	4298      	cmp	r0, r3
 8004594:	bf04      	itt	eq
 8004596:	2301      	moveq	r3, #1
 8004598:	6183      	streq	r3, [r0, #24]
 800459a:	f000 f81f 	bl	80045dc <__sfp>
 800459e:	6060      	str	r0, [r4, #4]
 80045a0:	4620      	mov	r0, r4
 80045a2:	f000 f81b 	bl	80045dc <__sfp>
 80045a6:	60a0      	str	r0, [r4, #8]
 80045a8:	4620      	mov	r0, r4
 80045aa:	f000 f817 	bl	80045dc <__sfp>
 80045ae:	2200      	movs	r2, #0
 80045b0:	60e0      	str	r0, [r4, #12]
 80045b2:	2104      	movs	r1, #4
 80045b4:	6860      	ldr	r0, [r4, #4]
 80045b6:	f7ff ffa1 	bl	80044fc <std>
 80045ba:	2201      	movs	r2, #1
 80045bc:	2109      	movs	r1, #9
 80045be:	68a0      	ldr	r0, [r4, #8]
 80045c0:	f7ff ff9c 	bl	80044fc <std>
 80045c4:	2202      	movs	r2, #2
 80045c6:	2112      	movs	r1, #18
 80045c8:	68e0      	ldr	r0, [r4, #12]
 80045ca:	f7ff ff97 	bl	80044fc <std>
 80045ce:	2301      	movs	r3, #1
 80045d0:	61a3      	str	r3, [r4, #24]
 80045d2:	bd10      	pop	{r4, pc}
 80045d4:	080057b0 	.word	0x080057b0
 80045d8:	08004545 	.word	0x08004545

080045dc <__sfp>:
 80045dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <__sfp+0x70>)
 80045e0:	681e      	ldr	r6, [r3, #0]
 80045e2:	69b3      	ldr	r3, [r6, #24]
 80045e4:	4607      	mov	r7, r0
 80045e6:	b913      	cbnz	r3, 80045ee <__sfp+0x12>
 80045e8:	4630      	mov	r0, r6
 80045ea:	f7ff ffc7 	bl	800457c <__sinit>
 80045ee:	3648      	adds	r6, #72	; 0x48
 80045f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	d503      	bpl.n	8004600 <__sfp+0x24>
 80045f8:	6833      	ldr	r3, [r6, #0]
 80045fa:	b133      	cbz	r3, 800460a <__sfp+0x2e>
 80045fc:	6836      	ldr	r6, [r6, #0]
 80045fe:	e7f7      	b.n	80045f0 <__sfp+0x14>
 8004600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004604:	b16d      	cbz	r5, 8004622 <__sfp+0x46>
 8004606:	3468      	adds	r4, #104	; 0x68
 8004608:	e7f4      	b.n	80045f4 <__sfp+0x18>
 800460a:	2104      	movs	r1, #4
 800460c:	4638      	mov	r0, r7
 800460e:	f7ff ff9f 	bl	8004550 <__sfmoreglue>
 8004612:	6030      	str	r0, [r6, #0]
 8004614:	2800      	cmp	r0, #0
 8004616:	d1f1      	bne.n	80045fc <__sfp+0x20>
 8004618:	230c      	movs	r3, #12
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4604      	mov	r4, r0
 800461e:	4620      	mov	r0, r4
 8004620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <__sfp+0x74>)
 8004624:	6665      	str	r5, [r4, #100]	; 0x64
 8004626:	e9c4 5500 	strd	r5, r5, [r4]
 800462a:	60a5      	str	r5, [r4, #8]
 800462c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004630:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004634:	2208      	movs	r2, #8
 8004636:	4629      	mov	r1, r5
 8004638:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800463c:	f7ff ff3e 	bl	80044bc <memset>
 8004640:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004644:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004648:	e7e9      	b.n	800461e <__sfp+0x42>
 800464a:	bf00      	nop
 800464c:	080057b0 	.word	0x080057b0
 8004650:	ffff0001 	.word	0xffff0001

08004654 <_fwalk_reent>:
 8004654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004658:	4680      	mov	r8, r0
 800465a:	4689      	mov	r9, r1
 800465c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004660:	2600      	movs	r6, #0
 8004662:	b914      	cbnz	r4, 800466a <_fwalk_reent+0x16>
 8004664:	4630      	mov	r0, r6
 8004666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800466a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800466e:	3f01      	subs	r7, #1
 8004670:	d501      	bpl.n	8004676 <_fwalk_reent+0x22>
 8004672:	6824      	ldr	r4, [r4, #0]
 8004674:	e7f5      	b.n	8004662 <_fwalk_reent+0xe>
 8004676:	89ab      	ldrh	r3, [r5, #12]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d907      	bls.n	800468c <_fwalk_reent+0x38>
 800467c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004680:	3301      	adds	r3, #1
 8004682:	d003      	beq.n	800468c <_fwalk_reent+0x38>
 8004684:	4629      	mov	r1, r5
 8004686:	4640      	mov	r0, r8
 8004688:	47c8      	blx	r9
 800468a:	4306      	orrs	r6, r0
 800468c:	3568      	adds	r5, #104	; 0x68
 800468e:	e7ee      	b.n	800466e <_fwalk_reent+0x1a>

08004690 <_malloc_r>:
 8004690:	b570      	push	{r4, r5, r6, lr}
 8004692:	1ccd      	adds	r5, r1, #3
 8004694:	f025 0503 	bic.w	r5, r5, #3
 8004698:	3508      	adds	r5, #8
 800469a:	2d0c      	cmp	r5, #12
 800469c:	bf38      	it	cc
 800469e:	250c      	movcc	r5, #12
 80046a0:	2d00      	cmp	r5, #0
 80046a2:	4606      	mov	r6, r0
 80046a4:	db01      	blt.n	80046aa <_malloc_r+0x1a>
 80046a6:	42a9      	cmp	r1, r5
 80046a8:	d903      	bls.n	80046b2 <_malloc_r+0x22>
 80046aa:	230c      	movs	r3, #12
 80046ac:	6033      	str	r3, [r6, #0]
 80046ae:	2000      	movs	r0, #0
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
 80046b2:	f000 fd6b 	bl	800518c <__malloc_lock>
 80046b6:	4a21      	ldr	r2, [pc, #132]	; (800473c <_malloc_r+0xac>)
 80046b8:	6814      	ldr	r4, [r2, #0]
 80046ba:	4621      	mov	r1, r4
 80046bc:	b991      	cbnz	r1, 80046e4 <_malloc_r+0x54>
 80046be:	4c20      	ldr	r4, [pc, #128]	; (8004740 <_malloc_r+0xb0>)
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	b91b      	cbnz	r3, 80046cc <_malloc_r+0x3c>
 80046c4:	4630      	mov	r0, r6
 80046c6:	f000 fb05 	bl	8004cd4 <_sbrk_r>
 80046ca:	6020      	str	r0, [r4, #0]
 80046cc:	4629      	mov	r1, r5
 80046ce:	4630      	mov	r0, r6
 80046d0:	f000 fb00 	bl	8004cd4 <_sbrk_r>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d124      	bne.n	8004722 <_malloc_r+0x92>
 80046d8:	230c      	movs	r3, #12
 80046da:	6033      	str	r3, [r6, #0]
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 fd56 	bl	800518e <__malloc_unlock>
 80046e2:	e7e4      	b.n	80046ae <_malloc_r+0x1e>
 80046e4:	680b      	ldr	r3, [r1, #0]
 80046e6:	1b5b      	subs	r3, r3, r5
 80046e8:	d418      	bmi.n	800471c <_malloc_r+0x8c>
 80046ea:	2b0b      	cmp	r3, #11
 80046ec:	d90f      	bls.n	800470e <_malloc_r+0x7e>
 80046ee:	600b      	str	r3, [r1, #0]
 80046f0:	50cd      	str	r5, [r1, r3]
 80046f2:	18cc      	adds	r4, r1, r3
 80046f4:	4630      	mov	r0, r6
 80046f6:	f000 fd4a 	bl	800518e <__malloc_unlock>
 80046fa:	f104 000b 	add.w	r0, r4, #11
 80046fe:	1d23      	adds	r3, r4, #4
 8004700:	f020 0007 	bic.w	r0, r0, #7
 8004704:	1ac3      	subs	r3, r0, r3
 8004706:	d0d3      	beq.n	80046b0 <_malloc_r+0x20>
 8004708:	425a      	negs	r2, r3
 800470a:	50e2      	str	r2, [r4, r3]
 800470c:	e7d0      	b.n	80046b0 <_malloc_r+0x20>
 800470e:	428c      	cmp	r4, r1
 8004710:	684b      	ldr	r3, [r1, #4]
 8004712:	bf16      	itet	ne
 8004714:	6063      	strne	r3, [r4, #4]
 8004716:	6013      	streq	r3, [r2, #0]
 8004718:	460c      	movne	r4, r1
 800471a:	e7eb      	b.n	80046f4 <_malloc_r+0x64>
 800471c:	460c      	mov	r4, r1
 800471e:	6849      	ldr	r1, [r1, #4]
 8004720:	e7cc      	b.n	80046bc <_malloc_r+0x2c>
 8004722:	1cc4      	adds	r4, r0, #3
 8004724:	f024 0403 	bic.w	r4, r4, #3
 8004728:	42a0      	cmp	r0, r4
 800472a:	d005      	beq.n	8004738 <_malloc_r+0xa8>
 800472c:	1a21      	subs	r1, r4, r0
 800472e:	4630      	mov	r0, r6
 8004730:	f000 fad0 	bl	8004cd4 <_sbrk_r>
 8004734:	3001      	adds	r0, #1
 8004736:	d0cf      	beq.n	80046d8 <_malloc_r+0x48>
 8004738:	6025      	str	r5, [r4, #0]
 800473a:	e7db      	b.n	80046f4 <_malloc_r+0x64>
 800473c:	20000094 	.word	0x20000094
 8004740:	20000098 	.word	0x20000098

08004744 <__sfputc_r>:
 8004744:	6893      	ldr	r3, [r2, #8]
 8004746:	3b01      	subs	r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	b410      	push	{r4}
 800474c:	6093      	str	r3, [r2, #8]
 800474e:	da08      	bge.n	8004762 <__sfputc_r+0x1e>
 8004750:	6994      	ldr	r4, [r2, #24]
 8004752:	42a3      	cmp	r3, r4
 8004754:	db01      	blt.n	800475a <__sfputc_r+0x16>
 8004756:	290a      	cmp	r1, #10
 8004758:	d103      	bne.n	8004762 <__sfputc_r+0x1e>
 800475a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475e:	f000 bb0d 	b.w	8004d7c <__swbuf_r>
 8004762:	6813      	ldr	r3, [r2, #0]
 8004764:	1c58      	adds	r0, r3, #1
 8004766:	6010      	str	r0, [r2, #0]
 8004768:	7019      	strb	r1, [r3, #0]
 800476a:	4608      	mov	r0, r1
 800476c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004770:	4770      	bx	lr

08004772 <__sfputs_r>:
 8004772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004774:	4606      	mov	r6, r0
 8004776:	460f      	mov	r7, r1
 8004778:	4614      	mov	r4, r2
 800477a:	18d5      	adds	r5, r2, r3
 800477c:	42ac      	cmp	r4, r5
 800477e:	d101      	bne.n	8004784 <__sfputs_r+0x12>
 8004780:	2000      	movs	r0, #0
 8004782:	e007      	b.n	8004794 <__sfputs_r+0x22>
 8004784:	463a      	mov	r2, r7
 8004786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800478a:	4630      	mov	r0, r6
 800478c:	f7ff ffda 	bl	8004744 <__sfputc_r>
 8004790:	1c43      	adds	r3, r0, #1
 8004792:	d1f3      	bne.n	800477c <__sfputs_r+0xa>
 8004794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004798 <_vfiprintf_r>:
 8004798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800479c:	460c      	mov	r4, r1
 800479e:	b09d      	sub	sp, #116	; 0x74
 80047a0:	4617      	mov	r7, r2
 80047a2:	461d      	mov	r5, r3
 80047a4:	4606      	mov	r6, r0
 80047a6:	b118      	cbz	r0, 80047b0 <_vfiprintf_r+0x18>
 80047a8:	6983      	ldr	r3, [r0, #24]
 80047aa:	b90b      	cbnz	r3, 80047b0 <_vfiprintf_r+0x18>
 80047ac:	f7ff fee6 	bl	800457c <__sinit>
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <_vfiprintf_r+0x20c>)
 80047b2:	429c      	cmp	r4, r3
 80047b4:	d158      	bne.n	8004868 <_vfiprintf_r+0xd0>
 80047b6:	6874      	ldr	r4, [r6, #4]
 80047b8:	89a3      	ldrh	r3, [r4, #12]
 80047ba:	0718      	lsls	r0, r3, #28
 80047bc:	d55e      	bpl.n	800487c <_vfiprintf_r+0xe4>
 80047be:	6923      	ldr	r3, [r4, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d05b      	beq.n	800487c <_vfiprintf_r+0xe4>
 80047c4:	2300      	movs	r3, #0
 80047c6:	9309      	str	r3, [sp, #36]	; 0x24
 80047c8:	2320      	movs	r3, #32
 80047ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80047ce:	2330      	movs	r3, #48	; 0x30
 80047d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80047d4:	9503      	str	r5, [sp, #12]
 80047d6:	f04f 0b01 	mov.w	fp, #1
 80047da:	46b8      	mov	r8, r7
 80047dc:	4645      	mov	r5, r8
 80047de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80047e2:	b10b      	cbz	r3, 80047e8 <_vfiprintf_r+0x50>
 80047e4:	2b25      	cmp	r3, #37	; 0x25
 80047e6:	d154      	bne.n	8004892 <_vfiprintf_r+0xfa>
 80047e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80047ec:	d00b      	beq.n	8004806 <_vfiprintf_r+0x6e>
 80047ee:	4653      	mov	r3, sl
 80047f0:	463a      	mov	r2, r7
 80047f2:	4621      	mov	r1, r4
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff ffbc 	bl	8004772 <__sfputs_r>
 80047fa:	3001      	adds	r0, #1
 80047fc:	f000 80c2 	beq.w	8004984 <_vfiprintf_r+0x1ec>
 8004800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004802:	4453      	add	r3, sl
 8004804:	9309      	str	r3, [sp, #36]	; 0x24
 8004806:	f898 3000 	ldrb.w	r3, [r8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80ba 	beq.w	8004984 <_vfiprintf_r+0x1ec>
 8004810:	2300      	movs	r3, #0
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	9307      	str	r3, [sp, #28]
 800481e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004822:	931a      	str	r3, [sp, #104]	; 0x68
 8004824:	46a8      	mov	r8, r5
 8004826:	2205      	movs	r2, #5
 8004828:	f818 1b01 	ldrb.w	r1, [r8], #1
 800482c:	485e      	ldr	r0, [pc, #376]	; (80049a8 <_vfiprintf_r+0x210>)
 800482e:	f7fb fd07 	bl	8000240 <memchr>
 8004832:	9b04      	ldr	r3, [sp, #16]
 8004834:	bb78      	cbnz	r0, 8004896 <_vfiprintf_r+0xfe>
 8004836:	06d9      	lsls	r1, r3, #27
 8004838:	bf44      	itt	mi
 800483a:	2220      	movmi	r2, #32
 800483c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004840:	071a      	lsls	r2, r3, #28
 8004842:	bf44      	itt	mi
 8004844:	222b      	movmi	r2, #43	; 0x2b
 8004846:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800484a:	782a      	ldrb	r2, [r5, #0]
 800484c:	2a2a      	cmp	r2, #42	; 0x2a
 800484e:	d02a      	beq.n	80048a6 <_vfiprintf_r+0x10e>
 8004850:	9a07      	ldr	r2, [sp, #28]
 8004852:	46a8      	mov	r8, r5
 8004854:	2000      	movs	r0, #0
 8004856:	250a      	movs	r5, #10
 8004858:	4641      	mov	r1, r8
 800485a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800485e:	3b30      	subs	r3, #48	; 0x30
 8004860:	2b09      	cmp	r3, #9
 8004862:	d969      	bls.n	8004938 <_vfiprintf_r+0x1a0>
 8004864:	b360      	cbz	r0, 80048c0 <_vfiprintf_r+0x128>
 8004866:	e024      	b.n	80048b2 <_vfiprintf_r+0x11a>
 8004868:	4b50      	ldr	r3, [pc, #320]	; (80049ac <_vfiprintf_r+0x214>)
 800486a:	429c      	cmp	r4, r3
 800486c:	d101      	bne.n	8004872 <_vfiprintf_r+0xda>
 800486e:	68b4      	ldr	r4, [r6, #8]
 8004870:	e7a2      	b.n	80047b8 <_vfiprintf_r+0x20>
 8004872:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <_vfiprintf_r+0x218>)
 8004874:	429c      	cmp	r4, r3
 8004876:	bf08      	it	eq
 8004878:	68f4      	ldreq	r4, [r6, #12]
 800487a:	e79d      	b.n	80047b8 <_vfiprintf_r+0x20>
 800487c:	4621      	mov	r1, r4
 800487e:	4630      	mov	r0, r6
 8004880:	f000 fae0 	bl	8004e44 <__swsetup_r>
 8004884:	2800      	cmp	r0, #0
 8004886:	d09d      	beq.n	80047c4 <_vfiprintf_r+0x2c>
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	b01d      	add	sp, #116	; 0x74
 800488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004892:	46a8      	mov	r8, r5
 8004894:	e7a2      	b.n	80047dc <_vfiprintf_r+0x44>
 8004896:	4a44      	ldr	r2, [pc, #272]	; (80049a8 <_vfiprintf_r+0x210>)
 8004898:	1a80      	subs	r0, r0, r2
 800489a:	fa0b f000 	lsl.w	r0, fp, r0
 800489e:	4318      	orrs	r0, r3
 80048a0:	9004      	str	r0, [sp, #16]
 80048a2:	4645      	mov	r5, r8
 80048a4:	e7be      	b.n	8004824 <_vfiprintf_r+0x8c>
 80048a6:	9a03      	ldr	r2, [sp, #12]
 80048a8:	1d11      	adds	r1, r2, #4
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	9103      	str	r1, [sp, #12]
 80048ae:	2a00      	cmp	r2, #0
 80048b0:	db01      	blt.n	80048b6 <_vfiprintf_r+0x11e>
 80048b2:	9207      	str	r2, [sp, #28]
 80048b4:	e004      	b.n	80048c0 <_vfiprintf_r+0x128>
 80048b6:	4252      	negs	r2, r2
 80048b8:	f043 0302 	orr.w	r3, r3, #2
 80048bc:	9207      	str	r2, [sp, #28]
 80048be:	9304      	str	r3, [sp, #16]
 80048c0:	f898 3000 	ldrb.w	r3, [r8]
 80048c4:	2b2e      	cmp	r3, #46	; 0x2e
 80048c6:	d10e      	bne.n	80048e6 <_vfiprintf_r+0x14e>
 80048c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80048cc:	2b2a      	cmp	r3, #42	; 0x2a
 80048ce:	d138      	bne.n	8004942 <_vfiprintf_r+0x1aa>
 80048d0:	9b03      	ldr	r3, [sp, #12]
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	9203      	str	r2, [sp, #12]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bfb8      	it	lt
 80048dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80048e0:	f108 0802 	add.w	r8, r8, #2
 80048e4:	9305      	str	r3, [sp, #20]
 80048e6:	4d33      	ldr	r5, [pc, #204]	; (80049b4 <_vfiprintf_r+0x21c>)
 80048e8:	f898 1000 	ldrb.w	r1, [r8]
 80048ec:	2203      	movs	r2, #3
 80048ee:	4628      	mov	r0, r5
 80048f0:	f7fb fca6 	bl	8000240 <memchr>
 80048f4:	b140      	cbz	r0, 8004908 <_vfiprintf_r+0x170>
 80048f6:	2340      	movs	r3, #64	; 0x40
 80048f8:	1b40      	subs	r0, r0, r5
 80048fa:	fa03 f000 	lsl.w	r0, r3, r0
 80048fe:	9b04      	ldr	r3, [sp, #16]
 8004900:	4303      	orrs	r3, r0
 8004902:	f108 0801 	add.w	r8, r8, #1
 8004906:	9304      	str	r3, [sp, #16]
 8004908:	f898 1000 	ldrb.w	r1, [r8]
 800490c:	482a      	ldr	r0, [pc, #168]	; (80049b8 <_vfiprintf_r+0x220>)
 800490e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004912:	2206      	movs	r2, #6
 8004914:	f108 0701 	add.w	r7, r8, #1
 8004918:	f7fb fc92 	bl	8000240 <memchr>
 800491c:	2800      	cmp	r0, #0
 800491e:	d037      	beq.n	8004990 <_vfiprintf_r+0x1f8>
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <_vfiprintf_r+0x224>)
 8004922:	bb1b      	cbnz	r3, 800496c <_vfiprintf_r+0x1d4>
 8004924:	9b03      	ldr	r3, [sp, #12]
 8004926:	3307      	adds	r3, #7
 8004928:	f023 0307 	bic.w	r3, r3, #7
 800492c:	3308      	adds	r3, #8
 800492e:	9303      	str	r3, [sp, #12]
 8004930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004932:	444b      	add	r3, r9
 8004934:	9309      	str	r3, [sp, #36]	; 0x24
 8004936:	e750      	b.n	80047da <_vfiprintf_r+0x42>
 8004938:	fb05 3202 	mla	r2, r5, r2, r3
 800493c:	2001      	movs	r0, #1
 800493e:	4688      	mov	r8, r1
 8004940:	e78a      	b.n	8004858 <_vfiprintf_r+0xc0>
 8004942:	2300      	movs	r3, #0
 8004944:	f108 0801 	add.w	r8, r8, #1
 8004948:	9305      	str	r3, [sp, #20]
 800494a:	4619      	mov	r1, r3
 800494c:	250a      	movs	r5, #10
 800494e:	4640      	mov	r0, r8
 8004950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004954:	3a30      	subs	r2, #48	; 0x30
 8004956:	2a09      	cmp	r2, #9
 8004958:	d903      	bls.n	8004962 <_vfiprintf_r+0x1ca>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0c3      	beq.n	80048e6 <_vfiprintf_r+0x14e>
 800495e:	9105      	str	r1, [sp, #20]
 8004960:	e7c1      	b.n	80048e6 <_vfiprintf_r+0x14e>
 8004962:	fb05 2101 	mla	r1, r5, r1, r2
 8004966:	2301      	movs	r3, #1
 8004968:	4680      	mov	r8, r0
 800496a:	e7f0      	b.n	800494e <_vfiprintf_r+0x1b6>
 800496c:	ab03      	add	r3, sp, #12
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	4622      	mov	r2, r4
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <_vfiprintf_r+0x228>)
 8004974:	a904      	add	r1, sp, #16
 8004976:	4630      	mov	r0, r6
 8004978:	f3af 8000 	nop.w
 800497c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004980:	4681      	mov	r9, r0
 8004982:	d1d5      	bne.n	8004930 <_vfiprintf_r+0x198>
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	065b      	lsls	r3, r3, #25
 8004988:	f53f af7e 	bmi.w	8004888 <_vfiprintf_r+0xf0>
 800498c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800498e:	e77d      	b.n	800488c <_vfiprintf_r+0xf4>
 8004990:	ab03      	add	r3, sp, #12
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4622      	mov	r2, r4
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <_vfiprintf_r+0x228>)
 8004998:	a904      	add	r1, sp, #16
 800499a:	4630      	mov	r0, r6
 800499c:	f000 f888 	bl	8004ab0 <_printf_i>
 80049a0:	e7ec      	b.n	800497c <_vfiprintf_r+0x1e4>
 80049a2:	bf00      	nop
 80049a4:	080057d4 	.word	0x080057d4
 80049a8:	08005814 	.word	0x08005814
 80049ac:	080057f4 	.word	0x080057f4
 80049b0:	080057b4 	.word	0x080057b4
 80049b4:	0800581a 	.word	0x0800581a
 80049b8:	0800581e 	.word	0x0800581e
 80049bc:	00000000 	.word	0x00000000
 80049c0:	08004773 	.word	0x08004773

080049c4 <_printf_common>:
 80049c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	4691      	mov	r9, r2
 80049ca:	461f      	mov	r7, r3
 80049cc:	688a      	ldr	r2, [r1, #8]
 80049ce:	690b      	ldr	r3, [r1, #16]
 80049d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bfb8      	it	lt
 80049d8:	4613      	movlt	r3, r2
 80049da:	f8c9 3000 	str.w	r3, [r9]
 80049de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049e2:	4606      	mov	r6, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	b112      	cbz	r2, 80049ee <_printf_common+0x2a>
 80049e8:	3301      	adds	r3, #1
 80049ea:	f8c9 3000 	str.w	r3, [r9]
 80049ee:	6823      	ldr	r3, [r4, #0]
 80049f0:	0699      	lsls	r1, r3, #26
 80049f2:	bf42      	ittt	mi
 80049f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049f8:	3302      	addmi	r3, #2
 80049fa:	f8c9 3000 	strmi.w	r3, [r9]
 80049fe:	6825      	ldr	r5, [r4, #0]
 8004a00:	f015 0506 	ands.w	r5, r5, #6
 8004a04:	d107      	bne.n	8004a16 <_printf_common+0x52>
 8004a06:	f104 0a19 	add.w	sl, r4, #25
 8004a0a:	68e3      	ldr	r3, [r4, #12]
 8004a0c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	42ab      	cmp	r3, r5
 8004a14:	dc28      	bgt.n	8004a68 <_printf_common+0xa4>
 8004a16:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	3300      	adds	r3, #0
 8004a1e:	bf18      	it	ne
 8004a20:	2301      	movne	r3, #1
 8004a22:	0692      	lsls	r2, r2, #26
 8004a24:	d42d      	bmi.n	8004a82 <_printf_common+0xbe>
 8004a26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2a:	4639      	mov	r1, r7
 8004a2c:	4630      	mov	r0, r6
 8004a2e:	47c0      	blx	r8
 8004a30:	3001      	adds	r0, #1
 8004a32:	d020      	beq.n	8004a76 <_printf_common+0xb2>
 8004a34:	6823      	ldr	r3, [r4, #0]
 8004a36:	68e5      	ldr	r5, [r4, #12]
 8004a38:	f8d9 2000 	ldr.w	r2, [r9]
 8004a3c:	f003 0306 	and.w	r3, r3, #6
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	bf08      	it	eq
 8004a44:	1aad      	subeq	r5, r5, r2
 8004a46:	68a3      	ldr	r3, [r4, #8]
 8004a48:	6922      	ldr	r2, [r4, #16]
 8004a4a:	bf0c      	ite	eq
 8004a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a50:	2500      	movne	r5, #0
 8004a52:	4293      	cmp	r3, r2
 8004a54:	bfc4      	itt	gt
 8004a56:	1a9b      	subgt	r3, r3, r2
 8004a58:	18ed      	addgt	r5, r5, r3
 8004a5a:	f04f 0900 	mov.w	r9, #0
 8004a5e:	341a      	adds	r4, #26
 8004a60:	454d      	cmp	r5, r9
 8004a62:	d11a      	bne.n	8004a9a <_printf_common+0xd6>
 8004a64:	2000      	movs	r0, #0
 8004a66:	e008      	b.n	8004a7a <_printf_common+0xb6>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	4639      	mov	r1, r7
 8004a6e:	4630      	mov	r0, r6
 8004a70:	47c0      	blx	r8
 8004a72:	3001      	adds	r0, #1
 8004a74:	d103      	bne.n	8004a7e <_printf_common+0xba>
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7e:	3501      	adds	r5, #1
 8004a80:	e7c3      	b.n	8004a0a <_printf_common+0x46>
 8004a82:	18e1      	adds	r1, r4, r3
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	2030      	movs	r0, #48	; 0x30
 8004a88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a8c:	4422      	add	r2, r4
 8004a8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a96:	3302      	adds	r3, #2
 8004a98:	e7c5      	b.n	8004a26 <_printf_common+0x62>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	47c0      	blx	r8
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d0e6      	beq.n	8004a76 <_printf_common+0xb2>
 8004aa8:	f109 0901 	add.w	r9, r9, #1
 8004aac:	e7d8      	b.n	8004a60 <_printf_common+0x9c>
	...

08004ab0 <_printf_i>:
 8004ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ab4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004ab8:	460c      	mov	r4, r1
 8004aba:	7e09      	ldrb	r1, [r1, #24]
 8004abc:	b085      	sub	sp, #20
 8004abe:	296e      	cmp	r1, #110	; 0x6e
 8004ac0:	4617      	mov	r7, r2
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	4698      	mov	r8, r3
 8004ac6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ac8:	f000 80b3 	beq.w	8004c32 <_printf_i+0x182>
 8004acc:	d822      	bhi.n	8004b14 <_printf_i+0x64>
 8004ace:	2963      	cmp	r1, #99	; 0x63
 8004ad0:	d036      	beq.n	8004b40 <_printf_i+0x90>
 8004ad2:	d80a      	bhi.n	8004aea <_printf_i+0x3a>
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	f000 80b9 	beq.w	8004c4c <_printf_i+0x19c>
 8004ada:	2958      	cmp	r1, #88	; 0x58
 8004adc:	f000 8083 	beq.w	8004be6 <_printf_i+0x136>
 8004ae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ae8:	e032      	b.n	8004b50 <_printf_i+0xa0>
 8004aea:	2964      	cmp	r1, #100	; 0x64
 8004aec:	d001      	beq.n	8004af2 <_printf_i+0x42>
 8004aee:	2969      	cmp	r1, #105	; 0x69
 8004af0:	d1f6      	bne.n	8004ae0 <_printf_i+0x30>
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	6813      	ldr	r3, [r2, #0]
 8004af6:	0605      	lsls	r5, r0, #24
 8004af8:	f103 0104 	add.w	r1, r3, #4
 8004afc:	d52a      	bpl.n	8004b54 <_printf_i+0xa4>
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6011      	str	r1, [r2, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	da03      	bge.n	8004b0e <_printf_i+0x5e>
 8004b06:	222d      	movs	r2, #45	; 0x2d
 8004b08:	425b      	negs	r3, r3
 8004b0a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b0e:	486f      	ldr	r0, [pc, #444]	; (8004ccc <_printf_i+0x21c>)
 8004b10:	220a      	movs	r2, #10
 8004b12:	e039      	b.n	8004b88 <_printf_i+0xd8>
 8004b14:	2973      	cmp	r1, #115	; 0x73
 8004b16:	f000 809d 	beq.w	8004c54 <_printf_i+0x1a4>
 8004b1a:	d808      	bhi.n	8004b2e <_printf_i+0x7e>
 8004b1c:	296f      	cmp	r1, #111	; 0x6f
 8004b1e:	d020      	beq.n	8004b62 <_printf_i+0xb2>
 8004b20:	2970      	cmp	r1, #112	; 0x70
 8004b22:	d1dd      	bne.n	8004ae0 <_printf_i+0x30>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	f043 0320 	orr.w	r3, r3, #32
 8004b2a:	6023      	str	r3, [r4, #0]
 8004b2c:	e003      	b.n	8004b36 <_printf_i+0x86>
 8004b2e:	2975      	cmp	r1, #117	; 0x75
 8004b30:	d017      	beq.n	8004b62 <_printf_i+0xb2>
 8004b32:	2978      	cmp	r1, #120	; 0x78
 8004b34:	d1d4      	bne.n	8004ae0 <_printf_i+0x30>
 8004b36:	2378      	movs	r3, #120	; 0x78
 8004b38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b3c:	4864      	ldr	r0, [pc, #400]	; (8004cd0 <_printf_i+0x220>)
 8004b3e:	e055      	b.n	8004bec <_printf_i+0x13c>
 8004b40:	6813      	ldr	r3, [r2, #0]
 8004b42:	1d19      	adds	r1, r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6011      	str	r1, [r2, #0]
 8004b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b50:	2301      	movs	r3, #1
 8004b52:	e08c      	b.n	8004c6e <_printf_i+0x1be>
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6011      	str	r1, [r2, #0]
 8004b58:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b5c:	bf18      	it	ne
 8004b5e:	b21b      	sxthne	r3, r3
 8004b60:	e7cf      	b.n	8004b02 <_printf_i+0x52>
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	6825      	ldr	r5, [r4, #0]
 8004b66:	1d18      	adds	r0, r3, #4
 8004b68:	6010      	str	r0, [r2, #0]
 8004b6a:	0628      	lsls	r0, r5, #24
 8004b6c:	d501      	bpl.n	8004b72 <_printf_i+0xc2>
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	e002      	b.n	8004b78 <_printf_i+0xc8>
 8004b72:	0668      	lsls	r0, r5, #25
 8004b74:	d5fb      	bpl.n	8004b6e <_printf_i+0xbe>
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	4854      	ldr	r0, [pc, #336]	; (8004ccc <_printf_i+0x21c>)
 8004b7a:	296f      	cmp	r1, #111	; 0x6f
 8004b7c:	bf14      	ite	ne
 8004b7e:	220a      	movne	r2, #10
 8004b80:	2208      	moveq	r2, #8
 8004b82:	2100      	movs	r1, #0
 8004b84:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b88:	6865      	ldr	r5, [r4, #4]
 8004b8a:	60a5      	str	r5, [r4, #8]
 8004b8c:	2d00      	cmp	r5, #0
 8004b8e:	f2c0 8095 	blt.w	8004cbc <_printf_i+0x20c>
 8004b92:	6821      	ldr	r1, [r4, #0]
 8004b94:	f021 0104 	bic.w	r1, r1, #4
 8004b98:	6021      	str	r1, [r4, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d13d      	bne.n	8004c1a <_printf_i+0x16a>
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	f040 808e 	bne.w	8004cc0 <_printf_i+0x210>
 8004ba4:	4665      	mov	r5, ip
 8004ba6:	2a08      	cmp	r2, #8
 8004ba8:	d10b      	bne.n	8004bc2 <_printf_i+0x112>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	07db      	lsls	r3, r3, #31
 8004bae:	d508      	bpl.n	8004bc2 <_printf_i+0x112>
 8004bb0:	6923      	ldr	r3, [r4, #16]
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	bfde      	ittt	le
 8004bb8:	2330      	movle	r3, #48	; 0x30
 8004bba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bc2:	ebac 0305 	sub.w	r3, ip, r5
 8004bc6:	6123      	str	r3, [r4, #16]
 8004bc8:	f8cd 8000 	str.w	r8, [sp]
 8004bcc:	463b      	mov	r3, r7
 8004bce:	aa03      	add	r2, sp, #12
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f7ff fef6 	bl	80049c4 <_printf_common>
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d14d      	bne.n	8004c78 <_printf_i+0x1c8>
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	b005      	add	sp, #20
 8004be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004be6:	4839      	ldr	r0, [pc, #228]	; (8004ccc <_printf_i+0x21c>)
 8004be8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004bec:	6813      	ldr	r3, [r2, #0]
 8004bee:	6821      	ldr	r1, [r4, #0]
 8004bf0:	1d1d      	adds	r5, r3, #4
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6015      	str	r5, [r2, #0]
 8004bf6:	060a      	lsls	r2, r1, #24
 8004bf8:	d50b      	bpl.n	8004c12 <_printf_i+0x162>
 8004bfa:	07ca      	lsls	r2, r1, #31
 8004bfc:	bf44      	itt	mi
 8004bfe:	f041 0120 	orrmi.w	r1, r1, #32
 8004c02:	6021      	strmi	r1, [r4, #0]
 8004c04:	b91b      	cbnz	r3, 8004c0e <_printf_i+0x15e>
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	f022 0220 	bic.w	r2, r2, #32
 8004c0c:	6022      	str	r2, [r4, #0]
 8004c0e:	2210      	movs	r2, #16
 8004c10:	e7b7      	b.n	8004b82 <_printf_i+0xd2>
 8004c12:	064d      	lsls	r5, r1, #25
 8004c14:	bf48      	it	mi
 8004c16:	b29b      	uxthmi	r3, r3
 8004c18:	e7ef      	b.n	8004bfa <_printf_i+0x14a>
 8004c1a:	4665      	mov	r5, ip
 8004c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c20:	fb02 3311 	mls	r3, r2, r1, r3
 8004c24:	5cc3      	ldrb	r3, [r0, r3]
 8004c26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	d1f5      	bne.n	8004c1c <_printf_i+0x16c>
 8004c30:	e7b9      	b.n	8004ba6 <_printf_i+0xf6>
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	6825      	ldr	r5, [r4, #0]
 8004c36:	6961      	ldr	r1, [r4, #20]
 8004c38:	1d18      	adds	r0, r3, #4
 8004c3a:	6010      	str	r0, [r2, #0]
 8004c3c:	0628      	lsls	r0, r5, #24
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	d501      	bpl.n	8004c46 <_printf_i+0x196>
 8004c42:	6019      	str	r1, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <_printf_i+0x19c>
 8004c46:	066a      	lsls	r2, r5, #25
 8004c48:	d5fb      	bpl.n	8004c42 <_printf_i+0x192>
 8004c4a:	8019      	strh	r1, [r3, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	4665      	mov	r5, ip
 8004c52:	e7b9      	b.n	8004bc8 <_printf_i+0x118>
 8004c54:	6813      	ldr	r3, [r2, #0]
 8004c56:	1d19      	adds	r1, r3, #4
 8004c58:	6011      	str	r1, [r2, #0]
 8004c5a:	681d      	ldr	r5, [r3, #0]
 8004c5c:	6862      	ldr	r2, [r4, #4]
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7fb faed 	bl	8000240 <memchr>
 8004c66:	b108      	cbz	r0, 8004c6c <_printf_i+0x1bc>
 8004c68:	1b40      	subs	r0, r0, r5
 8004c6a:	6060      	str	r0, [r4, #4]
 8004c6c:	6863      	ldr	r3, [r4, #4]
 8004c6e:	6123      	str	r3, [r4, #16]
 8004c70:	2300      	movs	r3, #0
 8004c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c76:	e7a7      	b.n	8004bc8 <_printf_i+0x118>
 8004c78:	6923      	ldr	r3, [r4, #16]
 8004c7a:	462a      	mov	r2, r5
 8004c7c:	4639      	mov	r1, r7
 8004c7e:	4630      	mov	r0, r6
 8004c80:	47c0      	blx	r8
 8004c82:	3001      	adds	r0, #1
 8004c84:	d0aa      	beq.n	8004bdc <_printf_i+0x12c>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	079b      	lsls	r3, r3, #30
 8004c8a:	d413      	bmi.n	8004cb4 <_printf_i+0x204>
 8004c8c:	68e0      	ldr	r0, [r4, #12]
 8004c8e:	9b03      	ldr	r3, [sp, #12]
 8004c90:	4298      	cmp	r0, r3
 8004c92:	bfb8      	it	lt
 8004c94:	4618      	movlt	r0, r3
 8004c96:	e7a3      	b.n	8004be0 <_printf_i+0x130>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	464a      	mov	r2, r9
 8004c9c:	4639      	mov	r1, r7
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	47c0      	blx	r8
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d09a      	beq.n	8004bdc <_printf_i+0x12c>
 8004ca6:	3501      	adds	r5, #1
 8004ca8:	68e3      	ldr	r3, [r4, #12]
 8004caa:	9a03      	ldr	r2, [sp, #12]
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	42ab      	cmp	r3, r5
 8004cb0:	dcf2      	bgt.n	8004c98 <_printf_i+0x1e8>
 8004cb2:	e7eb      	b.n	8004c8c <_printf_i+0x1dc>
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	f104 0919 	add.w	r9, r4, #25
 8004cba:	e7f5      	b.n	8004ca8 <_printf_i+0x1f8>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ac      	bne.n	8004c1a <_printf_i+0x16a>
 8004cc0:	7803      	ldrb	r3, [r0, #0]
 8004cc2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cca:	e76c      	b.n	8004ba6 <_printf_i+0xf6>
 8004ccc:	08005825 	.word	0x08005825
 8004cd0:	08005836 	.word	0x08005836

08004cd4 <_sbrk_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	4c06      	ldr	r4, [pc, #24]	; (8004cf0 <_sbrk_r+0x1c>)
 8004cd8:	2300      	movs	r3, #0
 8004cda:	4605      	mov	r5, r0
 8004cdc:	4608      	mov	r0, r1
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	f7fc fd52 	bl	8001788 <_sbrk>
 8004ce4:	1c43      	adds	r3, r0, #1
 8004ce6:	d102      	bne.n	8004cee <_sbrk_r+0x1a>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	b103      	cbz	r3, 8004cee <_sbrk_r+0x1a>
 8004cec:	602b      	str	r3, [r5, #0]
 8004cee:	bd38      	pop	{r3, r4, r5, pc}
 8004cf0:	200003dc 	.word	0x200003dc

08004cf4 <__sread>:
 8004cf4:	b510      	push	{r4, lr}
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cfc:	f000 fa96 	bl	800522c <_read_r>
 8004d00:	2800      	cmp	r0, #0
 8004d02:	bfab      	itete	ge
 8004d04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d06:	89a3      	ldrhlt	r3, [r4, #12]
 8004d08:	181b      	addge	r3, r3, r0
 8004d0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d0e:	bfac      	ite	ge
 8004d10:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d12:	81a3      	strhlt	r3, [r4, #12]
 8004d14:	bd10      	pop	{r4, pc}

08004d16 <__swrite>:
 8004d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d1a:	461f      	mov	r7, r3
 8004d1c:	898b      	ldrh	r3, [r1, #12]
 8004d1e:	05db      	lsls	r3, r3, #23
 8004d20:	4605      	mov	r5, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	4616      	mov	r6, r2
 8004d26:	d505      	bpl.n	8004d34 <__swrite+0x1e>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d30:	f000 f9b6 	bl	80050a0 <_lseek_r>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d3e:	81a3      	strh	r3, [r4, #12]
 8004d40:	4632      	mov	r2, r6
 8004d42:	463b      	mov	r3, r7
 8004d44:	4628      	mov	r0, r5
 8004d46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d4a:	f000 b869 	b.w	8004e20 <_write_r>

08004d4e <__sseek>:
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	460c      	mov	r4, r1
 8004d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d56:	f000 f9a3 	bl	80050a0 <_lseek_r>
 8004d5a:	1c43      	adds	r3, r0, #1
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	bf15      	itete	ne
 8004d60:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d6a:	81a3      	strheq	r3, [r4, #12]
 8004d6c:	bf18      	it	ne
 8004d6e:	81a3      	strhne	r3, [r4, #12]
 8004d70:	bd10      	pop	{r4, pc}

08004d72 <__sclose>:
 8004d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d76:	f000 b8d3 	b.w	8004f20 <_close_r>
	...

08004d7c <__swbuf_r>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	460e      	mov	r6, r1
 8004d80:	4614      	mov	r4, r2
 8004d82:	4605      	mov	r5, r0
 8004d84:	b118      	cbz	r0, 8004d8e <__swbuf_r+0x12>
 8004d86:	6983      	ldr	r3, [r0, #24]
 8004d88:	b90b      	cbnz	r3, 8004d8e <__swbuf_r+0x12>
 8004d8a:	f7ff fbf7 	bl	800457c <__sinit>
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <__swbuf_r+0x98>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	d12a      	bne.n	8004dea <__swbuf_r+0x6e>
 8004d94:	686c      	ldr	r4, [r5, #4]
 8004d96:	69a3      	ldr	r3, [r4, #24]
 8004d98:	60a3      	str	r3, [r4, #8]
 8004d9a:	89a3      	ldrh	r3, [r4, #12]
 8004d9c:	071a      	lsls	r2, r3, #28
 8004d9e:	d52e      	bpl.n	8004dfe <__swbuf_r+0x82>
 8004da0:	6923      	ldr	r3, [r4, #16]
 8004da2:	b363      	cbz	r3, 8004dfe <__swbuf_r+0x82>
 8004da4:	6923      	ldr	r3, [r4, #16]
 8004da6:	6820      	ldr	r0, [r4, #0]
 8004da8:	1ac0      	subs	r0, r0, r3
 8004daa:	6963      	ldr	r3, [r4, #20]
 8004dac:	b2f6      	uxtb	r6, r6
 8004dae:	4283      	cmp	r3, r0
 8004db0:	4637      	mov	r7, r6
 8004db2:	dc04      	bgt.n	8004dbe <__swbuf_r+0x42>
 8004db4:	4621      	mov	r1, r4
 8004db6:	4628      	mov	r0, r5
 8004db8:	f000 f948 	bl	800504c <_fflush_r>
 8004dbc:	bb28      	cbnz	r0, 8004e0a <__swbuf_r+0x8e>
 8004dbe:	68a3      	ldr	r3, [r4, #8]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	60a3      	str	r3, [r4, #8]
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	701e      	strb	r6, [r3, #0]
 8004dcc:	6963      	ldr	r3, [r4, #20]
 8004dce:	3001      	adds	r0, #1
 8004dd0:	4283      	cmp	r3, r0
 8004dd2:	d004      	beq.n	8004dde <__swbuf_r+0x62>
 8004dd4:	89a3      	ldrh	r3, [r4, #12]
 8004dd6:	07db      	lsls	r3, r3, #31
 8004dd8:	d519      	bpl.n	8004e0e <__swbuf_r+0x92>
 8004dda:	2e0a      	cmp	r6, #10
 8004ddc:	d117      	bne.n	8004e0e <__swbuf_r+0x92>
 8004dde:	4621      	mov	r1, r4
 8004de0:	4628      	mov	r0, r5
 8004de2:	f000 f933 	bl	800504c <_fflush_r>
 8004de6:	b190      	cbz	r0, 8004e0e <__swbuf_r+0x92>
 8004de8:	e00f      	b.n	8004e0a <__swbuf_r+0x8e>
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <__swbuf_r+0x9c>)
 8004dec:	429c      	cmp	r4, r3
 8004dee:	d101      	bne.n	8004df4 <__swbuf_r+0x78>
 8004df0:	68ac      	ldr	r4, [r5, #8]
 8004df2:	e7d0      	b.n	8004d96 <__swbuf_r+0x1a>
 8004df4:	4b09      	ldr	r3, [pc, #36]	; (8004e1c <__swbuf_r+0xa0>)
 8004df6:	429c      	cmp	r4, r3
 8004df8:	bf08      	it	eq
 8004dfa:	68ec      	ldreq	r4, [r5, #12]
 8004dfc:	e7cb      	b.n	8004d96 <__swbuf_r+0x1a>
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 f81f 	bl	8004e44 <__swsetup_r>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	d0cc      	beq.n	8004da4 <__swbuf_r+0x28>
 8004e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8004e0e:	4638      	mov	r0, r7
 8004e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e12:	bf00      	nop
 8004e14:	080057d4 	.word	0x080057d4
 8004e18:	080057f4 	.word	0x080057f4
 8004e1c:	080057b4 	.word	0x080057b4

08004e20 <_write_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4c07      	ldr	r4, [pc, #28]	; (8004e40 <_write_r+0x20>)
 8004e24:	4605      	mov	r5, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	6022      	str	r2, [r4, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fc fc59 	bl	80016e6 <_write>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_write_r+0x1e>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_write_r+0x1e>
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	200003dc 	.word	0x200003dc

08004e44 <__swsetup_r>:
 8004e44:	4b32      	ldr	r3, [pc, #200]	; (8004f10 <__swsetup_r+0xcc>)
 8004e46:	b570      	push	{r4, r5, r6, lr}
 8004e48:	681d      	ldr	r5, [r3, #0]
 8004e4a:	4606      	mov	r6, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	b125      	cbz	r5, 8004e5a <__swsetup_r+0x16>
 8004e50:	69ab      	ldr	r3, [r5, #24]
 8004e52:	b913      	cbnz	r3, 8004e5a <__swsetup_r+0x16>
 8004e54:	4628      	mov	r0, r5
 8004e56:	f7ff fb91 	bl	800457c <__sinit>
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <__swsetup_r+0xd0>)
 8004e5c:	429c      	cmp	r4, r3
 8004e5e:	d10f      	bne.n	8004e80 <__swsetup_r+0x3c>
 8004e60:	686c      	ldr	r4, [r5, #4]
 8004e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e66:	b29a      	uxth	r2, r3
 8004e68:	0715      	lsls	r5, r2, #28
 8004e6a:	d42c      	bmi.n	8004ec6 <__swsetup_r+0x82>
 8004e6c:	06d0      	lsls	r0, r2, #27
 8004e6e:	d411      	bmi.n	8004e94 <__swsetup_r+0x50>
 8004e70:	2209      	movs	r2, #9
 8004e72:	6032      	str	r2, [r6, #0]
 8004e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e78:	81a3      	strh	r3, [r4, #12]
 8004e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7e:	e03e      	b.n	8004efe <__swsetup_r+0xba>
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <__swsetup_r+0xd4>)
 8004e82:	429c      	cmp	r4, r3
 8004e84:	d101      	bne.n	8004e8a <__swsetup_r+0x46>
 8004e86:	68ac      	ldr	r4, [r5, #8]
 8004e88:	e7eb      	b.n	8004e62 <__swsetup_r+0x1e>
 8004e8a:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <__swsetup_r+0xd8>)
 8004e8c:	429c      	cmp	r4, r3
 8004e8e:	bf08      	it	eq
 8004e90:	68ec      	ldreq	r4, [r5, #12]
 8004e92:	e7e6      	b.n	8004e62 <__swsetup_r+0x1e>
 8004e94:	0751      	lsls	r1, r2, #29
 8004e96:	d512      	bpl.n	8004ebe <__swsetup_r+0x7a>
 8004e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9a:	b141      	cbz	r1, 8004eae <__swsetup_r+0x6a>
 8004e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea0:	4299      	cmp	r1, r3
 8004ea2:	d002      	beq.n	8004eaa <__swsetup_r+0x66>
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f000 f973 	bl	8005190 <_free_r>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6363      	str	r3, [r4, #52]	; 0x34
 8004eae:	89a3      	ldrh	r3, [r4, #12]
 8004eb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004eb4:	81a3      	strh	r3, [r4, #12]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	6923      	ldr	r3, [r4, #16]
 8004ebc:	6023      	str	r3, [r4, #0]
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f043 0308 	orr.w	r3, r3, #8
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	b94b      	cbnz	r3, 8004ede <__swsetup_r+0x9a>
 8004eca:	89a3      	ldrh	r3, [r4, #12]
 8004ecc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ed4:	d003      	beq.n	8004ede <__swsetup_r+0x9a>
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	4630      	mov	r0, r6
 8004eda:	f000 f917 	bl	800510c <__smakebuf_r>
 8004ede:	89a2      	ldrh	r2, [r4, #12]
 8004ee0:	f012 0301 	ands.w	r3, r2, #1
 8004ee4:	d00c      	beq.n	8004f00 <__swsetup_r+0xbc>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60a3      	str	r3, [r4, #8]
 8004eea:	6963      	ldr	r3, [r4, #20]
 8004eec:	425b      	negs	r3, r3
 8004eee:	61a3      	str	r3, [r4, #24]
 8004ef0:	6923      	ldr	r3, [r4, #16]
 8004ef2:	b953      	cbnz	r3, 8004f0a <__swsetup_r+0xc6>
 8004ef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004efc:	d1ba      	bne.n	8004e74 <__swsetup_r+0x30>
 8004efe:	bd70      	pop	{r4, r5, r6, pc}
 8004f00:	0792      	lsls	r2, r2, #30
 8004f02:	bf58      	it	pl
 8004f04:	6963      	ldrpl	r3, [r4, #20]
 8004f06:	60a3      	str	r3, [r4, #8]
 8004f08:	e7f2      	b.n	8004ef0 <__swsetup_r+0xac>
 8004f0a:	2000      	movs	r0, #0
 8004f0c:	e7f7      	b.n	8004efe <__swsetup_r+0xba>
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c
 8004f14:	080057d4 	.word	0x080057d4
 8004f18:	080057f4 	.word	0x080057f4
 8004f1c:	080057b4 	.word	0x080057b4

08004f20 <_close_r>:
 8004f20:	b538      	push	{r3, r4, r5, lr}
 8004f22:	4c06      	ldr	r4, [pc, #24]	; (8004f3c <_close_r+0x1c>)
 8004f24:	2300      	movs	r3, #0
 8004f26:	4605      	mov	r5, r0
 8004f28:	4608      	mov	r0, r1
 8004f2a:	6023      	str	r3, [r4, #0]
 8004f2c:	f7fc fbf7 	bl	800171e <_close>
 8004f30:	1c43      	adds	r3, r0, #1
 8004f32:	d102      	bne.n	8004f3a <_close_r+0x1a>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	b103      	cbz	r3, 8004f3a <_close_r+0x1a>
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	200003dc 	.word	0x200003dc

08004f40 <__sflush_r>:
 8004f40:	898a      	ldrh	r2, [r1, #12]
 8004f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f46:	4605      	mov	r5, r0
 8004f48:	0710      	lsls	r0, r2, #28
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	d458      	bmi.n	8005000 <__sflush_r+0xc0>
 8004f4e:	684b      	ldr	r3, [r1, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dc05      	bgt.n	8004f60 <__sflush_r+0x20>
 8004f54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	dc02      	bgt.n	8004f60 <__sflush_r+0x20>
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f62:	2e00      	cmp	r6, #0
 8004f64:	d0f9      	beq.n	8004f5a <__sflush_r+0x1a>
 8004f66:	2300      	movs	r3, #0
 8004f68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f6c:	682f      	ldr	r7, [r5, #0]
 8004f6e:	6a21      	ldr	r1, [r4, #32]
 8004f70:	602b      	str	r3, [r5, #0]
 8004f72:	d032      	beq.n	8004fda <__sflush_r+0x9a>
 8004f74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	075a      	lsls	r2, r3, #29
 8004f7a:	d505      	bpl.n	8004f88 <__sflush_r+0x48>
 8004f7c:	6863      	ldr	r3, [r4, #4]
 8004f7e:	1ac0      	subs	r0, r0, r3
 8004f80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f82:	b10b      	cbz	r3, 8004f88 <__sflush_r+0x48>
 8004f84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f86:	1ac0      	subs	r0, r0, r3
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f8e:	6a21      	ldr	r1, [r4, #32]
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b0      	blx	r6
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	d106      	bne.n	8004fa8 <__sflush_r+0x68>
 8004f9a:	6829      	ldr	r1, [r5, #0]
 8004f9c:	291d      	cmp	r1, #29
 8004f9e:	d848      	bhi.n	8005032 <__sflush_r+0xf2>
 8004fa0:	4a29      	ldr	r2, [pc, #164]	; (8005048 <__sflush_r+0x108>)
 8004fa2:	40ca      	lsrs	r2, r1
 8004fa4:	07d6      	lsls	r6, r2, #31
 8004fa6:	d544      	bpl.n	8005032 <__sflush_r+0xf2>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	6062      	str	r2, [r4, #4]
 8004fac:	04d9      	lsls	r1, r3, #19
 8004fae:	6922      	ldr	r2, [r4, #16]
 8004fb0:	6022      	str	r2, [r4, #0]
 8004fb2:	d504      	bpl.n	8004fbe <__sflush_r+0x7e>
 8004fb4:	1c42      	adds	r2, r0, #1
 8004fb6:	d101      	bne.n	8004fbc <__sflush_r+0x7c>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	b903      	cbnz	r3, 8004fbe <__sflush_r+0x7e>
 8004fbc:	6560      	str	r0, [r4, #84]	; 0x54
 8004fbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fc0:	602f      	str	r7, [r5, #0]
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	d0c9      	beq.n	8004f5a <__sflush_r+0x1a>
 8004fc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fca:	4299      	cmp	r1, r3
 8004fcc:	d002      	beq.n	8004fd4 <__sflush_r+0x94>
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 f8de 	bl	8005190 <_free_r>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	6360      	str	r0, [r4, #52]	; 0x34
 8004fd8:	e7c0      	b.n	8004f5c <__sflush_r+0x1c>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4628      	mov	r0, r5
 8004fde:	47b0      	blx	r6
 8004fe0:	1c41      	adds	r1, r0, #1
 8004fe2:	d1c8      	bne.n	8004f76 <__sflush_r+0x36>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0c5      	beq.n	8004f76 <__sflush_r+0x36>
 8004fea:	2b1d      	cmp	r3, #29
 8004fec:	d001      	beq.n	8004ff2 <__sflush_r+0xb2>
 8004fee:	2b16      	cmp	r3, #22
 8004ff0:	d101      	bne.n	8004ff6 <__sflush_r+0xb6>
 8004ff2:	602f      	str	r7, [r5, #0]
 8004ff4:	e7b1      	b.n	8004f5a <__sflush_r+0x1a>
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	e7ad      	b.n	8004f5c <__sflush_r+0x1c>
 8005000:	690f      	ldr	r7, [r1, #16]
 8005002:	2f00      	cmp	r7, #0
 8005004:	d0a9      	beq.n	8004f5a <__sflush_r+0x1a>
 8005006:	0793      	lsls	r3, r2, #30
 8005008:	680e      	ldr	r6, [r1, #0]
 800500a:	bf08      	it	eq
 800500c:	694b      	ldreq	r3, [r1, #20]
 800500e:	600f      	str	r7, [r1, #0]
 8005010:	bf18      	it	ne
 8005012:	2300      	movne	r3, #0
 8005014:	eba6 0807 	sub.w	r8, r6, r7
 8005018:	608b      	str	r3, [r1, #8]
 800501a:	f1b8 0f00 	cmp.w	r8, #0
 800501e:	dd9c      	ble.n	8004f5a <__sflush_r+0x1a>
 8005020:	4643      	mov	r3, r8
 8005022:	463a      	mov	r2, r7
 8005024:	6a21      	ldr	r1, [r4, #32]
 8005026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005028:	4628      	mov	r0, r5
 800502a:	47b0      	blx	r6
 800502c:	2800      	cmp	r0, #0
 800502e:	dc06      	bgt.n	800503e <__sflush_r+0xfe>
 8005030:	89a3      	ldrh	r3, [r4, #12]
 8005032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005036:	81a3      	strh	r3, [r4, #12]
 8005038:	f04f 30ff 	mov.w	r0, #4294967295
 800503c:	e78e      	b.n	8004f5c <__sflush_r+0x1c>
 800503e:	4407      	add	r7, r0
 8005040:	eba8 0800 	sub.w	r8, r8, r0
 8005044:	e7e9      	b.n	800501a <__sflush_r+0xda>
 8005046:	bf00      	nop
 8005048:	20400001 	.word	0x20400001

0800504c <_fflush_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	690b      	ldr	r3, [r1, #16]
 8005050:	4605      	mov	r5, r0
 8005052:	460c      	mov	r4, r1
 8005054:	b1db      	cbz	r3, 800508e <_fflush_r+0x42>
 8005056:	b118      	cbz	r0, 8005060 <_fflush_r+0x14>
 8005058:	6983      	ldr	r3, [r0, #24]
 800505a:	b90b      	cbnz	r3, 8005060 <_fflush_r+0x14>
 800505c:	f7ff fa8e 	bl	800457c <__sinit>
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <_fflush_r+0x48>)
 8005062:	429c      	cmp	r4, r3
 8005064:	d109      	bne.n	800507a <_fflush_r+0x2e>
 8005066:	686c      	ldr	r4, [r5, #4]
 8005068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506c:	b17b      	cbz	r3, 800508e <_fflush_r+0x42>
 800506e:	4621      	mov	r1, r4
 8005070:	4628      	mov	r0, r5
 8005072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005076:	f7ff bf63 	b.w	8004f40 <__sflush_r>
 800507a:	4b07      	ldr	r3, [pc, #28]	; (8005098 <_fflush_r+0x4c>)
 800507c:	429c      	cmp	r4, r3
 800507e:	d101      	bne.n	8005084 <_fflush_r+0x38>
 8005080:	68ac      	ldr	r4, [r5, #8]
 8005082:	e7f1      	b.n	8005068 <_fflush_r+0x1c>
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <_fflush_r+0x50>)
 8005086:	429c      	cmp	r4, r3
 8005088:	bf08      	it	eq
 800508a:	68ec      	ldreq	r4, [r5, #12]
 800508c:	e7ec      	b.n	8005068 <_fflush_r+0x1c>
 800508e:	2000      	movs	r0, #0
 8005090:	bd38      	pop	{r3, r4, r5, pc}
 8005092:	bf00      	nop
 8005094:	080057d4 	.word	0x080057d4
 8005098:	080057f4 	.word	0x080057f4
 800509c:	080057b4 	.word	0x080057b4

080050a0 <_lseek_r>:
 80050a0:	b538      	push	{r3, r4, r5, lr}
 80050a2:	4c07      	ldr	r4, [pc, #28]	; (80050c0 <_lseek_r+0x20>)
 80050a4:	4605      	mov	r5, r0
 80050a6:	4608      	mov	r0, r1
 80050a8:	4611      	mov	r1, r2
 80050aa:	2200      	movs	r2, #0
 80050ac:	6022      	str	r2, [r4, #0]
 80050ae:	461a      	mov	r2, r3
 80050b0:	f7fc fb5c 	bl	800176c <_lseek>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_lseek_r+0x1e>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	b103      	cbz	r3, 80050be <_lseek_r+0x1e>
 80050bc:	602b      	str	r3, [r5, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	200003dc 	.word	0x200003dc

080050c4 <__swhatbuf_r>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	460e      	mov	r6, r1
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	2900      	cmp	r1, #0
 80050ce:	b096      	sub	sp, #88	; 0x58
 80050d0:	4614      	mov	r4, r2
 80050d2:	461d      	mov	r5, r3
 80050d4:	da07      	bge.n	80050e6 <__swhatbuf_r+0x22>
 80050d6:	2300      	movs	r3, #0
 80050d8:	602b      	str	r3, [r5, #0]
 80050da:	89b3      	ldrh	r3, [r6, #12]
 80050dc:	061a      	lsls	r2, r3, #24
 80050de:	d410      	bmi.n	8005102 <__swhatbuf_r+0x3e>
 80050e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e4:	e00e      	b.n	8005104 <__swhatbuf_r+0x40>
 80050e6:	466a      	mov	r2, sp
 80050e8:	f000 f8b2 	bl	8005250 <_fstat_r>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	dbf2      	blt.n	80050d6 <__swhatbuf_r+0x12>
 80050f0:	9a01      	ldr	r2, [sp, #4]
 80050f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050fa:	425a      	negs	r2, r3
 80050fc:	415a      	adcs	r2, r3
 80050fe:	602a      	str	r2, [r5, #0]
 8005100:	e7ee      	b.n	80050e0 <__swhatbuf_r+0x1c>
 8005102:	2340      	movs	r3, #64	; 0x40
 8005104:	2000      	movs	r0, #0
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	b016      	add	sp, #88	; 0x58
 800510a:	bd70      	pop	{r4, r5, r6, pc}

0800510c <__smakebuf_r>:
 800510c:	898b      	ldrh	r3, [r1, #12]
 800510e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005110:	079d      	lsls	r5, r3, #30
 8005112:	4606      	mov	r6, r0
 8005114:	460c      	mov	r4, r1
 8005116:	d507      	bpl.n	8005128 <__smakebuf_r+0x1c>
 8005118:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	6123      	str	r3, [r4, #16]
 8005120:	2301      	movs	r3, #1
 8005122:	6163      	str	r3, [r4, #20]
 8005124:	b002      	add	sp, #8
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	ab01      	add	r3, sp, #4
 800512a:	466a      	mov	r2, sp
 800512c:	f7ff ffca 	bl	80050c4 <__swhatbuf_r>
 8005130:	9900      	ldr	r1, [sp, #0]
 8005132:	4605      	mov	r5, r0
 8005134:	4630      	mov	r0, r6
 8005136:	f7ff faab 	bl	8004690 <_malloc_r>
 800513a:	b948      	cbnz	r0, 8005150 <__smakebuf_r+0x44>
 800513c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005140:	059a      	lsls	r2, r3, #22
 8005142:	d4ef      	bmi.n	8005124 <__smakebuf_r+0x18>
 8005144:	f023 0303 	bic.w	r3, r3, #3
 8005148:	f043 0302 	orr.w	r3, r3, #2
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	e7e3      	b.n	8005118 <__smakebuf_r+0xc>
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <__smakebuf_r+0x7c>)
 8005152:	62b3      	str	r3, [r6, #40]	; 0x28
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	6020      	str	r0, [r4, #0]
 8005158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	9b00      	ldr	r3, [sp, #0]
 8005160:	6163      	str	r3, [r4, #20]
 8005162:	9b01      	ldr	r3, [sp, #4]
 8005164:	6120      	str	r0, [r4, #16]
 8005166:	b15b      	cbz	r3, 8005180 <__smakebuf_r+0x74>
 8005168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800516c:	4630      	mov	r0, r6
 800516e:	f000 f881 	bl	8005274 <_isatty_r>
 8005172:	b128      	cbz	r0, 8005180 <__smakebuf_r+0x74>
 8005174:	89a3      	ldrh	r3, [r4, #12]
 8005176:	f023 0303 	bic.w	r3, r3, #3
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	81a3      	strh	r3, [r4, #12]
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	431d      	orrs	r5, r3
 8005184:	81a5      	strh	r5, [r4, #12]
 8005186:	e7cd      	b.n	8005124 <__smakebuf_r+0x18>
 8005188:	08004545 	.word	0x08004545

0800518c <__malloc_lock>:
 800518c:	4770      	bx	lr

0800518e <__malloc_unlock>:
 800518e:	4770      	bx	lr

08005190 <_free_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	4605      	mov	r5, r0
 8005194:	2900      	cmp	r1, #0
 8005196:	d045      	beq.n	8005224 <_free_r+0x94>
 8005198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800519c:	1f0c      	subs	r4, r1, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bfb8      	it	lt
 80051a2:	18e4      	addlt	r4, r4, r3
 80051a4:	f7ff fff2 	bl	800518c <__malloc_lock>
 80051a8:	4a1f      	ldr	r2, [pc, #124]	; (8005228 <_free_r+0x98>)
 80051aa:	6813      	ldr	r3, [r2, #0]
 80051ac:	4610      	mov	r0, r2
 80051ae:	b933      	cbnz	r3, 80051be <_free_r+0x2e>
 80051b0:	6063      	str	r3, [r4, #4]
 80051b2:	6014      	str	r4, [r2, #0]
 80051b4:	4628      	mov	r0, r5
 80051b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051ba:	f7ff bfe8 	b.w	800518e <__malloc_unlock>
 80051be:	42a3      	cmp	r3, r4
 80051c0:	d90c      	bls.n	80051dc <_free_r+0x4c>
 80051c2:	6821      	ldr	r1, [r4, #0]
 80051c4:	1862      	adds	r2, r4, r1
 80051c6:	4293      	cmp	r3, r2
 80051c8:	bf04      	itt	eq
 80051ca:	681a      	ldreq	r2, [r3, #0]
 80051cc:	685b      	ldreq	r3, [r3, #4]
 80051ce:	6063      	str	r3, [r4, #4]
 80051d0:	bf04      	itt	eq
 80051d2:	1852      	addeq	r2, r2, r1
 80051d4:	6022      	streq	r2, [r4, #0]
 80051d6:	6004      	str	r4, [r0, #0]
 80051d8:	e7ec      	b.n	80051b4 <_free_r+0x24>
 80051da:	4613      	mov	r3, r2
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	b10a      	cbz	r2, 80051e4 <_free_r+0x54>
 80051e0:	42a2      	cmp	r2, r4
 80051e2:	d9fa      	bls.n	80051da <_free_r+0x4a>
 80051e4:	6819      	ldr	r1, [r3, #0]
 80051e6:	1858      	adds	r0, r3, r1
 80051e8:	42a0      	cmp	r0, r4
 80051ea:	d10b      	bne.n	8005204 <_free_r+0x74>
 80051ec:	6820      	ldr	r0, [r4, #0]
 80051ee:	4401      	add	r1, r0
 80051f0:	1858      	adds	r0, r3, r1
 80051f2:	4282      	cmp	r2, r0
 80051f4:	6019      	str	r1, [r3, #0]
 80051f6:	d1dd      	bne.n	80051b4 <_free_r+0x24>
 80051f8:	6810      	ldr	r0, [r2, #0]
 80051fa:	6852      	ldr	r2, [r2, #4]
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	4401      	add	r1, r0
 8005200:	6019      	str	r1, [r3, #0]
 8005202:	e7d7      	b.n	80051b4 <_free_r+0x24>
 8005204:	d902      	bls.n	800520c <_free_r+0x7c>
 8005206:	230c      	movs	r3, #12
 8005208:	602b      	str	r3, [r5, #0]
 800520a:	e7d3      	b.n	80051b4 <_free_r+0x24>
 800520c:	6820      	ldr	r0, [r4, #0]
 800520e:	1821      	adds	r1, r4, r0
 8005210:	428a      	cmp	r2, r1
 8005212:	bf04      	itt	eq
 8005214:	6811      	ldreq	r1, [r2, #0]
 8005216:	6852      	ldreq	r2, [r2, #4]
 8005218:	6062      	str	r2, [r4, #4]
 800521a:	bf04      	itt	eq
 800521c:	1809      	addeq	r1, r1, r0
 800521e:	6021      	streq	r1, [r4, #0]
 8005220:	605c      	str	r4, [r3, #4]
 8005222:	e7c7      	b.n	80051b4 <_free_r+0x24>
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	bf00      	nop
 8005228:	20000094 	.word	0x20000094

0800522c <_read_r>:
 800522c:	b538      	push	{r3, r4, r5, lr}
 800522e:	4c07      	ldr	r4, [pc, #28]	; (800524c <_read_r+0x20>)
 8005230:	4605      	mov	r5, r0
 8005232:	4608      	mov	r0, r1
 8005234:	4611      	mov	r1, r2
 8005236:	2200      	movs	r2, #0
 8005238:	6022      	str	r2, [r4, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	f7fc fa36 	bl	80016ac <_read>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_read_r+0x1e>
 8005244:	6823      	ldr	r3, [r4, #0]
 8005246:	b103      	cbz	r3, 800524a <_read_r+0x1e>
 8005248:	602b      	str	r3, [r5, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	200003dc 	.word	0x200003dc

08005250 <_fstat_r>:
 8005250:	b538      	push	{r3, r4, r5, lr}
 8005252:	4c07      	ldr	r4, [pc, #28]	; (8005270 <_fstat_r+0x20>)
 8005254:	2300      	movs	r3, #0
 8005256:	4605      	mov	r5, r0
 8005258:	4608      	mov	r0, r1
 800525a:	4611      	mov	r1, r2
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	f7fc fa6a 	bl	8001736 <_fstat>
 8005262:	1c43      	adds	r3, r0, #1
 8005264:	d102      	bne.n	800526c <_fstat_r+0x1c>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	b103      	cbz	r3, 800526c <_fstat_r+0x1c>
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	bd38      	pop	{r3, r4, r5, pc}
 800526e:	bf00      	nop
 8005270:	200003dc 	.word	0x200003dc

08005274 <_isatty_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4c06      	ldr	r4, [pc, #24]	; (8005290 <_isatty_r+0x1c>)
 8005278:	2300      	movs	r3, #0
 800527a:	4605      	mov	r5, r0
 800527c:	4608      	mov	r0, r1
 800527e:	6023      	str	r3, [r4, #0]
 8005280:	f7fc fa69 	bl	8001756 <_isatty>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_isatty_r+0x1a>
 8005288:	6823      	ldr	r3, [r4, #0]
 800528a:	b103      	cbz	r3, 800528e <_isatty_r+0x1a>
 800528c:	602b      	str	r3, [r5, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	200003dc 	.word	0x200003dc

08005294 <_init>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr

080052a0 <_fini>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr
