
Uart_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f8  080034f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003500  08003500  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003514  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003514  00020144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000888f  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015cb  00000000  00000000  000288c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00029e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264e9  00000000  00000000  0002ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006929  00000000  00000000  00051149  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ef893  00000000  00000000  00057a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147305  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c9c  00000000  00000000  00147380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080034a8 	.word	0x080034a8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080034a8 	.word	0x080034a8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:

uint8_t dataloc[22] = "";
uint8_t i = 0;

int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fbda 	bl	8000cf6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f89d 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f99d 	bl	8000884 <MX_GPIO_Init>
  MX_USART2_UART_Init(8,115200,0);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000550:	2008      	movs	r0, #8
 8000552:	f000 f943 	bl	80007dc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000556:	f000 f911 	bl	800077c <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t i = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	73fb      	strb	r3, [r7, #15]

  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  uint8_t testdata[11] = "TEST TEST\n~";
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <main+0x44>)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	ca07      	ldmia	r2, {r0, r1, r2}
 8000564:	c303      	stmia	r3!, {r0, r1}
 8000566:	801a      	strh	r2, [r3, #0]
 8000568:	3302      	adds	r3, #2
 800056a:	0c12      	lsrs	r2, r2, #16
 800056c:	701a      	strb	r2, [r3, #0]
//	  sendData(&testdata[0]);
	  HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f000 fc1d 	bl	8000db0 <HAL_Delay>
	  getData();
 8000576:	f000 f867 	bl	8000648 <getData>
  {
 800057a:	e7f0      	b.n	800055e <main+0x26>
 800057c:	080034c0 	.word	0x080034c0

08000580 <sendData>:
  }
  /* USER CODE END 3 */
}
char datasen[1] = "";

void sendData(uint8_t* data){
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,"sendData", sizeof("sendData"), 500);
 8000588:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800058c:	2209      	movs	r2, #9
 800058e:	492c      	ldr	r1, [pc, #176]	; (8000640 <sendData+0xc0>)
 8000590:	482c      	ldr	r0, [pc, #176]	; (8000644 <sendData+0xc4>)
 8000592:	f002 f83f 	bl	8002614 <HAL_UART_Transmit>
	uint8_t i = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	75bb      	strb	r3, [r7, #22]
	uint8_t size = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	75fb      	strb	r3, [r7, #23]
	uint8_t v[1] = {"~"};
 800059e:	237e      	movs	r3, #126	; 0x7e
 80005a0:	723b      	strb	r3, [r7, #8]
	while (data[size] != v[0]){size++;}
 80005a2:	e002      	b.n	80005aa <sendData+0x2a>
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	3301      	adds	r3, #1
 80005a8:	75fb      	strb	r3, [r7, #23]
 80005aa:	7dfb      	ldrb	r3, [r7, #23]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	7a3b      	ldrb	r3, [r7, #8]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d1f5      	bne.n	80005a4 <sendData+0x24>
	uint8_t datasend [size];
 80005b8:	7df8      	ldrb	r0, [r7, #23]
 80005ba:	466b      	mov	r3, sp
 80005bc:	461d      	mov	r5, r3
 80005be:	4603      	mov	r3, r0
 80005c0:	3b01      	subs	r3, #1
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	b2c1      	uxtb	r1, r0
 80005c6:	f04f 0200 	mov.w	r2, #0
 80005ca:	f04f 0300 	mov.w	r3, #0
 80005ce:	f04f 0400 	mov.w	r4, #0
 80005d2:	00d4      	lsls	r4, r2, #3
 80005d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80005d8:	00cb      	lsls	r3, r1, #3
 80005da:	b2c1      	uxtb	r1, r0
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	f04f 0400 	mov.w	r4, #0
 80005e8:	00d4      	lsls	r4, r2, #3
 80005ea:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80005ee:	00cb      	lsls	r3, r1, #3
 80005f0:	4603      	mov	r3, r0
 80005f2:	3307      	adds	r3, #7
 80005f4:	08db      	lsrs	r3, r3, #3
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	ebad 0d03 	sub.w	sp, sp, r3
 80005fc:	466b      	mov	r3, sp
 80005fe:	3300      	adds	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
	while (data[i] != v[0]){
 8000602:	e009      	b.n	8000618 <sendData+0x98>
		datasend[i] = data[i];
 8000604:	7dbb      	ldrb	r3, [r7, #22]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	441a      	add	r2, r3
 800060a:	7dbb      	ldrb	r3, [r7, #22]
 800060c:	7811      	ldrb	r1, [r2, #0]
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	54d1      	strb	r1, [r2, r3]
		i++;}
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	3301      	adds	r3, #1
 8000616:	75bb      	strb	r3, [r7, #22]
	while (data[i] != v[0]){
 8000618:	7dbb      	ldrb	r3, [r7, #22]
 800061a:	687a      	ldr	r2, [r7, #4]
 800061c:	4413      	add	r3, r2
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	7a3b      	ldrb	r3, [r7, #8]
 8000622:	429a      	cmp	r2, r3
 8000624:	d1ee      	bne.n	8000604 <sendData+0x84>

	HAL_UART_Transmit(&huart2,datasend, sizeof(datasend), 500);
 8000626:	68f9      	ldr	r1, [r7, #12]
 8000628:	b282      	uxth	r2, r0
 800062a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <sendData+0xc4>)
 8000630:	f001 fff0 	bl	8002614 <HAL_UART_Transmit>
 8000634:	46ad      	mov	sp, r5

}
 8000636:	bf00      	nop
 8000638:	3718      	adds	r7, #24
 800063a:	46bd      	mov	sp, r7
 800063c:	bdb0      	pop	{r4, r5, r7, pc}
 800063e:	bf00      	nop
 8000640:	080034cc 	.word	0x080034cc
 8000644:	200000c0 	.word	0x200000c0

08000648 <getData>:

void getData(void){
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2,"getData", sizeof("getData"), 500);
 800064c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000650:	2208      	movs	r2, #8
 8000652:	4908      	ldr	r1, [pc, #32]	; (8000674 <getData+0x2c>)
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <getData+0x30>)
 8000656:	f001 ffdd 	bl	8002614 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart2, dataloc, sizeof(dataloc), 3000);
 800065a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800065e:	2216      	movs	r2, #22
 8000660:	4906      	ldr	r1, [pc, #24]	; (800067c <getData+0x34>)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <getData+0x30>)
 8000664:	f002 f867 	bl	8002736 <HAL_UART_Receive>
	sendData(&dataloc[0]);
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <getData+0x34>)
 800066a:	f7ff ff89 	bl	8000580 <sendData>
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	080034d8 	.word	0x080034d8
 8000678:	200000c0 	.word	0x200000c0
 800067c:	20000028 	.word	0x20000028

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0b8      	sub	sp, #224	; 0xe0
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800068a:	2234      	movs	r2, #52	; 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 ff02 	bl	8003498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2290      	movs	r2, #144	; 0x90
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 fef3 	bl	8003498 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b2:	4b30      	ldr	r3, [pc, #192]	; (8000774 <SystemClock_Config+0xf4>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a2f      	ldr	r2, [pc, #188]	; (8000774 <SystemClock_Config+0xf4>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b2d      	ldr	r3, [pc, #180]	; (8000774 <SystemClock_Config+0xf4>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <SystemClock_Config+0xf8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006d2:	4a29      	ldr	r2, [pc, #164]	; (8000778 <SystemClock_Config+0xf8>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <SystemClock_Config+0xf8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	2302      	movs	r3, #2
 80006e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fe6e 	bl	80013e4 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800070e:	f000 f9d1 	bl	8000ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	230f      	movs	r3, #15
 8000714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	2300      	movs	r3, #0
 800071a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000728:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000732:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f901 	bl	8001940 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000744:	f000 f9b6 	bl	8000ab4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4;
 8000748:	f44f 7320 	mov.w	r3, #640	; 0x280
 800074c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000752:	2300      	movs	r3, #0
 8000754:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fae6 	bl	8001d2c <HAL_RCCEx_PeriphCLKConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000766:	f000 f9a5 	bl	8000ab4 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	37e0      	adds	r7, #224	; 0xe0
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_UART4_Init+0x58>)
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <MX_UART4_Init+0x5c>)
 8000784:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000786:	4b13      	ldr	r3, [pc, #76]	; (80007d4 <MX_UART4_Init+0x58>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_UART4_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_UART4_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_UART4_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_UART4_Init+0x58>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_UART4_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_UART4_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_UART4_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_UART4_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_UART4_Init+0x58>)
 80007c0:	f001 feda 	bl	8002578 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f973 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000040 	.word	0x20000040
 80007d8:	40004c00 	.word	0x40004c00

080007dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(int n, int t, int p)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]

  /* USER CODE BEGIN USART2_Init 0 */
	  if(n == 7){huart2.Init.WordLength = UART_WORDLENGTH_7B;} // these there if-else statments are to
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d104      	bne.n	80007f8 <MX_USART2_UART_Init+0x1c>
 80007ee:	4b23      	ldr	r3, [pc, #140]	; (800087c <MX_USART2_UART_Init+0xa0>)
 80007f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	e00a      	b.n	800080e <MX_USART2_UART_Init+0x32>
	  else if (n == 8){huart2.Init.WordLength = UART_WORDLENGTH_8B;}//used to select the desired word length
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2b08      	cmp	r3, #8
 80007fc:	d103      	bne.n	8000806 <MX_USART2_UART_Init+0x2a>
 80007fe:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	e003      	b.n	800080e <MX_USART2_UART_Init+0x32>
	  else{huart2.Init.WordLength = UART_WORDLENGTH_9B;}
 8000806:	4b1d      	ldr	r3, [pc, #116]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000808:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800080c:	609a      	str	r2, [r3, #8]
	  huart2.Init.BaudRate = t; // this statment sets the baud rate
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4a1a      	ldr	r2, [pc, #104]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000812:	6053      	str	r3, [r2, #4]
	  if(p == 0){huart2.Init.Parity = UART_PARITY_NONE;} // these 3 statments set the parity
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d103      	bne.n	8000822 <MX_USART2_UART_Init+0x46>
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_USART2_UART_Init+0xa0>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	e00b      	b.n	800083a <MX_USART2_UART_Init+0x5e>
	  else if(p == 1){huart2.Init.Parity = UART_PARITY_ODD;}
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d104      	bne.n	8000832 <MX_USART2_UART_Init+0x56>
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USART2_UART_Init+0xa0>)
 800082a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	e003      	b.n	800083a <MX_USART2_UART_Init+0x5e>
	  else{huart2.Init.Parity = UART_PARITY_EVEN;}
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000838:	611a      	str	r2, [r3, #16]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0xa0>)
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0xa4>)
 800083e:	601a      	str	r2, [r3, #0]

  huart2.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]

  huart2.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084c:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0xa0>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0xa0>)
 8000866:	f001 fe87 	bl	8002578 <HAL_UART_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART2_UART_Init+0x98>
  {
    Error_Handler();
 8000870:	f000 f920 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200000c0 	.word	0x200000c0
 8000880:	40004400 	.word	0x40004400

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b7f      	ldr	r3, [pc, #508]	; (8000a98 <MX_GPIO_Init+0x214>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a7e      	ldr	r2, [pc, #504]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b7c      	ldr	r3, [pc, #496]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	61bb      	str	r3, [r7, #24]
 80008b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	4b79      	ldr	r3, [pc, #484]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a78      	ldr	r2, [pc, #480]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b76      	ldr	r3, [pc, #472]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b73      	ldr	r3, [pc, #460]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a72      	ldr	r2, [pc, #456]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b70      	ldr	r3, [pc, #448]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	613b      	str	r3, [r7, #16]
 80008e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b6d      	ldr	r3, [pc, #436]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a6c      	ldr	r2, [pc, #432]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b6a      	ldr	r3, [pc, #424]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fa:	4b67      	ldr	r3, [pc, #412]	; (8000a98 <MX_GPIO_Init+0x214>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a66      	ldr	r2, [pc, #408]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60bb      	str	r3, [r7, #8]
 8000910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000930:	485a      	ldr	r0, [pc, #360]	; (8000a9c <MX_GPIO_Init+0x218>)
 8000932:	f000 fd3d 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	4859      	ldr	r0, [pc, #356]	; (8000aa0 <MX_GPIO_Init+0x21c>)
 800093c:	f000 fd38 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000940:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000946:	4b57      	ldr	r3, [pc, #348]	; (8000aa4 <MX_GPIO_Init+0x220>)
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4854      	ldr	r0, [pc, #336]	; (8000aa8 <MX_GPIO_Init+0x224>)
 8000956:	f000 fb81 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800095a:	2332      	movs	r3, #50	; 0x32
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800096a:	230b      	movs	r3, #11
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	484c      	ldr	r0, [pc, #304]	; (8000aa8 <MX_GPIO_Init+0x224>)
 8000976:	f000 fb71 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 800097a:	2382      	movs	r3, #130	; 0x82
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098a:	230b      	movs	r3, #11
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4845      	ldr	r0, [pc, #276]	; (8000aac <MX_GPIO_Init+0x228>)
 8000996:	f000 fb61 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800099a:	f244 0381 	movw	r3, #16513	; 0x4081
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a0:	2301      	movs	r3, #1
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	483a      	ldr	r0, [pc, #232]	; (8000a9c <MX_GPIO_Init+0x218>)
 80009b4:	f000 fb52 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c6:	2303      	movs	r3, #3
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4831      	ldr	r0, [pc, #196]	; (8000a9c <MX_GPIO_Init+0x218>)
 80009d6:	f000 fb41 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ec:	2307      	movs	r3, #7
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	482e      	ldr	r0, [pc, #184]	; (8000ab0 <MX_GPIO_Init+0x22c>)
 80009f8:	f000 fb30 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fc:	2340      	movs	r3, #64	; 0x40
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4823      	ldr	r0, [pc, #140]	; (8000aa0 <MX_GPIO_Init+0x21c>)
 8000a14:	f000 fb22 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0x21c>)
 8000a2c:	f000 fb16 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a30:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a42:	230a      	movs	r3, #10
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <MX_GPIO_Init+0x228>)
 8000a4e:	f000 fb05 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4619      	mov	r1, r3
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <MX_GPIO_Init+0x228>)
 8000a68:	f000 faf8 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7e:	230b      	movs	r3, #11
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_GPIO_Init+0x21c>)
 8000a8a:	f000 fae7 	bl	800105c <HAL_GPIO_Init>

}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40021800 	.word	0x40021800
 8000aa4:	10110000 	.word	0x10110000
 8000aa8:	40020800 	.word	0x40020800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020c00 	.word	0x40020c00

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x44>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x44>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <HAL_MspInit+0x44>)
 8000ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aec:	6453      	str	r3, [r2, #68]	; 0x44
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_MspInit+0x44>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08c      	sub	sp, #48	; 0x30
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a32      	ldr	r2, [pc, #200]	; (8000bf4 <HAL_UART_MspInit+0xe8>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d128      	bne.n	8000b80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000b2e:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	4a31      	ldr	r2, [pc, #196]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b38:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3a:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a2b      	ldr	r2, [pc, #172]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0308 	and.w	r3, r3, #8
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b6e:	2308      	movs	r3, #8
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	4820      	ldr	r0, [pc, #128]	; (8000bfc <HAL_UART_MspInit+0xf0>)
 8000b7a:	f000 fa6f 	bl	800105c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7e:	e034      	b.n	8000bea <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <HAL_UART_MspInit+0xf4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d12f      	bne.n	8000bea <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_UART_MspInit+0xec>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bba:	230c      	movs	r3, #12
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bca:	2307      	movs	r3, #7
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <HAL_UART_MspInit+0xf8>)
 8000bd6:	f000 fa41 	bl	800105c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2026      	movs	r0, #38	; 0x26
 8000be0:	f000 f9e3 	bl	8000faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000be4:	2026      	movs	r0, #38	; 0x26
 8000be6:	f000 f9fc 	bl	8000fe2 <HAL_NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3730      	adds	r7, #48	; 0x30
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40004c00 	.word	0x40004c00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020c00 	.word	0x40020c00
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40020000 	.word	0x40020000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f888 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <USART2_IRQHandler+0x10>)
 8000c6a:	f001 fe31 	bl	80028d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000c0 	.word	0x200000c0

08000c78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <SystemInit+0x28>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <SystemInit+0x28>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SystemInit+0x28>)
 8000c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c92:	609a      	str	r2, [r3, #8]
#endif
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ca8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000caa:	e003      	b.n	8000cb4 <LoopCopyDataInit>

08000cac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cb2:	3104      	adds	r1, #4

08000cb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cbc:	d3f6      	bcc.n	8000cac <CopyDataInit>
  ldr  r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cc0:	e002      	b.n	8000cc8 <LoopFillZerobss>

08000cc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cc4:	f842 3b04 	str.w	r3, [r2], #4

08000cc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ccc:	d3f9      	bcc.n	8000cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd3 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f002 fbbd 	bl	8003450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc2f 	bl	8000538 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000ce0:	08003508 	.word	0x08003508
  ldr  r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000cec:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000cf0:	20000144 	.word	0x20000144

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>

08000cf6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f000 f94a 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f000 f805 	bl	8000d10 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d06:	f7ff fedd 	bl	8000ac4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x54>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x58>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f965 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00e      	b.n	8000d5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d80a      	bhi.n	8000d5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f000 f92d 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d50:	4a06      	ldr	r2, [pc, #24]	; (8000d6c <HAL_InitTick+0x5c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	e000      	b.n	8000d5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	20000000 	.word	0x20000000
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	20000004 	.word	0x20000004

08000d70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_IncTick+0x20>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x24>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <HAL_IncTick+0x24>)
 8000d82:	6013      	str	r3, [r2, #0]
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000140 	.word	0x20000140

08000d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_GetTick+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000140 	.word	0x20000140

08000db0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db8:	f7ff ffee 	bl	8000d98 <HAL_GetTick>
 8000dbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d005      	beq.n	8000dd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_Delay+0x40>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dd6:	bf00      	nop
 8000dd8:	f7ff ffde 	bl	8000d98 <HAL_GetTick>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d8f7      	bhi.n	8000dd8 <HAL_Delay+0x28>
  {
  }
}
 8000de8:	bf00      	nop
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000008 	.word	0x20000008

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <__NVIC_SetPriorityGrouping+0x40>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x40>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00
 8000e38:	05fa0000 	.word	0x05fa0000

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	; (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff29 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff3e 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff31 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffa2 	bl	8000f50 <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b02      	cmp	r3, #2
 8001028:	d004      	beq.n	8001034 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2280      	movs	r2, #128	; 0x80
 800102e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e00c      	b.n	800104e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2205      	movs	r2, #5
 8001038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0201 	bic.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	; 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e175      	b.n	8001368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	429a      	cmp	r2, r3
 8001096:	f040 8164 	bne.w	8001362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d00b      	beq.n	80010ba <HAL_GPIO_Init+0x5e>
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ae:	2b11      	cmp	r3, #17
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d130      	bne.n	800111c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f0:	2201      	movs	r2, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	f003 0201 	and.w	r2, r3, #1
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	2203      	movs	r2, #3
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d003      	beq.n	800115c <HAL_GPIO_Init+0x100>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b12      	cmp	r3, #18
 800115a:	d123      	bne.n	80011a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	08da      	lsrs	r2, r3, #3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3208      	adds	r2, #8
 8001164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f003 0307 	and.w	r3, r3, #7
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	220f      	movs	r2, #15
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	691a      	ldr	r2, [r3, #16]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	08da      	lsrs	r2, r3, #3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3208      	adds	r2, #8
 800119e:	69b9      	ldr	r1, [r7, #24]
 80011a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	2203      	movs	r2, #3
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 0203 	and.w	r2, r3, #3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	f000 80be 	beq.w	8001362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b65      	ldr	r3, [pc, #404]	; (800137c <HAL_GPIO_Init+0x320>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a64      	ldr	r2, [pc, #400]	; (800137c <HAL_GPIO_Init+0x320>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b62      	ldr	r3, [pc, #392]	; (800137c <HAL_GPIO_Init+0x320>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011fe:	4a60      	ldr	r2, [pc, #384]	; (8001380 <HAL_GPIO_Init+0x324>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a57      	ldr	r2, [pc, #348]	; (8001384 <HAL_GPIO_Init+0x328>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d037      	beq.n	800129a <HAL_GPIO_Init+0x23e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a56      	ldr	r2, [pc, #344]	; (8001388 <HAL_GPIO_Init+0x32c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d031      	beq.n	8001296 <HAL_GPIO_Init+0x23a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a55      	ldr	r2, [pc, #340]	; (800138c <HAL_GPIO_Init+0x330>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x236>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a54      	ldr	r2, [pc, #336]	; (8001390 <HAL_GPIO_Init+0x334>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x232>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a53      	ldr	r2, [pc, #332]	; (8001394 <HAL_GPIO_Init+0x338>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x22e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	; (8001398 <HAL_GPIO_Init+0x33c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x22a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a51      	ldr	r2, [pc, #324]	; (800139c <HAL_GPIO_Init+0x340>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x226>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a50      	ldr	r2, [pc, #320]	; (80013a0 <HAL_GPIO_Init+0x344>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x222>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4f      	ldr	r2, [pc, #316]	; (80013a4 <HAL_GPIO_Init+0x348>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x21e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_GPIO_Init+0x34c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x21a>
 8001272:	2309      	movs	r3, #9
 8001274:	e012      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001276:	230a      	movs	r3, #10
 8001278:	e010      	b.n	800129c <HAL_GPIO_Init+0x240>
 800127a:	2308      	movs	r3, #8
 800127c:	e00e      	b.n	800129c <HAL_GPIO_Init+0x240>
 800127e:	2307      	movs	r3, #7
 8001280:	e00c      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001282:	2306      	movs	r3, #6
 8001284:	e00a      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001286:	2305      	movs	r3, #5
 8001288:	e008      	b.n	800129c <HAL_GPIO_Init+0x240>
 800128a:	2304      	movs	r3, #4
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x240>
 800128e:	2303      	movs	r3, #3
 8001290:	e004      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001292:	2302      	movs	r3, #2
 8001294:	e002      	b.n	800129c <HAL_GPIO_Init+0x240>
 8001296:	2301      	movs	r3, #1
 8001298:	e000      	b.n	800129c <HAL_GPIO_Init+0x240>
 800129a:	2300      	movs	r3, #0
 800129c:	69fa      	ldr	r2, [r7, #28]
 800129e:	f002 0203 	and.w	r2, r2, #3
 80012a2:	0092      	lsls	r2, r2, #2
 80012a4:	4093      	lsls	r3, r2
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012ac:	4934      	ldr	r1, [pc, #208]	; (8001380 <HAL_GPIO_Init+0x324>)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	3302      	adds	r3, #2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ba:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <HAL_GPIO_Init+0x350>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <HAL_GPIO_Init+0x350>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <HAL_GPIO_Init+0x350>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001308:	4a28      	ldr	r2, [pc, #160]	; (80013ac <HAL_GPIO_Init+0x350>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800130e:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_GPIO_Init+0x350>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001332:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_GPIO_Init+0x350>)
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x350>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	43db      	mvns	r3, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_GPIO_Init+0x350>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3301      	adds	r3, #1
 8001366:	61fb      	str	r3, [r7, #28]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	2b0f      	cmp	r3, #15
 800136c:	f67f ae86 	bls.w	800107c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001370:	bf00      	nop
 8001372:	3724      	adds	r7, #36	; 0x24
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40023800 	.word	0x40023800
 8001380:	40013800 	.word	0x40013800
 8001384:	40020000 	.word	0x40020000
 8001388:	40020400 	.word	0x40020400
 800138c:	40020800 	.word	0x40020800
 8001390:	40020c00 	.word	0x40020c00
 8001394:	40021000 	.word	0x40021000
 8001398:	40021400 	.word	0x40021400
 800139c:	40021800 	.word	0x40021800
 80013a0:	40021c00 	.word	0x40021c00
 80013a4:	40022000 	.word	0x40022000
 80013a8:	40022400 	.word	0x40022400
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e29b      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 8087 	beq.w	8001516 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001408:	4b96      	ldr	r3, [pc, #600]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
 8001410:	2b04      	cmp	r3, #4
 8001412:	d00c      	beq.n	800142e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001414:	4b93      	ldr	r3, [pc, #588]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f003 030c 	and.w	r3, r3, #12
 800141c:	2b08      	cmp	r3, #8
 800141e:	d112      	bne.n	8001446 <HAL_RCC_OscConfig+0x62>
 8001420:	4b90      	ldr	r3, [pc, #576]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001428:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800142c:	d10b      	bne.n	8001446 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142e:	4b8d      	ldr	r3, [pc, #564]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d06c      	beq.n	8001514 <HAL_RCC_OscConfig+0x130>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d168      	bne.n	8001514 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e275      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144e:	d106      	bne.n	800145e <HAL_RCC_OscConfig+0x7a>
 8001450:	4b84      	ldr	r3, [pc, #528]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a83      	ldr	r2, [pc, #524]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e02e      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d10c      	bne.n	8001480 <HAL_RCC_OscConfig+0x9c>
 8001466:	4b7f      	ldr	r3, [pc, #508]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7e      	ldr	r2, [pc, #504]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800146c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a7b      	ldr	r2, [pc, #492]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001478:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e01d      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0xc0>
 800148a:	4b76      	ldr	r3, [pc, #472]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b73      	ldr	r3, [pc, #460]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a72      	ldr	r2, [pc, #456]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0xd8>
 80014a4:	4b6f      	ldr	r3, [pc, #444]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a6e      	ldr	r2, [pc, #440]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b6c      	ldr	r3, [pc, #432]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a6b      	ldr	r2, [pc, #428]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fc68 	bl	8000d98 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fc64 	bl	8000d98 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e229      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0xe8>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fc54 	bl	8000d98 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fc50 	bl	8000d98 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e215      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	4b57      	ldr	r3, [pc, #348]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x110>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d069      	beq.n	80015f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001522:	4b50      	ldr	r3, [pc, #320]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
 8001536:	2b08      	cmp	r3, #8
 8001538:	d11c      	bne.n	8001574 <HAL_RCC_OscConfig+0x190>
 800153a:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d116      	bne.n	8001574 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x17a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e1e9      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	493d      	ldr	r1, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001572:	e040      	b.n	80015f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a38      	ldr	r2, [pc, #224]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fc06 	bl	8000d98 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc02 	bl	8000d98 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e1c7      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b30      	ldr	r3, [pc, #192]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f0      	beq.n	8001590 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ae:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4929      	ldr	r1, [pc, #164]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
 80015c2:	e018      	b.n	80015f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a26      	ldr	r2, [pc, #152]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015ca:	f023 0301 	bic.w	r3, r3, #1
 80015ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fbe2 	bl	8000d98 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d8:	f7ff fbde 	bl	8000d98 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1a3      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d038      	beq.n	8001674 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	695b      	ldr	r3, [r3, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d019      	beq.n	800163e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001616:	f7ff fbbf 	bl	8000d98 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800161e:	f7ff fbbb 	bl	8000d98 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e180      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f0      	beq.n	800161e <HAL_RCC_OscConfig+0x23a>
 800163c:	e01a      	b.n	8001674 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_RCC_OscConfig+0x280>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164a:	f7ff fba5 	bl	8000d98 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001650:	e00a      	b.n	8001668 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001652:	f7ff fba1 	bl	8000d98 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d903      	bls.n	8001668 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e166      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
 8001664:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001668:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800166a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1ee      	bne.n	8001652 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 80a4 	beq.w	80017ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001682:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10d      	bne.n	80016aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800168e:	4b89      	ldr	r3, [pc, #548]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a88      	ldr	r2, [pc, #544]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016aa:	4b83      	ldr	r3, [pc, #524]	; (80018b8 <HAL_RCC_OscConfig+0x4d4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d118      	bne.n	80016e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016b6:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <HAL_RCC_OscConfig+0x4d4>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a7f      	ldr	r2, [pc, #508]	; (80018b8 <HAL_RCC_OscConfig+0x4d4>)
 80016bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016c2:	f7ff fb69 	bl	8000d98 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ca:	f7ff fb65 	bl	8000d98 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b64      	cmp	r3, #100	; 0x64
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e12a      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x4d4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x31a>
 80016f0:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f4:	4a6f      	ldr	r2, [pc, #444]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6713      	str	r3, [r2, #112]	; 0x70
 80016fc:	e02d      	b.n	800175a <HAL_RCC_OscConfig+0x376>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10c      	bne.n	8001720 <HAL_RCC_OscConfig+0x33c>
 8001706:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800170a:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800170c:	f023 0301 	bic.w	r3, r3, #1
 8001710:	6713      	str	r3, [r2, #112]	; 0x70
 8001712:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001716:	4a67      	ldr	r2, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	6713      	str	r3, [r2, #112]	; 0x70
 800171e:	e01c      	b.n	800175a <HAL_RCC_OscConfig+0x376>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x35e>
 8001728:	4b62      	ldr	r3, [pc, #392]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172c:	4a61      	ldr	r2, [pc, #388]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800172e:	f043 0304 	orr.w	r3, r3, #4
 8001732:	6713      	str	r3, [r2, #112]	; 0x70
 8001734:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001738:	4a5e      	ldr	r2, [pc, #376]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	; 0x70
 8001740:	e00b      	b.n	800175a <HAL_RCC_OscConfig+0x376>
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	4a5b      	ldr	r2, [pc, #364]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6713      	str	r3, [r2, #112]	; 0x70
 800174e:	4b59      	ldr	r3, [pc, #356]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001752:	4a58      	ldr	r2, [pc, #352]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d015      	beq.n	800178e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001762:	f7ff fb19 	bl	8000d98 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fb15 	bl	8000d98 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0d8      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001780:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0ee      	beq.n	800176a <HAL_RCC_OscConfig+0x386>
 800178c:	e014      	b.n	80017b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178e:	f7ff fb03 	bl	8000d98 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001796:	f7ff faff 	bl	8000d98 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e0c2      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ac:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ee      	bne.n	8001796 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d105      	bne.n	80017ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 80ae 	beq.w	8001930 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 030c 	and.w	r3, r3, #12
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d06d      	beq.n	80018bc <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d14b      	bne.n	8001880 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80017ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fad0 	bl	8000d98 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fc:	f7ff facc 	bl	8000d98 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e091      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69da      	ldr	r2, [r3, #28]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	019b      	lsls	r3, r3, #6
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	085b      	lsrs	r3, r3, #1
 8001832:	3b01      	subs	r3, #1
 8001834:	041b      	lsls	r3, r3, #16
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183c:	061b      	lsls	r3, r3, #24
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	071b      	lsls	r3, r3, #28
 8001846:	491b      	ldr	r1, [pc, #108]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff fa9e 	bl	8000d98 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fa9a 	bl	8000d98 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e05f      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x47c>
 800187e:	e057      	b.n	8001930 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 8001886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800188a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa84 	bl	8000d98 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fa80 	bl	8000d98 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e045      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_RCC_OscConfig+0x4d0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x4b0>
 80018b2:	e03d      	b.n	8001930 <HAL_RCC_OscConfig+0x54c>
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018bc:	4b1f      	ldr	r3, [pc, #124]	; (800193c <HAL_RCC_OscConfig+0x558>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d030      	beq.n	800192c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d129      	bne.n	800192c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d122      	bne.n	800192c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018ec:	4013      	ands	r3, r2
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018f2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d119      	bne.n	800192c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001902:	085b      	lsrs	r3, r3, #1
 8001904:	3b01      	subs	r3, #1
 8001906:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d10f      	bne.n	800192c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d107      	bne.n	800192c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3718      	adds	r7, #24
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800

08001940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0d0      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 020f 	bic.w	r2, r3, #15
 800196e:	4965      	ldr	r1, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e073      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4936      	ldr	r1, [pc, #216]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a34:	f7ff f9b0 	bl	8000d98 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f9ac 	bl	8000d98 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e053      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 020f 	bic.w	r2, r3, #15
 8001a7a:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ae4:	5cd3      	ldrb	r3, [r2, r3]
 8001ae6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1d0>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1d4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f90c 	bl	8000d10 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	080034e0 	.word	0x080034e0
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	607b      	str	r3, [r7, #4]
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	2300      	movs	r3, #0
 8001b28:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f003 030c 	and.w	r3, r3, #12
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d007      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x32>
 8001b3a:	2b08      	cmp	r3, #8
 8001b3c:	d008      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x38>
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 80b4 	bne.w	8001cac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b46:	60bb      	str	r3, [r7, #8]
      break;
 8001b48:	e0b3      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4a:	4b5d      	ldr	r3, [pc, #372]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b4c:	60bb      	str	r3, [r7, #8]
      break;
 8001b4e:	e0b0      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b5a:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d04a      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b55      	ldr	r3, [pc, #340]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	f04f 0400 	mov.w	r4, #0
 8001b70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	ea03 0501 	and.w	r5, r3, r1
 8001b7c:	ea04 0602 	and.w	r6, r4, r2
 8001b80:	4629      	mov	r1, r5
 8001b82:	4632      	mov	r2, r6
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f04f 0400 	mov.w	r4, #0
 8001b8c:	0154      	lsls	r4, r2, #5
 8001b8e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b92:	014b      	lsls	r3, r1, #5
 8001b94:	4619      	mov	r1, r3
 8001b96:	4622      	mov	r2, r4
 8001b98:	1b49      	subs	r1, r1, r5
 8001b9a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	f04f 0400 	mov.w	r4, #0
 8001ba6:	0194      	lsls	r4, r2, #6
 8001ba8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bac:	018b      	lsls	r3, r1, #6
 8001bae:	1a5b      	subs	r3, r3, r1
 8001bb0:	eb64 0402 	sbc.w	r4, r4, r2
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	00e2      	lsls	r2, r4, #3
 8001bbe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bc2:	00d9      	lsls	r1, r3, #3
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	195b      	adds	r3, r3, r5
 8001bca:	eb44 0406 	adc.w	r4, r4, r6
 8001bce:	f04f 0100 	mov.w	r1, #0
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	02a2      	lsls	r2, r4, #10
 8001bd8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bdc:	0299      	lsls	r1, r3, #10
 8001bde:	460b      	mov	r3, r1
 8001be0:	4614      	mov	r4, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	4621      	mov	r1, r4
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f04f 0400 	mov.w	r4, #0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	f7fe fb22 	bl	8000238 <__aeabi_uldivmod>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e049      	b.n	8001c90 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	099b      	lsrs	r3, r3, #6
 8001c02:	f04f 0400 	mov.w	r4, #0
 8001c06:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	ea03 0501 	and.w	r5, r3, r1
 8001c12:	ea04 0602 	and.w	r6, r4, r2
 8001c16:	4629      	mov	r1, r5
 8001c18:	4632      	mov	r2, r6
 8001c1a:	f04f 0300 	mov.w	r3, #0
 8001c1e:	f04f 0400 	mov.w	r4, #0
 8001c22:	0154      	lsls	r4, r2, #5
 8001c24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c28:	014b      	lsls	r3, r1, #5
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4622      	mov	r2, r4
 8001c2e:	1b49      	subs	r1, r1, r5
 8001c30:	eb62 0206 	sbc.w	r2, r2, r6
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	0194      	lsls	r4, r2, #6
 8001c3e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c42:	018b      	lsls	r3, r1, #6
 8001c44:	1a5b      	subs	r3, r3, r1
 8001c46:	eb64 0402 	sbc.w	r4, r4, r2
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	00e2      	lsls	r2, r4, #3
 8001c54:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c58:	00d9      	lsls	r1, r3, #3
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4614      	mov	r4, r2
 8001c5e:	195b      	adds	r3, r3, r5
 8001c60:	eb44 0406 	adc.w	r4, r4, r6
 8001c64:	f04f 0100 	mov.w	r1, #0
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	02a2      	lsls	r2, r4, #10
 8001c6e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c72:	0299      	lsls	r1, r3, #10
 8001c74:	460b      	mov	r3, r1
 8001c76:	4614      	mov	r4, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f04f 0400 	mov.w	r4, #0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4623      	mov	r3, r4
 8001c86:	f7fe fad7 	bl	8000238 <__aeabi_uldivmod>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460c      	mov	r4, r1
 8001c8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca8:	60bb      	str	r3, [r7, #8]
      break;
 8001caa:	e002      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cac:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001cae:	60bb      	str	r3, [r7, #8]
      break;
 8001cb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	00f42400 	.word	0x00f42400

08001cc4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	20000000 	.word	0x20000000

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff0 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	0a9b      	lsrs	r3, r3, #10
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	080034f0 	.word	0x080034f0

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d08:	f7ff ffdc 	bl	8001cc4 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0b5b      	lsrs	r3, r3, #13
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	080034f0 	.word	0x080034f0

08001d2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d012      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d54:	4b69      	ldr	r3, [pc, #420]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a68      	ldr	r2, [pc, #416]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d5e:	6093      	str	r3, [r2, #8]
 8001d60:	4b66      	ldr	r3, [pc, #408]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d68:	4964      	ldr	r1, [pc, #400]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d017      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d86:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d94:	4959      	ldr	r1, [pc, #356]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001da4:	d101      	bne.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d017      	beq.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dc2:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	494a      	ldr	r1, [pc, #296]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001de0:	d101      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dee:	2301      	movs	r3, #1
 8001df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f000 808b 	beq.w	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	4a39      	ldr	r2, [pc, #228]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1c:	4b37      	ldr	r3, [pc, #220]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	60bb      	str	r3, [r7, #8]
 8001e26:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e28:	4b35      	ldr	r3, [pc, #212]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e34:	f7fe ffb0 	bl	8000d98 <HAL_GetTick>
 8001e38:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e3c:	f7fe ffac 	bl	8000d98 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e38d      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e5a:	4b28      	ldr	r3, [pc, #160]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d035      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d02e      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e78:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e80:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8e:	4b1b      	ldr	r3, [pc, #108]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e9a:	4a18      	ldr	r2, [pc, #96]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ea0:	4b16      	ldr	r3, [pc, #88]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d114      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ff74 	bl	8000d98 <HAL_GetTick>
 8001eb0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb4:	f7fe ff70 	bl	8000d98 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e34f      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0ee      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ee2:	d111      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	4901      	ldr	r1, [pc, #4]	; (8001efc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40007000 	.word	0x40007000
 8001f04:	0ffffcff 	.word	0x0ffffcff
 8001f08:	4bb3      	ldr	r3, [pc, #716]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	4ab2      	ldr	r2, [pc, #712]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f12:	6093      	str	r3, [r2, #8]
 8001f14:	4bb0      	ldr	r3, [pc, #704]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f20:	49ad      	ldr	r1, [pc, #692]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d010      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f32:	4ba9      	ldr	r3, [pc, #676]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f38:	4aa7      	ldr	r2, [pc, #668]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f42:	4ba5      	ldr	r3, [pc, #660]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f44:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	49a2      	ldr	r1, [pc, #648]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f60:	4b9d      	ldr	r3, [pc, #628]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f6e:	499a      	ldr	r1, [pc, #616]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f82:	4b95      	ldr	r3, [pc, #596]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f90:	4991      	ldr	r1, [pc, #580]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fb2:	4989      	ldr	r1, [pc, #548]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fc6:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	4980      	ldr	r1, [pc, #512]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe8:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4978      	ldr	r1, [pc, #480]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002010:	f023 020c 	bic.w	r2, r3, #12
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002018:	496f      	ldr	r1, [pc, #444]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800202c:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4967      	ldr	r1, [pc, #412]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800204e:	4b62      	ldr	r3, [pc, #392]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002054:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205c:	495e      	ldr	r1, [pc, #376]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800207e:	4956      	ldr	r1, [pc, #344]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002092:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002098:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	494d      	ldr	r1, [pc, #308]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80020b4:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	4945      	ldr	r1, [pc, #276]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00a      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020d6:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e4:	493c      	ldr	r1, [pc, #240]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020f8:	4b37      	ldr	r3, [pc, #220]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002106:	4934      	ldr	r1, [pc, #208]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d011      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800211a:	4b2f      	ldr	r3, [pc, #188]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002128:	492b      	ldr	r1, [pc, #172]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002138:	d101      	bne.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800213a:	2301      	movs	r3, #1
 800213c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800215a:	4b1f      	ldr	r3, [pc, #124]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002168:	491b      	ldr	r1, [pc, #108]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800218c:	4912      	ldr	r1, [pc, #72]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00b      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00f      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021c4:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	e002      	b.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80021d6:	bf00      	nop
 80021d8:	40023800 	.word	0x40023800
 80021dc:	4985      	ldr	r1, [pc, #532]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00b      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021f0:	4b80      	ldr	r3, [pc, #512]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002200:	497c      	ldr	r1, [pc, #496]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d005      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002216:	f040 80d6 	bne.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002220:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002226:	f7fe fdb7 	bl	8000d98 <HAL_GetTick>
 800222a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800222c:	e008      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800222e:	f7fe fdb3 	bl	8000d98 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b64      	cmp	r3, #100	; 0x64
 800223a:	d901      	bls.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e194      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002240:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d021      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11d      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002260:	4b64      	ldr	r3, [pc, #400]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800226e:	4b61      	ldr	r3, [pc, #388]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002274:	0e1b      	lsrs	r3, r3, #24
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	019a      	lsls	r2, r3, #6
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	431a      	orrs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	061b      	lsls	r3, r3, #24
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	071b      	lsls	r3, r3, #28
 8002294:	4957      	ldr	r1, [pc, #348]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02e      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022c6:	d129      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80022c8:	4b4a      	ldr	r3, [pc, #296]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022dc:	0f1b      	lsrs	r3, r3, #28
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	019a      	lsls	r2, r3, #6
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	061b      	lsls	r3, r3, #24
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	071b      	lsls	r3, r3, #28
 80022fc:	493d      	ldr	r1, [pc, #244]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800230a:	f023 021f 	bic.w	r2, r3, #31
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	3b01      	subs	r3, #1
 8002314:	4937      	ldr	r1, [pc, #220]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01d      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800232a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800232e:	0e1b      	lsrs	r3, r3, #24
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002336:	4b2f      	ldr	r3, [pc, #188]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800233c:	0f1b      	lsrs	r3, r3, #28
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	019a      	lsls	r2, r3, #6
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	061b      	lsls	r3, r3, #24
 8002356:	431a      	orrs	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	071b      	lsls	r3, r3, #28
 800235c:	4925      	ldr	r1, [pc, #148]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d011      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	019a      	lsls	r2, r3, #6
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	061b      	lsls	r3, r3, #24
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	071b      	lsls	r3, r3, #28
 800238c:	4919      	ldr	r1, [pc, #100]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002394:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800239a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800239e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a0:	f7fe fcfa 	bl	8000d98 <HAL_GetTick>
 80023a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023a8:	f7fe fcf6 	bl	8000d98 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e0d7      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80023ba:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	f040 80cd 	bne.w	8002568 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023da:	f7fe fcdd 	bl	8000d98 <HAL_GetTick>
 80023de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023e0:	e00a      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023e2:	f7fe fcd9 	bl	8000d98 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d903      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0ba      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80023f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023f8:	4b5e      	ldr	r3, [pc, #376]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002404:	d0ed      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d009      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02e      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d12a      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800243c:	4b4d      	ldr	r3, [pc, #308]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	0f1b      	lsrs	r3, r3, #28
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	019a      	lsls	r2, r3, #6
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	041b      	lsls	r3, r3, #16
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	061b      	lsls	r3, r3, #24
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	071b      	lsls	r3, r3, #28
 8002462:	4944      	ldr	r1, [pc, #272]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800246c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002470:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	3b01      	subs	r3, #1
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	493d      	ldr	r1, [pc, #244]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d022      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002498:	d11d      	bne.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800249a:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	0e1b      	lsrs	r3, r3, #24
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80024a8:	4b32      	ldr	r3, [pc, #200]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	0f1b      	lsrs	r3, r3, #28
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	019a      	lsls	r2, r3, #6
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	041b      	lsls	r3, r3, #16
 80024c2:	431a      	orrs	r2, r3
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	061b      	lsls	r3, r3, #24
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	071b      	lsls	r3, r3, #28
 80024ce:	4929      	ldr	r1, [pc, #164]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d028      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024e2:	4b24      	ldr	r3, [pc, #144]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	0e1b      	lsrs	r3, r3, #24
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	0c1b      	lsrs	r3, r3, #16
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	019a      	lsls	r2, r3, #6
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	431a      	orrs	r2, r3
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	061b      	lsls	r3, r3, #24
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	071b      	lsls	r3, r3, #28
 8002516:	4917      	ldr	r1, [pc, #92]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	4911      	ldr	r1, [pc, #68]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002534:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0e      	ldr	r2, [pc, #56]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fc2a 	bl	8000d98 <HAL_GetTick>
 8002544:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002548:	f7fe fc26 	bl	8000d98 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	; 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e007      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002566:	d1ef      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3720      	adds	r7, #32
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800

08002578 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e040      	b.n	800260c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258e:	2b00      	cmp	r3, #0
 8002590:	d106      	bne.n	80025a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7fe fab6 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	; 0x24
 80025a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 faee 	bl	8002b98 <UART_SetConfig>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e022      	b.n	800260c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d002      	beq.n	80025d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fd8c 	bl	80030ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 fe13 	bl	8003230 <UART_CheckIdleState>
 800260a:	4603      	mov	r3, r0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	4613      	mov	r3, r2
 8002622:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	2b20      	cmp	r3, #32
 800262a:	d17f      	bne.n	800272c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d002      	beq.n	8002638 <HAL_UART_Transmit+0x24>
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d101      	bne.n	800263c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e078      	b.n	800272e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_UART_Transmit+0x36>
 8002646:	2302      	movs	r3, #2
 8002648:	e071      	b.n	800272e <HAL_UART_Transmit+0x11a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2221      	movs	r2, #33	; 0x21
 800265c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800265e:	f7fe fb9b 	bl	8000d98 <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	88fa      	ldrh	r2, [r7, #6]
 8002668:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	88fa      	ldrh	r2, [r7, #6]
 8002670:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800267c:	d108      	bne.n	8002690 <HAL_UART_Transmit+0x7c>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	e003      	b.n	8002698 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80026a0:	e02c      	b.n	80026fc <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2200      	movs	r2, #0
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fe04 	bl	80032ba <UART_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e038      	b.n	800272e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10b      	bne.n	80026da <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	3302      	adds	r3, #2
 80026d6:	61bb      	str	r3, [r7, #24]
 80026d8:	e007      	b.n	80026ea <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	3301      	adds	r3, #1
 80026e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1cc      	bne.n	80026a2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2200      	movs	r2, #0
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fdd1 	bl	80032ba <UART_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e005      	b.n	800272e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002728:	2300      	movs	r3, #0
 800272a:	e000      	b.n	800272e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800272c:	2302      	movs	r3, #2
  }
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b08a      	sub	sp, #40	; 0x28
 800273a:	af02      	add	r7, sp, #8
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	4613      	mov	r3, r2
 8002744:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274a:	2b20      	cmp	r3, #32
 800274c:	f040 80ba 	bne.w	80028c4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Receive+0x26>
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b2      	b.n	80028c6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_UART_Receive+0x38>
 800276a:	2302      	movs	r3, #2
 800276c:	e0ab      	b.n	80028c6 <HAL_UART_Receive+0x190>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2222      	movs	r2, #34	; 0x22
 8002780:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002782:	f7fe fb09 	bl	8000d98 <HAL_GetTick>
 8002786:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	88fa      	ldrh	r2, [r7, #6]
 8002794:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027a0:	d10e      	bne.n	80027c0 <HAL_UART_Receive+0x8a>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d105      	bne.n	80027b6 <HAL_UART_Receive+0x80>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80027b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027b4:	e02d      	b.n	8002812 <HAL_UART_Receive+0xdc>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	22ff      	movs	r2, #255	; 0xff
 80027ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027be:	e028      	b.n	8002812 <HAL_UART_Receive+0xdc>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10d      	bne.n	80027e4 <HAL_UART_Receive+0xae>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <HAL_UART_Receive+0xa4>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	22ff      	movs	r2, #255	; 0xff
 80027d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027d8:	e01b      	b.n	8002812 <HAL_UART_Receive+0xdc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	227f      	movs	r2, #127	; 0x7f
 80027de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027e2:	e016      	b.n	8002812 <HAL_UART_Receive+0xdc>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ec:	d10d      	bne.n	800280a <HAL_UART_Receive+0xd4>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d104      	bne.n	8002800 <HAL_UART_Receive+0xca>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	227f      	movs	r2, #127	; 0x7f
 80027fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80027fe:	e008      	b.n	8002812 <HAL_UART_Receive+0xdc>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	223f      	movs	r2, #63	; 0x3f
 8002804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002808:	e003      	b.n	8002812 <HAL_UART_Receive+0xdc>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002818:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002822:	d108      	bne.n	8002836 <HAL_UART_Receive+0x100>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d104      	bne.n	8002836 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e003      	b.n	800283e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002846:	e032      	b.n	80028ae <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	2200      	movs	r2, #0
 8002850:	2120      	movs	r1, #32
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fd31 	bl	80032ba <UART_WaitOnFlagUntilTimeout>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e031      	b.n	80028c6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10c      	bne.n	8002882 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	b29a      	uxth	r2, r3
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	4013      	ands	r3, r2
 8002874:	b29a      	uxth	r2, r3
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3302      	adds	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	e00c      	b.n	800289c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	b2da      	uxtb	r2, r3
 800288a:	8a7b      	ldrh	r3, [r7, #18]
 800288c:	b2db      	uxtb	r3, r3
 800288e:	4013      	ands	r3, r2
 8002890:	b2da      	uxtb	r2, r3
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3301      	adds	r3, #1
 800289a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1c6      	bne.n	8002848 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
	...

080028d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028f0:	69fa      	ldr	r2, [r7, #28]
 80028f2:	f640 030f 	movw	r3, #2063	; 0x80f
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d113      	bne.n	8002928 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00e      	beq.n	8002928 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 8114 	beq.w	8002b46 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
      }
      return;
 8002926:	e10e      	b.n	8002b46 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 80d6 	beq.w	8002adc <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d105      	bne.n	8002946 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80cb 	beq.w	8002adc <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00e      	beq.n	800296e <HAL_UART_IRQHandler+0x9e>
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002956:	2b00      	cmp	r3, #0
 8002958:	d009      	beq.n	800296e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2201      	movs	r2, #1
 8002960:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <HAL_UART_IRQHandler+0xc6>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2202      	movs	r2, #2
 8002988:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298e:	f043 0204 	orr.w	r2, r3, #4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00e      	beq.n	80029be <HAL_UART_IRQHandler+0xee>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2204      	movs	r2, #4
 80029b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d013      	beq.n	80029f0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d009      	beq.n	80029f0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2208      	movs	r2, #8
 80029e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029e8:	f043 0208 	orr.w	r2, r3, #8
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00f      	beq.n	8002a1a <HAL_UART_IRQHandler+0x14a>
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8093 	beq.w	8002b4a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d004      	beq.n	8002a66 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d031      	beq.n	8002aca <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fca2 	bl	80033b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d123      	bne.n	8002ac2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a88:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d013      	beq.n	8002aba <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a96:	4a30      	ldr	r2, [pc, #192]	; (8002b58 <HAL_UART_IRQHandler+0x288>)
 8002a98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe fab9 	bl	8001016 <HAL_DMA_Abort_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d016      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e00e      	b.n	8002ad8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f858 	bl	8002b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	e00a      	b.n	8002ad8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f854 	bl	8002b70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac8:	e006      	b.n	8002ad8 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f850 	bl	8002b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002ad6:	e038      	b.n	8002b4a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad8:	bf00      	nop
    return;
 8002ada:	e036      	b.n	8002b4a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_UART_IRQHandler+0x232>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f842 	bl	8002b84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b00:	e026      	b.n	8002b50 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00d      	beq.n	8002b28 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d008      	beq.n	8002b28 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d017      	beq.n	8002b4e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
    }
    return;
 8002b26:	e012      	b.n	8002b4e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00e      	beq.n	8002b50 <HAL_UART_IRQHandler+0x280>
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fc6d 	bl	800341c <UART_EndTransmit_IT>
    return;
 8002b42:	bf00      	nop
 8002b44:	e004      	b.n	8002b50 <HAL_UART_IRQHandler+0x280>
      return;
 8002b46:	bf00      	nop
 8002b48:	e002      	b.n	8002b50 <HAL_UART_IRQHandler+0x280>
    return;
 8002b4a:	bf00      	nop
 8002b4c:	e000      	b.n	8002b50 <HAL_UART_IRQHandler+0x280>
    return;
 8002b4e:	bf00      	nop
  }

}
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	080033f1 	.word	0x080033f1

08002b5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	4bb1      	ldr	r3, [pc, #708]	; (8002e8c <UART_SetConfig+0x2f4>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	6939      	ldr	r1, [r7, #16]
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a9f      	ldr	r2, [pc, #636]	; (8002e90 <UART_SetConfig+0x2f8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d121      	bne.n	8002c5c <UART_SetConfig+0xc4>
 8002c18:	4b9e      	ldr	r3, [pc, #632]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d816      	bhi.n	8002c54 <UART_SetConfig+0xbc>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <UART_SetConfig+0x94>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002c3d 	.word	0x08002c3d
 8002c30:	08002c49 	.word	0x08002c49
 8002c34:	08002c43 	.word	0x08002c43
 8002c38:	08002c4f 	.word	0x08002c4f
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	77fb      	strb	r3, [r7, #31]
 8002c40:	e151      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	77fb      	strb	r3, [r7, #31]
 8002c46:	e14e      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002c48:	2304      	movs	r3, #4
 8002c4a:	77fb      	strb	r3, [r7, #31]
 8002c4c:	e14b      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002c4e:	2308      	movs	r3, #8
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e148      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002c54:	2310      	movs	r3, #16
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	bf00      	nop
 8002c5a:	e144      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a8d      	ldr	r2, [pc, #564]	; (8002e98 <UART_SetConfig+0x300>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d134      	bne.n	8002cd0 <UART_SetConfig+0x138>
 8002c66:	4b8b      	ldr	r3, [pc, #556]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b0c      	cmp	r3, #12
 8002c72:	d829      	bhi.n	8002cc8 <UART_SetConfig+0x130>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <UART_SetConfig+0xe4>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002cb1 	.word	0x08002cb1
 8002c80:	08002cc9 	.word	0x08002cc9
 8002c84:	08002cc9 	.word	0x08002cc9
 8002c88:	08002cc9 	.word	0x08002cc9
 8002c8c:	08002cbd 	.word	0x08002cbd
 8002c90:	08002cc9 	.word	0x08002cc9
 8002c94:	08002cc9 	.word	0x08002cc9
 8002c98:	08002cc9 	.word	0x08002cc9
 8002c9c:	08002cb7 	.word	0x08002cb7
 8002ca0:	08002cc9 	.word	0x08002cc9
 8002ca4:	08002cc9 	.word	0x08002cc9
 8002ca8:	08002cc9 	.word	0x08002cc9
 8002cac:	08002cc3 	.word	0x08002cc3
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	e117      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	77fb      	strb	r3, [r7, #31]
 8002cba:	e114      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002cbc:	2304      	movs	r3, #4
 8002cbe:	77fb      	strb	r3, [r7, #31]
 8002cc0:	e111      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	77fb      	strb	r3, [r7, #31]
 8002cc6:	e10e      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002cc8:	2310      	movs	r3, #16
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	bf00      	nop
 8002cce:	e10a      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a71      	ldr	r2, [pc, #452]	; (8002e9c <UART_SetConfig+0x304>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d120      	bne.n	8002d1c <UART_SetConfig+0x184>
 8002cda:	4b6e      	ldr	r3, [pc, #440]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d00f      	beq.n	8002d08 <UART_SetConfig+0x170>
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	d802      	bhi.n	8002cf2 <UART_SetConfig+0x15a>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <UART_SetConfig+0x164>
 8002cf0:	e010      	b.n	8002d14 <UART_SetConfig+0x17c>
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d005      	beq.n	8002d02 <UART_SetConfig+0x16a>
 8002cf6:	2b30      	cmp	r3, #48	; 0x30
 8002cf8:	d009      	beq.n	8002d0e <UART_SetConfig+0x176>
 8002cfa:	e00b      	b.n	8002d14 <UART_SetConfig+0x17c>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e0f1      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e0ee      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d08:	2304      	movs	r3, #4
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e0eb      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d0e:	2308      	movs	r3, #8
 8002d10:	77fb      	strb	r3, [r7, #31]
 8002d12:	e0e8      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d14:	2310      	movs	r3, #16
 8002d16:	77fb      	strb	r3, [r7, #31]
 8002d18:	bf00      	nop
 8002d1a:	e0e4      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a5f      	ldr	r2, [pc, #380]	; (8002ea0 <UART_SetConfig+0x308>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d120      	bne.n	8002d68 <UART_SetConfig+0x1d0>
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d00f      	beq.n	8002d54 <UART_SetConfig+0x1bc>
 8002d34:	2b40      	cmp	r3, #64	; 0x40
 8002d36:	d802      	bhi.n	8002d3e <UART_SetConfig+0x1a6>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d005      	beq.n	8002d48 <UART_SetConfig+0x1b0>
 8002d3c:	e010      	b.n	8002d60 <UART_SetConfig+0x1c8>
 8002d3e:	2b80      	cmp	r3, #128	; 0x80
 8002d40:	d005      	beq.n	8002d4e <UART_SetConfig+0x1b6>
 8002d42:	2bc0      	cmp	r3, #192	; 0xc0
 8002d44:	d009      	beq.n	8002d5a <UART_SetConfig+0x1c2>
 8002d46:	e00b      	b.n	8002d60 <UART_SetConfig+0x1c8>
 8002d48:	2300      	movs	r3, #0
 8002d4a:	77fb      	strb	r3, [r7, #31]
 8002d4c:	e0cb      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	77fb      	strb	r3, [r7, #31]
 8002d52:	e0c8      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d54:	2304      	movs	r3, #4
 8002d56:	77fb      	strb	r3, [r7, #31]
 8002d58:	e0c5      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d5a:	2308      	movs	r3, #8
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e0c2      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d60:	2310      	movs	r3, #16
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	bf00      	nop
 8002d66:	e0be      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ea4 <UART_SetConfig+0x30c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d124      	bne.n	8002dbc <UART_SetConfig+0x224>
 8002d72:	4b48      	ldr	r3, [pc, #288]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d80:	d012      	beq.n	8002da8 <UART_SetConfig+0x210>
 8002d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d86:	d802      	bhi.n	8002d8e <UART_SetConfig+0x1f6>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <UART_SetConfig+0x204>
 8002d8c:	e012      	b.n	8002db4 <UART_SetConfig+0x21c>
 8002d8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d92:	d006      	beq.n	8002da2 <UART_SetConfig+0x20a>
 8002d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d98:	d009      	beq.n	8002dae <UART_SetConfig+0x216>
 8002d9a:	e00b      	b.n	8002db4 <UART_SetConfig+0x21c>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e0a1      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002da2:	2302      	movs	r3, #2
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e09e      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002da8:	2304      	movs	r3, #4
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e09b      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002dae:	2308      	movs	r3, #8
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e098      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002db4:	2310      	movs	r3, #16
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	bf00      	nop
 8002dba:	e094      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a39      	ldr	r2, [pc, #228]	; (8002ea8 <UART_SetConfig+0x310>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d124      	bne.n	8002e10 <UART_SetConfig+0x278>
 8002dc6:	4b33      	ldr	r3, [pc, #204]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd4:	d012      	beq.n	8002dfc <UART_SetConfig+0x264>
 8002dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dda:	d802      	bhi.n	8002de2 <UART_SetConfig+0x24a>
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <UART_SetConfig+0x258>
 8002de0:	e012      	b.n	8002e08 <UART_SetConfig+0x270>
 8002de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002de6:	d006      	beq.n	8002df6 <UART_SetConfig+0x25e>
 8002de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dec:	d009      	beq.n	8002e02 <UART_SetConfig+0x26a>
 8002dee:	e00b      	b.n	8002e08 <UART_SetConfig+0x270>
 8002df0:	2301      	movs	r3, #1
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e077      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002df6:	2302      	movs	r3, #2
 8002df8:	77fb      	strb	r3, [r7, #31]
 8002dfa:	e074      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002dfc:	2304      	movs	r3, #4
 8002dfe:	77fb      	strb	r3, [r7, #31]
 8002e00:	e071      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e02:	2308      	movs	r3, #8
 8002e04:	77fb      	strb	r3, [r7, #31]
 8002e06:	e06e      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e08:	2310      	movs	r3, #16
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	bf00      	nop
 8002e0e:	e06a      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a25      	ldr	r2, [pc, #148]	; (8002eac <UART_SetConfig+0x314>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d124      	bne.n	8002e64 <UART_SetConfig+0x2cc>
 8002e1a:	4b1e      	ldr	r3, [pc, #120]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d012      	beq.n	8002e50 <UART_SetConfig+0x2b8>
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d802      	bhi.n	8002e36 <UART_SetConfig+0x29e>
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <UART_SetConfig+0x2ac>
 8002e34:	e012      	b.n	8002e5c <UART_SetConfig+0x2c4>
 8002e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3a:	d006      	beq.n	8002e4a <UART_SetConfig+0x2b2>
 8002e3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e40:	d009      	beq.n	8002e56 <UART_SetConfig+0x2be>
 8002e42:	e00b      	b.n	8002e5c <UART_SetConfig+0x2c4>
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
 8002e48:	e04d      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	77fb      	strb	r3, [r7, #31]
 8002e4e:	e04a      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e50:	2304      	movs	r3, #4
 8002e52:	77fb      	strb	r3, [r7, #31]
 8002e54:	e047      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e56:	2308      	movs	r3, #8
 8002e58:	77fb      	strb	r3, [r7, #31]
 8002e5a:	e044      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	bf00      	nop
 8002e62:	e040      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a11      	ldr	r2, [pc, #68]	; (8002eb0 <UART_SetConfig+0x318>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d139      	bne.n	8002ee2 <UART_SetConfig+0x34a>
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <UART_SetConfig+0x2fc>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7c:	d027      	beq.n	8002ece <UART_SetConfig+0x336>
 8002e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e82:	d817      	bhi.n	8002eb4 <UART_SetConfig+0x31c>
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d01c      	beq.n	8002ec2 <UART_SetConfig+0x32a>
 8002e88:	e027      	b.n	8002eda <UART_SetConfig+0x342>
 8002e8a:	bf00      	nop
 8002e8c:	efff69f3 	.word	0xefff69f3
 8002e90:	40011000 	.word	0x40011000
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40004400 	.word	0x40004400
 8002e9c:	40004800 	.word	0x40004800
 8002ea0:	40004c00 	.word	0x40004c00
 8002ea4:	40005000 	.word	0x40005000
 8002ea8:	40011400 	.word	0x40011400
 8002eac:	40007800 	.word	0x40007800
 8002eb0:	40007c00 	.word	0x40007c00
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb8:	d006      	beq.n	8002ec8 <UART_SetConfig+0x330>
 8002eba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002ebe:	d009      	beq.n	8002ed4 <UART_SetConfig+0x33c>
 8002ec0:	e00b      	b.n	8002eda <UART_SetConfig+0x342>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	77fb      	strb	r3, [r7, #31]
 8002ec6:	e00e      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	77fb      	strb	r3, [r7, #31]
 8002ecc:	e00b      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002ece:	2304      	movs	r3, #4
 8002ed0:	77fb      	strb	r3, [r7, #31]
 8002ed2:	e008      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	77fb      	strb	r3, [r7, #31]
 8002ed8:	e005      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002eda:	2310      	movs	r3, #16
 8002edc:	77fb      	strb	r3, [r7, #31]
 8002ede:	bf00      	nop
 8002ee0:	e001      	b.n	8002ee6 <UART_SetConfig+0x34e>
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eee:	d17f      	bne.n	8002ff0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002ef0:	7ffb      	ldrb	r3, [r7, #31]
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d85c      	bhi.n	8002fb0 <UART_SetConfig+0x418>
 8002ef6:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <UART_SetConfig+0x364>)
 8002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efc:	08002f21 	.word	0x08002f21
 8002f00:	08002f41 	.word	0x08002f41
 8002f04:	08002f61 	.word	0x08002f61
 8002f08:	08002fb1 	.word	0x08002fb1
 8002f0c:	08002f79 	.word	0x08002f79
 8002f10:	08002fb1 	.word	0x08002fb1
 8002f14:	08002fb1 	.word	0x08002fb1
 8002f18:	08002fb1 	.word	0x08002fb1
 8002f1c:	08002f99 	.word	0x08002f99
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f20:	f7fe fedc 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8002f24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	005a      	lsls	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	441a      	add	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	61bb      	str	r3, [r7, #24]
        break;
 8002f3e:	e03a      	b.n	8002fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f40:	f7fe fee0 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8002f44:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	005a      	lsls	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	085b      	lsrs	r3, r3, #1
 8002f50:	441a      	add	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	61bb      	str	r3, [r7, #24]
        break;
 8002f5e:	e02a      	b.n	8002fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	085a      	lsrs	r2, r3, #1
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <UART_SetConfig+0x54c>)
 8002f68:	4413      	add	r3, r2
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6852      	ldr	r2, [r2, #4]
 8002f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	61bb      	str	r3, [r7, #24]
        break;
 8002f76:	e01e      	b.n	8002fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f78:	f7fe fdce 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8002f7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	005a      	lsls	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	61bb      	str	r3, [r7, #24]
        break;
 8002f96:	e00e      	b.n	8002fb6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	61bb      	str	r3, [r7, #24]
        break;
 8002fae:	e002      	b.n	8002fb6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	75fb      	strb	r3, [r7, #23]
        break;
 8002fb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	2b0f      	cmp	r3, #15
 8002fba:	d916      	bls.n	8002fea <UART_SetConfig+0x452>
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc2:	d212      	bcs.n	8002fea <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	f023 030f 	bic.w	r3, r3, #15
 8002fcc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	085b      	lsrs	r3, r3, #1
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	897b      	ldrh	r3, [r7, #10]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	897a      	ldrh	r2, [r7, #10]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	e070      	b.n	80030cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
 8002fee:	e06d      	b.n	80030cc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002ff0:	7ffb      	ldrb	r3, [r7, #31]
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d859      	bhi.n	80030aa <UART_SetConfig+0x512>
 8002ff6:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <UART_SetConfig+0x464>)
 8002ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffc:	08003021 	.word	0x08003021
 8003000:	0800303f 	.word	0x0800303f
 8003004:	0800305d 	.word	0x0800305d
 8003008:	080030ab 	.word	0x080030ab
 800300c:	08003075 	.word	0x08003075
 8003010:	080030ab 	.word	0x080030ab
 8003014:	080030ab 	.word	0x080030ab
 8003018:	080030ab 	.word	0x080030ab
 800301c:	08003093 	.word	0x08003093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7fe fe5c 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 8003024:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	085a      	lsrs	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	441a      	add	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	fbb2 f3f3 	udiv	r3, r2, r3
 8003038:	b29b      	uxth	r3, r3
 800303a:	61bb      	str	r3, [r7, #24]
        break;
 800303c:	e038      	b.n	80030b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800303e:	f7fe fe61 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 8003042:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	085a      	lsrs	r2, r3, #1
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	441a      	add	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	b29b      	uxth	r3, r3
 8003058:	61bb      	str	r3, [r7, #24]
        break;
 800305a:	e029      	b.n	80030b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	085a      	lsrs	r2, r3, #1
 8003062:	4b21      	ldr	r3, [pc, #132]	; (80030e8 <UART_SetConfig+0x550>)
 8003064:	4413      	add	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6852      	ldr	r2, [r2, #4]
 800306a:	fbb3 f3f2 	udiv	r3, r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	61bb      	str	r3, [r7, #24]
        break;
 8003072:	e01d      	b.n	80030b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003074:	f7fe fd50 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8003078:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	085a      	lsrs	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	441a      	add	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	fbb2 f3f3 	udiv	r3, r2, r3
 800308c:	b29b      	uxth	r3, r3
 800308e:	61bb      	str	r3, [r7, #24]
        break;
 8003090:	e00e      	b.n	80030b0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	085b      	lsrs	r3, r3, #1
 8003098:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	61bb      	str	r3, [r7, #24]
        break;
 80030a8:	e002      	b.n	80030b0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	75fb      	strb	r3, [r7, #23]
        break;
 80030ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	d908      	bls.n	80030c8 <UART_SetConfig+0x530>
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d204      	bcs.n	80030c8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	e001      	b.n	80030cc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3720      	adds	r7, #32
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	01e84800 	.word	0x01e84800
 80030e8:	00f42400 	.word	0x00f42400

080030ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	430a      	orrs	r2, r1
 8003158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f003 0308 	and.w	r3, r3, #8
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	430a      	orrs	r2, r1
 800317a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	f003 0320 	and.w	r3, r3, #32
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01a      	beq.n	8003202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031ea:	d10a      	bne.n	8003202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	605a      	str	r2, [r3, #4]
  }
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af02      	add	r7, sp, #8
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800323e:	f7fd fdab 	bl	8000d98 <HAL_GetTick>
 8003242:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b08      	cmp	r3, #8
 8003250:	d10e      	bne.n	8003270 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f82a 	bl	80032ba <UART_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e020      	b.n	80032b2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0304 	and.w	r3, r3, #4
 800327a:	2b04      	cmp	r3, #4
 800327c:	d10e      	bne.n	800329c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800327e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f814 	bl	80032ba <UART_WaitOnFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e00a      	b.n	80032b2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	60f8      	str	r0, [r7, #12]
 80032c2:	60b9      	str	r1, [r7, #8]
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	4613      	mov	r3, r2
 80032c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ca:	e05d      	b.n	8003388 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d059      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d4:	f7fd fd60 	bl	8000d98 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d302      	bcc.n	80032ea <UART_WaitOnFlagUntilTimeout+0x30>
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d11b      	bne.n	8003322 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032f8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0201 	bic.w	r2, r2, #1
 8003308:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e042      	b.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d02b      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800333e:	d123      	bne.n	8003388 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003348:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003358:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e00f      	b.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4013      	ands	r3, r2
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	429a      	cmp	r2, r3
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d092      	beq.n	80032cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	661a      	str	r2, [r3, #96]	; 0x60
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f7ff fbae 	bl	8002b70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003432:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7ff fb8b 	bl	8002b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <__libc_init_array>:
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4e0d      	ldr	r6, [pc, #52]	; (8003488 <__libc_init_array+0x38>)
 8003454:	4c0d      	ldr	r4, [pc, #52]	; (800348c <__libc_init_array+0x3c>)
 8003456:	1ba4      	subs	r4, r4, r6
 8003458:	10a4      	asrs	r4, r4, #2
 800345a:	2500      	movs	r5, #0
 800345c:	42a5      	cmp	r5, r4
 800345e:	d109      	bne.n	8003474 <__libc_init_array+0x24>
 8003460:	4e0b      	ldr	r6, [pc, #44]	; (8003490 <__libc_init_array+0x40>)
 8003462:	4c0c      	ldr	r4, [pc, #48]	; (8003494 <__libc_init_array+0x44>)
 8003464:	f000 f820 	bl	80034a8 <_init>
 8003468:	1ba4      	subs	r4, r4, r6
 800346a:	10a4      	asrs	r4, r4, #2
 800346c:	2500      	movs	r5, #0
 800346e:	42a5      	cmp	r5, r4
 8003470:	d105      	bne.n	800347e <__libc_init_array+0x2e>
 8003472:	bd70      	pop	{r4, r5, r6, pc}
 8003474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003478:	4798      	blx	r3
 800347a:	3501      	adds	r5, #1
 800347c:	e7ee      	b.n	800345c <__libc_init_array+0xc>
 800347e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003482:	4798      	blx	r3
 8003484:	3501      	adds	r5, #1
 8003486:	e7f2      	b.n	800346e <__libc_init_array+0x1e>
 8003488:	08003500 	.word	0x08003500
 800348c:	08003500 	.word	0x08003500
 8003490:	08003500 	.word	0x08003500
 8003494:	08003504 	.word	0x08003504

08003498 <memset>:
 8003498:	4402      	add	r2, r0
 800349a:	4603      	mov	r3, r0
 800349c:	4293      	cmp	r3, r2
 800349e:	d100      	bne.n	80034a2 <memset+0xa>
 80034a0:	4770      	bx	lr
 80034a2:	f803 1b01 	strb.w	r1, [r3], #1
 80034a6:	e7f9      	b.n	800349c <memset+0x4>

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
