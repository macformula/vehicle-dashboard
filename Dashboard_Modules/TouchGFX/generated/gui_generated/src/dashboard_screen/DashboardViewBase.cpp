/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/dashboard_screen/DashboardViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

DashboardViewBase::DashboardViewBase() :
    buttonCallback(this, &DashboardViewBase::buttonCallbackHandler)
{

    __background.setPosition(0, 0, 480, 272);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));

    background.setPosition(0, 0, 480, 272);
    background.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));

    batteryTemp.setPosition(0, 44, 136, 206);

    batteryTempLabel.setXY(12, 194);
    batteryTempLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    batteryTempLabel.setLinespacing(0);
    batteryTempLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));
    batteryTemp.add(batteryTempLabel);

    batteryTempProgress.setXY(45, 0);
    batteryTempProgress.setProgressIndicatorPosition(2, 2, 35, 180);
    batteryTempProgress.setRange(0, 100);
    batteryTempProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    batteryTempProgress.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_MEDIUM_PROGRESS_INDICATOR_BG_SQUARE_90_DEGREES_ID));
    batteryTempProgress.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    batteryTempProgress.setValue(60);
    batteryTemp.add(batteryTempProgress);

    batterySOC.setPosition(148, 0, 184, 72);

    batterySOCLabel.setXY(61, 13);
    batterySOCLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    batterySOCLabel.setLinespacing(0);
    batterySOCLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
    batterySOC.add(batterySOCLabel);

    batterySOCProgress.setXY(0, 29);
    batterySOCProgress.setProgressIndicatorPosition(2, 2, 180, 35);
    batterySOCProgress.setRange(0, 100);
    batterySOCProgress.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    batterySOCProgress.setBackground(touchgfx::Bitmap(BITMAP_HORIZ_ID));
    batterySOCProgress.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    batterySOCProgress.setValue(60);
    batterySOC.add(batterySOCProgress);

    indicators.setPosition(143, 228, 194, 44);

    lvIndicator.setPosition(0, 0, 50, 44);
    lvIndicator.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    lvIndicator.setBorderColor(touchgfx::Color::getColorFromRGB(36, 36, 36));
    lvIndicator.setBorderSize(5);
    indicators.add(lvIndicator);

    hvIndicator.setPosition(144, 0, 50, 44);
    hvIndicator.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    hvIndicator.setBorderColor(touchgfx::Color::getColorFromRGB(36, 36, 36));
    hvIndicator.setBorderSize(5);
    indicators.add(hvIndicator);

    highVoltageLabel.setXY(162, 16);
    highVoltageLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    highVoltageLabel.setLinespacing(0);
    highVoltageLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));
    indicators.add(highVoltageLabel);

    lowVoltageLabel.setXY(19, 17);
    lowVoltageLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    lowVoltageLabel.setLinespacing(0);
    lowVoltageLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID8));
    indicators.add(lowVoltageLabel);

    speedometer.setPosition(148, 97, 184, 103);

    center_text.setPosition(0, 0, 184, 78);
    center_text.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    center_text.setLinespacing(0);
    Unicode::snprintf(center_textBuffer, CENTER_TEXT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID4).getText());
    center_text.setWildcard(center_textBuffer);
    center_text.setTypedText(touchgfx::TypedText(T_SINGLEUSEID3));
    speedometer.add(center_text);

    centerTextUnits.setXY(66, 78);
    centerTextUnits.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    centerTextUnits.setLinespacing(0);
    centerTextUnits.setTypedText(touchgfx::TypedText(T_SINGLEUSEID5));
    speedometer.add(centerTextUnits);

    motorTemperatures.setPosition(396, 22, 69, 235);

    motorTempLabel.setXY(0, 223);
    motorTempLabel.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    motorTempLabel.setLinespacing(0);
    motorTempLabel.setTypedText(touchgfx::TypedText(T_SINGLEUSEID7));
    motorTemperatures.add(motorTempLabel);

    frontRightMotorTempProgress.setXY(40, 0);
    frontRightMotorTempProgress.setProgressIndicatorPosition(2, 2, 15, 100);
    frontRightMotorTempProgress.setRange(0, 100);
    frontRightMotorTempProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    frontRightMotorTempProgress.setBackground(touchgfx::Bitmap(BITMAP_SMALLER_VERTICAL_PROGRESS_BAR_ID));
    frontRightMotorTempProgress.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    frontRightMotorTempProgress.setValue(23);
    motorTemperatures.add(frontRightMotorTempProgress);

    frontLeftMotorTempProgress.setXY(9, 0);
    frontLeftMotorTempProgress.setProgressIndicatorPosition(2, 2, 15, 100);
    frontLeftMotorTempProgress.setRange(0, 100);
    frontLeftMotorTempProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    frontLeftMotorTempProgress.setBackground(touchgfx::Bitmap(BITMAP_SMALLER_VERTICAL_PROGRESS_BAR_ID));
    frontLeftMotorTempProgress.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    frontLeftMotorTempProgress.setValue(60);
    motorTemperatures.add(frontLeftMotorTempProgress);

    backRightMotorTempProgress.setXY(40, 112);
    backRightMotorTempProgress.setProgressIndicatorPosition(2, 2, 15, 100);
    backRightMotorTempProgress.setRange(0, 100);
    backRightMotorTempProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    backRightMotorTempProgress.setBackground(touchgfx::Bitmap(BITMAP_SMALLER_VERTICAL_PROGRESS_BAR_ID));
    backRightMotorTempProgress.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    backRightMotorTempProgress.setValue(60);
    motorTemperatures.add(backRightMotorTempProgress);

    backLeftMotorTempProgress.setXY(9, 112);
    backLeftMotorTempProgress.setProgressIndicatorPosition(2, 2, 15, 100);
    backLeftMotorTempProgress.setRange(0, 100);
    backLeftMotorTempProgress.setDirection(touchgfx::AbstractDirectionProgress::UP);
    backLeftMotorTempProgress.setBackground(touchgfx::Bitmap(BITMAP_SMALLER_VERTICAL_PROGRESS_BAR_ID));
    backLeftMotorTempProgress.setColor(touchgfx::Color::getColorFromRGB(0, 151, 255));
    backLeftMotorTempProgress.setValue(60);
    motorTemperatures.add(backLeftMotorTempProgress);

    optionsMenu.setup(touchgfx::SlideMenu::SOUTH,
        touchgfx::Bitmap(BITMAP_MENU_BACKGROUND_ID),
        touchgfx::Bitmap(BITMAP_TOP_GRABBER_ID),
        touchgfx::Bitmap(BITMAP_TOP_GRABBER_ID),
        0, 0, 206, 64);
    optionsMenu.setState(touchgfx::SlideMenu::COLLAPSED);
    optionsMenu.setVisiblePixelsWhenCollapsed(7);
    optionsMenu.setHiddenPixelsWhenExpanded(0);
    optionsMenu.setAnimationEasingEquation(touchgfx::EasingEquations::cubicEaseInOut);
    optionsMenu.setAnimationDuration(18);
    optionsMenu.setExpandedStateTimeout(180);
    optionsMenu.setXY(0, 0);

    toggleButton.setXY(8, 20);
    toggleButton.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_OFF_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_TOGGLE_ROUND_LARGE_BUTTON_ON_ID));
    optionsMenu.add(toggleButton);

    settingsBtn.setXY(415, 5);
    settingsBtn.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_ICON_BUTTON_PRESSED_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_SETTINGS_32_ID), touchgfx::Bitmap(BITMAP_BLUE_ICONS_SETTINGS_32_ID));
    settingsBtn.setIconXY(15, 15);
    settingsBtn.setAction(buttonCallback);
    optionsMenu.add(settingsBtn);

    add(__background);
    add(background);
    add(batteryTemp);
    add(batterySOC);
    add(indicators);
    add(speedometer);
    add(motorTemperatures);
    add(optionsMenu);
}

void DashboardViewBase::setupScreen()
{

}

void DashboardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &settingsBtn)
    {
        //Open_Settings
        //When settingsBtn clicked change screen to Settings
        //Go to Settings with screen transition towards North
        application().gotoSettingsScreenCoverTransitionNorth();
    }
}
