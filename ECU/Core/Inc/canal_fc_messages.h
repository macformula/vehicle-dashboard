/*
 * canal_fc_messages.h
 *
 *  WARNING: DO NOT EDIT. THIS WAS AN AUTOGENERATED FILE.
 *
 *  Created on: 2023/5/22
 *     Authors: Samuel Parent, Dharak Verma
 *
 *                    ..::^~~~!!~~~^^:..
 *                .:^!7??JJJJJJJJJJJJ??7!~:.
 *              :~7?JJJ???????????????JJJJ??!^.
 *           .^7?JJJ???JJJJJJ??????????????JJJ?~:
 *          ^7JJ???????777777???JJJJJJJ???????JJ?~.
 *        .!JJ???????????7!~^::::^~!!7??JJ???????J7:
 *       :7JJJ??????????JJJJ??7~:    ..:~7?J??????J?^
 *      .7J???????????????????JJ?!.       :7J??????J?^
 *     .~J??????????????????JJJJ?!.       .7J???????J7.
 *     :?J?????????????JJJJ??7!^.      .:~???????????J~
 *     ^???????????JJJ??7~^:..      .:~7?JJ??????????J!.
 *     ^????????JJ?7~^:.        .:~!?JJJ?????????????J!.
 *     ^????????!^.          .:~7?JJJ????????????????J!.
 *     .7J????!.            :7?JJ?????????????????????^
 *      ~JJ?J7.             ~JJJJ???????????????????J!.
 *      .!J???^.            .^!7?JJJJJJ????????????J7:
 *       .!?J??7^.              .:^~!7???JJJJJ????J7:
 *        .^?JJJJ?7~.                 ..:^~~!7????!.
 *          .!?JJJJ?:                         ..::
 *            :~??!:
 *              ..
 */

#ifndef INC_CANAL_FC_MESSAGES_H_
#define INC_CANAL_FC_MESSAGES_H_

 /*********************************************************
 *                      INCLUDES
 *********************************************************/
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "canal_types.h"

/*********************************************************
*                        ENUMS
*********************************************************/

typedef enum {
    UNKNOWN_CANAL_ID =                          ((uint32_t) 0x000),
    AMK1_SETPOINTS1_CANAL_ID =                  ((uint32_t) 0x186),
    AMK1_ACTUALVALUES2_CANAL_ID =               ((uint32_t) 0x287),
    AMK1_ACTUALVALUES1_CANAL_ID =               ((uint32_t) 0x285),
    AMK0_ACTUALVALUES1_CANAL_ID =               ((uint32_t) 0x284),
    AMK0_ACTUALVALUES2_CANAL_ID =               ((uint32_t) 0x286),
    AMK0_SETPOINTS1_CANAL_ID =                  ((uint32_t) 0x185),
    ACCELEROMETERDATA_CANAL_ID =                ((uint32_t) 0x600),
    LVBATTERYDATA_CANAL_ID =                    ((uint32_t) 0x300),
    VEHICLEINFO_CANAL_ID =                      ((uint32_t) 0x503),
    COOLINGCONTROLLERANSWER_CANAL_ID =          ((uint32_t) 0x53),
    DASHBOARDANSWER_CANAL_ID =                  ((uint32_t) 0x55),
    PIUCONTROLLERANSWER_CANAL_ID =              ((uint32_t) 0x51),
    PIUCONTROLLERQUESTION_CANAL_ID =            ((uint32_t) 0x50),
    DASHBOARDQUESTION_CANAL_ID =                ((uint32_t) 0x54),
    COOLINGCONTROLLERQUESTION_CANAL_ID =        ((uint32_t) 0x52),
    DASHBOARDDATA_CANAL_ID =                    ((uint32_t) 0x501),
    TEMPERATUREINFO_CANAL_ID =                  ((uint32_t) 0x502),
    COOLINGLOOPSDATA_CANAL_ID =                 ((uint32_t) 0x201),
    COOLINGLOOPMODES_CANAL_ID =                 ((uint32_t) 0x202),
    PEDALPOSITIONS_CANAL_ID =                   ((uint32_t) 0x101),
} TeMessageID;

/*********************************************************
*                     MESSAGE STRUCTS
*********************************************************/
/** 
 * Message: AMK1_SetPoints1
 * Senders: ['FC']
 * Receivers: ['FC', 'AMK1']
 * Cycle Time: 5
 * Bus: Undefined
 */
typedef struct AMK1_SetPoints1 {    
    // Unit: None
    _Bool AMK_bInverterOn;    
    // Unit: None
    _Bool AMK_bDcOn;    
    // Unit: None
    _Bool AMK_bEnable;    
    // Unit: None
    _Bool AMK_bErrorReset;    
    // Unit: rpm
    int16_t AMK_TargetVelocity;    
    // Unit: 0.1%Mn
    int16_t AMK_TorqueLimitPositiv;    
    // Unit: 0.1%Mn
    int16_t AMK_TorqueLimitNegativ;
}TsAMK1_SetPoints1;

/** 
 * Message: AMK1_ActualValues2
 * Senders: ['AMK1']
 * Receivers: ['FC']
 * Cycle Time: 5
 * Bus: Undefined
 */
typedef struct AMK1_ActualValues2 {    
    // Unit: ï¿½C
    float AMK_TempMotor;    
    // Unit: ï¿½C
    float AMK_TempInverter;    
    // Unit: None
    uint16_t AMK_ErrorInfo;    
    // Unit: ï¿½C
    float AMK_TempIGBT;
}TsAMK1_ActualValues2;

/** 
 * Message: AMK1_ActualValues1
 * Senders: ['AMK1']
 * Receivers: ['FC']
 * Cycle Time: 5
 * Bus: Undefined
 */
typedef struct AMK1_ActualValues1 {    
    // Unit: None
    _Bool AMK_bSystemReady;    
    // Unit: None
    _Bool AMK_bError;    
    // Unit: None
    _Bool AMK_bWarn;    
    // Unit: None
    _Bool AMK_bQuitDcOn;    
    // Unit: None
    _Bool AMK_bDcOn;    
    // Unit: None
    _Bool AMK_bQuitInverterOn;    
    // Unit: None
    _Bool AMK_bInverterOn;    
    // Unit: None
    _Bool AMK_bDerating;    
    // Unit: rpm
    int16_t AMK_ActualVelocity;    
    // Unit: None
    int16_t AMK_TorqueCurrent;    
    // Unit: None
    int16_t AMK_MagnetizingCurrent;
}TsAMK1_ActualValues1;

/** 
 * Message: AMK0_ActualValues1
 * Senders: ['AMK0']
 * Receivers: ['FC']
 * Cycle Time: 5
 * Bus: Undefined
 */
typedef struct AMK0_ActualValues1 {    
    // Unit: None
    _Bool AMK_bSystemReady;    
    // Unit: None
    _Bool AMK_bError;    
    // Unit: None
    _Bool AMK_bWarn;    
    // Unit: None
    _Bool AMK_bQuitDcOn;    
    // Unit: None
    _Bool AMK_bDcOn;    
    // Unit: None
    _Bool AMK_bQuitInverterOn;    
    // Unit: None
    _Bool AMK_bInverterOn;    
    // Unit: None
    _Bool AMK_bDerating;    
    // Unit: rpm
    int16_t AMK_ActualVelocity;    
    // Unit: None
    int16_t AMK_TorqueCurrent;    
    // Unit: None
    int16_t AMK_MagnetizingCurrent;
}TsAMK0_ActualValues1;

/** 
 * Message: AMK0_ActualValues2
 * Senders: ['AMK0']
 * Receivers: ['FC']
 * Cycle Time: 5
 * Bus: Undefined
 */
typedef struct AMK0_ActualValues2 {    
    // Unit: ï¿½C
    float AMK_TempMotor;    
    // Unit: ï¿½C
    float AMK_TempInverter;    
    // Unit: None
    uint16_t AMK_ErrorInfo;    
    // Unit: ï¿½C
    float AMK_TempIGBT;
}TsAMK0_ActualValues2;

/** 
 * Message: AMK0_SetPoints1
 * Senders: ['FC']
 * Receivers: ['FC', 'AMK0']
 * Cycle Time: 5
 * Bus: Undefined
 */
typedef struct AMK0_SetPoints1 {    
    // Unit: None
    _Bool AMK_bInverterOn;    
    // Unit: None
    _Bool AMK_bDcOn;    
    // Unit: None
    _Bool AMK_bEnable;    
    // Unit: None
    _Bool AMK_bErrorReset;    
    // Unit: rpm
    int16_t AMK_TargetVelocity;    
    // Unit: 0.1%Mn
    int16_t AMK_TorqueLimitPositiv;    
    // Unit: 0.1%Mn
    int16_t AMK_TorqueLimitNegativ;
}TsAMK0_SetPoints1;

/** 
 * Message: AccelerometerData
 * Senders: ['PIU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct AccelerometerData {    
    // Unit: None
    int16_t AccelLateral;    
    // Unit: None
    int16_t AccelLongitudinal;    
    // Unit: None
    int16_t YawRate;
}TsAccelerometerData;

/** 
 * Message: LvBatteryData
 * Senders: ['CCU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct LvBatteryData {    
    // Unit: None
    uint8_t GlvCurrent;    
    // Unit: None
    uint8_t GlvVoltage;
}TsLvBatteryData;

/** 
 * Message: VehicleInfo
 * Senders: ['FC']
 * Receivers: ['DCU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct VehicleInfo {    
    // Unit: None
    uint8_t MaximumPowerAvailablePercentage;    
    // Unit: %
    uint8_t SocPercentage;    
    // Unit: None
    uint8_t VcuErrors;    
    // Unit: km/h
    uint8_t VehicleSpeed;    
    // Unit: None
    uint8_t VehicleStatus;
}TsVehicleInfo;

/** 
 * Message: CoolingControllerAnswer
 * Senders: ['CCU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct CoolingControllerAnswer {    
    // Unit: None
    uint8_t CcuAnswer;
}TsCoolingControllerAnswer;

/** 
 * Message: DashboardAnswer
 * Senders: ['DCU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct DashboardAnswer {    
    // Unit: None
    uint8_t DcuAnswer;
}TsDashboardAnswer;

/** 
 * Message: PiuControllerAnswer
 * Senders: ['PIU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct PiuControllerAnswer {    
    // Unit: None
    uint8_t PiuAnswer;
}TsPiuControllerAnswer;

/** 
 * Message: PiuControllerQuestion
 * Senders: ['FC']
 * Receivers: ['PIU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct PiuControllerQuestion {    
    // Unit: None
    uint8_t PiuQuestion;
}TsPiuControllerQuestion;

/** 
 * Message: DashboardQuestion
 * Senders: ['FC']
 * Receivers: ['DCU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct DashboardQuestion {    
    // Unit: None
    uint8_t DcuQuestion;
}TsDashboardQuestion;

/** 
 * Message: CoolingControllerQuestion
 * Senders: ['FC']
 * Receivers: ['CCU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct CoolingControllerQuestion {    
    // Unit: None
    uint8_t CcuQuestion;
}TsCoolingControllerQuestion;

/** 
 * Message: DashboardData
 * Senders: ['DCU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct DashboardData {    
    // Unit: None
    float GpsVehicleSpeed;
}TsDashboardData;

/** 
 * Message: TemperatureInfo
 * Senders: ['FC']
 * Receivers: ['DCU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct TemperatureInfo {    
    // Unit: ï¿½C
    uint8_t LeftFrontMotorTemperature;    
    // Unit: ï¿½C
    uint8_t LeftRearMotorTemperature;    
    // Unit: ï¿½C
    uint8_t RightFrontMotorTemperature;    
    // Unit: ï¿½C
    uint8_t RightRearMotorTemperature;    
    // Unit: ï¿½C
    uint8_t BatteryTemperature;
}TsTemperatureInfo;

/** 
 * Message: CoolingLoopsData
 * Senders: ['CCU']
 * Receivers: ['FC', 'FCCU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct CoolingLoopsData {    
    // Unit: ï¿½C
    uint8_t InverterLoopFluidTemp;    
    // Unit: ï¿½C
    uint8_t MotorLoopFluidTemp;    
    // Unit: kPa
    uint8_t InverterLoopPressure;    
    // Unit: kPa
    uint8_t MotorLoopPressure;    
    // Unit: None
    uint8_t InverterLoopTempSensorStatus;    
    // Unit: None
    uint8_t MotorLoopTempSensorStatus;    
    // Unit: None
    uint8_t InverterLoopPressureSensorStatus;    
    // Unit: None
    uint8_t MotorLoopPressureSensorStatus;    
    // Unit: None
    uint8_t MC_CoolingLoopsData;
}TsCoolingLoopsData;

/** 
 * Message: CoolingLoopModes
 * Senders: ['FC']
 * Receivers: ['CCU']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct CoolingLoopModes {    
    // Unit: None
    uint8_t InverterLoopFanMode;    
    // Unit: None
    uint8_t InverterLoopPumpMode;    
    // Unit: None
    _Bool SpeakerRequest;    
    // Unit: None
    uint8_t MotorLoopFanMode;    
    // Unit: None
    uint8_t MotorLoopPumpMode;
}TsCoolingLoopModes;

/** 
 * Message: PedalPositions
 * Senders: ['PIU']
 * Receivers: ['FC']
 * Cycle Time: Undefined
 * Bus: Undefined
 */
typedef struct PedalPositions {    
    // Unit: %
    uint8_t BrakePedalPosition0;    
    // Unit: %
    uint8_t BrakePedalPosition1;    
    // Unit: %
    uint8_t AcceleratorPedalPosition1;    
    // Unit: %
    uint8_t AcceleratorPedalPosition0;    
    // Unit: None
    uint8_t DriveButton;    
    // Unit: None
    uint8_t Bpps0Status;    
    // Unit: None
    uint8_t Bpps1Status;    
    // Unit: None
    uint8_t Apps0Status;    
    // Unit: None
    uint8_t Apps1Status;    
    // Unit: None
    _Bool BspdFault;    
    // Unit: None
    uint8_t MC_PedalPosition;
}TsPedalPositions;


/*********************************************************
*                       MESSAGE MACROS
*********************************************************/
#define NUM_RX_MESSAGES    (14)
#define NUM_TX_MESSAGES    (8)
#define TOTAL_MESSAGES     (20)

#define AMK1_SETPOINTS1_DATA_LENGTH                  (8)
#define AMK1_ACTUALVALUES2_DATA_LENGTH               (8)
#define AMK1_ACTUALVALUES1_DATA_LENGTH               (8)
#define AMK0_ACTUALVALUES1_DATA_LENGTH               (8)
#define AMK0_ACTUALVALUES2_DATA_LENGTH               (8)
#define AMK0_SETPOINTS1_DATA_LENGTH                  (8)
#define ACCELEROMETERDATA_DATA_LENGTH                (8)
#define LVBATTERYDATA_DATA_LENGTH                    (8)
#define VEHICLEINFO_DATA_LENGTH                      (5)
#define COOLINGCONTROLLERANSWER_DATA_LENGTH          (1)
#define DASHBOARDANSWER_DATA_LENGTH                  (1)
#define PIUCONTROLLERANSWER_DATA_LENGTH              (1)
#define PIUCONTROLLERQUESTION_DATA_LENGTH            (1)
#define DASHBOARDQUESTION_DATA_LENGTH                (1)
#define COOLINGCONTROLLERQUESTION_DATA_LENGTH        (1)
#define DASHBOARDDATA_DATA_LENGTH                    (2)
#define TEMPERATUREINFO_DATA_LENGTH                  (5)
#define COOLINGLOOPSDATA_DATA_LENGTH                 (7)
#define COOLINGLOOPMODES_DATA_LENGTH                 (2)
#define PEDALPOSITIONS_DATA_LENGTH                   (7)
/*********************************************************
*                       SIGNAL MACROS
*********************************************************/

// Message: AMK1_SetPoints1

// Signal: AMK_bInverterOn
#define AMK1_SETPOINTS1_AMK_BINVERTERON_START    (8)
#define AMK1_SETPOINTS1_AMK_BINVERTERON_LENGTH   (1)
#define AMK1_SETPOINTS1_AMK_BINVERTERON_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_BINVERTERON_OFFSET   (0)

// Signal: AMK_bDcOn
#define AMK1_SETPOINTS1_AMK_BDCON_START    (9)
#define AMK1_SETPOINTS1_AMK_BDCON_LENGTH   (1)
#define AMK1_SETPOINTS1_AMK_BDCON_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_BDCON_OFFSET   (0)

// Signal: AMK_bEnable
#define AMK1_SETPOINTS1_AMK_BENABLE_START    (10)
#define AMK1_SETPOINTS1_AMK_BENABLE_LENGTH   (1)
#define AMK1_SETPOINTS1_AMK_BENABLE_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_BENABLE_OFFSET   (0)

// Signal: AMK_bErrorReset
#define AMK1_SETPOINTS1_AMK_BERRORRESET_START    (11)
#define AMK1_SETPOINTS1_AMK_BERRORRESET_LENGTH   (1)
#define AMK1_SETPOINTS1_AMK_BERRORRESET_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_BERRORRESET_OFFSET   (0)

// Signal: AMK_TargetVelocity
#define AMK1_SETPOINTS1_AMK_TARGETVELOCITY_START    (16)
#define AMK1_SETPOINTS1_AMK_TARGETVELOCITY_LENGTH   (16)
#define AMK1_SETPOINTS1_AMK_TARGETVELOCITY_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_TARGETVELOCITY_OFFSET   (0)

// Signal: AMK_TorqueLimitPositiv
#define AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_START    (32)
#define AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_LENGTH   (16)
#define AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_OFFSET   (0)

// Signal: AMK_TorqueLimitNegativ
#define AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_START    (48)
#define AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_LENGTH   (16)
#define AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_FACTOR   (1)
#define AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_OFFSET   (0)

// Message: AMK1_ActualValues2

// Signal: AMK_TempMotor
#define AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_START    (0)
#define AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_LENGTH   (16)
#define AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_FACTOR   (0.1)
#define AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_OFFSET   (0)

// Signal: AMK_TempInverter
#define AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_START    (16)
#define AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_LENGTH   (16)
#define AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_FACTOR   (0.1)
#define AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_OFFSET   (0)

// Signal: AMK_ErrorInfo
#define AMK1_ACTUALVALUES2_AMK_ERRORINFO_START    (32)
#define AMK1_ACTUALVALUES2_AMK_ERRORINFO_LENGTH   (16)
#define AMK1_ACTUALVALUES2_AMK_ERRORINFO_FACTOR   (1)
#define AMK1_ACTUALVALUES2_AMK_ERRORINFO_OFFSET   (0)

// Signal: AMK_TempIGBT
#define AMK1_ACTUALVALUES2_AMK_TEMPIGBT_START    (48)
#define AMK1_ACTUALVALUES2_AMK_TEMPIGBT_LENGTH   (16)
#define AMK1_ACTUALVALUES2_AMK_TEMPIGBT_FACTOR   (0.1)
#define AMK1_ACTUALVALUES2_AMK_TEMPIGBT_OFFSET   (0)

// Message: AMK1_ActualValues1

// Signal: AMK_bSystemReady
#define AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_START    (8)
#define AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_OFFSET   (0)

// Signal: AMK_bError
#define AMK1_ACTUALVALUES1_AMK_BERROR_START    (9)
#define AMK1_ACTUALVALUES1_AMK_BERROR_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BERROR_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BERROR_OFFSET   (0)

// Signal: AMK_bWarn
#define AMK1_ACTUALVALUES1_AMK_BWARN_START    (10)
#define AMK1_ACTUALVALUES1_AMK_BWARN_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BWARN_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BWARN_OFFSET   (0)

// Signal: AMK_bQuitDcOn
#define AMK1_ACTUALVALUES1_AMK_BQUITDCON_START    (11)
#define AMK1_ACTUALVALUES1_AMK_BQUITDCON_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BQUITDCON_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BQUITDCON_OFFSET   (0)

// Signal: AMK_bDcOn
#define AMK1_ACTUALVALUES1_AMK_BDCON_START    (12)
#define AMK1_ACTUALVALUES1_AMK_BDCON_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BDCON_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BDCON_OFFSET   (0)

// Signal: AMK_bQuitInverterOn
#define AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_START    (13)
#define AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_OFFSET   (0)

// Signal: AMK_bInverterOn
#define AMK1_ACTUALVALUES1_AMK_BINVERTERON_START    (14)
#define AMK1_ACTUALVALUES1_AMK_BINVERTERON_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BINVERTERON_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BINVERTERON_OFFSET   (0)

// Signal: AMK_bDerating
#define AMK1_ACTUALVALUES1_AMK_BDERATING_START    (15)
#define AMK1_ACTUALVALUES1_AMK_BDERATING_LENGTH   (1)
#define AMK1_ACTUALVALUES1_AMK_BDERATING_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_BDERATING_OFFSET   (0)

// Signal: AMK_ActualVelocity
#define AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_START    (16)
#define AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_LENGTH   (16)
#define AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_OFFSET   (0)

// Signal: AMK_TorqueCurrent
#define AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_START    (32)
#define AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_LENGTH   (16)
#define AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_OFFSET   (0)

// Signal: AMK_MagnetizingCurrent
#define AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_START    (48)
#define AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_LENGTH   (16)
#define AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_FACTOR   (1)
#define AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_OFFSET   (0)

// Message: AMK0_ActualValues1

// Signal: AMK_bSystemReady
#define AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_START    (8)
#define AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_OFFSET   (0)

// Signal: AMK_bError
#define AMK0_ACTUALVALUES1_AMK_BERROR_START    (9)
#define AMK0_ACTUALVALUES1_AMK_BERROR_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BERROR_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BERROR_OFFSET   (0)

// Signal: AMK_bWarn
#define AMK0_ACTUALVALUES1_AMK_BWARN_START    (10)
#define AMK0_ACTUALVALUES1_AMK_BWARN_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BWARN_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BWARN_OFFSET   (0)

// Signal: AMK_bQuitDcOn
#define AMK0_ACTUALVALUES1_AMK_BQUITDCON_START    (11)
#define AMK0_ACTUALVALUES1_AMK_BQUITDCON_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BQUITDCON_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BQUITDCON_OFFSET   (0)

// Signal: AMK_bDcOn
#define AMK0_ACTUALVALUES1_AMK_BDCON_START    (12)
#define AMK0_ACTUALVALUES1_AMK_BDCON_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BDCON_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BDCON_OFFSET   (0)

// Signal: AMK_bQuitInverterOn
#define AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_START    (13)
#define AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_OFFSET   (0)

// Signal: AMK_bInverterOn
#define AMK0_ACTUALVALUES1_AMK_BINVERTERON_START    (14)
#define AMK0_ACTUALVALUES1_AMK_BINVERTERON_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BINVERTERON_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BINVERTERON_OFFSET   (0)

// Signal: AMK_bDerating
#define AMK0_ACTUALVALUES1_AMK_BDERATING_START    (15)
#define AMK0_ACTUALVALUES1_AMK_BDERATING_LENGTH   (1)
#define AMK0_ACTUALVALUES1_AMK_BDERATING_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_BDERATING_OFFSET   (0)

// Signal: AMK_ActualVelocity
#define AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_START    (16)
#define AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_LENGTH   (16)
#define AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_OFFSET   (0)

// Signal: AMK_TorqueCurrent
#define AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_START    (32)
#define AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_LENGTH   (16)
#define AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_OFFSET   (0)

// Signal: AMK_MagnetizingCurrent
#define AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_START    (48)
#define AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_LENGTH   (16)
#define AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_FACTOR   (1)
#define AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_OFFSET   (0)

// Message: AMK0_ActualValues2

// Signal: AMK_TempMotor
#define AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_START    (0)
#define AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_LENGTH   (16)
#define AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_FACTOR   (0.1)
#define AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_OFFSET   (0)

// Signal: AMK_TempInverter
#define AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_START    (16)
#define AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_LENGTH   (16)
#define AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_FACTOR   (0.1)
#define AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_OFFSET   (0)

// Signal: AMK_ErrorInfo
#define AMK0_ACTUALVALUES2_AMK_ERRORINFO_START    (32)
#define AMK0_ACTUALVALUES2_AMK_ERRORINFO_LENGTH   (16)
#define AMK0_ACTUALVALUES2_AMK_ERRORINFO_FACTOR   (1)
#define AMK0_ACTUALVALUES2_AMK_ERRORINFO_OFFSET   (0)

// Signal: AMK_TempIGBT
#define AMK0_ACTUALVALUES2_AMK_TEMPIGBT_START    (48)
#define AMK0_ACTUALVALUES2_AMK_TEMPIGBT_LENGTH   (16)
#define AMK0_ACTUALVALUES2_AMK_TEMPIGBT_FACTOR   (0.1)
#define AMK0_ACTUALVALUES2_AMK_TEMPIGBT_OFFSET   (0)

// Message: AMK0_SetPoints1

// Signal: AMK_bInverterOn
#define AMK0_SETPOINTS1_AMK_BINVERTERON_START    (8)
#define AMK0_SETPOINTS1_AMK_BINVERTERON_LENGTH   (1)
#define AMK0_SETPOINTS1_AMK_BINVERTERON_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_BINVERTERON_OFFSET   (0)

// Signal: AMK_bDcOn
#define AMK0_SETPOINTS1_AMK_BDCON_START    (9)
#define AMK0_SETPOINTS1_AMK_BDCON_LENGTH   (1)
#define AMK0_SETPOINTS1_AMK_BDCON_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_BDCON_OFFSET   (0)

// Signal: AMK_bEnable
#define AMK0_SETPOINTS1_AMK_BENABLE_START    (10)
#define AMK0_SETPOINTS1_AMK_BENABLE_LENGTH   (1)
#define AMK0_SETPOINTS1_AMK_BENABLE_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_BENABLE_OFFSET   (0)

// Signal: AMK_bErrorReset
#define AMK0_SETPOINTS1_AMK_BERRORRESET_START    (11)
#define AMK0_SETPOINTS1_AMK_BERRORRESET_LENGTH   (1)
#define AMK0_SETPOINTS1_AMK_BERRORRESET_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_BERRORRESET_OFFSET   (0)

// Signal: AMK_TargetVelocity
#define AMK0_SETPOINTS1_AMK_TARGETVELOCITY_START    (16)
#define AMK0_SETPOINTS1_AMK_TARGETVELOCITY_LENGTH   (16)
#define AMK0_SETPOINTS1_AMK_TARGETVELOCITY_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_TARGETVELOCITY_OFFSET   (0)

// Signal: AMK_TorqueLimitPositiv
#define AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_START    (32)
#define AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_LENGTH   (16)
#define AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_OFFSET   (0)

// Signal: AMK_TorqueLimitNegativ
#define AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_START    (48)
#define AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_LENGTH   (16)
#define AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_FACTOR   (1)
#define AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_OFFSET   (0)

// Message: AccelerometerData

// Signal: AccelLateral
#define ACCELEROMETERDATA_ACCELLATERAL_START    (0)
#define ACCELEROMETERDATA_ACCELLATERAL_LENGTH   (16)
#define ACCELEROMETERDATA_ACCELLATERAL_FACTOR   (1)
#define ACCELEROMETERDATA_ACCELLATERAL_OFFSET   (0)

// Signal: AccelLongitudinal
#define ACCELEROMETERDATA_ACCELLONGITUDINAL_START    (16)
#define ACCELEROMETERDATA_ACCELLONGITUDINAL_LENGTH   (16)
#define ACCELEROMETERDATA_ACCELLONGITUDINAL_FACTOR   (1)
#define ACCELEROMETERDATA_ACCELLONGITUDINAL_OFFSET   (0)

// Signal: YawRate
#define ACCELEROMETERDATA_YAWRATE_START    (32)
#define ACCELEROMETERDATA_YAWRATE_LENGTH   (16)
#define ACCELEROMETERDATA_YAWRATE_FACTOR   (1)
#define ACCELEROMETERDATA_YAWRATE_OFFSET   (0)

// Message: LvBatteryData

// Signal: GlvCurrent
#define LVBATTERYDATA_GLVCURRENT_START    (0)
#define LVBATTERYDATA_GLVCURRENT_LENGTH   (8)
#define LVBATTERYDATA_GLVCURRENT_FACTOR   (1)
#define LVBATTERYDATA_GLVCURRENT_OFFSET   (0)

// Signal: GlvVoltage
#define LVBATTERYDATA_GLVVOLTAGE_START    (8)
#define LVBATTERYDATA_GLVVOLTAGE_LENGTH   (8)
#define LVBATTERYDATA_GLVVOLTAGE_FACTOR   (1)
#define LVBATTERYDATA_GLVVOLTAGE_OFFSET   (0)

// Message: VehicleInfo

// Signal: MaximumPowerAvailablePercentage
#define VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_START    (0)
#define VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_LENGTH   (7)
#define VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_FACTOR   (1)
#define VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_OFFSET   (0)

// Signal: SocPercentage
#define VEHICLEINFO_SOCPERCENTAGE_START    (8)
#define VEHICLEINFO_SOCPERCENTAGE_LENGTH   (7)
#define VEHICLEINFO_SOCPERCENTAGE_FACTOR   (1)
#define VEHICLEINFO_SOCPERCENTAGE_OFFSET   (0)

// Signal: VcuErrors
#define VEHICLEINFO_VCUERRORS_START    (16)
#define VEHICLEINFO_VCUERRORS_LENGTH   (8)
#define VEHICLEINFO_VCUERRORS_FACTOR   (1)
#define VEHICLEINFO_VCUERRORS_OFFSET   (0)

// Signal: VehicleSpeed
#define VEHICLEINFO_VEHICLESPEED_START    (24)
#define VEHICLEINFO_VEHICLESPEED_LENGTH   (8)
#define VEHICLEINFO_VEHICLESPEED_FACTOR   (1)
#define VEHICLEINFO_VEHICLESPEED_OFFSET   (0)

// Signal: VehicleStatus
#define VEHICLEINFO_VEHICLESTATUS_START    (32)
#define VEHICLEINFO_VEHICLESTATUS_LENGTH   (2)
#define VEHICLEINFO_VEHICLESTATUS_FACTOR   (1)
#define VEHICLEINFO_VEHICLESTATUS_OFFSET   (0)

// Message: CoolingControllerAnswer

// Signal: CcuAnswer
#define COOLINGCONTROLLERANSWER_CCUANSWER_START    (0)
#define COOLINGCONTROLLERANSWER_CCUANSWER_LENGTH   (8)
#define COOLINGCONTROLLERANSWER_CCUANSWER_FACTOR   (1)
#define COOLINGCONTROLLERANSWER_CCUANSWER_OFFSET   (0)

// Message: DashboardAnswer

// Signal: DcuAnswer
#define DASHBOARDANSWER_DCUANSWER_START    (0)
#define DASHBOARDANSWER_DCUANSWER_LENGTH   (8)
#define DASHBOARDANSWER_DCUANSWER_FACTOR   (1)
#define DASHBOARDANSWER_DCUANSWER_OFFSET   (0)

// Message: PiuControllerAnswer

// Signal: PiuAnswer
#define PIUCONTROLLERANSWER_PIUANSWER_START    (0)
#define PIUCONTROLLERANSWER_PIUANSWER_LENGTH   (8)
#define PIUCONTROLLERANSWER_PIUANSWER_FACTOR   (1)
#define PIUCONTROLLERANSWER_PIUANSWER_OFFSET   (0)

// Message: PiuControllerQuestion

// Signal: PiuQuestion
#define PIUCONTROLLERQUESTION_PIUQUESTION_START    (0)
#define PIUCONTROLLERQUESTION_PIUQUESTION_LENGTH   (8)
#define PIUCONTROLLERQUESTION_PIUQUESTION_FACTOR   (1)
#define PIUCONTROLLERQUESTION_PIUQUESTION_OFFSET   (0)

// Message: DashboardQuestion

// Signal: DcuQuestion
#define DASHBOARDQUESTION_DCUQUESTION_START    (0)
#define DASHBOARDQUESTION_DCUQUESTION_LENGTH   (8)
#define DASHBOARDQUESTION_DCUQUESTION_FACTOR   (1)
#define DASHBOARDQUESTION_DCUQUESTION_OFFSET   (0)

// Message: CoolingControllerQuestion

// Signal: CcuQuestion
#define COOLINGCONTROLLERQUESTION_CCUQUESTION_START    (0)
#define COOLINGCONTROLLERQUESTION_CCUQUESTION_LENGTH   (8)
#define COOLINGCONTROLLERQUESTION_CCUQUESTION_FACTOR   (1)
#define COOLINGCONTROLLERQUESTION_CCUQUESTION_OFFSET   (0)

// Message: DashboardData

// Signal: GpsVehicleSpeed
#define DASHBOARDDATA_GPSVEHICLESPEED_START    (0)
#define DASHBOARDDATA_GPSVEHICLESPEED_LENGTH   (12)
#define DASHBOARDDATA_GPSVEHICLESPEED_FACTOR   (0.1)
#define DASHBOARDDATA_GPSVEHICLESPEED_OFFSET   (0)

// Message: TemperatureInfo

// Signal: LeftFrontMotorTemperature
#define TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_START    (0)
#define TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_LENGTH   (8)
#define TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_FACTOR   (1)
#define TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_OFFSET   (-20)

// Signal: LeftRearMotorTemperature
#define TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_START    (8)
#define TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_LENGTH   (8)
#define TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_FACTOR   (1)
#define TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_OFFSET   (-20)

// Signal: RightFrontMotorTemperature
#define TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_START    (16)
#define TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_LENGTH   (8)
#define TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_FACTOR   (1)
#define TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_OFFSET   (-20)

// Signal: RightRearMotorTemperature
#define TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_START    (24)
#define TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_LENGTH   (8)
#define TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_FACTOR   (1)
#define TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_OFFSET   (-20)

// Signal: BatteryTemperature
#define TEMPERATUREINFO_BATTERYTEMPERATURE_START    (32)
#define TEMPERATUREINFO_BATTERYTEMPERATURE_LENGTH   (8)
#define TEMPERATUREINFO_BATTERYTEMPERATURE_FACTOR   (1)
#define TEMPERATUREINFO_BATTERYTEMPERATURE_OFFSET   (-20)

// Message: CoolingLoopsData

// Signal: InverterLoopFluidTemp
#define COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_START    (0)
#define COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_LENGTH   (8)
#define COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_FACTOR   (1)
#define COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_OFFSET   (-20)

// Signal: MotorLoopFluidTemp
#define COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_START    (8)
#define COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_LENGTH   (8)
#define COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_FACTOR   (1)
#define COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_OFFSET   (-20)

// Signal: InverterLoopPressure
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_START    (16)
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_LENGTH   (7)
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_FACTOR   (1)
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_OFFSET   (0)

// Signal: MotorLoopPressure
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURE_START    (23)
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURE_LENGTH   (7)
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURE_FACTOR   (1)
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURE_OFFSET   (0)

// Signal: InverterLoopTempSensorStatus
#define COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_START    (30)
#define COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_LENGTH   (3)
#define COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_FACTOR   (1)
#define COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_OFFSET   (0)

// Signal: MotorLoopTempSensorStatus
#define COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_START    (33)
#define COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_LENGTH   (3)
#define COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_FACTOR   (1)
#define COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_OFFSET   (0)

// Signal: InverterLoopPressureSensorStatus
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_START    (36)
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_LENGTH   (3)
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_FACTOR   (1)
#define COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_OFFSET   (0)

// Signal: MotorLoopPressureSensorStatus
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_START    (39)
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_LENGTH   (3)
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_FACTOR   (1)
#define COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_OFFSET   (0)

// Signal: MC_CoolingLoopsData
#define COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_START    (42)
#define COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_LENGTH   (4)
#define COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_FACTOR   (1)
#define COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_OFFSET   (0)

// Message: CoolingLoopModes

// Signal: InverterLoopFanMode
#define COOLINGLOOPMODES_INVERTERLOOPFANMODE_START    (0)
#define COOLINGLOOPMODES_INVERTERLOOPFANMODE_LENGTH   (3)
#define COOLINGLOOPMODES_INVERTERLOOPFANMODE_FACTOR   (1)
#define COOLINGLOOPMODES_INVERTERLOOPFANMODE_OFFSET   (0)

// Signal: InverterLoopPumpMode
#define COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_START    (3)
#define COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_LENGTH   (3)
#define COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_FACTOR   (1)
#define COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_OFFSET   (0)

// Signal: SpeakerRequest
#define COOLINGLOOPMODES_SPEAKERREQUEST_START    (6)
#define COOLINGLOOPMODES_SPEAKERREQUEST_LENGTH   (1)
#define COOLINGLOOPMODES_SPEAKERREQUEST_FACTOR   (1)
#define COOLINGLOOPMODES_SPEAKERREQUEST_OFFSET   (0)

// Signal: MotorLoopFanMode
#define COOLINGLOOPMODES_MOTORLOOPFANMODE_START    (8)
#define COOLINGLOOPMODES_MOTORLOOPFANMODE_LENGTH   (3)
#define COOLINGLOOPMODES_MOTORLOOPFANMODE_FACTOR   (1)
#define COOLINGLOOPMODES_MOTORLOOPFANMODE_OFFSET   (0)

// Signal: MotorLoopPumpMode
#define COOLINGLOOPMODES_MOTORLOOPPUMPMODE_START    (11)
#define COOLINGLOOPMODES_MOTORLOOPPUMPMODE_LENGTH   (3)
#define COOLINGLOOPMODES_MOTORLOOPPUMPMODE_FACTOR   (1)
#define COOLINGLOOPMODES_MOTORLOOPPUMPMODE_OFFSET   (0)

// Message: PedalPositions

// Signal: BrakePedalPosition0
#define PEDALPOSITIONS_BRAKEPEDALPOSITION0_START    (0)
#define PEDALPOSITIONS_BRAKEPEDALPOSITION0_LENGTH   (8)
#define PEDALPOSITIONS_BRAKEPEDALPOSITION0_FACTOR   (1)
#define PEDALPOSITIONS_BRAKEPEDALPOSITION0_OFFSET   (0)

// Signal: BrakePedalPosition1
#define PEDALPOSITIONS_BRAKEPEDALPOSITION1_START    (8)
#define PEDALPOSITIONS_BRAKEPEDALPOSITION1_LENGTH   (8)
#define PEDALPOSITIONS_BRAKEPEDALPOSITION1_FACTOR   (1)
#define PEDALPOSITIONS_BRAKEPEDALPOSITION1_OFFSET   (0)

// Signal: AcceleratorPedalPosition1
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_START    (16)
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_LENGTH   (8)
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_FACTOR   (1)
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_OFFSET   (0)

// Signal: AcceleratorPedalPosition0
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_START    (24)
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_LENGTH   (8)
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_FACTOR   (1)
#define PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_OFFSET   (0)

// Signal: DriveButton
#define PEDALPOSITIONS_DRIVEBUTTON_START    (32)
#define PEDALPOSITIONS_DRIVEBUTTON_LENGTH   (2)
#define PEDALPOSITIONS_DRIVEBUTTON_FACTOR   (1)
#define PEDALPOSITIONS_DRIVEBUTTON_OFFSET   (0)

// Signal: Bpps0Status
#define PEDALPOSITIONS_BPPS0STATUS_START    (34)
#define PEDALPOSITIONS_BPPS0STATUS_LENGTH   (3)
#define PEDALPOSITIONS_BPPS0STATUS_FACTOR   (1)
#define PEDALPOSITIONS_BPPS0STATUS_OFFSET   (0)

// Signal: Bpps1Status
#define PEDALPOSITIONS_BPPS1STATUS_START    (37)
#define PEDALPOSITIONS_BPPS1STATUS_LENGTH   (3)
#define PEDALPOSITIONS_BPPS1STATUS_FACTOR   (1)
#define PEDALPOSITIONS_BPPS1STATUS_OFFSET   (0)

// Signal: Apps0Status
#define PEDALPOSITIONS_APPS0STATUS_START    (40)
#define PEDALPOSITIONS_APPS0STATUS_LENGTH   (3)
#define PEDALPOSITIONS_APPS0STATUS_FACTOR   (1)
#define PEDALPOSITIONS_APPS0STATUS_OFFSET   (0)

// Signal: Apps1Status
#define PEDALPOSITIONS_APPS1STATUS_START    (43)
#define PEDALPOSITIONS_APPS1STATUS_LENGTH   (3)
#define PEDALPOSITIONS_APPS1STATUS_FACTOR   (1)
#define PEDALPOSITIONS_APPS1STATUS_OFFSET   (0)

// Signal: BspdFault
#define PEDALPOSITIONS_BSPDFAULT_START    (46)
#define PEDALPOSITIONS_BSPDFAULT_LENGTH   (1)
#define PEDALPOSITIONS_BSPDFAULT_FACTOR   (1)
#define PEDALPOSITIONS_BSPDFAULT_OFFSET   (0)

// Signal: MC_PedalPosition
#define PEDALPOSITIONS_MC_PEDALPOSITION_START    (48)
#define PEDALPOSITIONS_MC_PEDALPOSITION_LENGTH   (4)
#define PEDALPOSITIONS_MC_PEDALPOSITION_FACTOR   (1)
#define PEDALPOSITIONS_MC_PEDALPOSITION_OFFSET   (0)


/*********************************************************
*                 GLOBAL STRUCT DECLARATIONS
*********************************************************/

extern volatile TsAMK1_SetPoints1                  AMK1_SetPoints1;
extern volatile TsAMK1_ActualValues2               AMK1_ActualValues2;
extern volatile TsAMK1_ActualValues1               AMK1_ActualValues1;
extern volatile TsAMK0_ActualValues1               AMK0_ActualValues1;
extern volatile TsAMK0_ActualValues2               AMK0_ActualValues2;
extern volatile TsAMK0_SetPoints1                  AMK0_SetPoints1;
extern volatile TsAccelerometerData                AccelerometerData;
extern volatile TsLvBatteryData                    LvBatteryData;
extern volatile TsVehicleInfo                      VehicleInfo;
extern volatile TsCoolingControllerAnswer          CoolingControllerAnswer;
extern volatile TsDashboardAnswer                  DashboardAnswer;
extern volatile TsPiuControllerAnswer              PiuControllerAnswer;
extern volatile TsPiuControllerQuestion            PiuControllerQuestion;
extern volatile TsDashboardQuestion                DashboardQuestion;
extern volatile TsCoolingControllerQuestion        CoolingControllerQuestion;
extern volatile TsDashboardData                    DashboardData;
extern volatile TsTemperatureInfo                  TemperatureInfo;
extern volatile TsCoolingLoopsData                 CoolingLoopsData;
extern volatile TsCoolingLoopModes                 CoolingLoopModes;
extern volatile TsPedalPositions                   PedalPositions;

/*********************************************************
*               PUBLIC FUNCTION DECLARATIONS
*********************************************************/

void Print_AMK1_SetPoints1(void);
void Print_AMK1_ActualValues2(void);
void Print_AMK1_ActualValues1(void);
void Print_AMK0_ActualValues1(void);
void Print_AMK0_ActualValues2(void);
void Print_AMK0_SetPoints1(void);
void Print_AccelerometerData(void);
void Print_LvBatteryData(void);
void Print_VehicleInfo(void);
void Print_CoolingControllerAnswer(void);
void Print_DashboardAnswer(void);
void Print_PiuControllerAnswer(void);
void Print_PiuControllerQuestion(void);
void Print_DashboardQuestion(void);
void Print_CoolingControllerQuestion(void);
void Print_DashboardData(void);
void Print_TemperatureInfo(void);
void Print_CoolingLoopsData(void);
void Print_CoolingLoopModes(void);
void Print_PedalPositions(void);

TeCanALRet Print_Message(uint32_t *ID);
TeCanALRet GetTxDataLength(TeMessageID *ID, uint32_t *dlc);
TeCanALRet MarshalBinary(TeMessageID *ID, uint8_t* rawData);
TeCanALRet UnmarshalBinary(uint32_t *ID, uint8_t* txData);

#endif /* INC_CANAL_FC_MESSAGES_H_ */
