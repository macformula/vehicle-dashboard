
FRONT-CONTROLLER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009838  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08009a30  08009a30  00019a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc4  08009cc4  00020154  2**0
                  CONTENTS
  4 .ARM          00000008  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ccc  08009ccc  00020154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ccc  08009ccc  00019ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cd0  08009cd0  00019cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000154  20000000  08009cd4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  20000158  08009e28  00020158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000670  08009e28  00020670  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169b1  00000000  00000000  00020182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302d  00000000  00000000  00036b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00039b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba3b  00000000  00000000  0003b990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014789  00000000  00000000  000673cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105c97  00000000  00000000  0007bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001817eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  0018183c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000158 	.word	0x20000158
 8000214:	00000000 	.word	0x00000000
 8000218:	08009a18 	.word	0x08009a18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000015c 	.word	0x2000015c
 8000234:	08009a18 	.word	0x08009a18

08000238 <__aeabi_frsub>:
 8000238:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__addsf3>
 800023e:	bf00      	nop

08000240 <__aeabi_fsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000244 <__addsf3>:
 8000244:	0042      	lsls	r2, r0, #1
 8000246:	bf1f      	itttt	ne
 8000248:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800024c:	ea92 0f03 	teqne	r2, r3
 8000250:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000254:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000258:	d06a      	beq.n	8000330 <__addsf3+0xec>
 800025a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000262:	bfc1      	itttt	gt
 8000264:	18d2      	addgt	r2, r2, r3
 8000266:	4041      	eorgt	r1, r0
 8000268:	4048      	eorgt	r0, r1
 800026a:	4041      	eorgt	r1, r0
 800026c:	bfb8      	it	lt
 800026e:	425b      	neglt	r3, r3
 8000270:	2b19      	cmp	r3, #25
 8000272:	bf88      	it	hi
 8000274:	4770      	bxhi	lr
 8000276:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800027a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000282:	bf18      	it	ne
 8000284:	4240      	negne	r0, r0
 8000286:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800028a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000292:	bf18      	it	ne
 8000294:	4249      	negne	r1, r1
 8000296:	ea92 0f03 	teq	r2, r3
 800029a:	d03f      	beq.n	800031c <__addsf3+0xd8>
 800029c:	f1a2 0201 	sub.w	r2, r2, #1
 80002a0:	fa41 fc03 	asr.w	ip, r1, r3
 80002a4:	eb10 000c 	adds.w	r0, r0, ip
 80002a8:	f1c3 0320 	rsb	r3, r3, #32
 80002ac:	fa01 f103 	lsl.w	r1, r1, r3
 80002b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b4:	d502      	bpl.n	80002bc <__addsf3+0x78>
 80002b6:	4249      	negs	r1, r1
 80002b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002c0:	d313      	bcc.n	80002ea <__addsf3+0xa6>
 80002c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c6:	d306      	bcc.n	80002d6 <__addsf3+0x92>
 80002c8:	0840      	lsrs	r0, r0, #1
 80002ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ce:	f102 0201 	add.w	r2, r2, #1
 80002d2:	2afe      	cmp	r2, #254	; 0xfe
 80002d4:	d251      	bcs.n	800037a <__addsf3+0x136>
 80002d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002de:	bf08      	it	eq
 80002e0:	f020 0001 	biceq.w	r0, r0, #1
 80002e4:	ea40 0003 	orr.w	r0, r0, r3
 80002e8:	4770      	bx	lr
 80002ea:	0049      	lsls	r1, r1, #1
 80002ec:	eb40 0000 	adc.w	r0, r0, r0
 80002f0:	3a01      	subs	r2, #1
 80002f2:	bf28      	it	cs
 80002f4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f8:	d2ed      	bcs.n	80002d6 <__addsf3+0x92>
 80002fa:	fab0 fc80 	clz	ip, r0
 80002fe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000302:	ebb2 020c 	subs.w	r2, r2, ip
 8000306:	fa00 f00c 	lsl.w	r0, r0, ip
 800030a:	bfaa      	itet	ge
 800030c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000310:	4252      	neglt	r2, r2
 8000312:	4318      	orrge	r0, r3
 8000314:	bfbc      	itt	lt
 8000316:	40d0      	lsrlt	r0, r2
 8000318:	4318      	orrlt	r0, r3
 800031a:	4770      	bx	lr
 800031c:	f092 0f00 	teq	r2, #0
 8000320:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000324:	bf06      	itte	eq
 8000326:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800032a:	3201      	addeq	r2, #1
 800032c:	3b01      	subne	r3, #1
 800032e:	e7b5      	b.n	800029c <__addsf3+0x58>
 8000330:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000334:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000338:	bf18      	it	ne
 800033a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033e:	d021      	beq.n	8000384 <__addsf3+0x140>
 8000340:	ea92 0f03 	teq	r2, r3
 8000344:	d004      	beq.n	8000350 <__addsf3+0x10c>
 8000346:	f092 0f00 	teq	r2, #0
 800034a:	bf08      	it	eq
 800034c:	4608      	moveq	r0, r1
 800034e:	4770      	bx	lr
 8000350:	ea90 0f01 	teq	r0, r1
 8000354:	bf1c      	itt	ne
 8000356:	2000      	movne	r0, #0
 8000358:	4770      	bxne	lr
 800035a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035e:	d104      	bne.n	800036a <__addsf3+0x126>
 8000360:	0040      	lsls	r0, r0, #1
 8000362:	bf28      	it	cs
 8000364:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000368:	4770      	bx	lr
 800036a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036e:	bf3c      	itt	cc
 8000370:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000374:	4770      	bxcc	lr
 8000376:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800037a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000382:	4770      	bx	lr
 8000384:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000388:	bf16      	itet	ne
 800038a:	4608      	movne	r0, r1
 800038c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000390:	4601      	movne	r1, r0
 8000392:	0242      	lsls	r2, r0, #9
 8000394:	bf06      	itte	eq
 8000396:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800039a:	ea90 0f01 	teqeq	r0, r1
 800039e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_ui2f>:
 80003a4:	f04f 0300 	mov.w	r3, #0
 80003a8:	e004      	b.n	80003b4 <__aeabi_i2f+0x8>
 80003aa:	bf00      	nop

080003ac <__aeabi_i2f>:
 80003ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003b0:	bf48      	it	mi
 80003b2:	4240      	negmi	r0, r0
 80003b4:	ea5f 0c00 	movs.w	ip, r0
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003c0:	4601      	mov	r1, r0
 80003c2:	f04f 0000 	mov.w	r0, #0
 80003c6:	e01c      	b.n	8000402 <__aeabi_l2f+0x2a>

080003c8 <__aeabi_ul2f>:
 80003c8:	ea50 0201 	orrs.w	r2, r0, r1
 80003cc:	bf08      	it	eq
 80003ce:	4770      	bxeq	lr
 80003d0:	f04f 0300 	mov.w	r3, #0
 80003d4:	e00a      	b.n	80003ec <__aeabi_l2f+0x14>
 80003d6:	bf00      	nop

080003d8 <__aeabi_l2f>:
 80003d8:	ea50 0201 	orrs.w	r2, r0, r1
 80003dc:	bf08      	it	eq
 80003de:	4770      	bxeq	lr
 80003e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e4:	d502      	bpl.n	80003ec <__aeabi_l2f+0x14>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	ea5f 0c01 	movs.w	ip, r1
 80003f0:	bf02      	ittt	eq
 80003f2:	4684      	moveq	ip, r0
 80003f4:	4601      	moveq	r1, r0
 80003f6:	2000      	moveq	r0, #0
 80003f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003fc:	bf08      	it	eq
 80003fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000402:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000406:	fabc f28c 	clz	r2, ip
 800040a:	3a08      	subs	r2, #8
 800040c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000410:	db10      	blt.n	8000434 <__aeabi_l2f+0x5c>
 8000412:	fa01 fc02 	lsl.w	ip, r1, r2
 8000416:	4463      	add	r3, ip
 8000418:	fa00 fc02 	lsl.w	ip, r0, r2
 800041c:	f1c2 0220 	rsb	r2, r2, #32
 8000420:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000424:	fa20 f202 	lsr.w	r2, r0, r2
 8000428:	eb43 0002 	adc.w	r0, r3, r2
 800042c:	bf08      	it	eq
 800042e:	f020 0001 	biceq.w	r0, r0, #1
 8000432:	4770      	bx	lr
 8000434:	f102 0220 	add.w	r2, r2, #32
 8000438:	fa01 fc02 	lsl.w	ip, r1, r2
 800043c:	f1c2 0220 	rsb	r2, r2, #32
 8000440:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000444:	fa21 f202 	lsr.w	r2, r1, r2
 8000448:	eb43 0002 	adc.w	r0, r3, r2
 800044c:	bf08      	it	eq
 800044e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000452:	4770      	bx	lr

08000454 <__aeabi_uldivmod>:
 8000454:	b953      	cbnz	r3, 800046c <__aeabi_uldivmod+0x18>
 8000456:	b94a      	cbnz	r2, 800046c <__aeabi_uldivmod+0x18>
 8000458:	2900      	cmp	r1, #0
 800045a:	bf08      	it	eq
 800045c:	2800      	cmpeq	r0, #0
 800045e:	bf1c      	itt	ne
 8000460:	f04f 31ff 	movne.w	r1, #4294967295
 8000464:	f04f 30ff 	movne.w	r0, #4294967295
 8000468:	f000 b996 	b.w	8000798 <__aeabi_idiv0>
 800046c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000470:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000474:	f000 f828 	bl	80004c8 <__udivmoddi4>
 8000478:	f8dd e004 	ldr.w	lr, [sp, #4]
 800047c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000480:	b004      	add	sp, #16
 8000482:	4770      	bx	lr
 8000484:	0000      	movs	r0, r0
	...

08000488 <__aeabi_f2ulz>:
 8000488:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80004b8 <__aeabi_f2ulz+0x30>
 800048c:	ee07 0a90 	vmov	s15, r0
 8000490:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80004c0 <__aeabi_f2ulz+0x38>
 8000494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000498:	ee27 6b06 	vmul.f64	d6, d7, d6
 800049c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80004a0:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80004a4:	eea4 7b45 	vfms.f64	d7, d4, d5
 80004a8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80004ac:	ee16 1a10 	vmov	r1, s12
 80004b0:	ee17 0a90 	vmov	r0, s15
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	00000000 	.word	0x00000000
 80004bc:	3df00000 	.word	0x3df00000
 80004c0:	00000000 	.word	0x00000000
 80004c4:	41f00000 	.word	0x41f00000

080004c8 <__udivmoddi4>:
 80004c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004cc:	9d08      	ldr	r5, [sp, #32]
 80004ce:	4604      	mov	r4, r0
 80004d0:	468e      	mov	lr, r1
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d14d      	bne.n	8000572 <__udivmoddi4+0xaa>
 80004d6:	428a      	cmp	r2, r1
 80004d8:	4694      	mov	ip, r2
 80004da:	d969      	bls.n	80005b0 <__udivmoddi4+0xe8>
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	b152      	cbz	r2, 80004f8 <__udivmoddi4+0x30>
 80004e2:	fa01 f302 	lsl.w	r3, r1, r2
 80004e6:	f1c2 0120 	rsb	r1, r2, #32
 80004ea:	fa20 f101 	lsr.w	r1, r0, r1
 80004ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f2:	ea41 0e03 	orr.w	lr, r1, r3
 80004f6:	4094      	lsls	r4, r2
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	0c21      	lsrs	r1, r4, #16
 80004fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000502:	fa1f f78c 	uxth.w	r7, ip
 8000506:	fb08 e316 	mls	r3, r8, r6, lr
 800050a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800050e:	fb06 f107 	mul.w	r1, r6, r7
 8000512:	4299      	cmp	r1, r3
 8000514:	d90a      	bls.n	800052c <__udivmoddi4+0x64>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f106 30ff 	add.w	r0, r6, #4294967295
 800051e:	f080 811f 	bcs.w	8000760 <__udivmoddi4+0x298>
 8000522:	4299      	cmp	r1, r3
 8000524:	f240 811c 	bls.w	8000760 <__udivmoddi4+0x298>
 8000528:	3e02      	subs	r6, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f0f8 	udiv	r0, r3, r8
 8000534:	fb08 3310 	mls	r3, r8, r0, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb00 f707 	mul.w	r7, r0, r7
 8000540:	42a7      	cmp	r7, r4
 8000542:	d90a      	bls.n	800055a <__udivmoddi4+0x92>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f100 33ff 	add.w	r3, r0, #4294967295
 800054c:	f080 810a 	bcs.w	8000764 <__udivmoddi4+0x29c>
 8000550:	42a7      	cmp	r7, r4
 8000552:	f240 8107 	bls.w	8000764 <__udivmoddi4+0x29c>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800055e:	1be4      	subs	r4, r4, r7
 8000560:	2600      	movs	r6, #0
 8000562:	b11d      	cbz	r5, 800056c <__udivmoddi4+0xa4>
 8000564:	40d4      	lsrs	r4, r2
 8000566:	2300      	movs	r3, #0
 8000568:	e9c5 4300 	strd	r4, r3, [r5]
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	428b      	cmp	r3, r1
 8000574:	d909      	bls.n	800058a <__udivmoddi4+0xc2>
 8000576:	2d00      	cmp	r5, #0
 8000578:	f000 80ef 	beq.w	800075a <__udivmoddi4+0x292>
 800057c:	2600      	movs	r6, #0
 800057e:	e9c5 0100 	strd	r0, r1, [r5]
 8000582:	4630      	mov	r0, r6
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	fab3 f683 	clz	r6, r3
 800058e:	2e00      	cmp	r6, #0
 8000590:	d14a      	bne.n	8000628 <__udivmoddi4+0x160>
 8000592:	428b      	cmp	r3, r1
 8000594:	d302      	bcc.n	800059c <__udivmoddi4+0xd4>
 8000596:	4282      	cmp	r2, r0
 8000598:	f200 80f9 	bhi.w	800078e <__udivmoddi4+0x2c6>
 800059c:	1a84      	subs	r4, r0, r2
 800059e:	eb61 0303 	sbc.w	r3, r1, r3
 80005a2:	2001      	movs	r0, #1
 80005a4:	469e      	mov	lr, r3
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d0e0      	beq.n	800056c <__udivmoddi4+0xa4>
 80005aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80005ae:	e7dd      	b.n	800056c <__udivmoddi4+0xa4>
 80005b0:	b902      	cbnz	r2, 80005b4 <__udivmoddi4+0xec>
 80005b2:	deff      	udf	#255	; 0xff
 80005b4:	fab2 f282 	clz	r2, r2
 80005b8:	2a00      	cmp	r2, #0
 80005ba:	f040 8092 	bne.w	80006e2 <__udivmoddi4+0x21a>
 80005be:	eba1 010c 	sub.w	r1, r1, ip
 80005c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005c6:	fa1f fe8c 	uxth.w	lr, ip
 80005ca:	2601      	movs	r6, #1
 80005cc:	0c20      	lsrs	r0, r4, #16
 80005ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80005d2:	fb07 1113 	mls	r1, r7, r3, r1
 80005d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005da:	fb0e f003 	mul.w	r0, lr, r3
 80005de:	4288      	cmp	r0, r1
 80005e0:	d908      	bls.n	80005f4 <__udivmoddi4+0x12c>
 80005e2:	eb1c 0101 	adds.w	r1, ip, r1
 80005e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80005ea:	d202      	bcs.n	80005f2 <__udivmoddi4+0x12a>
 80005ec:	4288      	cmp	r0, r1
 80005ee:	f200 80cb 	bhi.w	8000788 <__udivmoddi4+0x2c0>
 80005f2:	4643      	mov	r3, r8
 80005f4:	1a09      	subs	r1, r1, r0
 80005f6:	b2a4      	uxth	r4, r4
 80005f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80005fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000600:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000604:	fb0e fe00 	mul.w	lr, lr, r0
 8000608:	45a6      	cmp	lr, r4
 800060a:	d908      	bls.n	800061e <__udivmoddi4+0x156>
 800060c:	eb1c 0404 	adds.w	r4, ip, r4
 8000610:	f100 31ff 	add.w	r1, r0, #4294967295
 8000614:	d202      	bcs.n	800061c <__udivmoddi4+0x154>
 8000616:	45a6      	cmp	lr, r4
 8000618:	f200 80bb 	bhi.w	8000792 <__udivmoddi4+0x2ca>
 800061c:	4608      	mov	r0, r1
 800061e:	eba4 040e 	sub.w	r4, r4, lr
 8000622:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000626:	e79c      	b.n	8000562 <__udivmoddi4+0x9a>
 8000628:	f1c6 0720 	rsb	r7, r6, #32
 800062c:	40b3      	lsls	r3, r6
 800062e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000632:	ea4c 0c03 	orr.w	ip, ip, r3
 8000636:	fa20 f407 	lsr.w	r4, r0, r7
 800063a:	fa01 f306 	lsl.w	r3, r1, r6
 800063e:	431c      	orrs	r4, r3
 8000640:	40f9      	lsrs	r1, r7
 8000642:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000646:	fa00 f306 	lsl.w	r3, r0, r6
 800064a:	fbb1 f8f9 	udiv	r8, r1, r9
 800064e:	0c20      	lsrs	r0, r4, #16
 8000650:	fa1f fe8c 	uxth.w	lr, ip
 8000654:	fb09 1118 	mls	r1, r9, r8, r1
 8000658:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800065c:	fb08 f00e 	mul.w	r0, r8, lr
 8000660:	4288      	cmp	r0, r1
 8000662:	fa02 f206 	lsl.w	r2, r2, r6
 8000666:	d90b      	bls.n	8000680 <__udivmoddi4+0x1b8>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000670:	f080 8088 	bcs.w	8000784 <__udivmoddi4+0x2bc>
 8000674:	4288      	cmp	r0, r1
 8000676:	f240 8085 	bls.w	8000784 <__udivmoddi4+0x2bc>
 800067a:	f1a8 0802 	sub.w	r8, r8, #2
 800067e:	4461      	add	r1, ip
 8000680:	1a09      	subs	r1, r1, r0
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb1 f0f9 	udiv	r0, r1, r9
 8000688:	fb09 1110 	mls	r1, r9, r0, r1
 800068c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000690:	fb00 fe0e 	mul.w	lr, r0, lr
 8000694:	458e      	cmp	lr, r1
 8000696:	d908      	bls.n	80006aa <__udivmoddi4+0x1e2>
 8000698:	eb1c 0101 	adds.w	r1, ip, r1
 800069c:	f100 34ff 	add.w	r4, r0, #4294967295
 80006a0:	d26c      	bcs.n	800077c <__udivmoddi4+0x2b4>
 80006a2:	458e      	cmp	lr, r1
 80006a4:	d96a      	bls.n	800077c <__udivmoddi4+0x2b4>
 80006a6:	3802      	subs	r0, #2
 80006a8:	4461      	add	r1, ip
 80006aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006ae:	fba0 9402 	umull	r9, r4, r0, r2
 80006b2:	eba1 010e 	sub.w	r1, r1, lr
 80006b6:	42a1      	cmp	r1, r4
 80006b8:	46c8      	mov	r8, r9
 80006ba:	46a6      	mov	lr, r4
 80006bc:	d356      	bcc.n	800076c <__udivmoddi4+0x2a4>
 80006be:	d053      	beq.n	8000768 <__udivmoddi4+0x2a0>
 80006c0:	b15d      	cbz	r5, 80006da <__udivmoddi4+0x212>
 80006c2:	ebb3 0208 	subs.w	r2, r3, r8
 80006c6:	eb61 010e 	sbc.w	r1, r1, lr
 80006ca:	fa01 f707 	lsl.w	r7, r1, r7
 80006ce:	fa22 f306 	lsr.w	r3, r2, r6
 80006d2:	40f1      	lsrs	r1, r6
 80006d4:	431f      	orrs	r7, r3
 80006d6:	e9c5 7100 	strd	r7, r1, [r5]
 80006da:	2600      	movs	r6, #0
 80006dc:	4631      	mov	r1, r6
 80006de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e2:	f1c2 0320 	rsb	r3, r2, #32
 80006e6:	40d8      	lsrs	r0, r3
 80006e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ec:	fa21 f303 	lsr.w	r3, r1, r3
 80006f0:	4091      	lsls	r1, r2
 80006f2:	4301      	orrs	r1, r0
 80006f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006f8:	fa1f fe8c 	uxth.w	lr, ip
 80006fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000700:	fb07 3610 	mls	r6, r7, r0, r3
 8000704:	0c0b      	lsrs	r3, r1, #16
 8000706:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800070a:	fb00 f60e 	mul.w	r6, r0, lr
 800070e:	429e      	cmp	r6, r3
 8000710:	fa04 f402 	lsl.w	r4, r4, r2
 8000714:	d908      	bls.n	8000728 <__udivmoddi4+0x260>
 8000716:	eb1c 0303 	adds.w	r3, ip, r3
 800071a:	f100 38ff 	add.w	r8, r0, #4294967295
 800071e:	d22f      	bcs.n	8000780 <__udivmoddi4+0x2b8>
 8000720:	429e      	cmp	r6, r3
 8000722:	d92d      	bls.n	8000780 <__udivmoddi4+0x2b8>
 8000724:	3802      	subs	r0, #2
 8000726:	4463      	add	r3, ip
 8000728:	1b9b      	subs	r3, r3, r6
 800072a:	b289      	uxth	r1, r1
 800072c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000730:	fb07 3316 	mls	r3, r7, r6, r3
 8000734:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000738:	fb06 f30e 	mul.w	r3, r6, lr
 800073c:	428b      	cmp	r3, r1
 800073e:	d908      	bls.n	8000752 <__udivmoddi4+0x28a>
 8000740:	eb1c 0101 	adds.w	r1, ip, r1
 8000744:	f106 38ff 	add.w	r8, r6, #4294967295
 8000748:	d216      	bcs.n	8000778 <__udivmoddi4+0x2b0>
 800074a:	428b      	cmp	r3, r1
 800074c:	d914      	bls.n	8000778 <__udivmoddi4+0x2b0>
 800074e:	3e02      	subs	r6, #2
 8000750:	4461      	add	r1, ip
 8000752:	1ac9      	subs	r1, r1, r3
 8000754:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000758:	e738      	b.n	80005cc <__udivmoddi4+0x104>
 800075a:	462e      	mov	r6, r5
 800075c:	4628      	mov	r0, r5
 800075e:	e705      	b.n	800056c <__udivmoddi4+0xa4>
 8000760:	4606      	mov	r6, r0
 8000762:	e6e3      	b.n	800052c <__udivmoddi4+0x64>
 8000764:	4618      	mov	r0, r3
 8000766:	e6f8      	b.n	800055a <__udivmoddi4+0x92>
 8000768:	454b      	cmp	r3, r9
 800076a:	d2a9      	bcs.n	80006c0 <__udivmoddi4+0x1f8>
 800076c:	ebb9 0802 	subs.w	r8, r9, r2
 8000770:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000774:	3801      	subs	r0, #1
 8000776:	e7a3      	b.n	80006c0 <__udivmoddi4+0x1f8>
 8000778:	4646      	mov	r6, r8
 800077a:	e7ea      	b.n	8000752 <__udivmoddi4+0x28a>
 800077c:	4620      	mov	r0, r4
 800077e:	e794      	b.n	80006aa <__udivmoddi4+0x1e2>
 8000780:	4640      	mov	r0, r8
 8000782:	e7d1      	b.n	8000728 <__udivmoddi4+0x260>
 8000784:	46d0      	mov	r8, sl
 8000786:	e77b      	b.n	8000680 <__udivmoddi4+0x1b8>
 8000788:	3b02      	subs	r3, #2
 800078a:	4461      	add	r1, ip
 800078c:	e732      	b.n	80005f4 <__udivmoddi4+0x12c>
 800078e:	4630      	mov	r0, r6
 8000790:	e709      	b.n	80005a6 <__udivmoddi4+0xde>
 8000792:	4464      	add	r4, ip
 8000794:	3802      	subs	r0, #2
 8000796:	e742      	b.n	800061e <__udivmoddi4+0x156>

08000798 <__aeabi_idiv0>:
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <InverterStartup_LEFT_MOTOR_Init>:
 */
void InverterStartup_LEFT_MOTOR_Init(MI_STATUSES *rty_MI_motorStatus, uint8_T
  *rty_AMK_bInverterOn_tx, uint8_T *rty_AMK_bDcOn_tx, uint8_T *rty_AMK_bEnable,
  uint8_T *rty_AMK_bErrorReset, real32_T *rty_AMK_TargetVelocity, real32_T
  *rty_AMK_TorqueLimitPositiv, real32_T *rty_AMK_TorqueLimitNegativ)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	603b      	str	r3, [r7, #0]
  *rty_MI_motorStatus = UNKNOWN;
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
  *rty_AMK_bInverterOn_tx = 0U;
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
  *rty_AMK_bDcOn_tx = 0U;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  *rty_AMK_bEnable = 0U;
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
  *rty_AMK_bErrorReset = 0U;
 80007c2:	69bb      	ldr	r3, [r7, #24]
 80007c4:	2200      	movs	r2, #0
 80007c6:	701a      	strb	r2, [r3, #0]
  *rty_AMK_TargetVelocity = 0.0F;
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f04f 0200 	mov.w	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
  *rty_AMK_TorqueLimitPositiv = 0.0F;
 80007d0:	6a3b      	ldr	r3, [r7, #32]
 80007d2:	f04f 0200 	mov.w	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
  *rty_AMK_TorqueLimitNegativ = 0.0F;
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	f04f 0200 	mov.w	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <InverterStartupContr_LEFT_MOTOR>:
  rtu_VD_T_motorTorqueLimitPositi, real32_T rtu_VD_T_motorTorqueLimitNegati,
  MI_STATUSES *rty_MI_motorStatus, uint8_T *rty_AMK_bInverterOn_tx, uint8_T
  *rty_AMK_bDcOn_tx, uint8_T *rty_AMK_bEnable, uint8_T *rty_AMK_bErrorReset,
  real32_T *rty_AMK_TargetVelocity, real32_T *rty_AMK_TorqueLimitPositiv,
  real32_T *rty_AMK_TorqueLimitNegativ, DW_LEFT_MOTOR_InverterStartup_T *localDW)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b095      	sub	sp, #84	; 0x54
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
 80007f6:	ed87 1b0e 	vstr	d1, [r7, #56]	; 0x38
 80007fa:	ed87 2b0c 	vstr	d2, [r7, #48]	; 0x30
 80007fe:	ed87 3b0a 	vstr	d3, [r7, #40]	; 0x28
 8000802:	ed87 4b08 	vstr	d4, [r7, #32]
 8000806:	ed87 5b06 	vstr	d5, [r7, #24]
 800080a:	ed87 6a12 	vstr	s12, [r7, #72]	; 0x48
 800080e:	edc7 6a05 	vstr	s13, [r7, #20]
 8000812:	ed87 7a04 	vstr	s14, [r7, #16]
 8000816:	60f9      	str	r1, [r7, #12]
 8000818:	60ba      	str	r2, [r7, #8]
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	4603      	mov	r3, r0
 800081e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  if (localDW->temporalCounter_i1 < 255U) {
 8000822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000824:	795b      	ldrb	r3, [r3, #5]
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	d005      	beq.n	8000836 <InverterStartupContr_LEFT_MOTOR+0x4a>
    localDW->temporalCounter_i1++;
 800082a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800082c:	795b      	ldrb	r3, [r3, #5]
 800082e:	3301      	adds	r3, #1
 8000830:	b2da      	uxtb	r2, r3
 8000832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000834:	715a      	strb	r2, [r3, #5]
  }

  /* Chart: '<S4>/LEFT_MOTOR' */
  /* Gateway: Control/motor_interface/LEFT_MOTOR */
  /* During: Control/motor_interface/LEFT_MOTOR */
  if (localDW->is_active_c2_InverterStartupCon == 0U) {
 8000836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d121      	bne.n	8000882 <InverterStartupContr_LEFT_MOTOR+0x96>
    /* Entry: Control/motor_interface/LEFT_MOTOR */
    localDW->is_active_c2_InverterStartupCon = 1U;
 800083e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000840:	2201      	movs	r2, #1
 8000842:	711a      	strb	r2, [r3, #4]

    /* Entry Internal: Control/motor_interface/LEFT_MOTOR */
    /* Transition: '<S5>:30' */
    localDW->is_c2_InverterStartupControl = Inver_IN_motorOff_waitingForGov;
 8000844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000846:	2206      	movs	r2, #6
 8000848:	701a      	strb	r2, [r3, #0]

    /* Entry 'motorOff_waitingForGov': '<S5>:31' */
    *rty_MI_motorStatus = OFF;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2206      	movs	r2, #6
 800084e:	701a      	strb	r2, [r3, #0]
    *rty_AMK_bInverterOn_tx = 0U;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
    *rty_AMK_bDcOn_tx = 0U;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	701a      	strb	r2, [r3, #0]
    *rty_AMK_bEnable = 0U;
 800085c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
    *rty_AMK_bErrorReset = 0U;
 8000862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
    *rty_AMK_TargetVelocity = 0.0F;
 8000868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800086a:	f04f 0200 	mov.w	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
    *rty_AMK_TorqueLimitPositiv = 0.0F;
 8000870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
    *rty_AMK_TorqueLimitNegativ = 0.0F;
 8000878:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
      break;
    }
  }

  /* End of Chart: '<S4>/LEFT_MOTOR' */
}
 8000880:	e259      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
    switch (localDW->is_c2_InverterStartupControl) {
 8000882:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	3b01      	subs	r3, #1
 8000888:	2b04      	cmp	r3, #4
 800088a:	f200 8237 	bhi.w	8000cfc <InverterStartupContr_LEFT_MOTOR+0x510>
 800088e:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <InverterStartupContr_LEFT_MOTOR+0xa8>)
 8000890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008df 	.word	0x080008df
 800089c:	080009c7 	.word	0x080009c7
 80008a0:	08000a3b 	.word	0x08000a3b
 80008a4:	08000b71 	.word	0x08000b71
      if (rtu_GOV_e_miCmd == ERR_RESET) {
 80008a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80008ac:	2b04      	cmp	r3, #4
 80008ae:	f040 823f 	bne.w	8000d30 <InverterStartupContr_LEFT_MOTOR+0x544>
        localDW->is_c2_InverterStartupControl = InverterStart_IN_AMK_errorReset;
 80008b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008b4:	2202      	movs	r2, #2
 80008b6:	701a      	strb	r2, [r3, #0]
        localDW->is_AMK_errorReset = Inver_IN_enforceSetpointsZero_b;
 80008b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008ba:	2201      	movs	r2, #1
 80008bc:	709a      	strb	r2, [r3, #2]
        *rty_AMK_TargetVelocity = 0.0F;
 80008be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80008c0:	f04f 0200 	mov.w	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
        *rty_AMK_TorqueLimitPositiv = 0.0F;
 80008c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008c8:	f04f 0200 	mov.w	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
        *rty_AMK_TorqueLimitNegativ = 0.0F;
 80008ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80008d0:	f04f 0200 	mov.w	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
        *rty_AMK_bInverterOn_tx = 0U;
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
      break;
 80008dc:	e228      	b.n	8000d30 <InverterStartupContr_LEFT_MOTOR+0x544>
      switch (localDW->is_AMK_errorReset) {
 80008de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d028      	beq.n	8000938 <InverterStartupContr_LEFT_MOTOR+0x14c>
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	dc37      	bgt.n	800095a <InverterStartupContr_LEFT_MOTOR+0x16e>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d002      	beq.n	80008f4 <InverterStartupContr_LEFT_MOTOR+0x108>
 80008ee:	2b02      	cmp	r3, #2
 80008f0:	d014      	beq.n	800091c <InverterStartupContr_LEFT_MOTOR+0x130>
 80008f2:	e032      	b.n	800095a <InverterStartupContr_LEFT_MOTOR+0x16e>
        *rty_AMK_bInverterOn_tx = 0U;
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
        if (rtu_AMK_bInverterOn_rx == 0.0) {
 80008fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80008fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000906:	d156      	bne.n	80009b6 <InverterStartupContr_LEFT_MOTOR+0x1ca>
          localDW->is_AMK_errorReset = InverterStartup_IN_toggleEnable;
 8000908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800090a:	2203      	movs	r2, #3
 800090c:	709a      	strb	r2, [r3, #2]
          localDW->temporalCounter_i1 = 0U;
 800090e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000910:	2200      	movs	r2, #0
 8000912:	715a      	strb	r2, [r3, #5]
          *rty_AMK_bEnable = 0U;
 8000914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
        break;
 800091a:	e04c      	b.n	80009b6 <InverterStartupContr_LEFT_MOTOR+0x1ca>
        *rty_AMK_bErrorReset = 1U;
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
        if (localDW->temporalCounter_i1 >= 100U) {
 8000922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	2b63      	cmp	r3, #99	; 0x63
 8000928:	d947      	bls.n	80009ba <InverterStartupContr_LEFT_MOTOR+0x1ce>
          localDW->is_AMK_errorReset = InverterStartupC_IN_toggleReset;
 800092a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800092c:	2204      	movs	r2, #4
 800092e:	709a      	strb	r2, [r3, #2]
          *rty_AMK_bErrorReset = 0U;
 8000930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000932:	2200      	movs	r2, #0
 8000934:	701a      	strb	r2, [r3, #0]
        break;
 8000936:	e040      	b.n	80009ba <InverterStartupContr_LEFT_MOTOR+0x1ce>
        *rty_AMK_bEnable = 0U;
 8000938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
        if (localDW->temporalCounter_i1 >= 100U) {
 800093e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	2b63      	cmp	r3, #99	; 0x63
 8000944:	d93b      	bls.n	80009be <InverterStartupContr_LEFT_MOTOR+0x1d2>
          localDW->is_AMK_errorReset = InverterStartupCon_IN_sendReset;
 8000946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000948:	2202      	movs	r2, #2
 800094a:	709a      	strb	r2, [r3, #2]
          localDW->temporalCounter_i1 = 0U;
 800094c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800094e:	2200      	movs	r2, #0
 8000950:	715a      	strb	r2, [r3, #5]
          *rty_AMK_bErrorReset = 1U;
 8000952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000954:	2201      	movs	r2, #1
 8000956:	701a      	strb	r2, [r3, #0]
        break;
 8000958:	e031      	b.n	80009be <InverterStartupContr_LEFT_MOTOR+0x1d2>
        *rty_AMK_bErrorReset = 0U;
 800095a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
        if (rtu_AMK_bSystemReady == 1.0) {
 8000960:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000964:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000968:	eeb4 7b46 	vcmp.f64	d7, d6
 800096c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000970:	d127      	bne.n	80009c2 <InverterStartupContr_LEFT_MOTOR+0x1d6>
          localDW->is_AMK_errorReset = InverterStar_IN_NO_ACTIVE_CHILD;
 8000972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000974:	2200      	movs	r2, #0
 8000976:	709a      	strb	r2, [r3, #2]
          localDW->is_c2_InverterStartupControl =
 8000978:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800097a:	2206      	movs	r2, #6
 800097c:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = OFF;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2206      	movs	r2, #6
 8000982:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bInverterOn_tx = 0U;
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bDcOn_tx = 0U;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bEnable = 0U;
 8000990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000992:	2200      	movs	r2, #0
 8000994:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bErrorReset = 0U;
 8000996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
          *rty_AMK_TargetVelocity = 0.0F;
 800099c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800099e:	f04f 0200 	mov.w	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
          *rty_AMK_TorqueLimitPositiv = 0.0F;
 80009a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009a6:	f04f 0200 	mov.w	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
          *rty_AMK_TorqueLimitNegativ = 0.0F;
 80009ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009ae:	f04f 0200 	mov.w	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
        break;
 80009b4:	e005      	b.n	80009c2 <InverterStartupContr_LEFT_MOTOR+0x1d6>
        break;
 80009b6:	bf00      	nop
 80009b8:	e1bd      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 80009ba:	bf00      	nop
 80009bc:	e1bb      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 80009be:	bf00      	nop
 80009c0:	e1b9      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 80009c2:	bf00      	nop
      break;
 80009c4:	e1b7      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
      if (rtu_AMK_bError == 1.0) {
 80009c6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80009ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80009ce:	eeb4 7b46 	vcmp.f64	d7, d6
 80009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d6:	d106      	bne.n	80009e6 <InverterStartupContr_LEFT_MOTOR+0x1fa>
        localDW->is_c2_InverterStartupControl = InverterSt_IN_AMK_errorDetected;
 80009d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009da:	2201      	movs	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
        *rty_MI_motorStatus = MI_STS_ERROR;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2205      	movs	r2, #5
 80009e2:	701a      	strb	r2, [r3, #0]
      break;
 80009e4:	e1a7      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
      } else if (rtu_GOV_e_miCmd == CMD_SHUTDOWN) {
 80009e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d118      	bne.n	8000a20 <InverterStartupContr_LEFT_MOTOR+0x234>
        localDW->is_c2_InverterStartupControl = InverterStartup_IN_AMK_shutdown;
 80009ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009f0:	2204      	movs	r2, #4
 80009f2:	701a      	strb	r2, [r3, #0]
        localDW->is_AMK_shutdown = Inverte_IN_enforceSetpointsZero;
 80009f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009f6:	2202      	movs	r2, #2
 80009f8:	70da      	strb	r2, [r3, #3]
        *rty_MI_motorStatus = SHUTDOWN;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2204      	movs	r2, #4
 80009fe:	701a      	strb	r2, [r3, #0]
        *rty_AMK_TargetVelocity = 0.0F;
 8000a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a02:	f04f 0200 	mov.w	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
        *rty_AMK_TorqueLimitPositiv = 0.0F;
 8000a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a0a:	f04f 0200 	mov.w	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
        *rty_AMK_TorqueLimitNegativ = 0.0F;
 8000a10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a12:	f04f 0200 	mov.w	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
        *rty_AMK_bInverterOn_tx = 0U;
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
      break;
 8000a1e:	e18a      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        *rty_MI_motorStatus = RUNNING;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2203      	movs	r2, #3
 8000a24:	701a      	strb	r2, [r3, #0]
        *rty_AMK_TargetVelocity = rtu_VD_T_motorSpeedRequest;
 8000a26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a2a:	601a      	str	r2, [r3, #0]
        *rty_AMK_TorqueLimitPositiv = rtu_VD_T_motorTorqueLimitPositi;
 8000a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	601a      	str	r2, [r3, #0]
        *rty_AMK_TorqueLimitNegativ = rtu_VD_T_motorTorqueLimitNegati;
 8000a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	601a      	str	r2, [r3, #0]
      break;
 8000a38:	e17d      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
      switch (localDW->is_AMK_shutdown) {
 8000a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a3c:	78db      	ldrb	r3, [r3, #3]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d002      	beq.n	8000a48 <InverterStartupContr_LEFT_MOTOR+0x25c>
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d024      	beq.n	8000a90 <InverterStartupContr_LEFT_MOTOR+0x2a4>
 8000a46:	e047      	b.n	8000ad8 <InverterStartupContr_LEFT_MOTOR+0x2ec>
        *rty_AMK_bEnable = 0U;
 8000a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
        if (rtu_AMK_bQuitInverterOn == 0.0) {
 8000a4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8000a52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a5a:	d106      	bne.n	8000a6a <InverterStartupContr_LEFT_MOTOR+0x27e>
          localDW->is_AMK_shutdown = InverterStartupCo_IN_toggleDCon;
 8000a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a5e:	2203      	movs	r2, #3
 8000a60:	70da      	strb	r2, [r3, #3]
          *rty_AMK_bDcOn_tx = 0U;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
        break;
 8000a68:	e07c      	b.n	8000b64 <InverterStartupContr_LEFT_MOTOR+0x378>
        } else if (rtu_AMK_bError == 1.0) {
 8000a6a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000a6e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000a72:	eeb4 7b46 	vcmp.f64	d7, d6
 8000a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7a:	d173      	bne.n	8000b64 <InverterStartupContr_LEFT_MOTOR+0x378>
          localDW->is_AMK_shutdown = InverterStar_IN_NO_ACTIVE_CHILD;
 8000a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a7e:	2200      	movs	r2, #0
 8000a80:	70da      	strb	r2, [r3, #3]
          localDW->is_c2_InverterStartupControl =
 8000a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	701a      	strb	r2, [r3, #0]
        break;
 8000a8e:	e069      	b.n	8000b64 <InverterStartupContr_LEFT_MOTOR+0x378>
        *rty_AMK_bInverterOn_tx = 0U;
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
        if (rtu_AMK_bInverterOn_rx == 0.0) {
 8000a96:	ed97 7b06 	vldr	d7, [r7, #24]
 8000a9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa2:	d106      	bne.n	8000ab2 <InverterStartupContr_LEFT_MOTOR+0x2c6>
          localDW->is_AMK_shutdown = InverterStartupCo_IN_commandOff;
 8000aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	70da      	strb	r2, [r3, #3]
          *rty_AMK_bEnable = 0U;
 8000aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000aac:	2200      	movs	r2, #0
 8000aae:	701a      	strb	r2, [r3, #0]
        break;
 8000ab0:	e05a      	b.n	8000b68 <InverterStartupContr_LEFT_MOTOR+0x37c>
        } else if (rtu_AMK_bError == 1.0) {
 8000ab2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000ab6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000aba:	eeb4 7b46 	vcmp.f64	d7, d6
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	d151      	bne.n	8000b68 <InverterStartupContr_LEFT_MOTOR+0x37c>
          localDW->is_AMK_shutdown = InverterStar_IN_NO_ACTIVE_CHILD;
 8000ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	70da      	strb	r2, [r3, #3]
          localDW->is_c2_InverterStartupControl =
 8000aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2205      	movs	r2, #5
 8000ad4:	701a      	strb	r2, [r3, #0]
        break;
 8000ad6:	e047      	b.n	8000b68 <InverterStartupContr_LEFT_MOTOR+0x37c>
        *rty_AMK_bDcOn_tx = 0U;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
        if ((rtu_AMK_bDcOn_rx == 0.0) && (rtu_AMK_bQuitDcOn == 0.0)) {
 8000ade:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ae2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aea:	d128      	bne.n	8000b3e <InverterStartupContr_LEFT_MOTOR+0x352>
 8000aec:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000af0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	d121      	bne.n	8000b3e <InverterStartupContr_LEFT_MOTOR+0x352>
          localDW->is_AMK_shutdown = InverterStar_IN_NO_ACTIVE_CHILD;
 8000afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000afc:	2200      	movs	r2, #0
 8000afe:	70da      	strb	r2, [r3, #3]
          localDW->is_c2_InverterStartupControl =
 8000b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b02:	2206      	movs	r2, #6
 8000b04:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = OFF;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2206      	movs	r2, #6
 8000b0a:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bInverterOn_tx = 0U;
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bDcOn_tx = 0U;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bEnable = 0U;
 8000b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bErrorReset = 0U;
 8000b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
          *rty_AMK_TargetVelocity = 0.0F;
 8000b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b26:	f04f 0200 	mov.w	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
          *rty_AMK_TorqueLimitPositiv = 0.0F;
 8000b2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b2e:	f04f 0200 	mov.w	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
          *rty_AMK_TorqueLimitNegativ = 0.0F;
 8000b34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b36:	f04f 0200 	mov.w	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
        break;
 8000b3c:	e016      	b.n	8000b6c <InverterStartupContr_LEFT_MOTOR+0x380>
        } else if (rtu_AMK_bError == 1.0) {
 8000b3e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000b42:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000b46:	eeb4 7b46 	vcmp.f64	d7, d6
 8000b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4e:	d10d      	bne.n	8000b6c <InverterStartupContr_LEFT_MOTOR+0x380>
          localDW->is_AMK_shutdown = InverterStar_IN_NO_ACTIVE_CHILD;
 8000b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b52:	2200      	movs	r2, #0
 8000b54:	70da      	strb	r2, [r3, #3]
          localDW->is_c2_InverterStartupControl =
 8000b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2205      	movs	r2, #5
 8000b60:	701a      	strb	r2, [r3, #0]
        break;
 8000b62:	e003      	b.n	8000b6c <InverterStartupContr_LEFT_MOTOR+0x380>
        break;
 8000b64:	bf00      	nop
 8000b66:	e0e6      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 8000b68:	bf00      	nop
 8000b6a:	e0e4      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 8000b6c:	bf00      	nop
      break;
 8000b6e:	e0e2      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
      switch (localDW->is_AMK_startup) {
 8000b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b72:	785b      	ldrb	r3, [r3, #1]
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d05b      	beq.n	8000c30 <InverterStartupContr_LEFT_MOTOR+0x444>
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	f300 8094 	bgt.w	8000ca6 <InverterStartupContr_LEFT_MOTOR+0x4ba>
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d002      	beq.n	8000b88 <InverterStartupContr_LEFT_MOTOR+0x39c>
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d033      	beq.n	8000bee <InverterStartupContr_LEFT_MOTOR+0x402>
 8000b86:	e08e      	b.n	8000ca6 <InverterStartupContr_LEFT_MOTOR+0x4ba>
        *rty_AMK_bEnable = 1U;
 8000b88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
        *rty_AMK_bInverterOn_tx = 1U;
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
        if ((rtu_AMK_bInverterOn_rx == 1.0) && (rtu_AMK_bQuitInverterOn == 1.0))
 8000b94:	ed97 7b06 	vldr	d7, [r7, #24]
 8000b98:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000b9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8000ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba4:	d10f      	bne.n	8000bc6 <InverterStartupContr_LEFT_MOTOR+0x3da>
 8000ba6:	ed97 7b08 	vldr	d7, [r7, #32]
 8000baa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000bae:	eeb4 7b46 	vcmp.f64	d7, d6
 8000bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb6:	d106      	bne.n	8000bc6 <InverterStartupContr_LEFT_MOTOR+0x3da>
          localDW->is_AMK_startup = InverterStar_IN_NO_ACTIVE_CHILD;
 8000bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bba:	2200      	movs	r2, #0
 8000bbc:	705a      	strb	r2, [r3, #1]
          localDW->is_c2_InverterStartupControl =
 8000bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	701a      	strb	r2, [r3, #0]
        break;
 8000bc4:	e092      	b.n	8000cec <InverterStartupContr_LEFT_MOTOR+0x500>
        } else if (rtu_AMK_bError == 1.0) {
 8000bc6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000bca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000bce:	eeb4 7b46 	vcmp.f64	d7, d6
 8000bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd6:	f040 8089 	bne.w	8000cec <InverterStartupContr_LEFT_MOTOR+0x500>
          localDW->is_AMK_startup = InverterStar_IN_NO_ACTIVE_CHILD;
 8000bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bdc:	2200      	movs	r2, #0
 8000bde:	705a      	strb	r2, [r3, #1]
          localDW->is_c2_InverterStartupControl =
 8000be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000be2:	2201      	movs	r2, #1
 8000be4:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2205      	movs	r2, #5
 8000bea:	701a      	strb	r2, [r3, #0]
        break;
 8000bec:	e07e      	b.n	8000cec <InverterStartupContr_LEFT_MOTOR+0x500>
        if (localDW->temporalCounter_i1 >= 200U) {
 8000bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bf0:	795b      	ldrb	r3, [r3, #5]
 8000bf2:	2bc7      	cmp	r3, #199	; 0xc7
 8000bf4:	d909      	bls.n	8000c0a <InverterStartupContr_LEFT_MOTOR+0x41e>
          localDW->is_AMK_startup = InverterStartupCon_IN_commandOn;
 8000bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	705a      	strb	r2, [r3, #1]
          *rty_AMK_bEnable = 1U;
 8000bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bfe:	2201      	movs	r2, #1
 8000c00:	701a      	strb	r2, [r3, #0]
          *rty_AMK_bInverterOn_tx = 1U;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	2201      	movs	r2, #1
 8000c06:	701a      	strb	r2, [r3, #0]
        break;
 8000c08:	e072      	b.n	8000cf0 <InverterStartupContr_LEFT_MOTOR+0x504>
        } else if (rtu_AMK_bError == 1.0) {
 8000c0a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000c0e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c12:	eeb4 7b46 	vcmp.f64	d7, d6
 8000c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1a:	d169      	bne.n	8000cf0 <InverterStartupContr_LEFT_MOTOR+0x504>
          localDW->is_AMK_startup = InverterStar_IN_NO_ACTIVE_CHILD;
 8000c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c1e:	2200      	movs	r2, #0
 8000c20:	705a      	strb	r2, [r3, #1]
          localDW->is_c2_InverterStartupControl =
 8000c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c24:	2201      	movs	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2205      	movs	r2, #5
 8000c2c:	701a      	strb	r2, [r3, #0]
        break;
 8000c2e:	e05f      	b.n	8000cf0 <InverterStartupContr_LEFT_MOTOR+0x504>
        *rty_AMK_bDcOn_tx = 1U;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
        if ((rtu_AMK_bDcOn_rx == 1.0) && (rtu_AMK_bQuitDcOn == 1.0)) {
 8000c36:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000c3a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c3e:	eeb4 7b46 	vcmp.f64	d7, d6
 8000c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c46:	d11b      	bne.n	8000c80 <InverterStartupContr_LEFT_MOTOR+0x494>
 8000c48:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c50:	eeb4 7b46 	vcmp.f64	d7, d6
 8000c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c58:	d112      	bne.n	8000c80 <InverterStartupContr_LEFT_MOTOR+0x494>
          localDW->is_AMK_startup = Inverte_IN_enforceSetpointsZero;
 8000c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	705a      	strb	r2, [r3, #1]
          localDW->temporalCounter_i1 = 0U;
 8000c60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c62:	2200      	movs	r2, #0
 8000c64:	715a      	strb	r2, [r3, #5]
          *rty_AMK_TargetVelocity = 0.0F;
 8000c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
          *rty_AMK_TorqueLimitPositiv = 0.0F;
 8000c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c70:	f04f 0200 	mov.w	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
          *rty_AMK_TorqueLimitNegativ = 0.0F;
 8000c76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
        break;
 8000c7e:	e039      	b.n	8000cf4 <InverterStartupContr_LEFT_MOTOR+0x508>
        } else if (rtu_AMK_bError == 1.0) {
 8000c80:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000c84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c88:	eeb4 7b46 	vcmp.f64	d7, d6
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c90:	d130      	bne.n	8000cf4 <InverterStartupContr_LEFT_MOTOR+0x508>
          localDW->is_AMK_startup = InverterStar_IN_NO_ACTIVE_CHILD;
 8000c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c94:	2200      	movs	r2, #0
 8000c96:	705a      	strb	r2, [r3, #1]
          localDW->is_c2_InverterStartupControl =
 8000c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2205      	movs	r2, #5
 8000ca2:	701a      	strb	r2, [r3, #0]
        break;
 8000ca4:	e026      	b.n	8000cf4 <InverterStartupContr_LEFT_MOTOR+0x508>
        if (rtu_AMK_bSystemReady == 1.0) {
 8000ca6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000caa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cae:	eeb4 7b46 	vcmp.f64	d7, d6
 8000cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb6:	d106      	bne.n	8000cc6 <InverterStartupContr_LEFT_MOTOR+0x4da>
          localDW->is_AMK_startup = InverterStartupCo_IN_toggleDCon;
 8000cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cba:	2203      	movs	r2, #3
 8000cbc:	705a      	strb	r2, [r3, #1]
          *rty_AMK_bDcOn_tx = 1U;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	701a      	strb	r2, [r3, #0]
        break;
 8000cc4:	e018      	b.n	8000cf8 <InverterStartupContr_LEFT_MOTOR+0x50c>
        } else if (rtu_AMK_bError == 1.0) {
 8000cc6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000cca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cce:	eeb4 7b46 	vcmp.f64	d7, d6
 8000cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd6:	d10f      	bne.n	8000cf8 <InverterStartupContr_LEFT_MOTOR+0x50c>
          localDW->is_AMK_startup = InverterStar_IN_NO_ACTIVE_CHILD;
 8000cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000cda:	2200      	movs	r2, #0
 8000cdc:	705a      	strb	r2, [r3, #1]
          localDW->is_c2_InverterStartupControl =
 8000cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	701a      	strb	r2, [r3, #0]
          *rty_MI_motorStatus = MI_STS_ERROR;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	701a      	strb	r2, [r3, #0]
        break;
 8000cea:	e005      	b.n	8000cf8 <InverterStartupContr_LEFT_MOTOR+0x50c>
        break;
 8000cec:	bf00      	nop
 8000cee:	e022      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 8000cf0:	bf00      	nop
 8000cf2:	e020      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 8000cf4:	bf00      	nop
 8000cf6:	e01e      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
        break;
 8000cf8:	bf00      	nop
      break;
 8000cfa:	e01c      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
      *rty_AMK_bInverterOn_tx = 0U;
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
      *rty_AMK_bDcOn_tx = 0U;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
      *rty_AMK_bEnable = 0U;
 8000d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
      *rty_AMK_bErrorReset = 0U;
 8000d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
      if (rtu_GOV_e_miCmd == CMD_STARTUP) {
 8000d14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d10b      	bne.n	8000d34 <InverterStartupContr_LEFT_MOTOR+0x548>
        localDW->is_c2_InverterStartupControl = InverterStartupC_IN_AMK_startup;
 8000d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d1e:	2205      	movs	r2, #5
 8000d20:	701a      	strb	r2, [r3, #0]
        localDW->is_AMK_startup = InverterSta_IN_waiting_sysReady;
 8000d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d24:	2204      	movs	r2, #4
 8000d26:	705a      	strb	r2, [r3, #1]
        *rty_MI_motorStatus = STARTUP;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	701a      	strb	r2, [r3, #0]
      break;
 8000d2e:	e001      	b.n	8000d34 <InverterStartupContr_LEFT_MOTOR+0x548>
      break;
 8000d30:	bf00      	nop
 8000d32:	e000      	b.n	8000d36 <InverterStartupContr_LEFT_MOTOR+0x54a>
      break;
 8000d34:	bf00      	nop
}
 8000d36:	bf00      	nop
 8000d38:	3754      	adds	r7, #84	; 0x54
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop

08000d44 <InverterStartupControl_step>:

/* Model step function */
void InverterStartupControl_step(void* args)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	; 0x38
 8000d48:	af06      	add	r7, sp, #24
 8000d4a:	6078      	str	r0, [r7, #4]
   *  Inport: '<Root>/In25'
   *  Inport: '<Root>/In6'
   */
  /* Gateway: Control/Chart */
  /* During: Control/Chart */
  if (InverterStartupControl_DW.is_active_c1_InverterStartupCon == 0U) {
 8000d4c:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000d4e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d10a      	bne.n	8000d6c <InverterStartupControl_step+0x28>
    /* Entry: Control/Chart */
    InverterStartupControl_DW.is_active_c1_InverterStartupCon = 1U;
 8000d56:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    /* Entry Internal: Control/Chart */
    /* Transition: '<S2>:2' */
    InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      InverterStartupControl_IN_Init;

    /* Entry 'Init': '<S2>:5' */
    rtb_GOV_e_miCmd = CMD_INIT;
 8000d66:	2300      	movs	r3, #0
 8000d68:	72fb      	strb	r3, [r7, #11]
 8000d6a:	e0a8      	b.n	8000ebe <InverterStartupControl_step+0x17a>
  } else {
    switch (InverterStartupControl_DW.is_c1_InverterStartupControl) {
 8000d6c:	4b79      	ldr	r3, [pc, #484]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000d72:	3b01      	subs	r3, #1
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	f200 8088 	bhi.w	8000e8a <InverterStartupControl_step+0x146>
 8000d7a:	a201      	add	r2, pc, #4	; (adr r2, 8000d80 <InverterStartupControl_step+0x3c>)
 8000d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d80:	08000d91 	.word	0x08000d91
 8000d84:	08000db5 	.word	0x08000db5
 8000d88:	08000dd7 	.word	0x08000dd7
 8000d8c:	08000e21 	.word	0x08000e21
     case InverterStartupContro_IN_Error0:
      rtb_GOV_e_miCmd = ERR_RESET;
 8000d90:	2304      	movs	r3, #4
 8000d92:	72fb      	strb	r3, [r7, #11]

      /* During 'Error0': '<S2>:8' */
      if (InverterStartupControl_U.AMK_bError_R == 0.0) {
 8000d94:	4b70      	ldr	r3, [pc, #448]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000d96:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000d9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	f040 8083 	bne.w	8000eac <InverterStartupControl_step+0x168>
        /* Transition: '<S2>:12' */
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000da6:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000da8:	2204      	movs	r2, #4
 8000daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
          InverterStartupControl_IN_Run;

        /* Entry 'Run': '<S2>:1' */
        rtb_GOV_e_miCmd = CMD_STARTUP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8000db2:	e07b      	b.n	8000eac <InverterStartupControl_step+0x168>

     case InverterStartupContro_IN_Error1:
      rtb_GOV_e_miCmd = ERR_RESET;
 8000db4:	2304      	movs	r3, #4
 8000db6:	72fb      	strb	r3, [r7, #11]

      /* During 'Error1': '<S2>:21' */
      if (InverterStartupControl_U.AMK_bError_L == 0.0) {
 8000db8:	4b67      	ldr	r3, [pc, #412]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000dba:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8000dbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	d173      	bne.n	8000eb0 <InverterStartupControl_step+0x16c>
        /* Transition: '<S2>:24' */
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000dca:	2204      	movs	r2, #4
 8000dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
          InverterStartupControl_IN_Run;

        /* Entry 'Run': '<S2>:1' */
        rtb_GOV_e_miCmd = CMD_STARTUP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8000dd4:	e06c      	b.n	8000eb0 <InverterStartupControl_step+0x16c>

     case InverterStartupControl_IN_Init:
      rtb_GOV_e_miCmd = CMD_INIT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	72fb      	strb	r3, [r7, #11]

      /* During 'Init': '<S2>:5' */
      if ((InverterStartupControl_U.AMK_bSystemReady_R == 1.0) &&
 8000dda:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000ddc:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8000de0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000de4:	eeb4 7b46 	vcmp.f64	d7, d6
 8000de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dec:	d162      	bne.n	8000eb4 <InverterStartupControl_step+0x170>
          (InverterStartupControl_U.AMK_bSystemReady_L == 1.0) &&
 8000dee:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000df0:	ed93 7b32 	vldr	d7, [r3, #200]	; 0xc8
      if ((InverterStartupControl_U.AMK_bSystemReady_R == 1.0) &&
 8000df4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000df8:	eeb4 7b46 	vcmp.f64	d7, d6
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	d158      	bne.n	8000eb4 <InverterStartupControl_step+0x170>
          (InverterStartupControl_P.Constant11_Value == 0.0)) {
 8000e02:	4b56      	ldr	r3, [pc, #344]	; (8000f5c <InverterStartupControl_step+0x218>)
 8000e04:	ed93 7b06 	vldr	d7, [r3, #24]
          (InverterStartupControl_U.AMK_bSystemReady_L == 1.0) &&
 8000e08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	d150      	bne.n	8000eb4 <InverterStartupControl_step+0x170>
        /* Transition: '<S2>:6' */
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000e12:	4b50      	ldr	r3, [pc, #320]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
          InverterStartupControl_IN_Run;

        /* Entry 'Run': '<S2>:1' */
        rtb_GOV_e_miCmd = CMD_STARTUP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8000e1e:	e049      	b.n	8000eb4 <InverterStartupControl_step+0x170>

     case InverterStartupControl_IN_Run:
      rtb_GOV_e_miCmd = CMD_STARTUP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	72fb      	strb	r3, [r7, #11]

      /* During 'Run': '<S2>:1' */
      if (InverterStartupControl_U.AMK_bError_R == 1.0) {
 8000e24:	4b4c      	ldr	r3, [pc, #304]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000e26:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e2e:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e36:	d106      	bne.n	8000e46 <InverterStartupControl_step+0x102>
        /* Transition: '<S2>:9' */
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000e38:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
          InverterStartupContro_IN_Error0;

        /* Entry 'Error0': '<S2>:8' */
        rtb_GOV_e_miCmd = ERR_RESET;
 8000e40:	2304      	movs	r3, #4
 8000e42:	72fb      	strb	r3, [r7, #11]
          InverterStartupContro_IN_Error1;

        /* Entry 'Error1': '<S2>:21' */
        rtb_GOV_e_miCmd = ERR_RESET;
      }
      break;
 8000e44:	e038      	b.n	8000eb8 <InverterStartupControl_step+0x174>
      } else if (InverterStartupControl_P.Constant11_Value == 1.0) {
 8000e46:	4b45      	ldr	r3, [pc, #276]	; (8000f5c <InverterStartupControl_step+0x218>)
 8000e48:	ed93 7b06 	vldr	d7, [r3, #24]
 8000e4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e50:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	d106      	bne.n	8000e68 <InverterStartupControl_step+0x124>
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        rtb_GOV_e_miCmd = CMD_SHUTDOWN;
 8000e62:	2303      	movs	r3, #3
 8000e64:	72fb      	strb	r3, [r7, #11]
      break;
 8000e66:	e027      	b.n	8000eb8 <InverterStartupControl_step+0x174>
      } else if (InverterStartupControl_U.AMK_bError_L == 1.0) {
 8000e68:	4b3b      	ldr	r3, [pc, #236]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000e6a:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8000e6e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000e72:	eeb4 7b46 	vcmp.f64	d7, d6
 8000e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7a:	d11d      	bne.n	8000eb8 <InverterStartupControl_step+0x174>
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000e7c:	4b35      	ldr	r3, [pc, #212]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        rtb_GOV_e_miCmd = ERR_RESET;
 8000e84:	2304      	movs	r3, #4
 8000e86:	72fb      	strb	r3, [r7, #11]
      break;
 8000e88:	e016      	b.n	8000eb8 <InverterStartupControl_step+0x174>

     default:
      rtb_GOV_e_miCmd = CMD_SHUTDOWN;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	72fb      	strb	r3, [r7, #11]

      /* During 'Shutdown': '<S2>:15' */
      if (InverterStartupControl_P.Constant11_Value == 0.0) {
 8000e8e:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <InverterStartupControl_step+0x218>)
 8000e90:	ed93 7b06 	vldr	d7, [r3, #24]
 8000e94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	d10e      	bne.n	8000ebc <InverterStartupControl_step+0x178>
        /* Transition: '<S2>:19' */
        InverterStartupControl_DW.is_c1_InverterStartupControl =
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
          InverterStartupControl_IN_Init;

        /* Entry 'Init': '<S2>:5' */
        rtb_GOV_e_miCmd = CMD_INIT;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	72fb      	strb	r3, [r7, #11]
      }
      break;
 8000eaa:	e007      	b.n	8000ebc <InverterStartupControl_step+0x178>
      break;
 8000eac:	bf00      	nop
 8000eae:	e006      	b.n	8000ebe <InverterStartupControl_step+0x17a>
      break;
 8000eb0:	bf00      	nop
 8000eb2:	e004      	b.n	8000ebe <InverterStartupControl_step+0x17a>
      break;
 8000eb4:	bf00      	nop
 8000eb6:	e002      	b.n	8000ebe <InverterStartupControl_step+0x17a>
      break;
 8000eb8:	bf00      	nop
 8000eba:	e000      	b.n	8000ebe <InverterStartupControl_step+0x17a>
      break;
 8000ebc:	bf00      	nop
  /* End of Chart: '<S1>/Chart' */

  /* SignalConversion generated from: '<S3>/Vector Concatenate' incorporates:
   *  Inport: '<Root>/APPS'
   */
  InverterStartupControl_B.VectorConcatenate[0] = InverterStartupControl_U.APPS;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <InverterStartupControl_step+0x214>)
 8000ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec4:	4926      	ldr	r1, [pc, #152]	; (8000f60 <InverterStartupControl_step+0x21c>)
 8000ec6:	e9c1 2300 	strd	r2, r3, [r1]

  /* S-Function (sfix_udelay): '<S3>/Tapped Delay' */
  for (i = 0; i < 5; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	e00f      	b.n	8000ef0 <InverterStartupControl_step+0x1ac>
    InverterStartupControl_B.VectorConcatenate[i + 1] =
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	1c59      	adds	r1, r3, #1
      InverterStartupControl_DW.TappedDelay_X[i];
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <InverterStartupControl_step+0x210>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	e9d3 2300 	ldrd	r2, r3, [r3]
    InverterStartupControl_B.VectorConcatenate[i + 1] =
 8000ee0:	481f      	ldr	r0, [pc, #124]	; (8000f60 <InverterStartupControl_step+0x21c>)
 8000ee2:	00c9      	lsls	r1, r1, #3
 8000ee4:	4401      	add	r1, r0
 8000ee6:	e9c1 2300 	strd	r2, r3, [r1]
  for (i = 0; i < 5; i++) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	ddec      	ble.n	8000ed0 <InverterStartupControl_step+0x18c>
  }

  /* End of S-Function (sfix_udelay): '<S3>/Tapped Delay' */

  /* Sum: '<S3>/Sum of Elements' */
  tmp = -0.0;
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000efe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (i = 0; i < 6; i++) {
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e00e      	b.n	8000f26 <InverterStartupControl_step+0x1e2>
    tmp += InverterStartupControl_B.VectorConcatenate[i];
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <InverterStartupControl_step+0x21c>)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	4413      	add	r3, r2
 8000f10:	ed93 7b00 	vldr	d7, [r3]
 8000f14:	ed97 6b04 	vldr	d6, [r7, #16]
 8000f18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000f1c:	ed87 7b04 	vstr	d7, [r7, #16]
  for (i = 0; i < 6; i++) {
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3301      	adds	r3, #1
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	dded      	ble.n	8000f08 <InverterStartupControl_step+0x1c4>
  }

  /* Product: '<S3>/Divide' incorporates:
   *  Sum: '<S3>/Sum of Elements'
   */
  rtb_ManualSwitch1 = tmp / InverterStartupControl_ConstB.Width;
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <InverterStartupControl_step+0x220>)
 8000f2e:	ed93 6b00 	vldr	d6, [r3]
 8000f32:	ed97 5b04 	vldr	d5, [r7, #16]
 8000f36:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f3a:	ed87 7b06 	vstr	d7, [r7, #24]

  /* ManualSwitch: '<S1>/Manual Switch' incorporates:
   *  Constant: '<S1>/Constant'
   */
  if (InverterStartupControl_P.ManualSwitch_CurrentSetting == 1) {
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <InverterStartupControl_step+0x218>)
 8000f40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10f      	bne.n	8000f68 <InverterStartupControl_step+0x224>
    tmp = InverterStartupControl_P.Constant_Value;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <InverterStartupControl_step+0x218>)
 8000f4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000f52:	e00d      	b.n	8000f70 <InverterStartupControl_step+0x22c>
 8000f54:	200001a8 	.word	0x200001a8
 8000f58:	200001e0 	.word	0x200001e0
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000178 	.word	0x20000178
 8000f64:	08009a60 	.word	0x08009a60
  } else {
    tmp = rtb_ManualSwitch1;
 8000f68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
   *  Outport: '<Root>/AMK_bDcOn_R'
   *  Outport: '<Root>/AMK_bEnable_R'
   *  Outport: '<Root>/AMK_bErrorReset_R'
   *  Outport: '<Root>/AMK_bInverterOn_R'
   */
  InverterStartupContr_LEFT_MOTOR(rtb_GOV_e_miCmd,
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <InverterStartupControl_step+0x358>)
 8000f72:	ed93 0b14 	vldr	d0, [r3, #80]	; 0x50
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <InverterStartupControl_step+0x358>)
 8000f78:	ed93 1b0c 	vldr	d1, [r3, #48]	; 0x30
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <InverterStartupControl_step+0x358>)
 8000f7e:	ed93 2b10 	vldr	d2, [r3, #64]	; 0x40
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <InverterStartupControl_step+0x358>)
 8000f84:	ed93 3b08 	vldr	d3, [r3, #32]
 8000f88:	4b44      	ldr	r3, [pc, #272]	; (800109c <InverterStartupControl_step+0x358>)
 8000f8a:	ed93 4b12 	vldr	d4, [r3, #72]	; 0x48
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <InverterStartupControl_step+0x358>)
 8000f90:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 8000f94:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f98:	eeb7 6bc7 	vcvt.f32.f64	s12, d7
    InverterStartupControl_U.AMK_bError_R,
    InverterStartupControl_U.AMK_bQuitDcOn_R,
    InverterStartupControl_U.AMK_bDcOn_R,
    InverterStartupControl_U.AMK_bQuitInverterOn_R,
    InverterStartupControl_U.AMK_bInverterOn_R, (real32_T)tmp, (real32_T)
    InverterStartupControl_P.Constant1_Value, (real32_T)
 8000f9c:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <InverterStartupControl_step+0x35c>)
 8000f9e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
  InverterStartupContr_LEFT_MOTOR(rtb_GOV_e_miCmd,
 8000fa2:	eef7 6bc7 	vcvt.f32.f64	s13, d7
    InverterStartupControl_P.Constant2_Value, &MI_motorStatus,
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <InverterStartupControl_step+0x35c>)
 8000fa8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
  InverterStartupContr_LEFT_MOTOR(rtb_GOV_e_miCmd,
 8000fac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb0:	f107 010a 	add.w	r1, r7, #10
 8000fb4:	7af8      	ldrb	r0, [r7, #11]
 8000fb6:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <InverterStartupControl_step+0x360>)
 8000fb8:	9305      	str	r3, [sp, #20]
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <InverterStartupControl_step+0x364>)
 8000fbc:	9304      	str	r3, [sp, #16]
 8000fbe:	4b3b      	ldr	r3, [pc, #236]	; (80010ac <InverterStartupControl_step+0x368>)
 8000fc0:	9303      	str	r3, [sp, #12]
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <InverterStartupControl_step+0x36c>)
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <InverterStartupControl_step+0x370>)
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <InverterStartupControl_step+0x374>)
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <InverterStartupControl_step+0x378>)
 8000fd0:	4a3b      	ldr	r2, [pc, #236]	; (80010c0 <InverterStartupControl_step+0x37c>)
 8000fd2:	eeb0 7a67 	vmov.f32	s14, s15
 8000fd6:	f7ff fc09 	bl	80007ec <InverterStartupContr_LEFT_MOTOR>
    &InverterStartupControl_DW.sf_RIGHT_MOTOR);

  /* ManualSwitch: '<S1>/Manual Switch1' incorporates:
   *  Constant: '<S1>/Constant5'
   */
  if (InverterStartupControl_P.ManualSwitch1_CurrentSetting == 1) {
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <InverterStartupControl_step+0x35c>)
 8000fdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d104      	bne.n	8000fee <InverterStartupControl_step+0x2aa>
    rtb_ManualSwitch1 = InverterStartupControl_P.Constant5_Value;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <InverterStartupControl_step+0x35c>)
 8000fe6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000fea:	e9c7 2306 	strd	r2, r3, [r7, #24]
   *  Outport: '<Root>/AMK_bDcOn_L'
   *  Outport: '<Root>/AMK_bEnable_L'
   *  Outport: '<Root>/AMK_bErrorReset_L'
   *  Outport: '<Root>/AMK_bInverterOn_L'
   */
  InverterStartupContr_LEFT_MOTOR(rtb_GOV_e_miCmd,
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <InverterStartupControl_step+0x358>)
 8000ff0:	ed93 0b32 	vldr	d0, [r3, #200]	; 0xc8
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <InverterStartupControl_step+0x358>)
 8000ff6:	ed93 1b2a 	vldr	d1, [r3, #168]	; 0xa8
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <InverterStartupControl_step+0x358>)
 8000ffc:	ed93 2b2e 	vldr	d2, [r3, #184]	; 0xb8
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <InverterStartupControl_step+0x358>)
 8001002:	ed93 3b26 	vldr	d3, [r3, #152]	; 0x98
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <InverterStartupControl_step+0x358>)
 8001008:	ed93 4b30 	vldr	d4, [r3, #192]	; 0xc0
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <InverterStartupControl_step+0x358>)
 800100e:	ed93 5b2c 	vldr	d5, [r3, #176]	; 0xb0
 8001012:	ed97 7b06 	vldr	d7, [r7, #24]
 8001016:	eeb7 6bc7 	vcvt.f32.f64	s12, d7
    InverterStartupControl_U.AMK_bError_L,
    InverterStartupControl_U.AMK_bQuitDcOn_L,
    InverterStartupControl_U.AMK_bDcOn_L,
    InverterStartupControl_U.AMK_bQuitInverterOn_L,
    InverterStartupControl_U.AMK_bInverterOn_L, (real32_T)rtb_ManualSwitch1,
    (real32_T)InverterStartupControl_P.Constant6_Value, (real32_T)
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <InverterStartupControl_step+0x35c>)
 800101c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
  InverterStartupContr_LEFT_MOTOR(rtb_GOV_e_miCmd,
 8001020:	eef7 6bc7 	vcvt.f32.f64	s13, d7
    InverterStartupControl_P.Constant7_Value, &MI_motorStatus,
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <InverterStartupControl_step+0x35c>)
 8001026:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
  InverterStartupContr_LEFT_MOTOR(rtb_GOV_e_miCmd,
 800102a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800102e:	f107 010a 	add.w	r1, r7, #10
 8001032:	7af8      	ldrb	r0, [r7, #11]
 8001034:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <InverterStartupControl_step+0x380>)
 8001036:	9305      	str	r3, [sp, #20]
 8001038:	4b23      	ldr	r3, [pc, #140]	; (80010c8 <InverterStartupControl_step+0x384>)
 800103a:	9304      	str	r3, [sp, #16]
 800103c:	4b23      	ldr	r3, [pc, #140]	; (80010cc <InverterStartupControl_step+0x388>)
 800103e:	9303      	str	r3, [sp, #12]
 8001040:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <InverterStartupControl_step+0x38c>)
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <InverterStartupControl_step+0x390>)
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <InverterStartupControl_step+0x394>)
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <InverterStartupControl_step+0x398>)
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <InverterStartupControl_step+0x39c>)
 8001050:	eeb0 7a67 	vmov.f32	s14, s15
 8001054:	f7ff fbca 	bl	80007ec <InverterStartupContr_LEFT_MOTOR>

  /* Update for S-Function (sfix_udelay): '<S3>/Tapped Delay' incorporates:
   *  Inport: '<Root>/APPS'
   */
  InverterStartupControl_DW.TappedDelay_X[0] =
    InverterStartupControl_DW.TappedDelay_X[1];
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 800105a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
  InverterStartupControl_DW.TappedDelay_X[0] =
 800105e:	4921      	ldr	r1, [pc, #132]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
  InverterStartupControl_DW.TappedDelay_X[1] =
    InverterStartupControl_DW.TappedDelay_X[2];
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 8001066:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  InverterStartupControl_DW.TappedDelay_X[1] =
 800106a:	491e      	ldr	r1, [pc, #120]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 800106c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  InverterStartupControl_DW.TappedDelay_X[2] =
    InverterStartupControl_DW.TappedDelay_X[3];
 8001070:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 8001072:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
  InverterStartupControl_DW.TappedDelay_X[2] =
 8001076:	491b      	ldr	r1, [pc, #108]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 8001078:	e9c1 2304 	strd	r2, r3, [r1, #16]
  InverterStartupControl_DW.TappedDelay_X[3] =
    InverterStartupControl_DW.TappedDelay_X[4];
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 800107e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  InverterStartupControl_DW.TappedDelay_X[3] =
 8001082:	4918      	ldr	r1, [pc, #96]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 8001084:	e9c1 2306 	strd	r2, r3, [r1, #24]
  InverterStartupControl_DW.TappedDelay_X[4] = InverterStartupControl_U.APPS;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <InverterStartupControl_step+0x358>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	4915      	ldr	r1, [pc, #84]	; (80010e4 <InverterStartupControl_step+0x3a0>)
 8001090:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8001094:	bf00      	nop
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001e0 	.word	0x200001e0
 80010a0:	20000000 	.word	0x20000000
 80010a4:	200001d2 	.word	0x200001d2
 80010a8:	200002e4 	.word	0x200002e4
 80010ac:	200002e0 	.word	0x200002e0
 80010b0:	200002dc 	.word	0x200002dc
 80010b4:	200002db 	.word	0x200002db
 80010b8:	200002da 	.word	0x200002da
 80010bc:	200002d9 	.word	0x200002d9
 80010c0:	200002d8 	.word	0x200002d8
 80010c4:	200001d8 	.word	0x200001d8
 80010c8:	200002f4 	.word	0x200002f4
 80010cc:	200002f0 	.word	0x200002f0
 80010d0:	200002ec 	.word	0x200002ec
 80010d4:	200002eb 	.word	0x200002eb
 80010d8:	200002ea 	.word	0x200002ea
 80010dc:	200002e9 	.word	0x200002e9
 80010e0:	200002e8 	.word	0x200002e8
 80010e4:	200001a8 	.word	0x200001a8

080010e8 <InverterStartupControl_initialize>:

/* Model initialize function */
void InverterStartupControl_initialize(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af04      	add	r7, sp, #16
  {
    int32_T i;
    MI_STATUSES MI_motorStatus;

    /* InitializeConditions for S-Function (sfix_udelay): '<S3>/Tapped Delay' */
    for (i = 0; i < 5; i++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	e00b      	b.n	800110c <InverterStartupControl_initialize+0x24>
      InverterStartupControl_DW.TappedDelay_X[i] =
        InverterStartupControl_P.TappedDelay_vinit;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <InverterStartupControl_initialize+0x6c>)
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
      InverterStartupControl_DW.TappedDelay_X[i] =
 80010fa:	4817      	ldr	r0, [pc, #92]	; (8001158 <InverterStartupControl_initialize+0x70>)
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	00c9      	lsls	r1, r1, #3
 8001100:	4401      	add	r1, r0
 8001102:	e9c1 2300 	strd	r2, r3, [r1]
    for (i = 0; i < 5; i++) {
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3301      	adds	r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b04      	cmp	r3, #4
 8001110:	ddf0      	ble.n	80010f4 <InverterStartupControl_initialize+0xc>
     *  Outport: '<Root>/AMK_bDcOn_R'
     *  Outport: '<Root>/AMK_bEnable_R'
     *  Outport: '<Root>/AMK_bErrorReset_R'
     *  Outport: '<Root>/AMK_bInverterOn_R'
     */
    InverterStartup_LEFT_MOTOR_Init(&MI_motorStatus,
 8001112:	1cf8      	adds	r0, r7, #3
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <InverterStartupControl_initialize+0x74>)
 8001116:	9303      	str	r3, [sp, #12]
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <InverterStartupControl_initialize+0x78>)
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <InverterStartupControl_initialize+0x7c>)
 800111e:	9301      	str	r3, [sp, #4]
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <InverterStartupControl_initialize+0x80>)
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <InverterStartupControl_initialize+0x84>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <InverterStartupControl_initialize+0x88>)
 8001128:	4912      	ldr	r1, [pc, #72]	; (8001174 <InverterStartupControl_initialize+0x8c>)
 800112a:	f7ff fb37 	bl	800079c <InverterStartup_LEFT_MOTOR_Init>
     *  Outport: '<Root>/AMK_bDcOn_L'
     *  Outport: '<Root>/AMK_bEnable_L'
     *  Outport: '<Root>/AMK_bErrorReset_L'
     *  Outport: '<Root>/AMK_bInverterOn_L'
     */
    InverterStartup_LEFT_MOTOR_Init(&MI_motorStatus,
 800112e:	1cf8      	adds	r0, r7, #3
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <InverterStartupControl_initialize+0x90>)
 8001132:	9303      	str	r3, [sp, #12]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <InverterStartupControl_initialize+0x94>)
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <InverterStartupControl_initialize+0x98>)
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <InverterStartupControl_initialize+0x9c>)
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <InverterStartupControl_initialize+0xa0>)
 8001142:	4a12      	ldr	r2, [pc, #72]	; (800118c <InverterStartupControl_initialize+0xa4>)
 8001144:	4912      	ldr	r1, [pc, #72]	; (8001190 <InverterStartupControl_initialize+0xa8>)
 8001146:	f7ff fb29 	bl	800079c <InverterStartup_LEFT_MOTOR_Init>
      &InverterStartupControl_Y.AMK_bErrorReset_L,
      &InverterStartupControl_Y.AMK_TargetVelocity_L,
      &InverterStartupControl_Y.AMK_TorqueLimitPositiv_L,
      &InverterStartupControl_Y.AMK_TorqueLimitNegativ_L);
  }
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000
 8001158:	200001a8 	.word	0x200001a8
 800115c:	200002e4 	.word	0x200002e4
 8001160:	200002e0 	.word	0x200002e0
 8001164:	200002dc 	.word	0x200002dc
 8001168:	200002db 	.word	0x200002db
 800116c:	200002da 	.word	0x200002da
 8001170:	200002d9 	.word	0x200002d9
 8001174:	200002d8 	.word	0x200002d8
 8001178:	200002f4 	.word	0x200002f4
 800117c:	200002f0 	.word	0x200002f0
 8001180:	200002ec 	.word	0x200002ec
 8001184:	200002eb 	.word	0x200002eb
 8001188:	200002ea 	.word	0x200002ea
 800118c:	200002e9 	.word	0x200002e9
 8001190:	200002e8 	.word	0x200002e8

08001194 <ADC_Channel_Select>:
 *
 * 			Example:
 * 			static uint8_t get_channel(parameters){...}
 */
static void ADC_Channel_Select(uint8_t channel,
		ADC_ChannelConfTypeDef *ChanConfig) {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
	switch (channel) {
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b12      	cmp	r3, #18
 80011a4:	d874      	bhi.n	8001290 <ADC_Channel_Select+0xfc>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <ADC_Channel_Select+0x18>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011f9 	.word	0x080011f9
 80011b0:	08001201 	.word	0x08001201
 80011b4:	08001209 	.word	0x08001209
 80011b8:	08001211 	.word	0x08001211
 80011bc:	08001219 	.word	0x08001219
 80011c0:	08001221 	.word	0x08001221
 80011c4:	08001229 	.word	0x08001229
 80011c8:	08001231 	.word	0x08001231
 80011cc:	08001239 	.word	0x08001239
 80011d0:	08001241 	.word	0x08001241
 80011d4:	08001249 	.word	0x08001249
 80011d8:	08001251 	.word	0x08001251
 80011dc:	08001259 	.word	0x08001259
 80011e0:	08001261 	.word	0x08001261
 80011e4:	08001269 	.word	0x08001269
 80011e8:	08001271 	.word	0x08001271
 80011ec:	08001279 	.word	0x08001279
 80011f0:	08001281 	.word	0x08001281
 80011f4:	08001289 	.word	0x08001289
	case (0):
		ChanConfig->Channel = ADC_CHANNEL_0;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
		return;
 80011fe:	e047      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (1):
		ChanConfig->Channel = ADC_CHANNEL_1;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
		return;
 8001206:	e043      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (2):
		ChanConfig->Channel = ADC_CHANNEL_2;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2202      	movs	r2, #2
 800120c:	601a      	str	r2, [r3, #0]
		return;
 800120e:	e03f      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (3):
		ChanConfig->Channel = ADC_CHANNEL_3;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2203      	movs	r2, #3
 8001214:	601a      	str	r2, [r3, #0]
		return;
 8001216:	e03b      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (4):
		ChanConfig->Channel = ADC_CHANNEL_4;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2204      	movs	r2, #4
 800121c:	601a      	str	r2, [r3, #0]
		return;
 800121e:	e037      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (5):
		ChanConfig->Channel = ADC_CHANNEL_5;
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2205      	movs	r2, #5
 8001224:	601a      	str	r2, [r3, #0]
		return;
 8001226:	e033      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (6):
		ChanConfig->Channel = ADC_CHANNEL_6;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2206      	movs	r2, #6
 800122c:	601a      	str	r2, [r3, #0]
		return;
 800122e:	e02f      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (7):
		ChanConfig->Channel = ADC_CHANNEL_7;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	2207      	movs	r2, #7
 8001234:	601a      	str	r2, [r3, #0]
		return;
 8001236:	e02b      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (8):
		ChanConfig->Channel = ADC_CHANNEL_8;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2208      	movs	r2, #8
 800123c:	601a      	str	r2, [r3, #0]
		return;
 800123e:	e027      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (9):
		ChanConfig->Channel = ADC_CHANNEL_9;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2209      	movs	r2, #9
 8001244:	601a      	str	r2, [r3, #0]
		return;
 8001246:	e023      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (10):
		ChanConfig->Channel = ADC_CHANNEL_10;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	220a      	movs	r2, #10
 800124c:	601a      	str	r2, [r3, #0]
		return;
 800124e:	e01f      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (11):
		ChanConfig->Channel = ADC_CHANNEL_11;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	220b      	movs	r2, #11
 8001254:	601a      	str	r2, [r3, #0]
		return;
 8001256:	e01b      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (12):
		ChanConfig->Channel = ADC_CHANNEL_12;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
		return;
 800125e:	e017      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (13):
		ChanConfig->Channel = ADC_CHANNEL_13;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	220d      	movs	r2, #13
 8001264:	601a      	str	r2, [r3, #0]
		return;
 8001266:	e013      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (14):
		ChanConfig->Channel = ADC_CHANNEL_14;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	220e      	movs	r2, #14
 800126c:	601a      	str	r2, [r3, #0]
		return;
 800126e:	e00f      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (15):
		ChanConfig->Channel = ADC_CHANNEL_15;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	220f      	movs	r2, #15
 8001274:	601a      	str	r2, [r3, #0]
		return;
 8001276:	e00b      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (16):
		ChanConfig->Channel = ADC_CHANNEL_16;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	2210      	movs	r2, #16
 800127c:	601a      	str	r2, [r3, #0]
		return;
 800127e:	e007      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (17):
		ChanConfig->Channel = ADC_CHANNEL_17;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	2211      	movs	r2, #17
 8001284:	601a      	str	r2, [r3, #0]
		return;
 8001286:	e003      	b.n	8001290 <ADC_Channel_Select+0xfc>
	case (18):
		ChanConfig->Channel = ADC_CHANNEL_18;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2212      	movs	r2, #18
 800128c:	601a      	str	r2, [r3, #0]
		return;
 800128e:	bf00      	nop
	}
}
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop

0800129c <ADC_Chan_Config>:
static void ADC_Chan_Config(ADC_HandleTypeDef *hadc, uint8_t channel) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	70fb      	strb	r3, [r7, #3]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]

	ADC_Channel_Select(channel, &sConfig);
 80012b6:	f107 0208 	add.w	r2, r7, #8
 80012ba:	78fb      	ldrb	r3, [r7, #3]
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff ff68 	bl	8001194 <ADC_Channel_Select>
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80012c8:	2302      	movs	r3, #2
 80012ca:	613b      	str	r3, [r7, #16]

	if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4619      	mov	r1, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f003 ffca 	bl	800526c <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <ADC_Chan_Config+0x46>
		Error_Handler();
 80012de:	f002 ff99 	bl	8004214 <Error_Handler>
	}
}
 80012e2:	bf00      	nop
 80012e4:	3718      	adds	r7, #24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <adc_instance_select>:

// adc_select sets correct adc instance
static ADC_Ret_et adc_instance_select(ADC_HandleTypeDef *hadc,
		uint8_t adc_number) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
	switch (adc_number) {
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d00e      	beq.n	800131c <adc_instance_select+0x30>
 80012fe:	2b03      	cmp	r3, #3
 8001300:	dc10      	bgt.n	8001324 <adc_instance_select+0x38>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d002      	beq.n	800130c <adc_instance_select+0x20>
 8001306:	2b02      	cmp	r3, #2
 8001308:	d004      	beq.n	8001314 <adc_instance_select+0x28>
 800130a:	e00b      	b.n	8001324 <adc_instance_select+0x38>
	case (1):
		hadc->Instance = ADC1;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <adc_instance_select+0x4c>)
 8001310:	601a      	str	r2, [r3, #0]
		break;
 8001312:	e009      	b.n	8001328 <adc_instance_select+0x3c>
	case (2):
		hadc->Instance = ADC2;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a09      	ldr	r2, [pc, #36]	; (800133c <adc_instance_select+0x50>)
 8001318:	601a      	str	r2, [r3, #0]
		break;
 800131a:	e005      	b.n	8001328 <adc_instance_select+0x3c>
	case (3):
		hadc->Instance = ADC3;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <adc_instance_select+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
		break;
 8001322:	e001      	b.n	8001328 <adc_instance_select+0x3c>
	default:
		return INVALID_ADC_NUM;
 8001324:	2302      	movs	r3, #2
 8001326:	e000      	b.n	800132a <adc_instance_select+0x3e>
	}

	return ADC_OK;
 8001328:	2301      	movs	r3, #1
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40012000 	.word	0x40012000
 800133c:	40012100 	.word	0x40012100
 8001340:	40012200 	.word	0x40012200

08001344 <adc_set_num_conversions>:

// adc_set_num_conversions sets and checks the number of conversions that an adc module will have to make
static ADC_Ret_et adc_set_num_conversions(ADC_HandleTypeDef *hadc,
		uint8_t num_channels) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	70fb      	strb	r3, [r7, #3]
	// Make sure the number of channels is valid
	if (num_channels <= 0 || num_channels > ADC_CHANNELS_PER_MODULE) {
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <adc_set_num_conversions+0x18>
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	2b10      	cmp	r3, #16
 800135a:	d901      	bls.n	8001360 <adc_set_num_conversions+0x1c>
		return INVALID_NUM_CHANNELS;
 800135c:	2303      	movs	r3, #3
 800135e:	e009      	b.n	8001374 <adc_set_num_conversions+0x30>
	}

	// More than one channel enable scan conversion
	if (num_channels >= 1) {
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <adc_set_num_conversions+0x28>
		hadc->Init.ScanConvMode = ENABLE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	611a      	str	r2, [r3, #16]
	}

	hadc->Init.NbrOfConversion = num_channels;
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	61da      	str	r2, [r3, #28]

	return ADC_OK;
 8001372:	2301      	movs	r3, #1
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <ADC_Init>:
}

/*----------PUBLIC FUNCTION DEFINITIONS----------*/

// ADC_Init initialized an ADC module
ADC_Ret_et ADC_Init(ADC_st *adc) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b098      	sub	sp, #96	; 0x60
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	ADC_Ret_et ret;

	// Sets the correct adc instance
	ret = adc_instance_select(adc->hadc, adc->adc_num);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	791b      	ldrb	r3, [r3, #4]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f7ff ffaa 	bl	80012ec <adc_instance_select>
 8001398:	4603      	mov	r3, r0
 800139a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (ret != ADC_OK) {
 800139e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d002      	beq.n	80013ac <ADC_Init+0x2c>
		return ret;
 80013a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013aa:	e067      	b.n	800147c <ADC_Init+0xfc>
	}

	// Sets the number of conversions (unsure if this function is even needed)
	ret = adc_set_num_conversions(adc->hadc, adc->num_channels);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	795b      	ldrb	r3, [r3, #5]
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f7ff ffc4 	bl	8001344 <adc_set_num_conversions>
 80013bc:	4603      	mov	r3, r0
 80013be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (ret != ADC_OK) {
 80013c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d002      	beq.n	80013d0 <ADC_Init+0x50>
		return ret;
 80013ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80013ce:	e055      	b.n	800147c <ADC_Init+0xfc>
	}

	// TODO: Make sure all channels passed are valid
	int check[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}; //to keep track of how many channels use each number
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2240      	movs	r2, #64	; 0x40
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 fecf 	bl	800917c <memset>
	for (int m = 0; m < adc->num_channels; m++){
 80013de:	2300      	movs	r3, #0
 80013e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80013e2:	e023      	b.n	800142c <ADC_Init+0xac>
			ADC_Channel_st channel = adc->channels[m];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6899      	ldr	r1, [r3, #8]
 80013e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013ea:	4613      	mov	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	18ca      	adds	r2, r1, r3
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80013fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			// check for valid channel #
			if (channel.channel_number > 16 || channel.channel_number < 0) return INVALID_CHANNEL_NUMBER;
 80013fe:	7a3b      	ldrb	r3, [r7, #8]
 8001400:	2b10      	cmp	r3, #16
 8001402:	d901      	bls.n	8001408 <ADC_Init+0x88>
 8001404:	2309      	movs	r3, #9
 8001406:	e039      	b.n	800147c <ADC_Init+0xfc>
			check[channel.channel_number-1] = check[channel.channel_number-1] + 1; //count number of channels using that number
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	3b01      	subs	r3, #1
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	3360      	adds	r3, #96	; 0x60
 8001410:	443b      	add	r3, r7
 8001412:	f853 2c4c 	ldr.w	r2, [r3, #-76]
 8001416:	7a3b      	ldrb	r3, [r7, #8]
 8001418:	3b01      	subs	r3, #1
 800141a:	3201      	adds	r2, #1
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	3360      	adds	r3, #96	; 0x60
 8001420:	443b      	add	r3, r7
 8001422:	f843 2c4c 	str.w	r2, [r3, #-76]
	for (int m = 0; m < adc->num_channels; m++){
 8001426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001428:	3301      	adds	r3, #1
 800142a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	795b      	ldrb	r3, [r3, #5]
 8001430:	461a      	mov	r2, r3
 8001432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001434:	4293      	cmp	r3, r2
 8001436:	dbd5      	blt.n	80013e4 <ADC_Init+0x64>
	}

	for (int m = 0; m < adc->num_channels; m++){ //check through array that kept track of how many channels are using each number (only should be 1 max)
 8001438:	2300      	movs	r3, #0
 800143a:	65bb      	str	r3, [r7, #88]	; 0x58
 800143c:	e00c      	b.n	8001458 <ADC_Init+0xd8>
		if (check[m] >=2) return DUPLICATE_CHANNELS;
 800143e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	3360      	adds	r3, #96	; 0x60
 8001444:	443b      	add	r3, r7
 8001446:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800144a:	2b01      	cmp	r3, #1
 800144c:	dd01      	ble.n	8001452 <ADC_Init+0xd2>
 800144e:	230a      	movs	r3, #10
 8001450:	e014      	b.n	800147c <ADC_Init+0xfc>
	for (int m = 0; m < adc->num_channels; m++){ //check through array that kept track of how many channels are using each number (only should be 1 max)
 8001452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001454:	3301      	adds	r3, #1
 8001456:	65bb      	str	r3, [r7, #88]	; 0x58
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	795b      	ldrb	r3, [r3, #5]
 800145c:	461a      	mov	r2, r3
 800145e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001460:	4293      	cmp	r3, r2
 8001462:	dbec      	blt.n	800143e <ADC_Init+0xbe>
	}


	if (HAL_ADC_Init(adc->hadc) != HAL_OK) {
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fd21 	bl	8004eb0 <HAL_ADC_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <ADC_Init+0xf8>
		return FAIL_ADC_INIT;
 8001474:	2304      	movs	r3, #4
 8001476:	e001      	b.n	800147c <ADC_Init+0xfc>
	}

	// Return enum type for the case that ADC_OK is true for debugging purposes
	return ret;
 8001478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800147c:	4618      	mov	r0, r3
 800147e:	3760      	adds	r7, #96	; 0x60
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <ADC_Scan>:

// ADC_Scan starts an ADC scan based on the given configurations
ADC_Ret_et ADC_Scan(ADC_st *adc) { // This scan function will loop through the channels, taking one reading per channel until all the channels buffers are full
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	static uint16_t max = 0;

	//get largest buffer
	static int largest_buffer = 0;
	if (largest_buffer == 0) {
 800148c:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <ADC_Scan+0x134>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d125      	bne.n	80014e0 <ADC_Scan+0x5c>
		for (int i = 0; i < adc->num_channels; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	e01c      	b.n	80014d4 <ADC_Scan+0x50>
			if (adc->channels[i].buffer_len > largest_buffer){
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6899      	ldr	r1, [r3, #8]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	885b      	ldrh	r3, [r3, #2]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <ADC_Scan+0x134>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dd0b      	ble.n	80014ce <ADC_Scan+0x4a>
				largest_buffer = adc->channels[i].buffer_len;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6899      	ldr	r1, [r3, #8]
 80014ba:	697a      	ldr	r2, [r7, #20]
 80014bc:	4613      	mov	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	885b      	ldrh	r3, [r3, #2]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <ADC_Scan+0x134>)
 80014cc:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < adc->num_channels; i++) {
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	3301      	adds	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	795b      	ldrb	r3, [r3, #5]
 80014d8:	461a      	mov	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	4293      	cmp	r3, r2
 80014de:	dbdc      	blt.n	800149a <ADC_Scan+0x16>
			}
		}
	}

	// fill buffers
	for (int k = 0; k < largest_buffer; k++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	e05d      	b.n	80015a2 <ADC_Scan+0x11e>
		for (int j = 0; j < adc->num_channels; j++) {
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	e051      	b.n	8001590 <ADC_Scan+0x10c>
			if (k < (adc->channels[j].buffer_len)) { // if counter < buffer length for this channel
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	885b      	ldrh	r3, [r3, #2]
 80014fe:	461a      	mov	r2, r3
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4293      	cmp	r3, r2
 8001504:	da40      	bge.n	8001588 <ADC_Scan+0x104>
				// record reading to the buffer
				ADC_Chan_Config(adc->hadc, adc->channels[j].channel_number);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6899      	ldr	r1, [r3, #8]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	f7ff febd 	bl	800129c <ADC_Chan_Config>
				HAL_ADC_Start(adc->hadc);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f003 fd06 	bl	8004f38 <HAL_ADC_Start>
				HAL_StatusTypeDef err = HAL_ADC_PollForConversion(adc->hadc,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001534:	4618      	mov	r0, r3
 8001536:	f003 fe01 	bl	800513c <HAL_ADC_PollForConversion>
 800153a:	4603      	mov	r3, r0
 800153c:	72fb      	strb	r3, [r7, #11]
						1000); // make sure to use err to produce a meaningful error if the pollforconversion fails
				if (err == HAL_TIMEOUT)
 800153e:	7afb      	ldrb	r3, [r7, #11]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d101      	bne.n	8001548 <ADC_Scan+0xc4>
					return ADC_TIMEOUT_REACHED;
 8001544:	2307      	movs	r3, #7
 8001546:	e032      	b.n	80015ae <ADC_Scan+0x12a>
				if (err != HAL_OK)
 8001548:	7afb      	ldrb	r3, [r7, #11]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <ADC_Scan+0xce>
					return ADC_READING_FAILED;
 800154e:	2306      	movs	r3, #6
 8001550:	e02d      	b.n	80015ae <ADC_Scan+0x12a>
				uint16_t raw = HAL_ADC_GetValue(adc->hadc); // getvalue gives a uint32, but we treat it as uint16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fe7b 	bl	8005252 <HAL_ADC_GetValue>
 800155c:	4603      	mov	r3, r0
 800155e:	813b      	strh	r3, [r7, #8]
				HAL_ADC_Stop(adc->hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fdb5 	bl	80050d4 <HAL_ADC_Stop>
				adc->channels[j].buffer[k] = raw; // store reading in buffer
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6899      	ldr	r1, [r3, #8]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	440b      	add	r3, r1
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	893a      	ldrh	r2, [r7, #8]
 8001584:	801a      	strh	r2, [r3, #0]
 8001586:	e000      	b.n	800158a <ADC_Scan+0x106>
			} else
				continue;
 8001588:	bf00      	nop
		for (int j = 0; j < adc->num_channels; j++) {
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3301      	adds	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	795b      	ldrb	r3, [r3, #5]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4293      	cmp	r3, r2
 800159a:	dba7      	blt.n	80014ec <ADC_Scan+0x68>
	for (int k = 0; k < largest_buffer; k++) {
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	3301      	adds	r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <ADC_Scan+0x134>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	db9c      	blt.n	80014e6 <ADC_Scan+0x62>
		}
	}
	return ADC_OK;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200002f8 	.word	0x200002f8

080015bc <Get_Single_Chan_Average>:

// Get_Single_Chan_Average returns the average reading of a channels buffer
uint16_t Get_Single_Chan_Average(ADC_st *adc, uint8_t channel) {
 80015bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c0:	b088      	sub	sp, #32
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	70fb      	strb	r3, [r7, #3]

	uint64_t total = 0;
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	f04f 0300 	mov.w	r3, #0
 80015d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	uint16_t buff_len;
	uint16_t *buff;

	// find the location of the channel we want to avg
	for (uint8_t i = 0; i < (adc->num_channels); i++) {
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
 80015da:	e04b      	b.n	8001674 <Get_Single_Chan_Average+0xb8>

		// Loop through the channels to find the desired channel
		if (adc->channels[i].channel_number == channel) {
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6899      	ldr	r1, [r3, #8]
 80015e0:	7dfa      	ldrb	r2, [r7, #23]
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	78fa      	ldrb	r2, [r7, #3]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d13c      	bne.n	800166e <Get_Single_Chan_Average+0xb2>

			//Get the length and values
			buff_len = adc->channels[i].buffer_len;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6899      	ldr	r1, [r3, #8]
 80015f8:	7dfa      	ldrb	r2, [r7, #23]
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	440b      	add	r3, r1
 8001604:	885b      	ldrh	r3, [r3, #2]
 8001606:	81fb      	strh	r3, [r7, #14]
			buff = adc->channels[i].buffer;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	7dfa      	ldrb	r2, [r7, #23]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	440b      	add	r3, r1
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60bb      	str	r3, [r7, #8]

			//Sum of values
			for (int i = 0; i < buff_len; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	e013      	b.n	800164a <Get_Single_Chan_Average+0x8e>
				total = total + buff[i];
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	68ba      	ldr	r2, [r7, #8]
 8001628:	4413      	add	r3, r2
 800162a:	881b      	ldrh	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	2200      	movs	r2, #0
 8001630:	461c      	mov	r4, r3
 8001632:	4615      	mov	r5, r2
 8001634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001638:	eb12 0804 	adds.w	r8, r2, r4
 800163c:	eb43 0905 	adc.w	r9, r3, r5
 8001640:	e9c7 8906 	strd	r8, r9, [r7, #24]
			for (int i = 0; i < buff_len; i++) {
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	3301      	adds	r3, #1
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	89fb      	ldrh	r3, [r7, #14]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbe7      	blt.n	8001622 <Get_Single_Chan_Average+0x66>
			}

			return total / buff_len;
 8001652:	89fb      	ldrh	r3, [r7, #14]
 8001654:	2200      	movs	r2, #0
 8001656:	469a      	mov	sl, r3
 8001658:	4693      	mov	fp, r2
 800165a:	4652      	mov	r2, sl
 800165c:	465b      	mov	r3, fp
 800165e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001662:	f7fe fef7 	bl	8000454 <__aeabi_uldivmod>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	b293      	uxth	r3, r2
 800166c:	e007      	b.n	800167e <Get_Single_Chan_Average+0xc2>
	for (uint8_t i = 0; i < (adc->num_channels); i++) {
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	3301      	adds	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	795b      	ldrb	r3, [r3, #5]
 8001678:	7dfa      	ldrb	r2, [r7, #23]
 800167a:	429a      	cmp	r2, r3
 800167c:	d3ae      	bcc.n	80015dc <Get_Single_Chan_Average+0x20>
		}
	}
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001688 <setInstance>:
	{8,	     250,    2,    CAN_BS1_13TQ,    CAN_BS2_2TQ},
	{8,      100,    5,    CAN_BS1_13TQ,    CAN_BS2_2TQ},
};


static TeCanALRet setInstance(CAN_HandleTypeDef* hcan, TeCanALInstance canNum){
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
	switch (canNum) {
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d00e      	beq.n	80016b8 <setInstance+0x30>
 800169a:	2b03      	cmp	r3, #3
 800169c:	dc10      	bgt.n	80016c0 <setInstance+0x38>
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d002      	beq.n	80016a8 <setInstance+0x20>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d004      	beq.n	80016b0 <setInstance+0x28>
 80016a6:	e00b      	b.n	80016c0 <setInstance+0x38>
	case CANAL_INST_CAN_1:
		hcan->Instance = CAN1;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <setInstance+0x50>)
 80016ac:	601a      	str	r2, [r3, #0]
		break;
 80016ae:	e00c      	b.n	80016ca <setInstance+0x42>
	case CANAL_INST_CAN_2:
		hcan->Instance = CAN2;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <setInstance+0x54>)
 80016b4:	601a      	str	r2, [r3, #0]
		break;
 80016b6:	e008      	b.n	80016ca <setInstance+0x42>
	case CANAL_INST_CAN_3:
		hcan->Instance = CAN3;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a09      	ldr	r2, [pc, #36]	; (80016e0 <setInstance+0x58>)
 80016bc:	601a      	str	r2, [r3, #0]
		break;
 80016be:	e004      	b.n	80016ca <setInstance+0x42>
	default:
		hcan->Instance = NULL;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
		return CANAL_UNSUPPORTED_INSTANCE;
 80016c6:	2304      	movs	r3, #4
 80016c8:	e000      	b.n	80016cc <setInstance+0x44>
	}

	return CANAL_OK;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40006400 	.word	0x40006400
 80016dc:	40006800 	.word	0x40006800
 80016e0:	40003400 	.word	0x40003400

080016e4 <setDefaults>:

static void setDefaults(CAN_HandleTypeDef* hcan) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	hcan->Init.TimeTriggeredMode = DISABLE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
	hcan->Init.AutoBusOff = ENABLE;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	765a      	strb	r2, [r3, #25]
	hcan->Init.AutoWakeUp = DISABLE;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	769a      	strb	r2, [r3, #26]
	hcan->Init.AutoRetransmission = DISABLE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	76da      	strb	r2, [r3, #27]
	hcan->Init.ReceiveFifoLocked = DISABLE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	771a      	strb	r2, [r3, #28]
	hcan->Init.TransmitFifoPriority = DISABLE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	775a      	strb	r2, [r3, #29]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <setTimingParams>:


static TeCanALRet setTimingParams(CAN_HandleTypeDef* hcan, TeCanALBaud baud) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	807b      	strh	r3, [r7, #2]
    uint8_t freq = (HAL_RCC_GetPCLK1Freq() / FREQ_MHZ);
 8001728:	f005 fe2a 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 800172c:	4603      	mov	r3, r0
 800172e:	4a29      	ldr	r2, [pc, #164]	; (80017d4 <setTimingParams+0xb8>)
 8001730:	fba2 2303 	umull	r2, r3, r2, r3
 8001734:	0c9b      	lsrs	r3, r3, #18
 8001736:	73bb      	strb	r3, [r7, #14]

    if (!IS_CANAL_BAUDRATE(baud)) return CANAL_UNSUPPORTED_BAUD;
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d00c      	beq.n	8001758 <setTimingParams+0x3c>
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	2bfa      	cmp	r3, #250	; 0xfa
 8001742:	d009      	beq.n	8001758 <setTimingParams+0x3c>
 8001744:	887b      	ldrh	r3, [r7, #2]
 8001746:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800174a:	d005      	beq.n	8001758 <setTimingParams+0x3c>
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001752:	d001      	beq.n	8001758 <setTimingParams+0x3c>
 8001754:	2305      	movs	r3, #5
 8001756:	e038      	b.n	80017ca <setTimingParams+0xae>

    for (uint8_t i = 0; i < NUM_BITRATE_ENTRIES; i++) {
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e031      	b.n	80017c2 <setTimingParams+0xa6>
        if (freq == CAN_BITRATE_TABLE[i].pclk1Mhz) {
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <setTimingParams+0xbc>)
 8001762:	011b      	lsls	r3, r3, #4
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	7bba      	ldrb	r2, [r7, #14]
 800176a:	429a      	cmp	r2, r3
 800176c:	d126      	bne.n	80017bc <setTimingParams+0xa0>
            if (baud == CAN_BITRATE_TABLE[i].baudKb){
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <setTimingParams+0xbc>)
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	4413      	add	r3, r2
 8001776:	3302      	adds	r3, #2
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	429a      	cmp	r2, r3
 800177e:	d11d      	bne.n	80017bc <setTimingParams+0xa0>
                hcan->Init.Prescaler  = CAN_BITRATE_TABLE[i].prescaler;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
 8001782:	4a15      	ldr	r2, [pc, #84]	; (80017d8 <setTimingParams+0xbc>)
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	4413      	add	r3, r2
 8001788:	3304      	adds	r3, #4
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	605a      	str	r2, [r3, #4]
                hcan->Init.TimeSeg1   = CAN_BITRATE_TABLE[i].seg1;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <setTimingParams+0xbc>)
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	4413      	add	r3, r2
 800179a:	3308      	adds	r3, #8
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	611a      	str	r2, [r3, #16]
                hcan->Init.TimeSeg2   = CAN_BITRATE_TABLE[i].seg2;
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <setTimingParams+0xbc>)
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	4413      	add	r3, r2
 80017aa:	330c      	adds	r3, #12
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	615a      	str	r2, [r3, #20]
                hcan->Init.SyncJumpWidth = DEFAULT_SYNC_JW;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]

                return CANAL_OK;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e006      	b.n	80017ca <setTimingParams+0xae>
    for (uint8_t i = 0; i < NUM_BITRATE_ENTRIES; i++) {
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	3301      	adds	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b07      	cmp	r3, #7
 80017c6:	d9ca      	bls.n	800175e <setTimingParams+0x42>
            }
        }
    }

    return CANAL_UNSUPPORTED_PCLK1_FREQ;
 80017c8:	2307      	movs	r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	08009a68 	.word	0x08009a68

080017dc <setMode>:

static TeCanALRet setMode(CAN_HandleTypeDef* hcan, TeCanALMode mode) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	if (!IS_CANAL_MODE(mode)) return CANAL_UNSUPPORTED_MODE;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d00d      	beq.n	8001808 <setMode+0x2c>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f2:	d009      	beq.n	8001808 <setMode+0x2c>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017fa:	d005      	beq.n	8001808 <setMode+0x2c>
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001802:	d001      	beq.n	8001808 <setMode+0x2c>
 8001804:	2306      	movs	r3, #6
 8001806:	e003      	b.n	8001810 <setMode+0x34>

	hcan->Init.Mode = mode;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	609a      	str	r2, [r3, #8]

	return CANAL_OK;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <setFilters>:

static TeCanALRet setFilters(CAN_HandleTypeDef* hcan) {
 800181c:	b5b0      	push	{r4, r5, r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	// TODO: Do we have any use for this?
	CAN_FilterTypeDef filterConfig = {
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <setFilters+0x40>)
 8001826:	f107 0408 	add.w	r4, r7, #8
 800182a:	461d      	mov	r5, r3
 800182c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800182e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001834:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001838:	e884 0003 	stmia.w	r4, {r0, r1}
		.FilterFIFOAssignment = DEFAULT_RX_FIFO,
		.FilterActivation = DEFAULT_FILTER_ACTIVATION,
		.SlaveStartFilterBank = DEFAULT_FILTER_SLAVE_START_BANK,
	};

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK){
 800183c:	f107 0308 	add.w	r3, r7, #8
 8001840:	4619      	mov	r1, r3
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f004 f85e 	bl	8005904 <HAL_CAN_ConfigFilter>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <setFilters+0x36>
		return CANAL_CONFIG_FILTER_FAILED;
 800184e:	230e      	movs	r3, #14
 8001850:	e000      	b.n	8001854 <setFilters+0x38>
	}

	return CANAL_OK;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3730      	adds	r7, #48	; 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	08009a30 	.word	0x08009a30

08001860 <CanAL_Init>:
*              PUBLIC FUNCTION DEFINITIONS
*********************************************************/

// Can_Init initializes CAN hardware and must be called with successful return
// before any other CAN functions
TeCanALRet CanAL_Init(TsCanAL* can) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	TeCanALRet ret = CANAL_OK;
 8001868:	2301      	movs	r3, #1
 800186a:	73fb      	strb	r3, [r7, #15]

	if (can == NULL) return CANAL_NULL_REF;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <CanAL_Init+0x16>
 8001872:	2302      	movs	r3, #2
 8001874:	e063      	b.n	800193e <CanAL_Init+0xde>

	if (can->hcan == NULL) return CANAL_CAN_HANDLE_NULL_REF;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <CanAL_Init+0x22>
 800187e:	2303      	movs	r3, #3
 8001880:	e05d      	b.n	800193e <CanAL_Init+0xde>

	if ((ret = setInstance(can->hcan, can->canNum)) != CANAL_OK) return ret;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7ff fefb 	bl	8001688 <setInstance>
 8001892:	4603      	mov	r3, r0
 8001894:	73fb      	strb	r3, [r7, #15]
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d001      	beq.n	80018a0 <CanAL_Init+0x40>
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	e04e      	b.n	800193e <CanAL_Init+0xde>

	if ((ret = setTimingParams(can->hcan, can->baud)) != CANAL_OK) return ret;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7ff ff36 	bl	800171c <setTimingParams>
 80018b0:	4603      	mov	r3, r0
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d001      	beq.n	80018be <CanAL_Init+0x5e>
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	e03f      	b.n	800193e <CanAL_Init+0xde>

	if ((ret = setMode(can->hcan, can->mode)) != CANAL_OK) return ret;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7ff ff87 	bl	80017dc <setMode>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d001      	beq.n	80018dc <CanAL_Init+0x7c>
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	e030      	b.n	800193e <CanAL_Init+0xde>

	setDefaults(can->hcan);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff feff 	bl	80016e4 <setDefaults>

	if (HAL_CAN_Init(can->hcan) != HAL_OK) return CANAL_INIT_FAILED;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f003 ff0e 	bl	800570c <HAL_CAN_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <CanAL_Init+0x9a>
 80018f6:	230c      	movs	r3, #12
 80018f8:	e021      	b.n	800193e <CanAL_Init+0xde>

	if ((ret = setFilters(can->hcan)) != CANAL_OK) return ret;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff8c 	bl	800181c <setFilters>
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	7bfb      	ldrb	r3, [r7, #15]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d001      	beq.n	8001912 <CanAL_Init+0xb2>
 800190e:	7bfb      	ldrb	r3, [r7, #15]
 8001910:	e015      	b.n	800193e <CanAL_Init+0xde>

	if (HAL_CAN_Start(can->hcan) != HAL_OK) return CANAL_START_FAILED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f004 f8e0 	bl	8005adc <HAL_CAN_Start>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <CanAL_Init+0xc6>
 8001922:	230d      	movs	r3, #13
 8001924:	e00b      	b.n	800193e <CanAL_Init+0xde>

	if (HAL_CAN_ActivateNotification(can->hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2102      	movs	r1, #2
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fafb 	bl	8005f28 <HAL_CAN_ActivateNotification>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <CanAL_Init+0xdc>
		!= HAL_OK) return CANAL_ERROR;
 8001938:	2310      	movs	r3, #16
 800193a:	e000      	b.n	800193e <CanAL_Init+0xde>

	return ret;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <CanAL_Receive>:



TeCanALRet CanAL_Receive(TsCanAL* can) {
 8001946:	b580      	push	{r7, lr}
 8001948:	b08e      	sub	sp, #56	; 0x38
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	TeCanALRet ret;
	CAN_RxHeaderTypeDef RxHeader = {0};
 800194e:	f107 0318 	add.w	r3, r7, #24
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	619a      	str	r2, [r3, #24]
	uint8_t RxData[8] = {0};
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
	uint32_t ID;

	if (can == NULL) return CANAL_NULL_REF;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <CanAL_Receive+0x2e>
 8001970:	2302      	movs	r3, #2
 8001972:	e033      	b.n	80019dc <CanAL_Receive+0x96>

	// Get raw message
	if (HAL_CAN_GetRxMessage(can->hcan, DEFAULT_RX_FIFO, &RxHeader, RxData) != HAL_OK) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6818      	ldr	r0, [r3, #0]
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	f107 0218 	add.w	r2, r7, #24
 8001980:	2100      	movs	r1, #0
 8001982:	f004 f9bf 	bl	8005d04 <HAL_CAN_GetRxMessage>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <CanAL_Receive+0x4a>
		return CANAL_GET_RXMESSAGE_FAILED;
 800198c:	230f      	movs	r3, #15
 800198e:	e025      	b.n	80019dc <CanAL_Receive+0x96>
	}

	// Message ID can either be standard or extended
	switch (RxHeader.IDE) {
 8001990:	6a3b      	ldr	r3, [r7, #32]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <CanAL_Receive+0x56>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <CanAL_Receive+0x5c>
 800199a:	e005      	b.n	80019a8 <CanAL_Receive+0x62>
		case CAN_ID_STD:
			ID = RxHeader.StdId;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	60fb      	str	r3, [r7, #12]
			break;
 80019a0:	e004      	b.n	80019ac <CanAL_Receive+0x66>
		case CAN_ID_EXT:
			ID = RxHeader.ExtId;
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	60fb      	str	r3, [r7, #12]
			break;
 80019a6:	e001      	b.n	80019ac <CanAL_Receive+0x66>
		default:
			return CANAL_UNKOWN_IDE;
 80019a8:	230b      	movs	r3, #11
 80019aa:	e017      	b.n	80019dc <CanAL_Receive+0x96>
	}

	if ((ret = UnmarshalBinary(&ID, RxData)) != CANAL_OK) return ret;
 80019ac:	f107 0210 	add.w	r2, r7, #16
 80019b0:	f107 030c 	add.w	r3, r7, #12
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 f908 	bl	8003bcc <UnmarshalBinary>
 80019bc:	4603      	mov	r3, r0
 80019be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80019c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d002      	beq.n	80019d0 <CanAL_Receive+0x8a>
 80019ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80019ce:	e005      	b.n	80019dc <CanAL_Receive+0x96>

	return Print_Message(&ID);
 80019d0:	f107 030c 	add.w	r3, r7, #12
 80019d4:	4618      	mov	r0, r3
 80019d6:	f002 f8a3 	bl	8003b20 <Print_Message>
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <CanAL_Transmit>:

TeCanALRet CanAL_Transmit(TsCanAL* can, TeMessageID ID) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08e      	sub	sp, #56	; 0x38
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxBuffer[8] = {0};
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
	uint32_t TxMailbox = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
	TeCanALRet ret;
	uint32_t data_len;

	if ((ret = GetTxDataLength(&ID, &data_len)) != CANAL_OK) return ret;
 80019fc:	f107 020c 	add.w	r2, r7, #12
 8001a00:	1cbb      	adds	r3, r7, #2
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 f8b1 	bl	8003b6c <GetTxDataLength>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d002      	beq.n	8001a1e <CanAL_Transmit+0x3a>
 8001a18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a1c:	e025      	b.n	8001a6a <CanAL_Transmit+0x86>

	TxHeader.DLC = data_len;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (IS_CAN_STDID(ID)) {
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a28:	d204      	bcs.n	8001a34 <CanAL_Transmit+0x50>
		TxHeader.IDE = CAN_ID_STD;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
		TxHeader.StdId = ID;
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	e003      	b.n	8001a3c <CanAL_Transmit+0x58>
	}
	else if(IS_CAN_EXTID(ID)) {
		TxHeader.IDE = CAN_ID_EXT;
 8001a34:	2304      	movs	r3, #4
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
		TxHeader.ExtId = ID;
 8001a38:	887b      	ldrh	r3, [r7, #2]
 8001a3a:	623b      	str	r3, [r7, #32]
	else {
		return CANAL_UNSUPPORTED_TX_MESSAGE;
	}

	// Data frame
	TxHeader.RTR = CAN_RTR_DATA;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	TxHeader.TransmitGlobalTime = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	MarshalBinary(&ID, TxBuffer);
 8001a46:	f107 0214 	add.w	r2, r7, #20
 8001a4a:	1cbb      	adds	r3, r7, #2
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 f8d6 	bl	8003c00 <MarshalBinary>

	HAL_CAN_AddTxMessage(can->hcan, &TxHeader, TxBuffer, &TxMailbox);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	f107 0214 	add.w	r2, r7, #20
 8001a60:	f107 011c 	add.w	r1, r7, #28
 8001a64:	f004 f87e 	bl	8005b64 <HAL_CAN_AddTxMessage>

	return CANAL_OK;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3738      	adds	r7, #56	; 0x38
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <getDataWordFromByteArray>:

/*********************************************************
 *                    HELPER FUNCTIONS
 *********************************************************/

static uint64_t getDataWordFromByteArray(uint8_t* rawData) {
 8001a72:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	uint64_t ret = 0;
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for (int8_t i = 7; i >= 0; i--) {
 8001a88:	2307      	movs	r3, #7
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e022      	b.n	8001ad4 <getDataWordFromByteArray+0x62>
		ret <<= 8;
 8001a8e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	020b      	lsls	r3, r1, #8
 8001a9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001aa0:	0202      	lsls	r2, r0, #8
 8001aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ret += rawData[i];
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	461c      	mov	r4, r3
 8001ab6:	4615      	mov	r5, r2
 8001ab8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001abc:	eb12 0804 	adds.w	r8, r2, r4
 8001ac0:	eb43 0905 	adc.w	r9, r3, r5
 8001ac4:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (int8_t i = 7; i >= 0; i--) {
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	73fb      	strb	r3, [r7, #15]
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	dad8      	bge.n	8001a8e <getDataWordFromByteArray+0x1c>
	}

	return ret;
 8001adc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001aec:	4770      	bx	lr

08001aee <setDataWordIntoByteArray>:

static void setDataWordIntoByteArray(uint64_t dataWord, uint8_t *dataOutput) {
 8001aee:	b480      	push	{r7}
 8001af0:	b087      	sub	sp, #28
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
	for (int8_t i = 0; i < 8; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	75fb      	strb	r3, [r7, #23]
 8001afe:	e017      	b.n	8001b30 <setDataWordIntoByteArray+0x42>
		dataOutput[i] = (uint8_t) (dataWord & CANAL_BIT_MASK(8));
 8001b00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	4413      	add	r3, r2
 8001b08:	7a3a      	ldrb	r2, [r7, #8]
 8001b0a:	701a      	strb	r2, [r3, #0]
		dataWord >>= 8;
 8001b0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	0a02      	lsrs	r2, r0, #8
 8001b1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001b1e:	0a0b      	lsrs	r3, r1, #8
 8001b20:	e9c7 2302 	strd	r2, r3, [r7, #8]
	for (int8_t i = 0; i < 8; i++) {
 8001b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	75fb      	strb	r3, [r7, #23]
 8001b30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b34:	2b07      	cmp	r3, #7
 8001b36:	dde3      	ble.n	8001b00 <setDataWordIntoByteArray+0x12>
	}
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <Unmarshal_AMK1_ActualValues2>:

/*********************************************************
 *                    CAN FUNCTIONS
 *********************************************************/
 
TeCanALRet Unmarshal_AMK1_ActualValues2(uint8_t *RxData) {
 8001b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b4c:	b088      	sub	sp, #32
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsAMK1_ActualValues2 temp;

	data = getDataWordFromByteArray(RxData);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff8d 	bl	8001a72 <getDataWordFromByteArray>
 8001b58:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
	//  Read raw bits
        temp.AMK_TempMotor = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8001b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b60:	f402 4a00 	and.w	sl, r2, #32768	; 0x8000
 8001b64:	f04f 0b00 	mov.w	fp, #0
 8001b68:	ea5a 030b 	orrs.w	r3, sl, fp
 8001b6c:	d008      	beq.n	8001b80 <Unmarshal_AMK1_ActualValues2+0x38>
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	425b      	negs	r3, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	425b      	negs	r3, r3
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7e:	e005      	b.n	8001b8c <Unmarshal_AMK1_ActualValues2+0x44>
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	ee07 3a90 	vmov	s15, r3
 8001b88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b8c:	edc7 7a02 	vstr	s15, [r7, #8]
            AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_START,
            AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_LENGTH),
            AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_LENGTH);
            
        temp.AMK_TempInverter = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8001b90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	0c02      	lsrs	r2, r0, #16
 8001b9e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ba2:	0c0b      	lsrs	r3, r1, #16
 8001ba4:	f402 4800 	and.w	r8, r2, #32768	; 0x8000
 8001ba8:	f04f 0900 	mov.w	r9, #0
 8001bac:	ea58 0309 	orrs.w	r3, r8, r9
 8001bb0:	d012      	beq.n	8001bd8 <Unmarshal_AMK1_ActualValues2+0x90>
 8001bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	0c02      	lsrs	r2, r0, #16
 8001bc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001bc4:	0c0b      	lsrs	r3, r1, #16
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	425b      	negs	r3, r3
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	425b      	negs	r3, r3
 8001bce:	ee07 3a90 	vmov	s15, r3
 8001bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd6:	e00f      	b.n	8001bf8 <Unmarshal_AMK1_ActualValues2+0xb0>
 8001bd8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	0c02      	lsrs	r2, r0, #16
 8001be6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001bea:	0c0b      	lsrs	r3, r1, #16
 8001bec:	4613      	mov	r3, r2
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf8:	edc7 7a03 	vstr	s15, [r7, #12]
            AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_START,
            AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_LENGTH),
            AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_LENGTH);
            
        temp.AMK_ErrorInfo = CANAL_GET_BITS(data,
 8001bfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	000a      	movs	r2, r1
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	b293      	uxth	r3, r2
 8001c0e:	823b      	strh	r3, [r7, #16]
            AMK1_ACTUALVALUES2_AMK_ERRORINFO_START,
            AMK1_ACTUALVALUES2_AMK_ERRORINFO_LENGTH);
            
        temp.AMK_TempIGBT = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8001c10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	0c0a      	lsrs	r2, r1, #16
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f402 4400 	and.w	r4, r2, #32768	; 0x8000
 8001c24:	2500      	movs	r5, #0
 8001c26:	ea54 0305 	orrs.w	r3, r4, r5
 8001c2a:	d010      	beq.n	8001c4e <Unmarshal_AMK1_ActualValues2+0x106>
 8001c2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	0c0a      	lsrs	r2, r1, #16
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	425b      	negs	r3, r3
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	425b      	negs	r3, r3
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4c:	e00d      	b.n	8001c6a <Unmarshal_AMK1_ActualValues2+0x122>
 8001c4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	0c0a      	lsrs	r2, r1, #16
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	4613      	mov	r3, r2
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	ee07 3a90 	vmov	s15, r3
 8001c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c6a:	edc7 7a05 	vstr	s15, [r7, #20]
            AMK1_ACTUALVALUES2_AMK_TEMPIGBT_START,
            AMK1_ACTUALVALUES2_AMK_TEMPIGBT_LENGTH),
            AMK1_ACTUALVALUES2_AMK_TEMPIGBT_LENGTH);
            
	//  Apply linear conversion
	temp.AMK_TempMotor = (temp.AMK_TempMotor
 8001c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_FACTOR)
 8001c76:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001cf0 <Unmarshal_AMK1_ActualValues2+0x1a8>
 8001c7a:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ AMK1_ACTUALVALUES2_AMK_TEMPMOTOR_OFFSET; 
 8001c7e:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8001cf8 <Unmarshal_AMK1_ActualValues2+0x1b0>
 8001c82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.AMK_TempMotor = (temp.AMK_TempMotor
 8001c8a:	edc7 7a02 	vstr	s15, [r7, #8]
            
	temp.AMK_TempInverter = (temp.AMK_TempInverter
 8001c8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c92:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_FACTOR)
 8001c96:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001cf0 <Unmarshal_AMK1_ActualValues2+0x1a8>
 8001c9a:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ AMK1_ACTUALVALUES2_AMK_TEMPINVERTER_OFFSET; 
 8001c9e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8001cf8 <Unmarshal_AMK1_ActualValues2+0x1b0>
 8001ca2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ca6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.AMK_TempInverter = (temp.AMK_TempInverter
 8001caa:	edc7 7a03 	vstr	s15, [r7, #12]
            
	temp.AMK_ErrorInfo = (temp.AMK_ErrorInfo
 8001cae:	8a3b      	ldrh	r3, [r7, #16]
 8001cb0:	823b      	strh	r3, [r7, #16]
			* AMK1_ACTUALVALUES2_AMK_ERRORINFO_FACTOR)
			+ AMK1_ACTUALVALUES2_AMK_ERRORINFO_OFFSET; 
            
	temp.AMK_TempIGBT = (temp.AMK_TempIGBT
 8001cb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* AMK1_ACTUALVALUES2_AMK_TEMPIGBT_FACTOR)
 8001cba:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001cf0 <Unmarshal_AMK1_ActualValues2+0x1a8>
 8001cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ AMK1_ACTUALVALUES2_AMK_TEMPIGBT_OFFSET; 
 8001cc2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001cf8 <Unmarshal_AMK1_ActualValues2+0x1b0>
 8001cc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.AMK_TempIGBT = (temp.AMK_TempIGBT
 8001cce:	edc7 7a05 	vstr	s15, [r7, #20]
            
	//  Writing to global struct instance
	AMK1_ActualValues2 = temp;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <Unmarshal_AMK1_ActualValues2+0x1b8>)
 8001cd4:	461c      	mov	r4, r3
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return CANAL_OK;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3720      	adds	r7, #32
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cec:	f3af 8000 	nop.w
 8001cf0:	9999999a 	.word	0x9999999a
 8001cf4:	3fb99999 	.word	0x3fb99999
	...
 8001d00:	2000030c 	.word	0x2000030c

08001d04 <Unmarshal_AMK1_ActualValues1>:
TeCanALRet Unmarshal_AMK1_ActualValues1(uint8_t *RxData) {
 8001d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d08:	b09a      	sub	sp, #104	; 0x68
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6478      	str	r0, [r7, #68]	; 0x44
	uint64_t data;
	TsAMK1_ActualValues1 temp;

	data = getDataWordFromByteArray(RxData);
 8001d0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001d10:	f7ff feaf 	bl	8001a72 <getDataWordFromByteArray>
 8001d14:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
    
	//  Read raw bits
        temp.AMK_bSystemReady = CANAL_GET_BITS(data,
 8001d18:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d1c:	f04f 0000 	mov.w	r0, #0
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	0a10      	lsrs	r0, r2, #8
 8001d26:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001d2a:	0a19      	lsrs	r1, r3, #8
 8001d2c:	f000 0401 	and.w	r4, r0, #1
 8001d30:	2500      	movs	r5, #0
 8001d32:	ea44 0305 	orr.w	r3, r4, r5
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_START,
            AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_LENGTH);
            
        temp.AMK_bError = CANAL_GET_BITS(data,
 8001d44:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d48:	f04f 0000 	mov.w	r0, #0
 8001d4c:	f04f 0100 	mov.w	r1, #0
 8001d50:	0a50      	lsrs	r0, r2, #9
 8001d52:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8001d56:	0a59      	lsrs	r1, r3, #9
 8001d58:	f000 0801 	and.w	r8, r0, #1
 8001d5c:	f04f 0900 	mov.w	r9, #0
 8001d60:	ea48 0309 	orr.w	r3, r8, r9
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            AMK1_ACTUALVALUES1_AMK_BERROR_START,
            AMK1_ACTUALVALUES1_AMK_BERROR_LENGTH);
            
        temp.AMK_bWarn = CANAL_GET_BITS(data,
 8001d72:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d76:	f04f 0000 	mov.w	r0, #0
 8001d7a:	f04f 0100 	mov.w	r1, #0
 8001d7e:	0a90      	lsrs	r0, r2, #10
 8001d80:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8001d84:	0a99      	lsrs	r1, r3, #10
 8001d86:	f000 0a01 	and.w	sl, r0, #1
 8001d8a:	f04f 0b00 	mov.w	fp, #0
 8001d8e:	ea4a 030b 	orr.w	r3, sl, fp
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	bf14      	ite	ne
 8001d96:	2301      	movne	r3, #1
 8001d98:	2300      	moveq	r3, #0
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            AMK1_ACTUALVALUES1_AMK_BWARN_START,
            AMK1_ACTUALVALUES1_AMK_BWARN_LENGTH);
            
        temp.AMK_bQuitDcOn = CANAL_GET_BITS(data,
 8001da0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001da4:	f04f 0000 	mov.w	r0, #0
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	0ad0      	lsrs	r0, r2, #11
 8001dae:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 8001db2:	0ad9      	lsrs	r1, r3, #11
 8001db4:	f000 0301 	and.w	r3, r0, #1
 8001db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dba:	2300      	movs	r3, #0
 8001dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dbe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf14      	ite	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	2300      	moveq	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            AMK1_ACTUALVALUES1_AMK_BQUITDCON_START,
            AMK1_ACTUALVALUES1_AMK_BQUITDCON_LENGTH);
            
        temp.AMK_bDcOn = CANAL_GET_BITS(data,
 8001dd4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001dd8:	f04f 0000 	mov.w	r0, #0
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	0b10      	lsrs	r0, r2, #12
 8001de2:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 8001de6:	0b19      	lsrs	r1, r3, #12
 8001de8:	f000 0301 	and.w	r3, r0, #1
 8001dec:	633b      	str	r3, [r7, #48]	; 0x30
 8001dee:	2300      	movs	r3, #0
 8001df0:	637b      	str	r3, [r7, #52]	; 0x34
 8001df2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001df6:	460b      	mov	r3, r1
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bf14      	ite	ne
 8001dfe:	2301      	movne	r3, #1
 8001e00:	2300      	moveq	r3, #0
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            AMK1_ACTUALVALUES1_AMK_BDCON_START,
            AMK1_ACTUALVALUES1_AMK_BDCON_LENGTH);
            
        temp.AMK_bQuitInverterOn = CANAL_GET_BITS(data,
 8001e08:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001e0c:	f04f 0000 	mov.w	r0, #0
 8001e10:	f04f 0100 	mov.w	r1, #0
 8001e14:	0b50      	lsrs	r0, r2, #13
 8001e16:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e1a:	0b59      	lsrs	r1, r3, #13
 8001e1c:	f000 0301 	and.w	r3, r0, #1
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e22:	2300      	movs	r3, #0
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e26:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_START,
            AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_LENGTH);
            
        temp.AMK_bInverterOn = CANAL_GET_BITS(data,
 8001e3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	0b82      	lsrs	r2, r0, #14
 8001e4a:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8001e4e:	0b8b      	lsrs	r3, r1, #14
 8001e50:	f002 0301 	and.w	r3, r2, #1
 8001e54:	623b      	str	r3, [r7, #32]
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
 8001e5a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4313      	orrs	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bf14      	ite	ne
 8001e66:	2301      	movne	r3, #1
 8001e68:	2300      	moveq	r3, #0
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            AMK1_ACTUALVALUES1_AMK_BINVERTERON_START,
            AMK1_ACTUALVALUES1_AMK_BINVERTERON_LENGTH);
            
        temp.AMK_bDerating = CANAL_GET_BITS(data,
 8001e70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	0bc2      	lsrs	r2, r0, #15
 8001e7e:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001e82:	0bcb      	lsrs	r3, r1, #15
 8001e84:	f002 0301 	and.w	r3, r2, #1
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001e92:	460b      	mov	r3, r1
 8001e94:	4313      	orrs	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            AMK1_ACTUALVALUES1_AMK_BDERATING_START,
            AMK1_ACTUALVALUES1_AMK_BDERATING_LENGTH);
            
        temp.AMK_ActualVelocity = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8001ea4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	0c02      	lsrs	r2, r0, #16
 8001eb2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001eb6:	0c0b      	lsrs	r3, r1, #16
 8001eb8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	d012      	beq.n	8001ef2 <Unmarshal_AMK1_ActualValues1+0x1ee>
 8001ecc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	0c02      	lsrs	r2, r0, #16
 8001eda:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001ede:	0c0b      	lsrs	r3, r1, #16
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	425b      	negs	r3, r3
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef0:	e00f      	b.n	8001f12 <Unmarshal_AMK1_ActualValues1+0x20e>
 8001ef2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	0c02      	lsrs	r2, r0, #16
 8001f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001f04:	0c0b      	lsrs	r3, r1, #16
 8001f06:	4613      	mov	r3, r2
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f12:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_START,
            AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_LENGTH),
            AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_LENGTH);
            
        temp.AMK_TorqueCurrent = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8001f16:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	000a      	movs	r2, r1
 8001f24:	2300      	movs	r3, #0
 8001f26:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f34:	460b      	mov	r3, r1
 8001f36:	4313      	orrs	r3, r2
 8001f38:	d010      	beq.n	8001f5c <Unmarshal_AMK1_ActualValues1+0x258>
 8001f3a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f3e:	f04f 0200 	mov.w	r2, #0
 8001f42:	f04f 0300 	mov.w	r3, #0
 8001f46:	000a      	movs	r2, r1
 8001f48:	2300      	movs	r3, #0
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	425b      	negs	r3, r3
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f5a:	e00d      	b.n	8001f78 <Unmarshal_AMK1_ActualValues1+0x274>
 8001f5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	000a      	movs	r2, r1
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	ee07 3a90 	vmov	s15, r3
 8001f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_START,
            AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_LENGTH),
            AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_LENGTH);
            
        temp.AMK_MagnetizingCurrent = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8001f7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001f80:	f04f 0200 	mov.w	r2, #0
 8001f84:	f04f 0300 	mov.w	r3, #0
 8001f88:	0c0a      	lsrs	r2, r1, #16
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8001f90:	603b      	str	r3, [r7, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	607b      	str	r3, [r7, #4]
 8001f96:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d010      	beq.n	8001fc2 <Unmarshal_AMK1_ActualValues1+0x2be>
 8001fa0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	0c0a      	lsrs	r2, r1, #16
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	425b      	negs	r3, r3
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	425b      	negs	r3, r3
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc0:	e00d      	b.n	8001fde <Unmarshal_AMK1_ActualValues1+0x2da>
 8001fc2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	0c0a      	lsrs	r2, r1, #16
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fde:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_START,
            AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_LENGTH),
            AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_LENGTH);
            
	//  Apply linear conversion
	temp.AMK_bSystemReady = (temp.AMK_bSystemReady
 8001fe2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
			* AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BSYSTEMREADY_OFFSET; 
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf14      	ite	ne
 8001fea:	2301      	movne	r3, #1
 8001fec:	2300      	moveq	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
	temp.AMK_bSystemReady = (temp.AMK_bSystemReady
 8001ff0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            
	temp.AMK_bError = (temp.AMK_bError
 8001ff4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
			* AMK1_ACTUALVALUES1_AMK_BERROR_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BERROR_OFFSET; 
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
	temp.AMK_bError = (temp.AMK_bError
 8002002:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            
	temp.AMK_bWarn = (temp.AMK_bWarn
 8002006:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
			* AMK1_ACTUALVALUES1_AMK_BWARN_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BWARN_OFFSET; 
 800200a:	2b00      	cmp	r3, #0
 800200c:	bf14      	ite	ne
 800200e:	2301      	movne	r3, #1
 8002010:	2300      	moveq	r3, #0
 8002012:	b2db      	uxtb	r3, r3
	temp.AMK_bWarn = (temp.AMK_bWarn
 8002014:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            
	temp.AMK_bQuitDcOn = (temp.AMK_bQuitDcOn
 8002018:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
			* AMK1_ACTUALVALUES1_AMK_BQUITDCON_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BQUITDCON_OFFSET; 
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
	temp.AMK_bQuitDcOn = (temp.AMK_bQuitDcOn
 8002026:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 800202a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
			* AMK1_ACTUALVALUES1_AMK_BDCON_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BDCON_OFFSET; 
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 8002038:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            
	temp.AMK_bQuitInverterOn = (temp.AMK_bQuitInverterOn
 800203c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
			* AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BQUITINVERTERON_OFFSET; 
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
	temp.AMK_bQuitInverterOn = (temp.AMK_bQuitInverterOn
 800204a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 800204e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
			* AMK1_ACTUALVALUES1_AMK_BINVERTERON_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BINVERTERON_OFFSET; 
 8002052:	2b00      	cmp	r3, #0
 8002054:	bf14      	ite	ne
 8002056:	2301      	movne	r3, #1
 8002058:	2300      	moveq	r3, #0
 800205a:	b2db      	uxtb	r3, r3
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 800205c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            
	temp.AMK_bDerating = (temp.AMK_bDerating
 8002060:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
			* AMK1_ACTUALVALUES1_AMK_BDERATING_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_BDERATING_OFFSET; 
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
	temp.AMK_bDerating = (temp.AMK_bDerating
 800206e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            
	temp.AMK_ActualVelocity = (temp.AMK_ActualVelocity
 8002072:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
			* AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_ACTUALVELOCITY_OFFSET; 
 8002076:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80020c0 <Unmarshal_AMK1_ActualValues1+0x3bc>
 800207a:	ee77 7a87 	vadd.f32	s15, s15, s14
	temp.AMK_ActualVelocity = (temp.AMK_ActualVelocity
 800207e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            
	temp.AMK_TorqueCurrent = (temp.AMK_TorqueCurrent
 8002082:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
			* AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_TORQUECURRENT_OFFSET; 
 8002086:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80020c0 <Unmarshal_AMK1_ActualValues1+0x3bc>
 800208a:	ee77 7a87 	vadd.f32	s15, s15, s14
	temp.AMK_TorqueCurrent = (temp.AMK_TorqueCurrent
 800208e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            
	temp.AMK_MagnetizingCurrent = (temp.AMK_MagnetizingCurrent
 8002092:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
			* AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_FACTOR)
			+ AMK1_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_OFFSET; 
 8002096:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80020c0 <Unmarshal_AMK1_ActualValues1+0x3bc>
 800209a:	ee77 7a87 	vadd.f32	s15, s15, s14
	temp.AMK_MagnetizingCurrent = (temp.AMK_MagnetizingCurrent
 800209e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            
	//  Writing to global struct instance
	AMK1_ActualValues1 = temp;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <Unmarshal_AMK1_ActualValues1+0x3c0>)
 80020a4:	461d      	mov	r5, r3
 80020a6:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80020aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	602b      	str	r3, [r5, #0]

	return CANAL_OK;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3768      	adds	r7, #104	; 0x68
 80020b8:	46bd      	mov	sp, r7
 80020ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020be:	bf00      	nop
 80020c0:	00000000 	.word	0x00000000
 80020c4:	2000031c 	.word	0x2000031c

080020c8 <Unmarshal_AMK0_ActualValues1>:
TeCanALRet Unmarshal_AMK0_ActualValues1(uint8_t *RxData) {
 80020c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020cc:	b09a      	sub	sp, #104	; 0x68
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6478      	str	r0, [r7, #68]	; 0x44
	uint64_t data;
	TsAMK0_ActualValues1 temp;

	data = getDataWordFromByteArray(RxData);
 80020d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80020d4:	f7ff fccd 	bl	8001a72 <getDataWordFromByteArray>
 80020d8:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
    
	//  Read raw bits
        temp.AMK_bSystemReady = CANAL_GET_BITS(data,
 80020dc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020e0:	f04f 0000 	mov.w	r0, #0
 80020e4:	f04f 0100 	mov.w	r1, #0
 80020e8:	0a10      	lsrs	r0, r2, #8
 80020ea:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80020ee:	0a19      	lsrs	r1, r3, #8
 80020f0:	f000 0401 	and.w	r4, r0, #1
 80020f4:	2500      	movs	r5, #0
 80020f6:	ea44 0305 	orr.w	r3, r4, r5
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf14      	ite	ne
 80020fe:	2301      	movne	r3, #1
 8002100:	2300      	moveq	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_START,
            AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_LENGTH);
            
        temp.AMK_bError = CANAL_GET_BITS(data,
 8002108:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800210c:	f04f 0000 	mov.w	r0, #0
 8002110:	f04f 0100 	mov.w	r1, #0
 8002114:	0a50      	lsrs	r0, r2, #9
 8002116:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800211a:	0a59      	lsrs	r1, r3, #9
 800211c:	f000 0801 	and.w	r8, r0, #1
 8002120:	f04f 0900 	mov.w	r9, #0
 8002124:	ea48 0309 	orr.w	r3, r8, r9
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            AMK0_ACTUALVALUES1_AMK_BERROR_START,
            AMK0_ACTUALVALUES1_AMK_BERROR_LENGTH);
            
        temp.AMK_bWarn = CANAL_GET_BITS(data,
 8002136:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800213a:	f04f 0000 	mov.w	r0, #0
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	0a90      	lsrs	r0, r2, #10
 8002144:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8002148:	0a99      	lsrs	r1, r3, #10
 800214a:	f000 0a01 	and.w	sl, r0, #1
 800214e:	f04f 0b00 	mov.w	fp, #0
 8002152:	ea4a 030b 	orr.w	r3, sl, fp
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            AMK0_ACTUALVALUES1_AMK_BWARN_START,
            AMK0_ACTUALVALUES1_AMK_BWARN_LENGTH);
            
        temp.AMK_bQuitDcOn = CANAL_GET_BITS(data,
 8002164:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0ad0      	lsrs	r0, r2, #11
 8002172:	ea40 5043 	orr.w	r0, r0, r3, lsl #21
 8002176:	0ad9      	lsrs	r1, r3, #11
 8002178:	f000 0301 	and.w	r3, r0, #1
 800217c:	63bb      	str	r3, [r7, #56]	; 0x38
 800217e:	2300      	movs	r3, #0
 8002180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002182:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002186:	460b      	mov	r3, r1
 8002188:	4313      	orrs	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf14      	ite	ne
 800218e:	2301      	movne	r3, #1
 8002190:	2300      	moveq	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            AMK0_ACTUALVALUES1_AMK_BQUITDCON_START,
            AMK0_ACTUALVALUES1_AMK_BQUITDCON_LENGTH);
            
        temp.AMK_bDcOn = CANAL_GET_BITS(data,
 8002198:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800219c:	f04f 0000 	mov.w	r0, #0
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	0b10      	lsrs	r0, r2, #12
 80021a6:	ea40 5003 	orr.w	r0, r0, r3, lsl #20
 80021aa:	0b19      	lsrs	r1, r3, #12
 80021ac:	f000 0301 	and.w	r3, r0, #1
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	2300      	movs	r3, #0
 80021b4:	637b      	str	r3, [r7, #52]	; 0x34
 80021b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80021ba:	460b      	mov	r3, r1
 80021bc:	4313      	orrs	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            AMK0_ACTUALVALUES1_AMK_BDCON_START,
            AMK0_ACTUALVALUES1_AMK_BDCON_LENGTH);
            
        temp.AMK_bQuitInverterOn = CANAL_GET_BITS(data,
 80021cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80021d0:	f04f 0000 	mov.w	r0, #0
 80021d4:	f04f 0100 	mov.w	r1, #0
 80021d8:	0b50      	lsrs	r0, r2, #13
 80021da:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80021de:	0b59      	lsrs	r1, r3, #13
 80021e0:	f000 0301 	and.w	r3, r0, #1
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e6:	2300      	movs	r3, #0
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ea:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80021ee:	460b      	mov	r3, r1
 80021f0:	4313      	orrs	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_START,
            AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_LENGTH);
            
        temp.AMK_bInverterOn = CANAL_GET_BITS(data,
 8002200:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	0b82      	lsrs	r2, r0, #14
 800220e:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002212:	0b8b      	lsrs	r3, r1, #14
 8002214:	f002 0301 	and.w	r3, r2, #1
 8002218:	623b      	str	r3, [r7, #32]
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
 800221e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002222:	460b      	mov	r3, r1
 8002224:	4313      	orrs	r3, r2
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            AMK0_ACTUALVALUES1_AMK_BINVERTERON_START,
            AMK0_ACTUALVALUES1_AMK_BINVERTERON_LENGTH);
            
        temp.AMK_bDerating = CANAL_GET_BITS(data,
 8002234:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	0bc2      	lsrs	r2, r0, #15
 8002242:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8002246:	0bcb      	lsrs	r3, r1, #15
 8002248:	f002 0301 	and.w	r3, r2, #1
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002256:	460b      	mov	r3, r1
 8002258:	4313      	orrs	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            AMK0_ACTUALVALUES1_AMK_BDERATING_START,
            AMK0_ACTUALVALUES1_AMK_BDERATING_LENGTH);
            
        temp.AMK_ActualVelocity = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8002268:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	0c02      	lsrs	r2, r0, #16
 8002276:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800227a:	0c0b      	lsrs	r3, r1, #16
 800227c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800228a:	460b      	mov	r3, r1
 800228c:	4313      	orrs	r3, r2
 800228e:	d012      	beq.n	80022b6 <Unmarshal_AMK0_ActualValues1+0x1ee>
 8002290:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	0c02      	lsrs	r2, r0, #16
 800229e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022a2:	0c0b      	lsrs	r3, r1, #16
 80022a4:	4613      	mov	r3, r2
 80022a6:	425b      	negs	r3, r3
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	425b      	negs	r3, r3
 80022ac:	ee07 3a90 	vmov	s15, r3
 80022b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022b4:	e00f      	b.n	80022d6 <Unmarshal_AMK0_ActualValues1+0x20e>
 80022b6:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	0c02      	lsrs	r2, r0, #16
 80022c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022c8:	0c0b      	lsrs	r3, r1, #16
 80022ca:	4613      	mov	r3, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	ee07 3a90 	vmov	s15, r3
 80022d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_START,
            AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_LENGTH),
            AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_LENGTH);
            
        temp.AMK_TorqueCurrent = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 80022da:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	000a      	movs	r2, r1
 80022e8:	2300      	movs	r3, #0
 80022ea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022f8:	460b      	mov	r3, r1
 80022fa:	4313      	orrs	r3, r2
 80022fc:	d010      	beq.n	8002320 <Unmarshal_AMK0_ActualValues1+0x258>
 80022fe:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	000a      	movs	r2, r1
 800230c:	2300      	movs	r3, #0
 800230e:	4613      	mov	r3, r2
 8002310:	425b      	negs	r3, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	425b      	negs	r3, r3
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231e:	e00d      	b.n	800233c <Unmarshal_AMK0_ActualValues1+0x274>
 8002320:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	f04f 0300 	mov.w	r3, #0
 800232c:	000a      	movs	r2, r1
 800232e:	2300      	movs	r3, #0
 8002330:	4613      	mov	r3, r2
 8002332:	b29b      	uxth	r3, r3
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_START,
            AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_LENGTH),
            AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_LENGTH);
            
        temp.AMK_MagnetizingCurrent = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8002340:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	0c0a      	lsrs	r2, r1, #16
 800234e:	2300      	movs	r3, #0
 8002350:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002354:	603b      	str	r3, [r7, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800235e:	460b      	mov	r3, r1
 8002360:	4313      	orrs	r3, r2
 8002362:	d010      	beq.n	8002386 <Unmarshal_AMK0_ActualValues1+0x2be>
 8002364:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	0c0a      	lsrs	r2, r1, #16
 8002372:	2300      	movs	r3, #0
 8002374:	4613      	mov	r3, r2
 8002376:	425b      	negs	r3, r3
 8002378:	b29b      	uxth	r3, r3
 800237a:	425b      	negs	r3, r3
 800237c:	ee07 3a90 	vmov	s15, r3
 8002380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002384:	e00d      	b.n	80023a2 <Unmarshal_AMK0_ActualValues1+0x2da>
 8002386:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800238a:	f04f 0200 	mov.w	r2, #0
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	0c0a      	lsrs	r2, r1, #16
 8002394:	2300      	movs	r3, #0
 8002396:	4613      	mov	r3, r2
 8002398:	b29b      	uxth	r3, r3
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_START,
            AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_LENGTH),
            AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_LENGTH);
            
	//  Apply linear conversion
	temp.AMK_bSystemReady = (temp.AMK_bSystemReady
 80023a6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
			* AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BSYSTEMREADY_OFFSET; 
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bf14      	ite	ne
 80023ae:	2301      	movne	r3, #1
 80023b0:	2300      	moveq	r3, #0
 80023b2:	b2db      	uxtb	r3, r3
	temp.AMK_bSystemReady = (temp.AMK_bSystemReady
 80023b4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            
	temp.AMK_bError = (temp.AMK_bError
 80023b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
			* AMK0_ACTUALVALUES1_AMK_BERROR_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BERROR_OFFSET; 
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
	temp.AMK_bError = (temp.AMK_bError
 80023c6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
            
	temp.AMK_bWarn = (temp.AMK_bWarn
 80023ca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
			* AMK0_ACTUALVALUES1_AMK_BWARN_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BWARN_OFFSET; 
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
	temp.AMK_bWarn = (temp.AMK_bWarn
 80023d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
            
	temp.AMK_bQuitDcOn = (temp.AMK_bQuitDcOn
 80023dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
			* AMK0_ACTUALVALUES1_AMK_BQUITDCON_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BQUITDCON_OFFSET; 
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
	temp.AMK_bQuitDcOn = (temp.AMK_bQuitDcOn
 80023ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 80023ee:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
			* AMK0_ACTUALVALUES1_AMK_BDCON_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BDCON_OFFSET; 
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	bf14      	ite	ne
 80023f6:	2301      	movne	r3, #1
 80023f8:	2300      	moveq	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 80023fc:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
            
	temp.AMK_bQuitInverterOn = (temp.AMK_bQuitInverterOn
 8002400:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
			* AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BQUITINVERTERON_OFFSET; 
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
	temp.AMK_bQuitInverterOn = (temp.AMK_bQuitInverterOn
 800240e:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
            
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 8002412:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
			* AMK0_ACTUALVALUES1_AMK_BINVERTERON_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BINVERTERON_OFFSET; 
 8002416:	2b00      	cmp	r3, #0
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 8002420:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
            
	temp.AMK_bDerating = (temp.AMK_bDerating
 8002424:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
			* AMK0_ACTUALVALUES1_AMK_BDERATING_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_BDERATING_OFFSET; 
 8002428:	2b00      	cmp	r3, #0
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
	temp.AMK_bDerating = (temp.AMK_bDerating
 8002432:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            
	temp.AMK_ActualVelocity = (temp.AMK_ActualVelocity
 8002436:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
			* AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_ACTUALVELOCITY_OFFSET; 
 800243a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002484 <Unmarshal_AMK0_ActualValues1+0x3bc>
 800243e:	ee77 7a87 	vadd.f32	s15, s15, s14
	temp.AMK_ActualVelocity = (temp.AMK_ActualVelocity
 8002442:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
            
	temp.AMK_TorqueCurrent = (temp.AMK_TorqueCurrent
 8002446:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
			* AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_TORQUECURRENT_OFFSET; 
 800244a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002484 <Unmarshal_AMK0_ActualValues1+0x3bc>
 800244e:	ee77 7a87 	vadd.f32	s15, s15, s14
	temp.AMK_TorqueCurrent = (temp.AMK_TorqueCurrent
 8002452:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
            
	temp.AMK_MagnetizingCurrent = (temp.AMK_MagnetizingCurrent
 8002456:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
			* AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_FACTOR)
			+ AMK0_ACTUALVALUES1_AMK_MAGNETIZINGCURRENT_OFFSET; 
 800245a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002484 <Unmarshal_AMK0_ActualValues1+0x3bc>
 800245e:	ee77 7a87 	vadd.f32	s15, s15, s14
	temp.AMK_MagnetizingCurrent = (temp.AMK_MagnetizingCurrent
 8002462:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
            
	//  Writing to global struct instance
	AMK0_ActualValues1 = temp;
 8002466:	4b08      	ldr	r3, [pc, #32]	; (8002488 <Unmarshal_AMK0_ActualValues1+0x3c0>)
 8002468:	461d      	mov	r5, r3
 800246a:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800246e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	602b      	str	r3, [r5, #0]

	return CANAL_OK;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3768      	adds	r7, #104	; 0x68
 800247c:	46bd      	mov	sp, r7
 800247e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002482:	bf00      	nop
 8002484:	00000000 	.word	0x00000000
 8002488:	20000330 	.word	0x20000330
 800248c:	00000000 	.word	0x00000000

08002490 <Unmarshal_AMK0_ActualValues2>:
TeCanALRet Unmarshal_AMK0_ActualValues2(uint8_t *RxData) {
 8002490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002494:	b088      	sub	sp, #32
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsAMK0_ActualValues2 temp;

	data = getDataWordFromByteArray(RxData);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fae9 	bl	8001a72 <getDataWordFromByteArray>
 80024a0:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
	//  Read raw bits
        temp.AMK_TempMotor = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 80024a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024a8:	f402 4a00 	and.w	sl, r2, #32768	; 0x8000
 80024ac:	f04f 0b00 	mov.w	fp, #0
 80024b0:	ea5a 030b 	orrs.w	r3, sl, fp
 80024b4:	d008      	beq.n	80024c8 <Unmarshal_AMK0_ActualValues2+0x38>
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	425b      	negs	r3, r3
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	425b      	negs	r3, r3
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c6:	e005      	b.n	80024d4 <Unmarshal_AMK0_ActualValues2+0x44>
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	ee07 3a90 	vmov	s15, r3
 80024d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d4:	edc7 7a02 	vstr	s15, [r7, #8]
            AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_START,
            AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_LENGTH),
            AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_LENGTH);
            
        temp.AMK_TempInverter = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 80024d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	0c02      	lsrs	r2, r0, #16
 80024e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80024ea:	0c0b      	lsrs	r3, r1, #16
 80024ec:	f402 4800 	and.w	r8, r2, #32768	; 0x8000
 80024f0:	f04f 0900 	mov.w	r9, #0
 80024f4:	ea58 0309 	orrs.w	r3, r8, r9
 80024f8:	d012      	beq.n	8002520 <Unmarshal_AMK0_ActualValues2+0x90>
 80024fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	0c02      	lsrs	r2, r0, #16
 8002508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800250c:	0c0b      	lsrs	r3, r1, #16
 800250e:	4613      	mov	r3, r2
 8002510:	425b      	negs	r3, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	425b      	negs	r3, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800251e:	e00f      	b.n	8002540 <Unmarshal_AMK0_ActualValues2+0xb0>
 8002520:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	0c02      	lsrs	r2, r0, #16
 800252e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002532:	0c0b      	lsrs	r3, r1, #16
 8002534:	4613      	mov	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002540:	edc7 7a03 	vstr	s15, [r7, #12]
            AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_START,
            AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_LENGTH),
            AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_LENGTH);
            
        temp.AMK_ErrorInfo = CANAL_GET_BITS(data,
 8002544:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	000a      	movs	r2, r1
 8002552:	2300      	movs	r3, #0
 8002554:	b293      	uxth	r3, r2
 8002556:	823b      	strh	r3, [r7, #16]
            AMK0_ACTUALVALUES2_AMK_ERRORINFO_START,
            AMK0_ACTUALVALUES2_AMK_ERRORINFO_LENGTH);
            
        temp.AMK_TempIGBT = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8002558:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	0c0a      	lsrs	r2, r1, #16
 8002566:	2300      	movs	r3, #0
 8002568:	f402 4400 	and.w	r4, r2, #32768	; 0x8000
 800256c:	2500      	movs	r5, #0
 800256e:	ea54 0305 	orrs.w	r3, r4, r5
 8002572:	d010      	beq.n	8002596 <Unmarshal_AMK0_ActualValues2+0x106>
 8002574:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	0c0a      	lsrs	r2, r1, #16
 8002582:	2300      	movs	r3, #0
 8002584:	4613      	mov	r3, r2
 8002586:	425b      	negs	r3, r3
 8002588:	b29b      	uxth	r3, r3
 800258a:	425b      	negs	r3, r3
 800258c:	ee07 3a90 	vmov	s15, r3
 8002590:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002594:	e00d      	b.n	80025b2 <Unmarshal_AMK0_ActualValues2+0x122>
 8002596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	0c0a      	lsrs	r2, r1, #16
 80025a4:	2300      	movs	r3, #0
 80025a6:	4613      	mov	r3, r2
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b2:	edc7 7a05 	vstr	s15, [r7, #20]
            AMK0_ACTUALVALUES2_AMK_TEMPIGBT_START,
            AMK0_ACTUALVALUES2_AMK_TEMPIGBT_LENGTH),
            AMK0_ACTUALVALUES2_AMK_TEMPIGBT_LENGTH);
            
	//  Apply linear conversion
	temp.AMK_TempMotor = (temp.AMK_TempMotor
 80025b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_FACTOR)
 80025be:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002638 <Unmarshal_AMK0_ActualValues2+0x1a8>
 80025c2:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ AMK0_ACTUALVALUES2_AMK_TEMPMOTOR_OFFSET; 
 80025c6:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8002640 <Unmarshal_AMK0_ActualValues2+0x1b0>
 80025ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.AMK_TempMotor = (temp.AMK_TempMotor
 80025d2:	edc7 7a02 	vstr	s15, [r7, #8]
            
	temp.AMK_TempInverter = (temp.AMK_TempInverter
 80025d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80025da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_FACTOR)
 80025de:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8002638 <Unmarshal_AMK0_ActualValues2+0x1a8>
 80025e2:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ AMK0_ACTUALVALUES2_AMK_TEMPINVERTER_OFFSET; 
 80025e6:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8002640 <Unmarshal_AMK0_ActualValues2+0x1b0>
 80025ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.AMK_TempInverter = (temp.AMK_TempInverter
 80025f2:	edc7 7a03 	vstr	s15, [r7, #12]
            
	temp.AMK_ErrorInfo = (temp.AMK_ErrorInfo
 80025f6:	8a3b      	ldrh	r3, [r7, #16]
 80025f8:	823b      	strh	r3, [r7, #16]
			* AMK0_ACTUALVALUES2_AMK_ERRORINFO_FACTOR)
			+ AMK0_ACTUALVALUES2_AMK_ERRORINFO_OFFSET; 
            
	temp.AMK_TempIGBT = (temp.AMK_TempIGBT
 80025fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80025fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* AMK0_ACTUALVALUES2_AMK_TEMPIGBT_FACTOR)
 8002602:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002638 <Unmarshal_AMK0_ActualValues2+0x1a8>
 8002606:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ AMK0_ACTUALVALUES2_AMK_TEMPIGBT_OFFSET; 
 800260a:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002640 <Unmarshal_AMK0_ActualValues2+0x1b0>
 800260e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002612:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.AMK_TempIGBT = (temp.AMK_TempIGBT
 8002616:	edc7 7a05 	vstr	s15, [r7, #20]
            
	//  Writing to global struct instance
	AMK0_ActualValues2 = temp;
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <Unmarshal_AMK0_ActualValues2+0x1b8>)
 800261c:	461c      	mov	r4, r3
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	return CANAL_OK;
 8002628:	2301      	movs	r3, #1
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002634:	f3af 8000 	nop.w
 8002638:	9999999a 	.word	0x9999999a
 800263c:	3fb99999 	.word	0x3fb99999
	...
 8002648:	20000344 	.word	0x20000344

0800264c <Unmarshal_AccelerometerData>:
TeCanALRet Unmarshal_AccelerometerData(uint8_t *RxData) {
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsAccelerometerData temp;

	data = getDataWordFromByteArray(RxData);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f7ff fa0c 	bl	8001a72 <getDataWordFromByteArray>
 800265a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
	//  Read raw bits
        temp.AccelLateral = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 800265e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002662:	813b      	strh	r3, [r7, #8]
            ACCELEROMETERDATA_ACCELLATERAL_START,
            ACCELEROMETERDATA_ACCELLATERAL_LENGTH),
            ACCELEROMETERDATA_ACCELLATERAL_LENGTH);
            
        temp.AccelLongitudinal = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 8002664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	0c02      	lsrs	r2, r0, #16
 8002672:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002676:	0c0b      	lsrs	r3, r1, #16
 8002678:	b213      	sxth	r3, r2
 800267a:	817b      	strh	r3, [r7, #10]
            ACCELEROMETERDATA_ACCELLONGITUDINAL_START,
            ACCELEROMETERDATA_ACCELLONGITUDINAL_LENGTH),
            ACCELEROMETERDATA_ACCELLONGITUDINAL_LENGTH);
            
        temp.YawRate = CANAL_TO_SIGNED(CANAL_GET_BITS(data,
 800267c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	000a      	movs	r2, r1
 800268a:	2300      	movs	r3, #0
 800268c:	b213      	sxth	r3, r2
 800268e:	81bb      	strh	r3, [r7, #12]
            ACCELEROMETERDATA_YAWRATE_START,
            ACCELEROMETERDATA_YAWRATE_LENGTH),
            ACCELEROMETERDATA_YAWRATE_LENGTH);
            
	//  Apply linear conversion
	temp.AccelLateral = (temp.AccelLateral
 8002690:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002694:	813b      	strh	r3, [r7, #8]
			* ACCELEROMETERDATA_ACCELLATERAL_FACTOR)
			+ ACCELEROMETERDATA_ACCELLATERAL_OFFSET; 
            
	temp.AccelLongitudinal = (temp.AccelLongitudinal
 8002696:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800269a:	817b      	strh	r3, [r7, #10]
			* ACCELEROMETERDATA_ACCELLONGITUDINAL_FACTOR)
			+ ACCELEROMETERDATA_ACCELLONGITUDINAL_OFFSET; 
            
	temp.YawRate = (temp.YawRate
 800269c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80026a0:	81bb      	strh	r3, [r7, #12]
			* ACCELEROMETERDATA_YAWRATE_FACTOR)
			+ ACCELEROMETERDATA_YAWRATE_OFFSET; 
            
	//  Writing to global struct instance
	AccelerometerData = temp;
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <Unmarshal_AccelerometerData+0x70>)
 80026a4:	f107 0208 	add.w	r2, r7, #8
 80026a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026ac:	6018      	str	r0, [r3, #0]
 80026ae:	3304      	adds	r3, #4
 80026b0:	8019      	strh	r1, [r3, #0]

	return CANAL_OK;
 80026b2:	2301      	movs	r3, #1
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000364 	.word	0x20000364

080026c0 <Unmarshal_LvBatteryData>:
TeCanALRet Unmarshal_LvBatteryData(uint8_t *RxData) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsLvBatteryData temp;

	data = getDataWordFromByteArray(RxData);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff f9d2 	bl	8001a72 <getDataWordFromByteArray>
 80026ce:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
	//  Read raw bits
        temp.GlvCurrent = CANAL_GET_BITS(data,
 80026d2:	7c3b      	ldrb	r3, [r7, #16]
 80026d4:	733b      	strb	r3, [r7, #12]
            LVBATTERYDATA_GLVCURRENT_START,
            LVBATTERYDATA_GLVCURRENT_LENGTH);
            
        temp.GlvVoltage = CANAL_GET_BITS(data,
 80026d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	0a02      	lsrs	r2, r0, #8
 80026e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026e8:	0a0b      	lsrs	r3, r1, #8
 80026ea:	b2d3      	uxtb	r3, r2
 80026ec:	737b      	strb	r3, [r7, #13]
            LVBATTERYDATA_GLVVOLTAGE_START,
            LVBATTERYDATA_GLVVOLTAGE_LENGTH);
            
	//  Apply linear conversion
	temp.GlvCurrent = (temp.GlvCurrent
 80026ee:	7b3b      	ldrb	r3, [r7, #12]
 80026f0:	733b      	strb	r3, [r7, #12]
			* LVBATTERYDATA_GLVCURRENT_FACTOR)
			+ LVBATTERYDATA_GLVCURRENT_OFFSET; 
            
	temp.GlvVoltage = (temp.GlvVoltage
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	737b      	strb	r3, [r7, #13]
			* LVBATTERYDATA_GLVVOLTAGE_FACTOR)
			+ LVBATTERYDATA_GLVVOLTAGE_OFFSET; 
            
	//  Writing to global struct instance
	LvBatteryData = temp;
 80026f6:	4a04      	ldr	r2, [pc, #16]	; (8002708 <Unmarshal_LvBatteryData+0x48>)
 80026f8:	89bb      	ldrh	r3, [r7, #12]
 80026fa:	8013      	strh	r3, [r2, #0]

	return CANAL_OK;
 80026fc:	2301      	movs	r3, #1
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	2000036c 	.word	0x2000036c

0800270c <Unmarshal_CoolingControllerAnswer>:
TeCanALRet Unmarshal_CoolingControllerAnswer(uint8_t *RxData) {
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsCoolingControllerAnswer temp;

	data = getDataWordFromByteArray(RxData);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff f9ac 	bl	8001a72 <getDataWordFromByteArray>
 800271a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
	//  Read raw bits
        temp.CcuAnswer = CANAL_GET_BITS(data,
 800271e:	7c3b      	ldrb	r3, [r7, #16]
 8002720:	733b      	strb	r3, [r7, #12]
            COOLINGCONTROLLERANSWER_CCUANSWER_START,
            COOLINGCONTROLLERANSWER_CCUANSWER_LENGTH);
            
	//  Apply linear conversion
	temp.CcuAnswer = (temp.CcuAnswer
 8002722:	7b3b      	ldrb	r3, [r7, #12]
 8002724:	733b      	strb	r3, [r7, #12]
			* COOLINGCONTROLLERANSWER_CCUANSWER_FACTOR)
			+ COOLINGCONTROLLERANSWER_CCUANSWER_OFFSET; 
            
	//  Writing to global struct instance
	CoolingControllerAnswer = temp;
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <Unmarshal_CoolingControllerAnswer+0x2c>)
 8002728:	7b3b      	ldrb	r3, [r7, #12]
 800272a:	7013      	strb	r3, [r2, #0]

	return CANAL_OK;
 800272c:	2301      	movs	r3, #1
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	20000378 	.word	0x20000378

0800273c <Unmarshal_DashboardAnswer>:
TeCanALRet Unmarshal_DashboardAnswer(uint8_t *RxData) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsDashboardAnswer temp;

	data = getDataWordFromByteArray(RxData);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff f994 	bl	8001a72 <getDataWordFromByteArray>
 800274a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
	//  Read raw bits
        temp.DcuAnswer = CANAL_GET_BITS(data,
 800274e:	7c3b      	ldrb	r3, [r7, #16]
 8002750:	733b      	strb	r3, [r7, #12]
            DASHBOARDANSWER_DCUANSWER_START,
            DASHBOARDANSWER_DCUANSWER_LENGTH);
            
	//  Apply linear conversion
	temp.DcuAnswer = (temp.DcuAnswer
 8002752:	7b3b      	ldrb	r3, [r7, #12]
 8002754:	733b      	strb	r3, [r7, #12]
			* DASHBOARDANSWER_DCUANSWER_FACTOR)
			+ DASHBOARDANSWER_DCUANSWER_OFFSET; 
            
	//  Writing to global struct instance
	DashboardAnswer = temp;
 8002756:	4a04      	ldr	r2, [pc, #16]	; (8002768 <Unmarshal_DashboardAnswer+0x2c>)
 8002758:	7b3b      	ldrb	r3, [r7, #12]
 800275a:	7013      	strb	r3, [r2, #0]

	return CANAL_OK;
 800275c:	2301      	movs	r3, #1
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	2000037c 	.word	0x2000037c

0800276c <Unmarshal_PiuControllerAnswer>:
TeCanALRet Unmarshal_PiuControllerAnswer(uint8_t *RxData) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsPiuControllerAnswer temp;

	data = getDataWordFromByteArray(RxData);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff f97c 	bl	8001a72 <getDataWordFromByteArray>
 800277a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
	//  Read raw bits
        temp.PiuAnswer = CANAL_GET_BITS(data,
 800277e:	7c3b      	ldrb	r3, [r7, #16]
 8002780:	733b      	strb	r3, [r7, #12]
            PIUCONTROLLERANSWER_PIUANSWER_START,
            PIUCONTROLLERANSWER_PIUANSWER_LENGTH);
            
	//  Apply linear conversion
	temp.PiuAnswer = (temp.PiuAnswer
 8002782:	7b3b      	ldrb	r3, [r7, #12]
 8002784:	733b      	strb	r3, [r7, #12]
			* PIUCONTROLLERANSWER_PIUANSWER_FACTOR)
			+ PIUCONTROLLERANSWER_PIUANSWER_OFFSET; 
            
	//  Writing to global struct instance
	PiuControllerAnswer = temp;
 8002786:	4a04      	ldr	r2, [pc, #16]	; (8002798 <Unmarshal_PiuControllerAnswer+0x2c>)
 8002788:	7b3b      	ldrb	r3, [r7, #12]
 800278a:	7013      	strb	r3, [r2, #0]

	return CANAL_OK;
 800278c:	2301      	movs	r3, #1
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000380 	.word	0x20000380
 800279c:	00000000 	.word	0x00000000

080027a0 <Unmarshal_DashboardData>:
TeCanALRet Unmarshal_DashboardData(uint8_t *RxData) {
 80027a0:	b5b0      	push	{r4, r5, r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsDashboardData temp;

	data = getDataWordFromByteArray(RxData);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f7ff f962 	bl	8001a72 <getDataWordFromByteArray>
 80027ae:	e9c7 0104 	strd	r0, r1, [r7, #16]
    
	//  Read raw bits
        temp.GpsVehicleSpeed = CANAL_GET_BITS(data,
 80027b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027b6:	f3c2 040b 	ubfx	r4, r2, #0, #12
 80027ba:	2500      	movs	r5, #0
 80027bc:	4620      	mov	r0, r4
 80027be:	4629      	mov	r1, r5
 80027c0:	f7fd fe02 	bl	80003c8 <__aeabi_ul2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	60fb      	str	r3, [r7, #12]
            DASHBOARDDATA_GPSVEHICLESPEED_START,
            DASHBOARDDATA_GPSVEHICLESPEED_LENGTH);
            
	//  Apply linear conversion
	temp.GpsVehicleSpeed = (temp.GpsVehicleSpeed
 80027c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			* DASHBOARDDATA_GPSVEHICLESPEED_FACTOR)
 80027d0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80027f8 <Unmarshal_DashboardData+0x58>
 80027d4:	ee27 7b06 	vmul.f64	d7, d7, d6
			+ DASHBOARDDATA_GPSVEHICLESPEED_OFFSET; 
 80027d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8002800 <Unmarshal_DashboardData+0x60>
 80027dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80027e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	temp.GpsVehicleSpeed = (temp.GpsVehicleSpeed
 80027e4:	edc7 7a03 	vstr	s15, [r7, #12]
            
	//  Writing to global struct instance
	DashboardData = temp;
 80027e8:	4a07      	ldr	r2, [pc, #28]	; (8002808 <Unmarshal_DashboardData+0x68>)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6013      	str	r3, [r2, #0]

	return CANAL_OK;
 80027ee:	2301      	movs	r3, #1
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bdb0      	pop	{r4, r5, r7, pc}
 80027f8:	9999999a 	.word	0x9999999a
 80027fc:	3fb99999 	.word	0x3fb99999
	...
 8002808:	20000390 	.word	0x20000390

0800280c <Unmarshal_CoolingLoopsData>:
TeCanALRet Unmarshal_CoolingLoopsData(uint8_t *RxData) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsCoolingLoopsData temp;

	data = getDataWordFromByteArray(RxData);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff f92c 	bl	8001a72 <getDataWordFromByteArray>
 800281a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
	//  Read raw bits
        temp.InverterLoopFluidTemp = CANAL_GET_BITS(data,
 800281e:	7e3b      	ldrb	r3, [r7, #24]
 8002820:	733b      	strb	r3, [r7, #12]
            COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_START,
            COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_LENGTH);
            
        temp.MotorLoopFluidTemp = CANAL_GET_BITS(data,
 8002822:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	0a02      	lsrs	r2, r0, #8
 8002830:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002834:	0a0b      	lsrs	r3, r1, #8
 8002836:	b2d3      	uxtb	r3, r2
 8002838:	737b      	strb	r3, [r7, #13]
            COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_START,
            COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_LENGTH);
            
        temp.InverterLoopPressure = CANAL_GET_BITS(data,
 800283a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	0c02      	lsrs	r2, r0, #16
 8002848:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800284c:	0c0b      	lsrs	r3, r1, #16
 800284e:	b2d3      	uxtb	r3, r2
 8002850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002854:	b2db      	uxtb	r3, r3
 8002856:	73bb      	strb	r3, [r7, #14]
            COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_START,
            COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_LENGTH);
            
        temp.MotorLoopPressure = CANAL_GET_BITS(data,
 8002858:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	0dc2      	lsrs	r2, r0, #23
 8002866:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800286a:	0dcb      	lsrs	r3, r1, #23
 800286c:	b2d3      	uxtb	r3, r2
 800286e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002872:	b2db      	uxtb	r3, r3
 8002874:	73fb      	strb	r3, [r7, #15]
            COOLINGLOOPSDATA_MOTORLOOPPRESSURE_START,
            COOLINGLOOPSDATA_MOTORLOOPPRESSURE_LENGTH);
            
        temp.InverterLoopTempSensorStatus = CANAL_GET_BITS(data,
 8002876:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	0f82      	lsrs	r2, r0, #30
 8002884:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8002888:	0f8b      	lsrs	r3, r1, #30
 800288a:	b2d3      	uxtb	r3, r2
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	b2db      	uxtb	r3, r3
 8002892:	743b      	strb	r3, [r7, #16]
            COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_START,
            COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_LENGTH);
            
        temp.MotorLoopTempSensorStatus = CANAL_GET_BITS(data,
 8002894:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	084a      	lsrs	r2, r1, #1
 80028a2:	2300      	movs	r3, #0
 80028a4:	b2d3      	uxtb	r3, r2
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	747b      	strb	r3, [r7, #17]
            COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_START,
            COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_LENGTH);
            
        temp.InverterLoopPressureSensorStatus = CANAL_GET_BITS(data,
 80028ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	090a      	lsrs	r2, r1, #4
 80028bc:	2300      	movs	r3, #0
 80028be:	b2d3      	uxtb	r3, r2
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	74bb      	strb	r3, [r7, #18]
            COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_START,
            COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_LENGTH);
            
        temp.MotorLoopPressureSensorStatus = CANAL_GET_BITS(data,
 80028c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	09ca      	lsrs	r2, r1, #7
 80028d6:	2300      	movs	r3, #0
 80028d8:	b2d3      	uxtb	r3, r2
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	74fb      	strb	r3, [r7, #19]
            COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_START,
            COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_LENGTH);
            
        temp.MC_CoolingLoopsData = CANAL_GET_BITS(data,
 80028e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	f04f 0300 	mov.w	r3, #0
 80028ee:	0a8a      	lsrs	r2, r1, #10
 80028f0:	2300      	movs	r3, #0
 80028f2:	b2d3      	uxtb	r3, r2
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	753b      	strb	r3, [r7, #20]
            COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_START,
            COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_LENGTH);
            
	//  Apply linear conversion
	temp.InverterLoopFluidTemp = (temp.InverterLoopFluidTemp
 80028fc:	7b3b      	ldrb	r3, [r7, #12]
			* COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_FACTOR)
			+ COOLINGLOOPSDATA_INVERTERLOOPFLUIDTEMP_OFFSET; 
 80028fe:	3b14      	subs	r3, #20
 8002900:	b2db      	uxtb	r3, r3
	temp.InverterLoopFluidTemp = (temp.InverterLoopFluidTemp
 8002902:	733b      	strb	r3, [r7, #12]
            
	temp.MotorLoopFluidTemp = (temp.MotorLoopFluidTemp
 8002904:	7b7b      	ldrb	r3, [r7, #13]
			* COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_FACTOR)
			+ COOLINGLOOPSDATA_MOTORLOOPFLUIDTEMP_OFFSET; 
 8002906:	3b14      	subs	r3, #20
 8002908:	b2db      	uxtb	r3, r3
	temp.MotorLoopFluidTemp = (temp.MotorLoopFluidTemp
 800290a:	737b      	strb	r3, [r7, #13]
            
	temp.InverterLoopPressure = (temp.InverterLoopPressure
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	73bb      	strb	r3, [r7, #14]
			* COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_FACTOR)
			+ COOLINGLOOPSDATA_INVERTERLOOPPRESSURE_OFFSET; 
            
	temp.MotorLoopPressure = (temp.MotorLoopPressure
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	73fb      	strb	r3, [r7, #15]
			* COOLINGLOOPSDATA_MOTORLOOPPRESSURE_FACTOR)
			+ COOLINGLOOPSDATA_MOTORLOOPPRESSURE_OFFSET; 
            
	temp.InverterLoopTempSensorStatus = (temp.InverterLoopTempSensorStatus
 8002914:	7c3b      	ldrb	r3, [r7, #16]
 8002916:	743b      	strb	r3, [r7, #16]
			* COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_FACTOR)
			+ COOLINGLOOPSDATA_INVERTERLOOPTEMPSENSORSTATUS_OFFSET; 
            
	temp.MotorLoopTempSensorStatus = (temp.MotorLoopTempSensorStatus
 8002918:	7c7b      	ldrb	r3, [r7, #17]
 800291a:	747b      	strb	r3, [r7, #17]
			* COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_FACTOR)
			+ COOLINGLOOPSDATA_MOTORLOOPTEMPSENSORSTATUS_OFFSET; 
            
	temp.InverterLoopPressureSensorStatus = (temp.InverterLoopPressureSensorStatus
 800291c:	7cbb      	ldrb	r3, [r7, #18]
 800291e:	74bb      	strb	r3, [r7, #18]
			* COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_FACTOR)
			+ COOLINGLOOPSDATA_INVERTERLOOPPRESSURESENSORSTATUS_OFFSET; 
            
	temp.MotorLoopPressureSensorStatus = (temp.MotorLoopPressureSensorStatus
 8002920:	7cfb      	ldrb	r3, [r7, #19]
 8002922:	74fb      	strb	r3, [r7, #19]
			* COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_FACTOR)
			+ COOLINGLOOPSDATA_MOTORLOOPPRESSURESENSORSTATUS_OFFSET; 
            
	temp.MC_CoolingLoopsData = (temp.MC_CoolingLoopsData
 8002924:	7d3b      	ldrb	r3, [r7, #20]
 8002926:	753b      	strb	r3, [r7, #20]
			* COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_FACTOR)
			+ COOLINGLOOPSDATA_MC_COOLINGLOOPSDATA_OFFSET; 
            
	//  Writing to global struct instance
	CoolingLoopsData = temp;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <Unmarshal_CoolingLoopsData+0x134>)
 800292a:	f107 020c 	add.w	r2, r7, #12
 800292e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002930:	c303      	stmia	r3!, {r0, r1}
 8002932:	701a      	strb	r2, [r3, #0]

	return CANAL_OK;
 8002934:	2301      	movs	r3, #1
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000039c 	.word	0x2000039c

08002944 <Unmarshal_PedalPositions>:
TeCanALRet Unmarshal_PedalPositions(uint8_t *RxData) {
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
	uint64_t data;
	TsPedalPositions temp;

	data = getDataWordFromByteArray(RxData);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff f890 	bl	8001a72 <getDataWordFromByteArray>
 8002952:	e9c7 0106 	strd	r0, r1, [r7, #24]
    
	//  Read raw bits
        temp.BrakePedalPosition0 = CANAL_GET_BITS(data,
 8002956:	7e3b      	ldrb	r3, [r7, #24]
 8002958:	733b      	strb	r3, [r7, #12]
            PEDALPOSITIONS_BRAKEPEDALPOSITION0_START,
            PEDALPOSITIONS_BRAKEPEDALPOSITION0_LENGTH);
            
        temp.BrakePedalPosition1 = CANAL_GET_BITS(data,
 800295a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	0a02      	lsrs	r2, r0, #8
 8002968:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800296c:	0a0b      	lsrs	r3, r1, #8
 800296e:	b2d3      	uxtb	r3, r2
 8002970:	737b      	strb	r3, [r7, #13]
            PEDALPOSITIONS_BRAKEPEDALPOSITION1_START,
            PEDALPOSITIONS_BRAKEPEDALPOSITION1_LENGTH);
            
        temp.AcceleratorPedalPosition1 = CANAL_GET_BITS(data,
 8002972:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	0c02      	lsrs	r2, r0, #16
 8002980:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002984:	0c0b      	lsrs	r3, r1, #16
 8002986:	b2d3      	uxtb	r3, r2
 8002988:	73bb      	strb	r3, [r7, #14]
            PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_START,
            PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_LENGTH);
            
        temp.AcceleratorPedalPosition0 = CANAL_GET_BITS(data,
 800298a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	0e02      	lsrs	r2, r0, #24
 8002998:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800299c:	0e0b      	lsrs	r3, r1, #24
 800299e:	b2d3      	uxtb	r3, r2
 80029a0:	73fb      	strb	r3, [r7, #15]
            PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_START,
            PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_LENGTH);
            
        temp.DriveButton = CANAL_GET_BITS(data,
 80029a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	000a      	movs	r2, r1
 80029b0:	2300      	movs	r3, #0
 80029b2:	b2d3      	uxtb	r3, r2
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	743b      	strb	r3, [r7, #16]
            PEDALPOSITIONS_DRIVEBUTTON_START,
            PEDALPOSITIONS_DRIVEBUTTON_LENGTH);
            
        temp.Bpps0Status = CANAL_GET_BITS(data,
 80029bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	f04f 0300 	mov.w	r3, #0
 80029c8:	088a      	lsrs	r2, r1, #2
 80029ca:	2300      	movs	r3, #0
 80029cc:	b2d3      	uxtb	r3, r2
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	747b      	strb	r3, [r7, #17]
            PEDALPOSITIONS_BPPS0STATUS_START,
            PEDALPOSITIONS_BPPS0STATUS_LENGTH);
            
        temp.Bpps1Status = CANAL_GET_BITS(data,
 80029d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	094a      	lsrs	r2, r1, #5
 80029e4:	2300      	movs	r3, #0
 80029e6:	b2d3      	uxtb	r3, r2
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	74bb      	strb	r3, [r7, #18]
            PEDALPOSITIONS_BPPS1STATUS_START,
            PEDALPOSITIONS_BPPS1STATUS_LENGTH);
            
        temp.Apps0Status = CANAL_GET_BITS(data,
 80029f0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	0a0a      	lsrs	r2, r1, #8
 80029fe:	2300      	movs	r3, #0
 8002a00:	b2d3      	uxtb	r3, r2
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	74fb      	strb	r3, [r7, #19]
            PEDALPOSITIONS_APPS0STATUS_START,
            PEDALPOSITIONS_APPS0STATUS_LENGTH);
            
        temp.Apps1Status = CANAL_GET_BITS(data,
 8002a0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	f04f 0300 	mov.w	r3, #0
 8002a16:	0aca      	lsrs	r2, r1, #11
 8002a18:	2300      	movs	r3, #0
 8002a1a:	b2d3      	uxtb	r3, r2
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	753b      	strb	r3, [r7, #20]
            PEDALPOSITIONS_APPS1STATUS_START,
            PEDALPOSITIONS_APPS1STATUS_LENGTH);
            
        temp.BspdFault = CANAL_GET_BITS(data,
 8002a24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	0b8a      	lsrs	r2, r1, #14
 8002a32:	2300      	movs	r3, #0
 8002a34:	f002 0401 	and.w	r4, r2, #1
 8002a38:	2500      	movs	r5, #0
 8002a3a:	ea44 0305 	orr.w	r3, r4, r5
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	bf14      	ite	ne
 8002a42:	2301      	movne	r3, #1
 8002a44:	2300      	moveq	r3, #0
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	757b      	strb	r3, [r7, #21]
            PEDALPOSITIONS_BSPDFAULT_START,
            PEDALPOSITIONS_BSPDFAULT_LENGTH);
            
        temp.MC_PedalPosition = CANAL_GET_BITS(data,
 8002a4a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	0c0a      	lsrs	r2, r1, #16
 8002a58:	2300      	movs	r3, #0
 8002a5a:	b2d3      	uxtb	r3, r2
 8002a5c:	f003 030f 	and.w	r3, r3, #15
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	75bb      	strb	r3, [r7, #22]
            PEDALPOSITIONS_MC_PEDALPOSITION_START,
            PEDALPOSITIONS_MC_PEDALPOSITION_LENGTH);
            
	//  Apply linear conversion
	temp.BrakePedalPosition0 = (temp.BrakePedalPosition0
 8002a64:	7b3b      	ldrb	r3, [r7, #12]
 8002a66:	733b      	strb	r3, [r7, #12]
			* PEDALPOSITIONS_BRAKEPEDALPOSITION0_FACTOR)
			+ PEDALPOSITIONS_BRAKEPEDALPOSITION0_OFFSET; 
            
	temp.BrakePedalPosition1 = (temp.BrakePedalPosition1
 8002a68:	7b7b      	ldrb	r3, [r7, #13]
 8002a6a:	737b      	strb	r3, [r7, #13]
			* PEDALPOSITIONS_BRAKEPEDALPOSITION1_FACTOR)
			+ PEDALPOSITIONS_BRAKEPEDALPOSITION1_OFFSET; 
            
	temp.AcceleratorPedalPosition1 = (temp.AcceleratorPedalPosition1
 8002a6c:	7bbb      	ldrb	r3, [r7, #14]
 8002a6e:	73bb      	strb	r3, [r7, #14]
			* PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_FACTOR)
			+ PEDALPOSITIONS_ACCELERATORPEDALPOSITION1_OFFSET; 
            
	temp.AcceleratorPedalPosition0 = (temp.AcceleratorPedalPosition0
 8002a70:	7bfb      	ldrb	r3, [r7, #15]
 8002a72:	73fb      	strb	r3, [r7, #15]
			* PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_FACTOR)
			+ PEDALPOSITIONS_ACCELERATORPEDALPOSITION0_OFFSET; 
            
	temp.DriveButton = (temp.DriveButton
 8002a74:	7c3b      	ldrb	r3, [r7, #16]
 8002a76:	743b      	strb	r3, [r7, #16]
			* PEDALPOSITIONS_DRIVEBUTTON_FACTOR)
			+ PEDALPOSITIONS_DRIVEBUTTON_OFFSET; 
            
	temp.Bpps0Status = (temp.Bpps0Status
 8002a78:	7c7b      	ldrb	r3, [r7, #17]
 8002a7a:	747b      	strb	r3, [r7, #17]
			* PEDALPOSITIONS_BPPS0STATUS_FACTOR)
			+ PEDALPOSITIONS_BPPS0STATUS_OFFSET; 
            
	temp.Bpps1Status = (temp.Bpps1Status
 8002a7c:	7cbb      	ldrb	r3, [r7, #18]
 8002a7e:	74bb      	strb	r3, [r7, #18]
			* PEDALPOSITIONS_BPPS1STATUS_FACTOR)
			+ PEDALPOSITIONS_BPPS1STATUS_OFFSET; 
            
	temp.Apps0Status = (temp.Apps0Status
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74fb      	strb	r3, [r7, #19]
			* PEDALPOSITIONS_APPS0STATUS_FACTOR)
			+ PEDALPOSITIONS_APPS0STATUS_OFFSET; 
            
	temp.Apps1Status = (temp.Apps1Status
 8002a84:	7d3b      	ldrb	r3, [r7, #20]
 8002a86:	753b      	strb	r3, [r7, #20]
			* PEDALPOSITIONS_APPS1STATUS_FACTOR)
			+ PEDALPOSITIONS_APPS1STATUS_OFFSET; 
            
	temp.BspdFault = (temp.BspdFault
 8002a88:	7d7b      	ldrb	r3, [r7, #21]
			* PEDALPOSITIONS_BSPDFAULT_FACTOR)
			+ PEDALPOSITIONS_BSPDFAULT_OFFSET; 
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
	temp.BspdFault = (temp.BspdFault
 8002a94:	757b      	strb	r3, [r7, #21]
            
	temp.MC_PedalPosition = (temp.MC_PedalPosition
 8002a96:	7dbb      	ldrb	r3, [r7, #22]
 8002a98:	75bb      	strb	r3, [r7, #22]
			* PEDALPOSITIONS_MC_PEDALPOSITION_FACTOR)
			+ PEDALPOSITIONS_MC_PEDALPOSITION_OFFSET; 
            
	//  Writing to global struct instance
	PedalPositions = temp;
 8002a9a:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <Unmarshal_PedalPositions+0x174>)
 8002a9c:	f107 020c 	add.w	r2, r7, #12
 8002aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aa2:	c303      	stmia	r3!, {r0, r1}
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	0c12      	lsrs	r2, r2, #16
 8002aaa:	701a      	strb	r2, [r3, #0]

	return CANAL_OK;
 8002aac:	2301      	movs	r3, #1
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200003b0 	.word	0x200003b0

08002abc <Marshal_AMK1_SetPoints1>:

TeCanALRet Marshal_AMK1_SetPoints1(uint8_t *TxData) {
 8002abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac0:	b0ab      	sub	sp, #172	; 0xac
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint64_t dataWord = 0;
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	TsAMK1_SetPoints1 temp;
	TeCanALRet ret;

	temp = AMK1_SetPoints1;
 8002ad4:	4b9c      	ldr	r3, [pc, #624]	; (8002d48 <Marshal_AMK1_SetPoints1+0x28c>)
 8002ad6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // Reverse linear conversion
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 8002ae0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
			- AMK1_SETPOINTS1_AMK_BINVERTERON_OFFSET)
			/ AMK1_SETPOINTS1_AMK_BINVERTERON_FACTOR;
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf14      	ite	ne
 8002ae8:	2301      	movne	r3, #1
 8002aea:	2300      	moveq	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 8002aee:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 8002af2:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
			- AMK1_SETPOINTS1_AMK_BDCON_OFFSET)
			/ AMK1_SETPOINTS1_AMK_BDCON_FACTOR;
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 8002b00:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
            
	temp.AMK_bEnable = (temp.AMK_bEnable
 8002b04:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
			- AMK1_SETPOINTS1_AMK_BENABLE_OFFSET)
			/ AMK1_SETPOINTS1_AMK_BENABLE_FACTOR;
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf14      	ite	ne
 8002b0c:	2301      	movne	r3, #1
 8002b0e:	2300      	moveq	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
	temp.AMK_bEnable = (temp.AMK_bEnable
 8002b12:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
            
	temp.AMK_bErrorReset = (temp.AMK_bErrorReset
 8002b16:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
			- AMK1_SETPOINTS1_AMK_BERRORRESET_OFFSET)
			/ AMK1_SETPOINTS1_AMK_BERRORRESET_FACTOR;
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2301      	movne	r3, #1
 8002b20:	2300      	moveq	r3, #0
 8002b22:	b2db      	uxtb	r3, r3
	temp.AMK_bErrorReset = (temp.AMK_bErrorReset
 8002b24:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            
	temp.AMK_TargetVelocity = (temp.AMK_TargetVelocity
			- AMK1_SETPOINTS1_AMK_TARGETVELOCITY_OFFSET)
 8002b28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
	temp.AMK_TargetVelocity = (temp.AMK_TargetVelocity
 8002b2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			/ AMK1_SETPOINTS1_AMK_TARGETVELOCITY_FACTOR;
            
	temp.AMK_TorqueLimitPositiv = (temp.AMK_TorqueLimitPositiv
			- AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_OFFSET)
 8002b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	temp.AMK_TorqueLimitPositiv = (temp.AMK_TorqueLimitPositiv
 8002b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			/ AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_FACTOR;
            
	temp.AMK_TorqueLimitNegativ = (temp.AMK_TorqueLimitNegativ
			- AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_OFFSET)
 8002b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
	temp.AMK_TorqueLimitNegativ = (temp.AMK_TorqueLimitNegativ
 8002b3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			/ AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.AMK_bInverterOn, dataWord,
 8002b40:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002b44:	f422 7a80 	bic.w	sl, r2, #256	; 0x100
 8002b48:	469b      	mov	fp, r3
 8002b4a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	4698      	mov	r8, r3
 8002b54:	4691      	mov	r9, r2
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8002b62:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002b66:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002b6a:	ea4a 0102 	orr.w	r1, sl, r2
 8002b6e:	6339      	str	r1, [r7, #48]	; 0x30
 8002b70:	ea4b 0303 	orr.w	r3, fp, r3
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
 8002b76:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002b7a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_BINVERTERON_START,
			AMK1_SETPOINTS1_AMK_BINVERTERON_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_bDcOn, dataWord,
 8002b7e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002b82:	f422 7100 	bic.w	r1, r2, #512	; 0x200
 8002b86:	67b9      	str	r1, [r7, #120]	; 0x78
 8002b88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b8a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2200      	movs	r2, #0
 8002b92:	461d      	mov	r5, r3
 8002b94:	4616      	mov	r6, r2
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	0273      	lsls	r3, r6, #9
 8002ba0:	ea43 53d5 	orr.w	r3, r3, r5, lsr #23
 8002ba4:	026a      	lsls	r2, r5, #9
 8002ba6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002baa:	4621      	mov	r1, r4
 8002bac:	4311      	orrs	r1, r2
 8002bae:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	4319      	orrs	r1, r3
 8002bb4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002bb6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002bba:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_BDCON_START,
			AMK1_SETPOINTS1_AMK_BDCON_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_bEnable, dataWord,
 8002bbe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002bc2:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8002bc6:	6739      	str	r1, [r7, #112]	; 0x70
 8002bc8:	677b      	str	r3, [r7, #116]	; 0x74
 8002bca:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bd4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002be2:	4629      	mov	r1, r5
 8002be4:	028b      	lsls	r3, r1, #10
 8002be6:	4621      	mov	r1, r4
 8002be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bec:	4621      	mov	r1, r4
 8002bee:	028a      	lsls	r2, r1, #10
 8002bf0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	6239      	str	r1, [r7, #32]
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	4319      	orrs	r1, r3
 8002bfe:	6279      	str	r1, [r7, #36]	; 0x24
 8002c00:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002c04:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_BENABLE_START,
			AMK1_SETPOINTS1_AMK_BENABLE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_bErrorReset, dataWord,
 8002c08:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002c0c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8002c10:	6639      	str	r1, [r7, #96]	; 0x60
 8002c12:	667b      	str	r3, [r7, #100]	; 0x64
 8002c14:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002c2c:	4629      	mov	r1, r5
 8002c2e:	02cb      	lsls	r3, r1, #11
 8002c30:	4621      	mov	r1, r4
 8002c32:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8002c36:	4621      	mov	r1, r4
 8002c38:	02ca      	lsls	r2, r1, #11
 8002c3a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002c3e:	4621      	mov	r1, r4
 8002c40:	4311      	orrs	r1, r2
 8002c42:	61b9      	str	r1, [r7, #24]
 8002c44:	4629      	mov	r1, r5
 8002c46:	4319      	orrs	r1, r3
 8002c48:	61f9      	str	r1, [r7, #28]
 8002c4a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002c4e:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_BERRORRESET_START,
			AMK1_SETPOINTS1_AMK_BERRORRESET_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_TargetVelocity, dataWord,
 8002c52:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002c56:	b291      	uxth	r1, r2
 8002c58:	6539      	str	r1, [r7, #80]	; 0x50
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fd fc11 	bl	8000488 <__aeabi_f2ulz>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	f04f 0000 	mov.w	r0, #0
 8002c6e:	f04f 0100 	mov.w	r1, #0
 8002c72:	0419      	lsls	r1, r3, #16
 8002c74:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002c78:	0410      	lsls	r0, r2, #16
 8002c7a:	64b8      	str	r0, [r7, #72]	; 0x48
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c80:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002c84:	4623      	mov	r3, r4
 8002c86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	462b      	mov	r3, r5
 8002c92:	460a      	mov	r2, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c9c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_TARGETVELOCITY_START,
			AMK1_SETPOINTS1_AMK_TARGETVELOCITY_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_TorqueLimitPositiv, dataWord,
 8002ca0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002ca4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fbe3 	bl	8000488 <__aeabi_f2ulz>
 8002cc2:	f04f 0200 	mov.w	r2, #0
 8002cc6:	f04f 0300 	mov.w	r3, #0
 8002cca:	0003      	movs	r3, r0
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2100      	movs	r1, #0
 8002cd0:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002cda:	4623      	mov	r3, r4
 8002cdc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	462b      	mov	r3, r5
 8002ce8:	460a      	mov	r2, r1
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002cf2:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_START,
			AMK1_SETPOINTS1_AMK_TORQUELIMITPOSITIV_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_TorqueLimitNegativ, dataWord,
 8002cf6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002cfa:	63ba      	str	r2, [r7, #56]	; 0x38
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fbbf 	bl	8000488 <__aeabi_f2ulz>
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	0403      	lsls	r3, r0, #16
 8002d14:	2200      	movs	r2, #0
 8002d16:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	4311      	orrs	r1, r2
 8002d1e:	6039      	str	r1, [r7, #0]
 8002d20:	4629      	mov	r1, r5
 8002d22:	4319      	orrs	r1, r3
 8002d24:	6079      	str	r1, [r7, #4]
 8002d26:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002d2a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_START,
			AMK1_SETPOINTS1_AMK_TORQUELIMITNEGATIV_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 8002d2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002d32:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002d36:	f7fe feda 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	37ac      	adds	r7, #172	; 0xac
 8002d40:	46bd      	mov	sp, r7
 8002d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d46:	bf00      	nop
 8002d48:	200002fc 	.word	0x200002fc

08002d4c <Marshal_AMK0_SetPoints1>:
TeCanALRet Marshal_AMK0_SetPoints1(uint8_t *TxData) {
 8002d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d50:	b0ab      	sub	sp, #172	; 0xac
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	uint64_t dataWord = 0;
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	TsAMK0_SetPoints1 temp;
	TeCanALRet ret;

	temp = AMK0_SetPoints1;
 8002d64:	4b9c      	ldr	r3, [pc, #624]	; (8002fd8 <Marshal_AMK0_SetPoints1+0x28c>)
 8002d66:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    
    // Reverse linear conversion
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 8002d70:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
			- AMK0_SETPOINTS1_AMK_BINVERTERON_OFFSET)
			/ AMK0_SETPOINTS1_AMK_BINVERTERON_FACTOR;
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
	temp.AMK_bInverterOn = (temp.AMK_bInverterOn
 8002d7e:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 8002d82:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
			- AMK0_SETPOINTS1_AMK_BDCON_OFFSET)
			/ AMK0_SETPOINTS1_AMK_BDCON_FACTOR;
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
	temp.AMK_bDcOn = (temp.AMK_bDcOn
 8002d90:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
            
	temp.AMK_bEnable = (temp.AMK_bEnable
 8002d94:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
			- AMK0_SETPOINTS1_AMK_BENABLE_OFFSET)
			/ AMK0_SETPOINTS1_AMK_BENABLE_FACTOR;
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
	temp.AMK_bEnable = (temp.AMK_bEnable
 8002da2:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
            
	temp.AMK_bErrorReset = (temp.AMK_bErrorReset
 8002da6:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
			- AMK0_SETPOINTS1_AMK_BERRORRESET_OFFSET)
			/ AMK0_SETPOINTS1_AMK_BERRORRESET_FACTOR;
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
	temp.AMK_bErrorReset = (temp.AMK_bErrorReset
 8002db4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            
	temp.AMK_TargetVelocity = (temp.AMK_TargetVelocity
			- AMK0_SETPOINTS1_AMK_TARGETVELOCITY_OFFSET)
 8002db8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
	temp.AMK_TargetVelocity = (temp.AMK_TargetVelocity
 8002dbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
			/ AMK0_SETPOINTS1_AMK_TARGETVELOCITY_FACTOR;
            
	temp.AMK_TorqueLimitPositiv = (temp.AMK_TorqueLimitPositiv
			- AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_OFFSET)
 8002dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	temp.AMK_TorqueLimitPositiv = (temp.AMK_TorqueLimitPositiv
 8002dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			/ AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_FACTOR;
            
	temp.AMK_TorqueLimitNegativ = (temp.AMK_TorqueLimitNegativ
			- AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_OFFSET)
 8002dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
	temp.AMK_TorqueLimitNegativ = (temp.AMK_TorqueLimitNegativ
 8002dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			/ AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.AMK_bInverterOn, dataWord,
 8002dd0:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002dd4:	f422 7a80 	bic.w	sl, r2, #256	; 0x100
 8002dd8:	469b      	mov	fp, r3
 8002dda:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2200      	movs	r2, #0
 8002de2:	4698      	mov	r8, r3
 8002de4:	4691      	mov	r9, r2
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8002df2:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002df6:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002dfa:	ea4a 0102 	orr.w	r1, sl, r2
 8002dfe:	6339      	str	r1, [r7, #48]	; 0x30
 8002e00:	ea4b 0303 	orr.w	r3, fp, r3
 8002e04:	637b      	str	r3, [r7, #52]	; 0x34
 8002e06:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002e0a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_BINVERTERON_START,
			AMK0_SETPOINTS1_AMK_BINVERTERON_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_bDcOn, dataWord,
 8002e0e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002e12:	f422 7100 	bic.w	r1, r2, #512	; 0x200
 8002e16:	67b9      	str	r1, [r7, #120]	; 0x78
 8002e18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e1a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2200      	movs	r2, #0
 8002e22:	461d      	mov	r5, r3
 8002e24:	4616      	mov	r6, r2
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	0273      	lsls	r3, r6, #9
 8002e30:	ea43 53d5 	orr.w	r3, r3, r5, lsr #23
 8002e34:	026a      	lsls	r2, r5, #9
 8002e36:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	4311      	orrs	r1, r2
 8002e3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e40:	4629      	mov	r1, r5
 8002e42:	4319      	orrs	r1, r3
 8002e44:	62f9      	str	r1, [r7, #44]	; 0x2c
 8002e46:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002e4a:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_BDCON_START,
			AMK0_SETPOINTS1_AMK_BDCON_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_bEnable, dataWord,
 8002e4e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002e52:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 8002e56:	6739      	str	r1, [r7, #112]	; 0x70
 8002e58:	677b      	str	r3, [r7, #116]	; 0x74
 8002e5a:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2200      	movs	r2, #0
 8002e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e64:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002e84:	4621      	mov	r1, r4
 8002e86:	4311      	orrs	r1, r2
 8002e88:	6239      	str	r1, [r7, #32]
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	4319      	orrs	r1, r3
 8002e8e:	6279      	str	r1, [r7, #36]	; 0x24
 8002e90:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002e94:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_BENABLE_START,
			AMK0_SETPOINTS1_AMK_BENABLE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_bErrorReset, dataWord,
 8002e98:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002e9c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 8002ea0:	6639      	str	r1, [r7, #96]	; 0x60
 8002ea2:	667b      	str	r3, [r7, #100]	; 0x64
 8002ea4:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2200      	movs	r2, #0
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	02cb      	lsls	r3, r1, #11
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	02ca      	lsls	r2, r1, #11
 8002eca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ece:	4621      	mov	r1, r4
 8002ed0:	4311      	orrs	r1, r2
 8002ed2:	61b9      	str	r1, [r7, #24]
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	4319      	orrs	r1, r3
 8002ed8:	61f9      	str	r1, [r7, #28]
 8002eda:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002ede:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_BERRORRESET_START,
			AMK0_SETPOINTS1_AMK_BERRORRESET_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_TargetVelocity, dataWord,
 8002ee2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002ee6:	b291      	uxth	r1, r2
 8002ee8:	6539      	str	r1, [r7, #80]	; 0x50
 8002eea:	657b      	str	r3, [r7, #84]	; 0x54
 8002eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fac9 	bl	8000488 <__aeabi_f2ulz>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	f04f 0000 	mov.w	r0, #0
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	0419      	lsls	r1, r3, #16
 8002f04:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002f08:	0410      	lsls	r0, r2, #16
 8002f0a:	64b8      	str	r0, [r7, #72]	; 0x48
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f10:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f14:	4623      	mov	r3, r4
 8002f16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	462b      	mov	r3, r5
 8002f22:	460a      	mov	r2, r1
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002f2c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_TARGETVELOCITY_START,
			AMK0_SETPOINTS1_AMK_TARGETVELOCITY_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_TorqueLimitPositiv, dataWord,
 8002f30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002f34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f38:	0c1b      	lsrs	r3, r3, #16
 8002f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f42:	041b      	lsls	r3, r3, #16
 8002f44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fa9b 	bl	8000488 <__aeabi_f2ulz>
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	0003      	movs	r3, r0
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	6439      	str	r1, [r7, #64]	; 0x40
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	647b      	str	r3, [r7, #68]	; 0x44
 8002f66:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002f70:	4602      	mov	r2, r0
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	462b      	mov	r3, r5
 8002f78:	460a      	mov	r2, r1
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002f82:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_START,
			AMK0_SETPOINTS1_AMK_TORQUELIMITPOSITIV_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.AMK_TorqueLimitNegativ, dataWord,
 8002f86:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002f8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fd fa77 	bl	8000488 <__aeabi_f2ulz>
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	0403      	lsls	r3, r0, #16
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8002faa:	4621      	mov	r1, r4
 8002fac:	4311      	orrs	r1, r2
 8002fae:	6039      	str	r1, [r7, #0]
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	4319      	orrs	r1, r3
 8002fb4:	6079      	str	r1, [r7, #4]
 8002fb6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002fba:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
            //little_endian
            AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_START,
			AMK0_SETPOINTS1_AMK_TORQUELIMITNEGATIV_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 8002fbe:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002fc2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002fc6:	f7fe fd92 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 8002fca:	2301      	movs	r3, #1
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	37ac      	adds	r7, #172	; 0xac
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000354 	.word	0x20000354

08002fdc <Marshal_VehicleInfo>:
TeCanALRet Marshal_VehicleInfo(uint8_t *TxData) {
 8002fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe0:	b0a6      	sub	sp, #152	; 0x98
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint64_t dataWord = 0;
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	TsVehicleInfo temp;
	TeCanALRet ret;

	temp = VehicleInfo;
 8002ff4:	4a6e      	ldr	r2, [pc, #440]	; (80031b0 <Marshal_VehicleInfo+0x1d4>)
 8002ff6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ffe:	6018      	str	r0, [r3, #0]
 8003000:	3304      	adds	r3, #4
 8003002:	7019      	strb	r1, [r3, #0]
    
    // Reverse linear conversion
	temp.MaximumPowerAvailablePercentage = (temp.MaximumPowerAvailablePercentage
 8003004:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003008:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			- VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_OFFSET)
			/ VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_FACTOR;
            
	temp.SocPercentage = (temp.SocPercentage
 800300c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003010:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			- VEHICLEINFO_SOCPERCENTAGE_OFFSET)
			/ VEHICLEINFO_SOCPERCENTAGE_FACTOR;
            
	temp.VcuErrors = (temp.VcuErrors
 8003014:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003018:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
			- VEHICLEINFO_VCUERRORS_OFFSET)
			/ VEHICLEINFO_VCUERRORS_FACTOR;
            
	temp.VehicleSpeed = (temp.VehicleSpeed
 800301c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003020:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			- VEHICLEINFO_VEHICLESPEED_OFFSET)
			/ VEHICLEINFO_VEHICLESPEED_FACTOR;
            
	temp.VehicleStatus = (temp.VehicleStatus
 8003024:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003028:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			- VEHICLEINFO_VEHICLESTATUS_OFFSET)
			/ VEHICLEINFO_VEHICLESTATUS_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.MaximumPowerAvailablePercentage, dataWord,
 800302c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003030:	f022 087f 	bic.w	r8, r2, #127	; 0x7f
 8003034:	4699      	mov	r9, r3
 8003036:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2200      	movs	r2, #0
 800303e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003040:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003044:	f003 047f 	and.w	r4, r3, #127	; 0x7f
 8003048:	2500      	movs	r5, #0
 800304a:	ea48 0304 	orr.w	r3, r8, r4
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	ea49 0305 	orr.w	r3, r9, r5
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
 8003056:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800305a:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_START,
			VEHICLEINFO_MAXIMUMPOWERAVAILABLEPERCENTAGE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.SocPercentage, dataWord,
 800305e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003062:	f422 41fe 	bic.w	r1, r2, #32512	; 0x7f00
 8003066:	6739      	str	r1, [r7, #112]	; 0x70
 8003068:	677b      	str	r3, [r7, #116]	; 0x74
 800306a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2200      	movs	r2, #0
 8003072:	66bb      	str	r3, [r7, #104]	; 0x68
 8003074:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8003082:	4629      	mov	r1, r5
 8003084:	020b      	lsls	r3, r1, #8
 8003086:	4621      	mov	r1, r4
 8003088:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800308c:	4621      	mov	r1, r4
 800308e:	020a      	lsls	r2, r1, #8
 8003090:	f402 4afe 	and.w	sl, r2, #32512	; 0x7f00
 8003094:	f04f 0b00 	mov.w	fp, #0
 8003098:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800309c:	460b      	mov	r3, r1
 800309e:	ea43 030a 	orr.w	r3, r3, sl
 80030a2:	61bb      	str	r3, [r7, #24]
 80030a4:	4613      	mov	r3, r2
 80030a6:	ea43 030b 	orr.w	r3, r3, fp
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80030b0:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            VEHICLEINFO_SOCPERCENTAGE_START,
			VEHICLEINFO_SOCPERCENTAGE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.VcuErrors, dataWord,
 80030b4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80030b8:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
 80030bc:	6639      	str	r1, [r7, #96]	; 0x60
 80030be:	667b      	str	r3, [r7, #100]	; 0x64
 80030c0:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2200      	movs	r2, #0
 80030c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80030d8:	4629      	mov	r1, r5
 80030da:	040b      	lsls	r3, r1, #16
 80030dc:	4621      	mov	r1, r4
 80030de:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80030e2:	4621      	mov	r1, r4
 80030e4:	040a      	lsls	r2, r1, #16
 80030e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80030ea:	4621      	mov	r1, r4
 80030ec:	4311      	orrs	r1, r2
 80030ee:	6139      	str	r1, [r7, #16]
 80030f0:	4629      	mov	r1, r5
 80030f2:	4319      	orrs	r1, r3
 80030f4:	6179      	str	r1, [r7, #20]
 80030f6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80030fa:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            VEHICLEINFO_VCUERRORS_START,
			VEHICLEINFO_VCUERRORS_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.VehicleSpeed, dataWord,
 80030fe:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003102:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 8003106:	6539      	str	r1, [r7, #80]	; 0x50
 8003108:	657b      	str	r3, [r7, #84]	; 0x54
 800310a:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2200      	movs	r2, #0
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48
 8003114:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003116:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800311a:	460b      	mov	r3, r1
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	647b      	str	r3, [r7, #68]	; 0x44
 8003120:	460b      	mov	r3, r1
 8003122:	061b      	lsls	r3, r3, #24
 8003124:	643b      	str	r3, [r7, #64]	; 0x40
 8003126:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800312a:	4623      	mov	r3, r4
 800312c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003130:	4602      	mov	r2, r0
 8003132:	4313      	orrs	r3, r2
 8003134:	60bb      	str	r3, [r7, #8]
 8003136:	462b      	mov	r3, r5
 8003138:	460a      	mov	r2, r1
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003142:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            VEHICLEINFO_VEHICLESPEED_START,
			VEHICLEINFO_VEHICLESPEED_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.VehicleStatus, dataWord,
 8003146:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800314a:	63ba      	str	r2, [r7, #56]	; 0x38
 800314c:	f023 0303 	bic.w	r3, r3, #3
 8003150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003152:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2200      	movs	r2, #0
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
 800315c:	637a      	str	r2, [r7, #52]	; 0x34
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003168:	000b      	movs	r3, r1
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003176:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800317a:	4623      	mov	r3, r4
 800317c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003180:	4602      	mov	r2, r0
 8003182:	4313      	orrs	r3, r2
 8003184:	603b      	str	r3, [r7, #0]
 8003186:	462b      	mov	r3, r5
 8003188:	460a      	mov	r2, r1
 800318a:	4313      	orrs	r3, r2
 800318c:	607b      	str	r3, [r7, #4]
 800318e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003192:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            VEHICLEINFO_VEHICLESTATUS_START,
			VEHICLEINFO_VEHICLESTATUS_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 8003196:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800319a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800319e:	f7fe fca6 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3798      	adds	r7, #152	; 0x98
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	20000370 	.word	0x20000370

080031b4 <Marshal_PiuControllerQuestion>:
TeCanALRet Marshal_PiuControllerQuestion(uint8_t *TxData) {
 80031b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
	uint64_t dataWord = 0;
 80031be:	f04f 0000 	mov.w	r0, #0
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	e9c7 0104 	strd	r0, r1, [r7, #16]
	TsPiuControllerQuestion temp;
	TeCanALRet ret;

	temp = PiuControllerQuestion;
 80031ca:	4910      	ldr	r1, [pc, #64]	; (800320c <Marshal_PiuControllerQuestion+0x58>)
 80031cc:	7809      	ldrb	r1, [r1, #0]
 80031ce:	7339      	strb	r1, [r7, #12]
    
    // Reverse linear conversion
	temp.PiuQuestion = (temp.PiuQuestion
 80031d0:	7b39      	ldrb	r1, [r7, #12]
 80031d2:	7339      	strb	r1, [r7, #12]
			- PIUCONTROLLERQUESTION_PIUQUESTION_OFFSET)
			/ PIUCONTROLLERQUESTION_PIUQUESTION_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.PiuQuestion, dataWord,
 80031d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031d8:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
 80031dc:	460b      	mov	r3, r1
 80031de:	7b39      	ldrb	r1, [r7, #12]
 80031e0:	b2c9      	uxtb	r1, r1
 80031e2:	2000      	movs	r0, #0
 80031e4:	460c      	mov	r4, r1
 80031e6:	4605      	mov	r5, r0
 80031e8:	ea42 0804 	orr.w	r8, r2, r4
 80031ec:	ea43 0905 	orr.w	r9, r3, r5
 80031f0:	e9c7 8904 	strd	r8, r9, [r7, #16]
            //little_endian
            PIUCONTROLLERQUESTION_PIUQUESTION_START,
			PIUCONTROLLERQUESTION_PIUQUESTION_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031fa:	f7fe fc78 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 80031fe:	2301      	movs	r3, #1
}
 8003200:	4618      	mov	r0, r3
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800320a:	bf00      	nop
 800320c:	20000384 	.word	0x20000384

08003210 <Marshal_DashboardQuestion>:
TeCanALRet Marshal_DashboardQuestion(uint8_t *TxData) {
 8003210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003214:	b086      	sub	sp, #24
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	uint64_t dataWord = 0;
 800321a:	f04f 0000 	mov.w	r0, #0
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	e9c7 0104 	strd	r0, r1, [r7, #16]
	TsDashboardQuestion temp;
	TeCanALRet ret;

	temp = DashboardQuestion;
 8003226:	4910      	ldr	r1, [pc, #64]	; (8003268 <Marshal_DashboardQuestion+0x58>)
 8003228:	7809      	ldrb	r1, [r1, #0]
 800322a:	7339      	strb	r1, [r7, #12]
    
    // Reverse linear conversion
	temp.DcuQuestion = (temp.DcuQuestion
 800322c:	7b39      	ldrb	r1, [r7, #12]
 800322e:	7339      	strb	r1, [r7, #12]
			- DASHBOARDQUESTION_DCUQUESTION_OFFSET)
			/ DASHBOARDQUESTION_DCUQUESTION_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.DcuQuestion, dataWord,
 8003230:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003234:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
 8003238:	460b      	mov	r3, r1
 800323a:	7b39      	ldrb	r1, [r7, #12]
 800323c:	b2c9      	uxtb	r1, r1
 800323e:	2000      	movs	r0, #0
 8003240:	460c      	mov	r4, r1
 8003242:	4605      	mov	r5, r0
 8003244:	ea42 0804 	orr.w	r8, r2, r4
 8003248:	ea43 0905 	orr.w	r9, r3, r5
 800324c:	e9c7 8904 	strd	r8, r9, [r7, #16]
            //little_endian
            DASHBOARDQUESTION_DCUQUESTION_START,
			DASHBOARDQUESTION_DCUQUESTION_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003256:	f7fe fc4a 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 800325a:	2301      	movs	r3, #1
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003266:	bf00      	nop
 8003268:	20000388 	.word	0x20000388

0800326c <Marshal_CoolingControllerQuestion>:
TeCanALRet Marshal_CoolingControllerQuestion(uint8_t *TxData) {
 800326c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003270:	b086      	sub	sp, #24
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
	uint64_t dataWord = 0;
 8003276:	f04f 0000 	mov.w	r0, #0
 800327a:	f04f 0100 	mov.w	r1, #0
 800327e:	e9c7 0104 	strd	r0, r1, [r7, #16]
	TsCoolingControllerQuestion temp;
	TeCanALRet ret;

	temp = CoolingControllerQuestion;
 8003282:	4910      	ldr	r1, [pc, #64]	; (80032c4 <Marshal_CoolingControllerQuestion+0x58>)
 8003284:	7809      	ldrb	r1, [r1, #0]
 8003286:	7339      	strb	r1, [r7, #12]
    
    // Reverse linear conversion
	temp.CcuQuestion = (temp.CcuQuestion
 8003288:	7b39      	ldrb	r1, [r7, #12]
 800328a:	7339      	strb	r1, [r7, #12]
			- COOLINGCONTROLLERQUESTION_CCUQUESTION_OFFSET)
			/ COOLINGCONTROLLERQUESTION_CCUQUESTION_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.CcuQuestion, dataWord,
 800328c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003290:	f020 02ff 	bic.w	r2, r0, #255	; 0xff
 8003294:	460b      	mov	r3, r1
 8003296:	7b39      	ldrb	r1, [r7, #12]
 8003298:	b2c9      	uxtb	r1, r1
 800329a:	2000      	movs	r0, #0
 800329c:	460c      	mov	r4, r1
 800329e:	4605      	mov	r5, r0
 80032a0:	ea42 0804 	orr.w	r8, r2, r4
 80032a4:	ea43 0905 	orr.w	r9, r3, r5
 80032a8:	e9c7 8904 	strd	r8, r9, [r7, #16]
            //little_endian
            COOLINGCONTROLLERQUESTION_CCUQUESTION_START,
			COOLINGCONTROLLERQUESTION_CCUQUESTION_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80032b2:	f7fe fc1c 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 80032b6:	2301      	movs	r3, #1
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032c2:	bf00      	nop
 80032c4:	2000038c 	.word	0x2000038c

080032c8 <Marshal_TemperatureInfo>:
TeCanALRet Marshal_TemperatureInfo(uint8_t *TxData) {
 80032c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032cc:	b0a0      	sub	sp, #128	; 0x80
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	66f8      	str	r0, [r7, #108]	; 0x6c
	uint64_t dataWord = 0;
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	TsTemperatureInfo temp;
	TeCanALRet ret;

	temp = TemperatureInfo;
 80032de:	4a68      	ldr	r2, [pc, #416]	; (8003480 <Marshal_TemperatureInfo+0x1b8>)
 80032e0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80032e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032e8:	6018      	str	r0, [r3, #0]
 80032ea:	3304      	adds	r3, #4
 80032ec:	7019      	strb	r1, [r3, #0]
    
    // Reverse linear conversion
	temp.LeftFrontMotorTemperature = (temp.LeftFrontMotorTemperature
 80032ee:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
			- TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_OFFSET)
			/ TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_FACTOR;
 80032f2:	3314      	adds	r3, #20
 80032f4:	b2db      	uxtb	r3, r3
	temp.LeftFrontMotorTemperature = (temp.LeftFrontMotorTemperature
 80032f6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            
	temp.LeftRearMotorTemperature = (temp.LeftRearMotorTemperature
 80032fa:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
			- TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_OFFSET)
			/ TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_FACTOR;
 80032fe:	3314      	adds	r3, #20
 8003300:	b2db      	uxtb	r3, r3
	temp.LeftRearMotorTemperature = (temp.LeftRearMotorTemperature
 8003302:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            
	temp.RightFrontMotorTemperature = (temp.RightFrontMotorTemperature
 8003306:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
			- TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_OFFSET)
			/ TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_FACTOR;
 800330a:	3314      	adds	r3, #20
 800330c:	b2db      	uxtb	r3, r3
	temp.RightFrontMotorTemperature = (temp.RightFrontMotorTemperature
 800330e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            
	temp.RightRearMotorTemperature = (temp.RightRearMotorTemperature
 8003312:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
			- TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_OFFSET)
			/ TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_FACTOR;
 8003316:	3314      	adds	r3, #20
 8003318:	b2db      	uxtb	r3, r3
	temp.RightRearMotorTemperature = (temp.RightRearMotorTemperature
 800331a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
            
	temp.BatteryTemperature = (temp.BatteryTemperature
 800331e:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
			- TEMPERATUREINFO_BATTERYTEMPERATURE_OFFSET)
			/ TEMPERATUREINFO_BATTERYTEMPERATURE_FACTOR;
 8003322:	3314      	adds	r3, #20
 8003324:	b2db      	uxtb	r3, r3
	temp.BatteryTemperature = (temp.BatteryTemperature
 8003326:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.LeftFrontMotorTemperature, dataWord,
 800332a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800332e:	f022 04ff 	bic.w	r4, r2, #255	; 0xff
 8003332:	461d      	mov	r5, r3
 8003334:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2200      	movs	r2, #0
 800333c:	663b      	str	r3, [r7, #96]	; 0x60
 800333e:	667a      	str	r2, [r7, #100]	; 0x64
 8003340:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003344:	460b      	mov	r3, r1
 8003346:	4323      	orrs	r3, r4
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	4613      	mov	r3, r2
 800334c:	432b      	orrs	r3, r5
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003354:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
            //little_endian
            TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_START,
			TEMPERATUREINFO_LEFTFRONTMOTORTEMPERATURE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.LeftRearMotorTemperature, dataWord,
 8003358:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800335c:	f422 417f 	bic.w	r1, r2, #65280	; 0xff00
 8003360:	65b9      	str	r1, [r7, #88]	; 0x58
 8003362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003364:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2200      	movs	r2, #0
 800336c:	4698      	mov	r8, r3
 800336e:	4691      	mov	r9, r2
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800337c:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8003380:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8003384:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8003388:	4621      	mov	r1, r4
 800338a:	4311      	orrs	r1, r2
 800338c:	61b9      	str	r1, [r7, #24]
 800338e:	4629      	mov	r1, r5
 8003390:	4319      	orrs	r1, r3
 8003392:	61f9      	str	r1, [r7, #28]
 8003394:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003398:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
            //little_endian
            TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_START,
			TEMPERATUREINFO_LEFTREARMOTORTEMPERATURE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.RightFrontMotorTemperature, dataWord,
 800339c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80033a0:	f422 017f 	bic.w	r1, r2, #16711680	; 0xff0000
 80033a4:	6539      	str	r1, [r7, #80]	; 0x50
 80033a6:	657b      	str	r3, [r7, #84]	; 0x54
 80033a8:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2200      	movs	r2, #0
 80033b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80033b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80033c0:	4629      	mov	r1, r5
 80033c2:	040b      	lsls	r3, r1, #16
 80033c4:	4621      	mov	r1, r4
 80033c6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80033ca:	4621      	mov	r1, r4
 80033cc:	040a      	lsls	r2, r1, #16
 80033ce:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80033d2:	4621      	mov	r1, r4
 80033d4:	4311      	orrs	r1, r2
 80033d6:	6139      	str	r1, [r7, #16]
 80033d8:	4629      	mov	r1, r5
 80033da:	4319      	orrs	r1, r3
 80033dc:	6179      	str	r1, [r7, #20]
 80033de:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
            //little_endian
            TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_START,
			TEMPERATUREINFO_RIGHTFRONTMOTORTEMPERATURE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.RightRearMotorTemperature, dataWord,
 80033e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80033ea:	f022 417f 	bic.w	r1, r2, #4278190080	; 0xff000000
 80033ee:	6439      	str	r1, [r7, #64]	; 0x40
 80033f0:	647b      	str	r3, [r7, #68]	; 0x44
 80033f2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003402:	460b      	mov	r3, r1
 8003404:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8003408:	460b      	mov	r3, r1
 800340a:	ea4f 6a03 	mov.w	sl, r3, lsl #24
 800340e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003412:	460b      	mov	r3, r1
 8003414:	ea43 030a 	orr.w	r3, r3, sl
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4613      	mov	r3, r2
 800341c:	ea43 030b 	orr.w	r3, r3, fp
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003426:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
            //little_endian
            TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_START,
			TEMPERATUREINFO_RIGHTREARMOTORTEMPERATURE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.BatteryTemperature, dataWord,
 800342a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800342e:	633a      	str	r2, [r7, #48]	; 0x30
 8003430:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
 8003436:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2200      	movs	r2, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003440:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800344c:	000b      	movs	r3, r1
 800344e:	2200      	movs	r2, #0
 8003450:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003454:	4621      	mov	r1, r4
 8003456:	4311      	orrs	r1, r2
 8003458:	6039      	str	r1, [r7, #0]
 800345a:	4629      	mov	r1, r5
 800345c:	4319      	orrs	r1, r3
 800345e:	6079      	str	r1, [r7, #4]
 8003460:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003464:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
            //little_endian
            TEMPERATUREINFO_BATTERYTEMPERATURE_START,
			TEMPERATUREINFO_BATTERYTEMPERATURE_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 8003468:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800346a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800346e:	f7fe fb3e 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 8003472:	2301      	movs	r3, #1
}
 8003474:	4618      	mov	r0, r3
 8003476:	3780      	adds	r7, #128	; 0x80
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347e:	bf00      	nop
 8003480:	20000394 	.word	0x20000394

08003484 <Marshal_CoolingLoopModes>:
TeCanALRet Marshal_CoolingLoopModes(uint8_t *TxData) {
 8003484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003488:	b0a6      	sub	sp, #152	; 0x98
 800348a:	af00      	add	r7, sp, #0
 800348c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint64_t dataWord = 0;
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	TsCoolingLoopModes temp;
	TeCanALRet ret;

	temp = CoolingLoopModes;
 800349c:	4a78      	ldr	r2, [pc, #480]	; (8003680 <Marshal_CoolingLoopModes+0x1fc>)
 800349e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80034a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80034a6:	6018      	str	r0, [r3, #0]
 80034a8:	3304      	adds	r3, #4
 80034aa:	7019      	strb	r1, [r3, #0]
    
    // Reverse linear conversion
	temp.InverterLoopFanMode = (temp.InverterLoopFanMode
 80034ac:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034b0:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
			- COOLINGLOOPMODES_INVERTERLOOPFANMODE_OFFSET)
			/ COOLINGLOOPMODES_INVERTERLOOPFANMODE_FACTOR;
            
	temp.InverterLoopPumpMode = (temp.InverterLoopPumpMode
 80034b4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80034b8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			- COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_OFFSET)
			/ COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_FACTOR;
            
	temp.SpeakerRequest = (temp.SpeakerRequest
 80034bc:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
			- COOLINGLOOPMODES_SPEAKERREQUEST_OFFSET)
			/ COOLINGLOOPMODES_SPEAKERREQUEST_FACTOR;
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
	temp.SpeakerRequest = (temp.SpeakerRequest
 80034ca:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
            
	temp.MotorLoopFanMode = (temp.MotorLoopFanMode
 80034ce:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80034d2:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
			- COOLINGLOOPMODES_MOTORLOOPFANMODE_OFFSET)
			/ COOLINGLOOPMODES_MOTORLOOPFANMODE_FACTOR;
            
	temp.MotorLoopPumpMode = (temp.MotorLoopPumpMode
 80034d6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80034da:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
			- COOLINGLOOPMODES_MOTORLOOPPUMPMODE_OFFSET)
			/ COOLINGLOOPMODES_MOTORLOOPPUMPMODE_FACTOR;
            
    // CANAL_SET_BITS only writes to correct bits, dataWord is not being overwritten
	dataWord = CANAL_SET_BITS(temp.InverterLoopFanMode, dataWord,
 80034de:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80034e2:	f022 0807 	bic.w	r8, r2, #7
 80034e6:	4699      	mov	r9, r3
 80034e8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2200      	movs	r2, #0
 80034f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80034f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034f6:	f003 0407 	and.w	r4, r3, #7
 80034fa:	2500      	movs	r5, #0
 80034fc:	ea48 0304 	orr.w	r3, r8, r4
 8003500:	623b      	str	r3, [r7, #32]
 8003502:	ea49 0305 	orr.w	r3, r9, r5
 8003506:	627b      	str	r3, [r7, #36]	; 0x24
 8003508:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800350c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            COOLINGLOOPMODES_INVERTERLOOPFANMODE_START,
			COOLINGLOOPMODES_INVERTERLOOPFANMODE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.InverterLoopPumpMode, dataWord,
 8003510:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003514:	f022 0138 	bic.w	r1, r2, #56	; 0x38
 8003518:	6739      	str	r1, [r7, #112]	; 0x70
 800351a:	677b      	str	r3, [r7, #116]	; 0x74
 800351c:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2200      	movs	r2, #0
 8003524:	66bb      	str	r3, [r7, #104]	; 0x68
 8003526:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8003534:	4629      	mov	r1, r5
 8003536:	00cb      	lsls	r3, r1, #3
 8003538:	4621      	mov	r1, r4
 800353a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353e:	4621      	mov	r1, r4
 8003540:	00ca      	lsls	r2, r1, #3
 8003542:	f002 0a38 	and.w	sl, r2, #56	; 0x38
 8003546:	f04f 0b00 	mov.w	fp, #0
 800354a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800354e:	460b      	mov	r3, r1
 8003550:	ea43 030a 	orr.w	r3, r3, sl
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	4613      	mov	r3, r2
 8003558:	ea43 030b 	orr.w	r3, r3, fp
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003562:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_START,
			COOLINGLOOPMODES_INVERTERLOOPPUMPMODE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.SpeakerRequest, dataWord,
 8003566:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800356a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
 800356e:	6639      	str	r1, [r7, #96]	; 0x60
 8003570:	667b      	str	r3, [r7, #100]	; 0x64
 8003572:	f897 308a 	ldrb.w	r3, [r7, #138]	; 0x8a
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2200      	movs	r2, #0
 800357a:	65bb      	str	r3, [r7, #88]	; 0x58
 800357c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800358a:	4629      	mov	r1, r5
 800358c:	018b      	lsls	r3, r1, #6
 800358e:	4621      	mov	r1, r4
 8003590:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003594:	4621      	mov	r1, r4
 8003596:	018a      	lsls	r2, r1, #6
 8003598:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800359c:	4621      	mov	r1, r4
 800359e:	4311      	orrs	r1, r2
 80035a0:	6139      	str	r1, [r7, #16]
 80035a2:	4629      	mov	r1, r5
 80035a4:	4319      	orrs	r1, r3
 80035a6:	6179      	str	r1, [r7, #20]
 80035a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80035ac:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            COOLINGLOOPMODES_SPEAKERREQUEST_START,
			COOLINGLOOPMODES_SPEAKERREQUEST_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.MotorLoopFanMode, dataWord,
 80035b0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80035b4:	f422 61e0 	bic.w	r1, r2, #1792	; 0x700
 80035b8:	6539      	str	r1, [r7, #80]	; 0x50
 80035ba:	657b      	str	r3, [r7, #84]	; 0x54
 80035bc:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2200      	movs	r2, #0
 80035c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80035d4:	4629      	mov	r1, r5
 80035d6:	020b      	lsls	r3, r1, #8
 80035d8:	4621      	mov	r1, r4
 80035da:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80035de:	4621      	mov	r1, r4
 80035e0:	020a      	lsls	r2, r1, #8
 80035e2:	f402 63e0 	and.w	r3, r2, #1792	; 0x700
 80035e6:	643b      	str	r3, [r7, #64]	; 0x40
 80035e8:	2300      	movs	r3, #0
 80035ea:	647b      	str	r3, [r7, #68]	; 0x44
 80035ec:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80035f0:	4623      	mov	r3, r4
 80035f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80035f6:	4602      	mov	r2, r0
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	462b      	mov	r3, r5
 80035fe:	460a      	mov	r2, r1
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003608:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            COOLINGLOOPMODES_MOTORLOOPFANMODE_START,
			COOLINGLOOPMODES_MOTORLOOPFANMODE_LENGTH);
            
	dataWord = CANAL_SET_BITS(temp.MotorLoopPumpMode, dataWord,
 800360c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8003610:	f422 5160 	bic.w	r1, r2, #14336	; 0x3800
 8003614:	63b9      	str	r1, [r7, #56]	; 0x38
 8003616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003618:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2200      	movs	r2, #0
 8003620:	633b      	str	r3, [r7, #48]	; 0x30
 8003622:	637a      	str	r2, [r7, #52]	; 0x34
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003630:	4629      	mov	r1, r5
 8003632:	02cb      	lsls	r3, r1, #11
 8003634:	4621      	mov	r1, r4
 8003636:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
 800363a:	4621      	mov	r1, r4
 800363c:	02ca      	lsls	r2, r1, #11
 800363e:	f402 5360 	and.w	r3, r2, #14336	; 0x3800
 8003642:	62bb      	str	r3, [r7, #40]	; 0x28
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003648:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800364c:	4623      	mov	r3, r4
 800364e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003652:	4602      	mov	r2, r0
 8003654:	4313      	orrs	r3, r2
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	462b      	mov	r3, r5
 800365a:	460a      	mov	r2, r1
 800365c:	4313      	orrs	r3, r2
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003664:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
            //little_endian
            COOLINGLOOPMODES_MOTORLOOPPUMPMODE_START,
			COOLINGLOOPMODES_MOTORLOOPPUMPMODE_LENGTH);
            
	setDataWordIntoByteArray(dataWord, TxData);
 8003668:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800366c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003670:	f7fe fa3d 	bl	8001aee <setDataWordIntoByteArray>

	return CANAL_OK;
 8003674:	2301      	movs	r3, #1
}
 8003676:	4618      	mov	r0, r3
 8003678:	3798      	adds	r7, #152	; 0x98
 800367a:	46bd      	mov	sp, r7
 800367c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003680:	200003a8 	.word	0x200003a8

08003684 <getBinaryUnmarshaller>:

/*********************************************************
 *           FUNCTION POINTER TABLE GETTERS
 *********************************************************/

 static TeCanALRet getBinaryUnmarshaller(uint32_t *ID, BinaryUnmarshaller **pUnmarshal) {
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < NUM_RX_MESSAGES; i++) {
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e013      	b.n	80036bc <getBinaryUnmarshaller+0x38>
		if ((*ID) == CANAL_RX_MESSAGE_TABLE[i].ID) {
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	490d      	ldr	r1, [pc, #52]	; (80036d0 <getBinaryUnmarshaller+0x4c>)
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <getBinaryUnmarshaller+0x32>
			*pUnmarshal = CANAL_RX_MESSAGE_TABLE[i].Unmarshal;
 80036a4:	4a0a      	ldr	r2, [pc, #40]	; (80036d0 <getBinaryUnmarshaller+0x4c>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	601a      	str	r2, [r3, #0]

			return CANAL_OK;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e006      	b.n	80036c4 <getBinaryUnmarshaller+0x40>
	for (int i = 0; i < NUM_RX_MESSAGES; i++) {
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	3301      	adds	r3, #1
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b0b      	cmp	r3, #11
 80036c0:	dde8      	ble.n	8003694 <getBinaryUnmarshaller+0x10>
		}
	}

	return CANAL_UNSUPPORTED_RX_MESSAGE;
 80036c2:	2308      	movs	r3, #8
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	08009ae8 	.word	0x08009ae8

080036d4 <getBinaryMarshaller>:

static TeCanALRet getBinaryMarshaller(TeMessageID *ID, BinaryMarshaller **pMarshal) {
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < NUM_TX_MESSAGES; i++) {
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	e01b      	b.n	800371c <getBinaryMarshaller+0x48>
		if ((*ID) == CANAL_TX_MESSAGE_TABLE[i].ID) {
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	8819      	ldrh	r1, [r3, #0]
 80036e8:	4811      	ldr	r0, [pc, #68]	; (8003730 <getBinaryMarshaller+0x5c>)
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4403      	add	r3, r0
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	4299      	cmp	r1, r3
 80036fa:	d10c      	bne.n	8003716 <getBinaryMarshaller+0x42>
			*pMarshal = CANAL_TX_MESSAGE_TABLE[i].Marshal;
 80036fc:	490c      	ldr	r1, [pc, #48]	; (8003730 <getBinaryMarshaller+0x5c>)
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	4613      	mov	r3, r2
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	3304      	adds	r3, #4
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	601a      	str	r2, [r3, #0]

			return CANAL_OK;
 8003712:	2301      	movs	r3, #1
 8003714:	e006      	b.n	8003724 <getBinaryMarshaller+0x50>
	for (int i = 0; i < NUM_TX_MESSAGES; i++) {
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2b07      	cmp	r3, #7
 8003720:	dde0      	ble.n	80036e4 <getBinaryMarshaller+0x10>
		}
	}

	return CANAL_UNSUPPORTED_TX_MESSAGE;
 8003722:	2309      	movs	r3, #9
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	08009b48 	.word	0x08009b48

08003734 <Print_AMK1_SetPoints1>:

/*********************************************************
 *             PUBLIC FUNCTION DEFINITIONS
 *********************************************************/
 
void Print_AMK1_SetPoints1() {
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 800373a:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <Print_AMK1_SetPoints1+0x34>)
 800373c:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AMK1_SetPoints1");
    CANAL_PRINT("%sAMK_bInverterOn: %u", sep, AMK1_SetPoints1.AMK_bInverterOn);
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 8003740:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sAMK_bDcOn: %u", sep, AMK1_SetPoints1.AMK_bDcOn);
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 8003744:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sAMK_bEnable: %u", sep, AMK1_SetPoints1.AMK_bEnable);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 8003748:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sAMK_bErrorReset: %u", sep, AMK1_SetPoints1.AMK_bErrorReset);
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 800374c:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sAMK_TargetVelocity: %f", sep, AMK1_SetPoints1.AMK_TargetVelocity);
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 8003750:	685b      	ldr	r3, [r3, #4]
    CANAL_PRINT("%sAMK_TorqueLimitPositiv: %f", sep, AMK1_SetPoints1.AMK_TorqueLimitPositiv);
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 8003754:	689b      	ldr	r3, [r3, #8]
    CANAL_PRINT("%sAMK_TorqueLimitNegativ: %f", sep, AMK1_SetPoints1.AMK_TorqueLimitNegativ);
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <Print_AMK1_SetPoints1+0x38>)
 8003758:	68db      	ldr	r3, [r3, #12]
    CANAL_PRINT("\n\r");
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	08009a58 	.word	0x08009a58
 800376c:	200002fc 	.word	0x200002fc

08003770 <Print_AMK1_ActualValues2>:
void Print_AMK1_ActualValues2() {
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <Print_AMK1_ActualValues2+0x28>)
 8003778:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AMK1_ActualValues2");
    CANAL_PRINT("%sAMK_TempMotor: %f", sep, AMK1_ActualValues2.AMK_TempMotor);
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <Print_AMK1_ActualValues2+0x2c>)
 800377c:	681b      	ldr	r3, [r3, #0]
    CANAL_PRINT("%sAMK_TempInverter: %f", sep, AMK1_ActualValues2.AMK_TempInverter);
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <Print_AMK1_ActualValues2+0x2c>)
 8003780:	685b      	ldr	r3, [r3, #4]
    CANAL_PRINT("%sAMK_ErrorInfo: %u", sep, AMK1_ActualValues2.AMK_ErrorInfo);
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <Print_AMK1_ActualValues2+0x2c>)
 8003784:	891b      	ldrh	r3, [r3, #8]
    CANAL_PRINT("%sAMK_TempIGBT: %f", sep, AMK1_ActualValues2.AMK_TempIGBT);
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <Print_AMK1_ActualValues2+0x2c>)
 8003788:	68db      	ldr	r3, [r3, #12]
    CANAL_PRINT("\n\r");
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	08009a58 	.word	0x08009a58
 800379c:	2000030c 	.word	0x2000030c

080037a0 <Print_AMK1_ActualValues1>:
void Print_AMK1_ActualValues1() {
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <Print_AMK1_ActualValues1+0x44>)
 80037a8:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AMK1_ActualValues1");
    CANAL_PRINT("%sAMK_bSystemReady: %u", sep, AMK1_ActualValues1.AMK_bSystemReady);
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sAMK_bError: %u", sep, AMK1_ActualValues1.AMK_bError);
 80037ae:	4b0e      	ldr	r3, [pc, #56]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037b0:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sAMK_bWarn: %u", sep, AMK1_ActualValues1.AMK_bWarn);
 80037b2:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037b4:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sAMK_bQuitDcOn: %u", sep, AMK1_ActualValues1.AMK_bQuitDcOn);
 80037b6:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037b8:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sAMK_bDcOn: %u", sep, AMK1_ActualValues1.AMK_bDcOn);
 80037ba:	4b0b      	ldr	r3, [pc, #44]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037bc:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("%sAMK_bQuitInverterOn: %u", sep, AMK1_ActualValues1.AMK_bQuitInverterOn);
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037c0:	795b      	ldrb	r3, [r3, #5]
    CANAL_PRINT("%sAMK_bInverterOn: %u", sep, AMK1_ActualValues1.AMK_bInverterOn);
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037c4:	799b      	ldrb	r3, [r3, #6]
    CANAL_PRINT("%sAMK_bDerating: %u", sep, AMK1_ActualValues1.AMK_bDerating);
 80037c6:	4b08      	ldr	r3, [pc, #32]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037c8:	79db      	ldrb	r3, [r3, #7]
    CANAL_PRINT("%sAMK_ActualVelocity: %f", sep, AMK1_ActualValues1.AMK_ActualVelocity);
 80037ca:	4b07      	ldr	r3, [pc, #28]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037cc:	689b      	ldr	r3, [r3, #8]
    CANAL_PRINT("%sAMK_TorqueCurrent: %f", sep, AMK1_ActualValues1.AMK_TorqueCurrent);
 80037ce:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037d0:	68db      	ldr	r3, [r3, #12]
    CANAL_PRINT("%sAMK_MagnetizingCurrent: %f", sep, AMK1_ActualValues1.AMK_MagnetizingCurrent);
 80037d2:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <Print_AMK1_ActualValues1+0x48>)
 80037d4:	691b      	ldr	r3, [r3, #16]
    CANAL_PRINT("\n\r");
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	08009a58 	.word	0x08009a58
 80037e8:	2000031c 	.word	0x2000031c

080037ec <Print_AMK0_ActualValues1>:
void Print_AMK0_ActualValues1() {
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <Print_AMK0_ActualValues1+0x44>)
 80037f4:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AMK0_ActualValues1");
    CANAL_PRINT("%sAMK_bSystemReady: %u", sep, AMK0_ActualValues1.AMK_bSystemReady);
 80037f6:	4b0f      	ldr	r3, [pc, #60]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sAMK_bError: %u", sep, AMK0_ActualValues1.AMK_bError);
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 80037fc:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sAMK_bWarn: %u", sep, AMK0_ActualValues1.AMK_bWarn);
 80037fe:	4b0d      	ldr	r3, [pc, #52]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003800:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sAMK_bQuitDcOn: %u", sep, AMK0_ActualValues1.AMK_bQuitDcOn);
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003804:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sAMK_bDcOn: %u", sep, AMK0_ActualValues1.AMK_bDcOn);
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003808:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("%sAMK_bQuitInverterOn: %u", sep, AMK0_ActualValues1.AMK_bQuitInverterOn);
 800380a:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 800380c:	795b      	ldrb	r3, [r3, #5]
    CANAL_PRINT("%sAMK_bInverterOn: %u", sep, AMK0_ActualValues1.AMK_bInverterOn);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003810:	799b      	ldrb	r3, [r3, #6]
    CANAL_PRINT("%sAMK_bDerating: %u", sep, AMK0_ActualValues1.AMK_bDerating);
 8003812:	4b08      	ldr	r3, [pc, #32]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003814:	79db      	ldrb	r3, [r3, #7]
    CANAL_PRINT("%sAMK_ActualVelocity: %f", sep, AMK0_ActualValues1.AMK_ActualVelocity);
 8003816:	4b07      	ldr	r3, [pc, #28]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003818:	689b      	ldr	r3, [r3, #8]
    CANAL_PRINT("%sAMK_TorqueCurrent: %f", sep, AMK0_ActualValues1.AMK_TorqueCurrent);
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 800381c:	68db      	ldr	r3, [r3, #12]
    CANAL_PRINT("%sAMK_MagnetizingCurrent: %f", sep, AMK0_ActualValues1.AMK_MagnetizingCurrent);
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <Print_AMK0_ActualValues1+0x48>)
 8003820:	691b      	ldr	r3, [r3, #16]
    CANAL_PRINT("\n\r");
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	08009a58 	.word	0x08009a58
 8003834:	20000330 	.word	0x20000330

08003838 <Print_AMK0_ActualValues2>:
void Print_AMK0_ActualValues2() {
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 800383e:	4b08      	ldr	r3, [pc, #32]	; (8003860 <Print_AMK0_ActualValues2+0x28>)
 8003840:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AMK0_ActualValues2");
    CANAL_PRINT("%sAMK_TempMotor: %f", sep, AMK0_ActualValues2.AMK_TempMotor);
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <Print_AMK0_ActualValues2+0x2c>)
 8003844:	681b      	ldr	r3, [r3, #0]
    CANAL_PRINT("%sAMK_TempInverter: %f", sep, AMK0_ActualValues2.AMK_TempInverter);
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <Print_AMK0_ActualValues2+0x2c>)
 8003848:	685b      	ldr	r3, [r3, #4]
    CANAL_PRINT("%sAMK_ErrorInfo: %u", sep, AMK0_ActualValues2.AMK_ErrorInfo);
 800384a:	4b06      	ldr	r3, [pc, #24]	; (8003864 <Print_AMK0_ActualValues2+0x2c>)
 800384c:	891b      	ldrh	r3, [r3, #8]
    CANAL_PRINT("%sAMK_TempIGBT: %f", sep, AMK0_ActualValues2.AMK_TempIGBT);
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <Print_AMK0_ActualValues2+0x2c>)
 8003850:	68db      	ldr	r3, [r3, #12]
    CANAL_PRINT("\n\r");
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	08009a58 	.word	0x08009a58
 8003864:	20000344 	.word	0x20000344

08003868 <Print_AMK0_SetPoints1>:
void Print_AMK0_SetPoints1() {
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <Print_AMK0_SetPoints1+0x34>)
 8003870:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AMK0_SetPoints1");
    CANAL_PRINT("%sAMK_bInverterOn: %u", sep, AMK0_SetPoints1.AMK_bInverterOn);
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 8003874:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sAMK_bDcOn: %u", sep, AMK0_SetPoints1.AMK_bDcOn);
 8003876:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 8003878:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sAMK_bEnable: %u", sep, AMK0_SetPoints1.AMK_bEnable);
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 800387c:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sAMK_bErrorReset: %u", sep, AMK0_SetPoints1.AMK_bErrorReset);
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 8003880:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sAMK_TargetVelocity: %f", sep, AMK0_SetPoints1.AMK_TargetVelocity);
 8003882:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 8003884:	685b      	ldr	r3, [r3, #4]
    CANAL_PRINT("%sAMK_TorqueLimitPositiv: %f", sep, AMK0_SetPoints1.AMK_TorqueLimitPositiv);
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 8003888:	689b      	ldr	r3, [r3, #8]
    CANAL_PRINT("%sAMK_TorqueLimitNegativ: %f", sep, AMK0_SetPoints1.AMK_TorqueLimitNegativ);
 800388a:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <Print_AMK0_SetPoints1+0x38>)
 800388c:	68db      	ldr	r3, [r3, #12]
    CANAL_PRINT("\n\r");
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	08009a58 	.word	0x08009a58
 80038a0:	20000354 	.word	0x20000354

080038a4 <Print_AccelerometerData>:
void Print_AccelerometerData() {
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80038aa:	4b07      	ldr	r3, [pc, #28]	; (80038c8 <Print_AccelerometerData+0x24>)
 80038ac:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: AccelerometerData");
    CANAL_PRINT("%sAccelLateral: %d", sep, AccelerometerData.AccelLateral);
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <Print_AccelerometerData+0x28>)
 80038b0:	881b      	ldrh	r3, [r3, #0]
    CANAL_PRINT("%sAccelLongitudinal: %d", sep, AccelerometerData.AccelLongitudinal);
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <Print_AccelerometerData+0x28>)
 80038b4:	885b      	ldrh	r3, [r3, #2]
    CANAL_PRINT("%sYawRate: %d", sep, AccelerometerData.YawRate);
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <Print_AccelerometerData+0x28>)
 80038b8:	889b      	ldrh	r3, [r3, #4]
    CANAL_PRINT("\n\r");
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	08009a58 	.word	0x08009a58
 80038cc:	20000364 	.word	0x20000364

080038d0 <Print_LvBatteryData>:
void Print_LvBatteryData() {
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80038d6:	4b06      	ldr	r3, [pc, #24]	; (80038f0 <Print_LvBatteryData+0x20>)
 80038d8:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: LvBatteryData");
    CANAL_PRINT("%sGlvCurrent: %u", sep, LvBatteryData.GlvCurrent);
 80038da:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <Print_LvBatteryData+0x24>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sGlvVoltage: %u", sep, LvBatteryData.GlvVoltage);
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <Print_LvBatteryData+0x24>)
 80038e0:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("\n\r");
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	08009a58 	.word	0x08009a58
 80038f4:	2000036c 	.word	0x2000036c

080038f8 <Print_VehicleInfo>:
void Print_VehicleInfo() {
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <Print_VehicleInfo+0x2c>)
 8003900:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: VehicleInfo");
    CANAL_PRINT("%sMaximumPowerAvailablePercentage: %u", sep, VehicleInfo.MaximumPowerAvailablePercentage);
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <Print_VehicleInfo+0x30>)
 8003904:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sSocPercentage: %u", sep, VehicleInfo.SocPercentage);
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <Print_VehicleInfo+0x30>)
 8003908:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sVcuErrors: %u", sep, VehicleInfo.VcuErrors);
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <Print_VehicleInfo+0x30>)
 800390c:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sVehicleSpeed: %u", sep, VehicleInfo.VehicleSpeed);
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <Print_VehicleInfo+0x30>)
 8003910:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sVehicleStatus: %u", sep, VehicleInfo.VehicleStatus);
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <Print_VehicleInfo+0x30>)
 8003914:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("\n\r");
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	08009a58 	.word	0x08009a58
 8003928:	20000370 	.word	0x20000370

0800392c <Print_CoolingControllerAnswer>:
void Print_CoolingControllerAnswer() {
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003932:	4b05      	ldr	r3, [pc, #20]	; (8003948 <Print_CoolingControllerAnswer+0x1c>)
 8003934:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: CoolingControllerAnswer");
    CANAL_PRINT("%sCcuAnswer: %u", sep, CoolingControllerAnswer.CcuAnswer);
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <Print_CoolingControllerAnswer+0x20>)
 8003938:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	08009a58 	.word	0x08009a58
 800394c:	20000378 	.word	0x20000378

08003950 <Print_DashboardAnswer>:
void Print_DashboardAnswer() {
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003956:	4b05      	ldr	r3, [pc, #20]	; (800396c <Print_DashboardAnswer+0x1c>)
 8003958:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: DashboardAnswer");
    CANAL_PRINT("%sDcuAnswer: %u", sep, DashboardAnswer.DcuAnswer);
 800395a:	4b05      	ldr	r3, [pc, #20]	; (8003970 <Print_DashboardAnswer+0x20>)
 800395c:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	08009a58 	.word	0x08009a58
 8003970:	2000037c 	.word	0x2000037c

08003974 <Print_PiuControllerAnswer>:
void Print_PiuControllerAnswer() {
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <Print_PiuControllerAnswer+0x1c>)
 800397c:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: PiuControllerAnswer");
    CANAL_PRINT("%sPiuAnswer: %u", sep, PiuControllerAnswer.PiuAnswer);
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <Print_PiuControllerAnswer+0x20>)
 8003980:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	08009a58 	.word	0x08009a58
 8003994:	20000380 	.word	0x20000380

08003998 <Print_PiuControllerQuestion>:
void Print_PiuControllerQuestion() {
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <Print_PiuControllerQuestion+0x1c>)
 80039a0:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: PiuControllerQuestion");
    CANAL_PRINT("%sPiuQuestion: %u", sep, PiuControllerQuestion.PiuQuestion);
 80039a2:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <Print_PiuControllerQuestion+0x20>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	08009a58 	.word	0x08009a58
 80039b8:	20000384 	.word	0x20000384

080039bc <Print_DashboardQuestion>:
void Print_DashboardQuestion() {
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80039c2:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <Print_DashboardQuestion+0x1c>)
 80039c4:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: DashboardQuestion");
    CANAL_PRINT("%sDcuQuestion: %u", sep, DashboardQuestion.DcuQuestion);
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <Print_DashboardQuestion+0x20>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	08009a58 	.word	0x08009a58
 80039dc:	20000388 	.word	0x20000388

080039e0 <Print_CoolingControllerQuestion>:
void Print_CoolingControllerQuestion() {
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 80039e6:	4b05      	ldr	r3, [pc, #20]	; (80039fc <Print_CoolingControllerQuestion+0x1c>)
 80039e8:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: CoolingControllerQuestion");
    CANAL_PRINT("%sCcuQuestion: %u", sep, CoolingControllerQuestion.CcuQuestion);
 80039ea:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <Print_CoolingControllerQuestion+0x20>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	08009a58 	.word	0x08009a58
 8003a00:	2000038c 	.word	0x2000038c

08003a04 <Print_DashboardData>:
void Print_DashboardData() {
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003a0a:	4b05      	ldr	r3, [pc, #20]	; (8003a20 <Print_DashboardData+0x1c>)
 8003a0c:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: DashboardData");
    CANAL_PRINT("%sGpsVehicleSpeed: %f", sep, DashboardData.GpsVehicleSpeed);
 8003a0e:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <Print_DashboardData+0x20>)
 8003a10:	681b      	ldr	r3, [r3, #0]
    CANAL_PRINT("\n\r");
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	08009a58 	.word	0x08009a58
 8003a24:	20000390 	.word	0x20000390

08003a28 <Print_TemperatureInfo>:
void Print_TemperatureInfo() {
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003a2e:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <Print_TemperatureInfo+0x2c>)
 8003a30:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: TemperatureInfo");
    CANAL_PRINT("%sLeftFrontMotorTemperature: %u", sep, TemperatureInfo.LeftFrontMotorTemperature);
 8003a32:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <Print_TemperatureInfo+0x30>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sLeftRearMotorTemperature: %u", sep, TemperatureInfo.LeftRearMotorTemperature);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <Print_TemperatureInfo+0x30>)
 8003a38:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sRightFrontMotorTemperature: %u", sep, TemperatureInfo.RightFrontMotorTemperature);
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <Print_TemperatureInfo+0x30>)
 8003a3c:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sRightRearMotorTemperature: %u", sep, TemperatureInfo.RightRearMotorTemperature);
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <Print_TemperatureInfo+0x30>)
 8003a40:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sBatteryTemperature: %u", sep, TemperatureInfo.BatteryTemperature);
 8003a42:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <Print_TemperatureInfo+0x30>)
 8003a44:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("\n\r");
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	08009a58 	.word	0x08009a58
 8003a58:	20000394 	.word	0x20000394

08003a5c <Print_CoolingLoopsData>:
void Print_CoolingLoopsData() {
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <Print_CoolingLoopsData+0x3c>)
 8003a64:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: CoolingLoopsData");
    CANAL_PRINT("%sInverterLoopFluidTemp: %u", sep, CoolingLoopsData.InverterLoopFluidTemp);
 8003a66:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sMotorLoopFluidTemp: %u", sep, CoolingLoopsData.MotorLoopFluidTemp);
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a6c:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sInverterLoopPressure: %u", sep, CoolingLoopsData.InverterLoopPressure);
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a70:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sMotorLoopPressure: %u", sep, CoolingLoopsData.MotorLoopPressure);
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a74:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sInverterLoopTempSensorStatus: %u", sep, CoolingLoopsData.InverterLoopTempSensorStatus);
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a78:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("%sMotorLoopTempSensorStatus: %u", sep, CoolingLoopsData.MotorLoopTempSensorStatus);
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a7c:	795b      	ldrb	r3, [r3, #5]
    CANAL_PRINT("%sInverterLoopPressureSensorStatus: %u", sep, CoolingLoopsData.InverterLoopPressureSensorStatus);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a80:	799b      	ldrb	r3, [r3, #6]
    CANAL_PRINT("%sMotorLoopPressureSensorStatus: %u", sep, CoolingLoopsData.MotorLoopPressureSensorStatus);
 8003a82:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a84:	79db      	ldrb	r3, [r3, #7]
    CANAL_PRINT("%sMC_CoolingLoopsData: %u", sep, CoolingLoopsData.MC_CoolingLoopsData);
 8003a86:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <Print_CoolingLoopsData+0x40>)
 8003a88:	7a1b      	ldrb	r3, [r3, #8]
    CANAL_PRINT("\n\r");
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	08009a58 	.word	0x08009a58
 8003a9c:	2000039c 	.word	0x2000039c

08003aa0 <Print_CoolingLoopModes>:
void Print_CoolingLoopModes() {
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003aa6:	4b09      	ldr	r3, [pc, #36]	; (8003acc <Print_CoolingLoopModes+0x2c>)
 8003aa8:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: CoolingLoopModes");
    CANAL_PRINT("%sInverterLoopFanMode: %u", sep, CoolingLoopModes.InverterLoopFanMode);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <Print_CoolingLoopModes+0x30>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sInverterLoopPumpMode: %u", sep, CoolingLoopModes.InverterLoopPumpMode);
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <Print_CoolingLoopModes+0x30>)
 8003ab0:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sSpeakerRequest: %u", sep, CoolingLoopModes.SpeakerRequest);
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <Print_CoolingLoopModes+0x30>)
 8003ab4:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sMotorLoopFanMode: %u", sep, CoolingLoopModes.MotorLoopFanMode);
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <Print_CoolingLoopModes+0x30>)
 8003ab8:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sMotorLoopPumpMode: %u", sep, CoolingLoopModes.MotorLoopPumpMode);
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <Print_CoolingLoopModes+0x30>)
 8003abc:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("\n\r");
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	08009a58 	.word	0x08009a58
 8003ad0:	200003a8 	.word	0x200003a8

08003ad4 <Print_PedalPositions>:
void Print_PedalPositions() {
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
	char* sep ="\n\r\t";
 8003ada:	4b0f      	ldr	r3, [pc, #60]	; (8003b18 <Print_PedalPositions+0x44>)
 8003adc:	607b      	str	r3, [r7, #4]

	CANAL_PRINT("MESSAGE: PedalPositions");
    CANAL_PRINT("%sBrakePedalPosition0: %u", sep, PedalPositions.BrakePedalPosition0);
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <Print_PedalPositions+0x48>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
    CANAL_PRINT("%sBrakePedalPosition1: %u", sep, PedalPositions.BrakePedalPosition1);
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <Print_PedalPositions+0x48>)
 8003ae4:	785b      	ldrb	r3, [r3, #1]
    CANAL_PRINT("%sAcceleratorPedalPosition1: %u", sep, PedalPositions.AcceleratorPedalPosition1);
 8003ae6:	4b0d      	ldr	r3, [pc, #52]	; (8003b1c <Print_PedalPositions+0x48>)
 8003ae8:	789b      	ldrb	r3, [r3, #2]
    CANAL_PRINT("%sAcceleratorPedalPosition0: %u", sep, PedalPositions.AcceleratorPedalPosition0);
 8003aea:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <Print_PedalPositions+0x48>)
 8003aec:	78db      	ldrb	r3, [r3, #3]
    CANAL_PRINT("%sDriveButton: %u", sep, PedalPositions.DriveButton);
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <Print_PedalPositions+0x48>)
 8003af0:	791b      	ldrb	r3, [r3, #4]
    CANAL_PRINT("%sBpps0Status: %u", sep, PedalPositions.Bpps0Status);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <Print_PedalPositions+0x48>)
 8003af4:	795b      	ldrb	r3, [r3, #5]
    CANAL_PRINT("%sBpps1Status: %u", sep, PedalPositions.Bpps1Status);
 8003af6:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <Print_PedalPositions+0x48>)
 8003af8:	799b      	ldrb	r3, [r3, #6]
    CANAL_PRINT("%sApps0Status: %u", sep, PedalPositions.Apps0Status);
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <Print_PedalPositions+0x48>)
 8003afc:	79db      	ldrb	r3, [r3, #7]
    CANAL_PRINT("%sApps1Status: %u", sep, PedalPositions.Apps1Status);
 8003afe:	4b07      	ldr	r3, [pc, #28]	; (8003b1c <Print_PedalPositions+0x48>)
 8003b00:	7a1b      	ldrb	r3, [r3, #8]
    CANAL_PRINT("%sBspdFault: %u", sep, PedalPositions.BspdFault);
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <Print_PedalPositions+0x48>)
 8003b04:	7a5b      	ldrb	r3, [r3, #9]
    CANAL_PRINT("%sMC_PedalPosition: %u", sep, PedalPositions.MC_PedalPosition);
 8003b06:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <Print_PedalPositions+0x48>)
 8003b08:	7a9b      	ldrb	r3, [r3, #10]
    CANAL_PRINT("\n\r");
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	08009a58 	.word	0x08009a58
 8003b1c:	200003b0 	.word	0x200003b0

08003b20 <Print_Message>:

TeCanALRet Print_Message(uint32_t *ID) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
	CanALPrinter* print;

	for (int i = 0; i < TOTAL_MESSAGES; i++) {
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e014      	b.n	8003b58 <Print_Message+0x38>
		if ((*ID) == CANAL_PRINTER_TABLE[i].ID) {
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	490d      	ldr	r1, [pc, #52]	; (8003b68 <Print_Message+0x48>)
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d109      	bne.n	8003b52 <Print_Message+0x32>
			print = CANAL_PRINTER_TABLE[i].printer;
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <Print_Message+0x48>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	60bb      	str	r3, [r7, #8]

			(*print)();
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	4798      	blx	r3

			return CANAL_OK;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e006      	b.n	8003b60 <Print_Message+0x40>
	for (int i = 0; i < TOTAL_MESSAGES; i++) {
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3301      	adds	r3, #1
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2b13      	cmp	r3, #19
 8003b5c:	dde7      	ble.n	8003b2e <Print_Message+0xe>
		}
	}

	return CANAL_UNSUPPORTED_TX_MESSAGE;
 8003b5e:	2309      	movs	r3, #9
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	08009ba8 	.word	0x08009ba8

08003b6c <GetTxDataLength>:

TeCanALRet GetTxDataLength(TeMessageID *ID, uint32_t *dlc) {
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < NUM_TX_MESSAGES; i++) {
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e01b      	b.n	8003bb4 <GetTxDataLength+0x48>
			if ((*ID) == CANAL_TX_MESSAGE_TABLE[i].ID) {
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	8819      	ldrh	r1, [r3, #0]
 8003b80:	4811      	ldr	r0, [pc, #68]	; (8003bc8 <GetTxDataLength+0x5c>)
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4403      	add	r3, r0
 8003b8e:	881b      	ldrh	r3, [r3, #0]
 8003b90:	4299      	cmp	r1, r3
 8003b92:	d10c      	bne.n	8003bae <GetTxDataLength+0x42>
				*dlc = CANAL_TX_MESSAGE_TABLE[i].dlc;
 8003b94:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <GetTxDataLength+0x5c>)
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	601a      	str	r2, [r3, #0]

				return CANAL_OK;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e006      	b.n	8003bbc <GetTxDataLength+0x50>
	for (int i = 0; i < NUM_TX_MESSAGES; i++) {
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b07      	cmp	r3, #7
 8003bb8:	dde0      	ble.n	8003b7c <GetTxDataLength+0x10>
			}
		}

    return CANAL_UNSUPPORTED_TX_MESSAGE;
 8003bba:	2309      	movs	r3, #9
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	08009b48 	.word	0x08009b48

08003bcc <UnmarshalBinary>:

// UnmarshalBinary acts as a generic binary unmarshaller
TeCanALRet UnmarshalBinary(uint32_t *ID, uint8_t* rawData) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
	BinaryUnmarshaller* unmarshal;
	TeCanALRet ret;
 
	if ((ret = getBinaryUnmarshaller(ID, &unmarshal)) != CANAL_OK)
 8003bd6:	f107 0308 	add.w	r3, r7, #8
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fd51 	bl	8003684 <getBinaryUnmarshaller>
 8003be2:	4603      	mov	r3, r0
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d001      	beq.n	8003bf0 <UnmarshalBinary+0x24>
		return ret;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	e003      	b.n	8003bf8 <UnmarshalBinary+0x2c>
 
	return (*unmarshal)(rawData);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6838      	ldr	r0, [r7, #0]
 8003bf4:	4798      	blx	r3
 8003bf6:	4603      	mov	r3, r0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <MarshalBinary>:

// MarshalBinary acts as a generic binary marshaller
TeCanALRet MarshalBinary(TeMessageID *ID, uint8_t* txData) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	BinaryMarshaller* marshal;
	TeCanALRet ret;
 
	if ((ret = getBinaryMarshaller(ID, &marshal)) != CANAL_OK) return ret;
 8003c0a:	f107 0308 	add.w	r3, r7, #8
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fd5f 	bl	80036d4 <getBinaryMarshaller>
 8003c16:	4603      	mov	r3, r0
 8003c18:	73fb      	strb	r3, [r7, #15]
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d001      	beq.n	8003c24 <MarshalBinary+0x24>
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	e003      	b.n	8003c2c <MarshalBinary+0x2c>
 
	return (*marshal)(txData);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	4798      	blx	r3
 8003c2a:	4603      	mov	r3, r0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c38:	f001 f8dd 	bl	8004df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c3c:	f000 f81e 	bl	8003c7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c40:	f000 f878 	bl	8003d34 <MX_GPIO_Init>
  //MX_ADC1_Init();
  //MX_SPI4_Init();
  //MX_USART2_UART_Init();
  //MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
  Printf_Init(&debug_uart);
 8003c44:	4808      	ldr	r0, [pc, #32]	; (8003c68 <main+0x34>)
 8003c46:	f000 faf1 	bl	800422c <Printf_Init>
  CanAL_Init(&pt1_can);
 8003c4a:	4808      	ldr	r0, [pc, #32]	; (8003c6c <main+0x38>)
 8003c4c:	f7fd fe08 	bl	8001860 <CanAL_Init>
  CanAL_Init(&veh_can);
 8003c50:	4807      	ldr	r0, [pc, #28]	; (8003c70 <main+0x3c>)
 8003c52:	f7fd fe05 	bl	8001860 <CanAL_Init>
  ADC_Init(&adc1);
 8003c56:	4807      	ldr	r0, [pc, #28]	; (8003c74 <main+0x40>)
 8003c58:	f7fd fb92 	bl	8001380 <ADC_Init>
  InverterStartupControl_initialize();
 8003c5c:	f7fd fa44 	bl	80010e8 <InverterStartupControl_initialize>

  RtScheduler_startRunning(tasks);
 8003c60:	4805      	ldr	r0, [pc, #20]	; (8003c78 <main+0x44>)
 8003c62:	f000 fb9b 	bl	800439c <RtScheduler_startRunning>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c66:	e7fe      	b.n	8003c66 <main+0x32>
 8003c68:	200000ac 	.word	0x200000ac
 8003c6c:	20000094 	.word	0x20000094
 8003c70:	200000a0 	.word	0x200000a0
 8003c74:	20000088 	.word	0x20000088
 8003c78:	200000bc 	.word	0x200000bc

08003c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b094      	sub	sp, #80	; 0x50
 8003c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c82:	f107 031c 	add.w	r3, r7, #28
 8003c86:	2234      	movs	r2, #52	; 0x34
 8003c88:	2100      	movs	r1, #0
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f005 fa76 	bl	800917c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <SystemClock_Config+0xb0>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <SystemClock_Config+0xb0>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	6413      	str	r3, [r2, #64]	; 0x40
 8003cac:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <SystemClock_Config+0xb0>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003cb8:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <SystemClock_Config+0xb4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003cc0:	4a1b      	ldr	r2, [pc, #108]	; (8003d30 <SystemClock_Config+0xb4>)
 8003cc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <SystemClock_Config+0xb4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cdc:	2310      	movs	r3, #16
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ce4:	f107 031c 	add.w	r3, r7, #28
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 fedd 	bl	8006aa8 <HAL_RCC_OscConfig>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8003cf4:	f000 fa8e 	bl	8004214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cf8:	230f      	movs	r3, #15
 8003cfa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	2100      	movs	r1, #0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 f975 	bl	8007004 <HAL_RCC_ClockConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003d20:	f000 fa78 	bl	8004214 <Error_Handler>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3750      	adds	r7, #80	; 0x50
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40007000 	.word	0x40007000

08003d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08c      	sub	sp, #48	; 0x30
 8003d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3a:	f107 031c 	add.w	r3, r7, #28
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
 8003d48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d4a:	4b48      	ldr	r3, [pc, #288]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4e:	4a47      	ldr	r2, [pc, #284]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	6313      	str	r3, [r2, #48]	; 0x30
 8003d56:	4b45      	ldr	r3, [pc, #276]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5a:	f003 0310 	and.w	r3, r3, #16
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d62:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d66:	4a41      	ldr	r2, [pc, #260]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d6e:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7a:	4b3c      	ldr	r3, [pc, #240]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	4a3b      	ldr	r2, [pc, #236]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	6313      	str	r3, [r2, #48]	; 0x30
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d92:	4b36      	ldr	r3, [pc, #216]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a35      	ldr	r2, [pc, #212]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b33      	ldr	r3, [pc, #204]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003daa:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003db0:	f043 0308 	orr.w	r3, r3, #8
 8003db4:	6313      	str	r3, [r2, #48]	; 0x30
 8003db6:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dc2:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003dc8:	f043 0302 	orr.w	r3, r3, #2
 8003dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <MX_GPIO_Init+0x138>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	607b      	str	r3, [r7, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_SPI_CS_GPIO_Port, IMU_SPI_CS_Pin, GPIO_PIN_RESET);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2110      	movs	r1, #16
 8003dde:	4824      	ldr	r0, [pc, #144]	; (8003e70 <MX_GPIO_Init+0x13c>)
 8003de0:	f002 fe48 	bl	8006a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_LED_Pin|START_BUTTON_LED_EN_Pin, GPIO_PIN_RESET);
 8003de4:	2200      	movs	r2, #0
 8003de6:	2128      	movs	r1, #40	; 0x28
 8003de8:	4822      	ldr	r0, [pc, #136]	; (8003e74 <MX_GPIO_Init+0x140>)
 8003dea:	f002 fe43 	bl	8006a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin, GPIO_PIN_RESET);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2109      	movs	r1, #9
 8003df2:	4821      	ldr	r0, [pc, #132]	; (8003e78 <MX_GPIO_Init+0x144>)
 8003df4:	f002 fe3e 	bl	8006a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_SPI_CS_Pin */
  GPIO_InitStruct.Pin = IMU_SPI_CS_Pin;
 8003df8:	2310      	movs	r3, #16
 8003dfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	2300      	movs	r3, #0
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(IMU_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8003e08:	f107 031c 	add.w	r3, r7, #28
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4818      	ldr	r0, [pc, #96]	; (8003e70 <MX_GPIO_Init+0x13c>)
 8003e10:	f002 fc84 	bl	800671c <HAL_GPIO_Init>

  /*Configure GPIO pins : DEBUG_LED_Pin START_BUTTON_LED_EN_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|START_BUTTON_LED_EN_Pin;
 8003e14:	2328      	movs	r3, #40	; 0x28
 8003e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e24:	f107 031c 	add.w	r3, r7, #28
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4812      	ldr	r0, [pc, #72]	; (8003e74 <MX_GPIO_Init+0x140>)
 8003e2c:	f002 fc76 	bl	800671c <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_LIGHT_EN_Pin RTDS_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_LIGHT_EN_Pin|RTDS_EN_Pin;
 8003e30:	2309      	movs	r3, #9
 8003e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e34:	2301      	movs	r3, #1
 8003e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e40:	f107 031c 	add.w	r3, r7, #28
 8003e44:	4619      	mov	r1, r3
 8003e46:	480c      	ldr	r0, [pc, #48]	; (8003e78 <MX_GPIO_Init+0x144>)
 8003e48:	f002 fc68 	bl	800671c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_N_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_N_Pin;
 8003e4c:	2340      	movs	r3, #64	; 0x40
 8003e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(START_BUTTON_N_GPIO_Port, &GPIO_InitStruct);
 8003e58:	f107 031c 	add.w	r3, r7, #28
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4806      	ldr	r0, [pc, #24]	; (8003e78 <MX_GPIO_Init+0x144>)
 8003e60:	f002 fc5c 	bl	800671c <HAL_GPIO_Init>

}
 8003e64:	bf00      	nop
 8003e66:	3730      	adds	r7, #48	; 0x30
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40020000 	.word	0x40020000
 8003e78:	40021800 	.word	0x40021800

08003e7c <setControlSystemInputs>:

/* USER CODE BEGIN 4 */

// Step functions
void setControlSystemInputs(void *args) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  ADC_Scan(&adc1);
 8003e84:	4893      	ldr	r0, [pc, #588]	; (80040d4 <setControlSystemInputs+0x258>)
 8003e86:	f7fd fafd 	bl	8001484 <ADC_Scan>
  InverterStartupControl_U.APPS = Get_Single_Chan_Average(&adc1, APPS2_ADC_CHANNEL);
 8003e8a:	210b      	movs	r1, #11
 8003e8c:	4891      	ldr	r0, [pc, #580]	; (80040d4 <setControlSystemInputs+0x258>)
 8003e8e:	f7fd fb95 	bl	80015bc <Get_Single_Chan_Average>
 8003e92:	4603      	mov	r3, r0
 8003e94:	ee07 3a90 	vmov	s15, r3
 8003e98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003e9e:	ed83 7b00 	vstr	d7, [r3]
  InverterStartupControl_U.AMK_ActualVelocity_R = AMK1_ActualValues1.AMK_ActualVelocity;         
 8003ea2:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <setControlSystemInputs+0x260>)
 8003ea4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ea8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eac:	4b8a      	ldr	r3, [pc, #552]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003eae:	ed83 7b02 	vstr	d7, [r3, #8]
  InverterStartupControl_U.AMK_MagnetizingCurrent_R = AMK1_ActualValues1.AMK_MagnetizingCurrent;
 8003eb2:	4b8a      	ldr	r3, [pc, #552]	; (80040dc <setControlSystemInputs+0x260>)
 8003eb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003eb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ebc:	4b86      	ldr	r3, [pc, #536]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003ebe:	ed83 7b04 	vstr	d7, [r3, #16]
  InverterStartupControl_U.AMK_TorqueCurrent_R = AMK1_ActualValues1.AMK_TorqueCurrent;          
 8003ec2:	4b86      	ldr	r3, [pc, #536]	; (80040dc <setControlSystemInputs+0x260>)
 8003ec4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ec8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ecc:	4b82      	ldr	r3, [pc, #520]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003ece:	ed83 7b06 	vstr	d7, [r3, #24]
  InverterStartupControl_U.AMK_bDcOn_R = AMK1_ActualValues1.AMK_bDcOn;                  
 8003ed2:	4b82      	ldr	r3, [pc, #520]	; (80040dc <setControlSystemInputs+0x260>)
 8003ed4:	791b      	ldrb	r3, [r3, #4]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003ee0:	4b7d      	ldr	r3, [pc, #500]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003ee2:	ed83 7b08 	vstr	d7, [r3, #32]
  InverterStartupControl_U.AMK_bDerating_R = AMK1_ActualValues1.AMK_bDerating;              
 8003ee6:	4b7d      	ldr	r3, [pc, #500]	; (80040dc <setControlSystemInputs+0x260>)
 8003ee8:	79db      	ldrb	r3, [r3, #7]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	ee07 3a90 	vmov	s15, r3
 8003ef0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003ef4:	4b78      	ldr	r3, [pc, #480]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003ef6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
  InverterStartupControl_U.AMK_bError_R = AMK1_ActualValues1.AMK_bError;                 
 8003efa:	4b78      	ldr	r3, [pc, #480]	; (80040dc <setControlSystemInputs+0x260>)
 8003efc:	785b      	ldrb	r3, [r3, #1]
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	ee07 3a90 	vmov	s15, r3
 8003f04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f08:	4b73      	ldr	r3, [pc, #460]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f0a:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
  InverterStartupControl_U.AMK_bInverterOn_R = AMK1_ActualValues1.AMK_bInverterOn;            
 8003f0e:	4b73      	ldr	r3, [pc, #460]	; (80040dc <setControlSystemInputs+0x260>)
 8003f10:	799b      	ldrb	r3, [r3, #6]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f1c:	4b6e      	ldr	r3, [pc, #440]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f1e:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
  InverterStartupControl_U.AMK_bQuitDcOn_R = AMK1_ActualValues1.AMK_bQuitDcOn;              
 8003f22:	4b6e      	ldr	r3, [pc, #440]	; (80040dc <setControlSystemInputs+0x260>)
 8003f24:	78db      	ldrb	r3, [r3, #3]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f30:	4b69      	ldr	r3, [pc, #420]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f32:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
  InverterStartupControl_U.AMK_bQuitInverterOn_R = AMK1_ActualValues1.AMK_bQuitInverterOn;        
 8003f36:	4b69      	ldr	r3, [pc, #420]	; (80040dc <setControlSystemInputs+0x260>)
 8003f38:	795b      	ldrb	r3, [r3, #5]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	ee07 3a90 	vmov	s15, r3
 8003f40:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f44:	4b64      	ldr	r3, [pc, #400]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f46:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
  InverterStartupControl_U.AMK_bSystemReady_R = AMK1_ActualValues1.AMK_bSystemReady;           
 8003f4a:	4b64      	ldr	r3, [pc, #400]	; (80040dc <setControlSystemInputs+0x260>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f58:	4b5f      	ldr	r3, [pc, #380]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f5a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
  InverterStartupControl_U.AMK_bWarn_R = AMK1_ActualValues1.AMK_bWarn;                  
 8003f5e:	4b5f      	ldr	r3, [pc, #380]	; (80040dc <setControlSystemInputs+0x260>)
 8003f60:	789b      	ldrb	r3, [r3, #2]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f6c:	4b5a      	ldr	r3, [pc, #360]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f6e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
  InverterStartupControl_U.AMK_ErrorInfo_R = AMK1_ActualValues2.AMK_ErrorInfo;              
 8003f72:	4b5b      	ldr	r3, [pc, #364]	; (80040e0 <setControlSystemInputs+0x264>)
 8003f74:	891b      	ldrh	r3, [r3, #8]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	ee07 3a90 	vmov	s15, r3
 8003f7c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003f80:	4b55      	ldr	r3, [pc, #340]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f82:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
  InverterStartupControl_U.AMK_TempIGBT_R = AMK1_ActualValues2.AMK_TempIGBT;               
 8003f86:	4b56      	ldr	r3, [pc, #344]	; (80040e0 <setControlSystemInputs+0x264>)
 8003f88:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003f90:	4b51      	ldr	r3, [pc, #324]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003f92:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
  InverterStartupControl_U.AMK_TempInverter_R = AMK1_ActualValues2.AMK_TempInverter;           
 8003f96:	4b52      	ldr	r3, [pc, #328]	; (80040e0 <setControlSystemInputs+0x264>)
 8003f98:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fa0:	4b4d      	ldr	r3, [pc, #308]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003fa2:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
  InverterStartupControl_U.AMK_TempMotor_R = AMK1_ActualValues2.AMK_TempMotor;              
 8003fa6:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <setControlSystemInputs+0x264>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fb0:	4b49      	ldr	r3, [pc, #292]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003fb2:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
  InverterStartupControl_U.AMK_ActualVelocity_L = AMK0_ActualValues1.AMK_ActualVelocity;         
 8003fb6:	4b4b      	ldr	r3, [pc, #300]	; (80040e4 <setControlSystemInputs+0x268>)
 8003fb8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003fc2:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
  InverterStartupControl_U.AMK_MagnetizingCurrent_L = AMK0_ActualValues1.AMK_MagnetizingCurrent;     
 8003fc6:	4b47      	ldr	r3, [pc, #284]	; (80040e4 <setControlSystemInputs+0x268>)
 8003fc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fcc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fd0:	4b41      	ldr	r3, [pc, #260]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003fd2:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
  InverterStartupControl_U.AMK_TorqueCurrent_L = AMK0_ActualValues1.AMK_TorqueCurrent;          
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <setControlSystemInputs+0x268>)
 8003fd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003fe0:	4b3d      	ldr	r3, [pc, #244]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003fe2:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
  InverterStartupControl_U.AMK_bDcOn_L = AMK0_ActualValues1.AMK_bDcOn;                  
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	; (80040e4 <setControlSystemInputs+0x268>)
 8003fe8:	791b      	ldrb	r3, [r3, #4]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	ee07 3a90 	vmov	s15, r3
 8003ff0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003ff4:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <setControlSystemInputs+0x25c>)
 8003ff6:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
  InverterStartupControl_U.AMK_bDerating_L = AMK0_ActualValues1.AMK_bDerating;              
 8003ffa:	4b3a      	ldr	r3, [pc, #232]	; (80040e4 <setControlSystemInputs+0x268>)
 8003ffc:	79db      	ldrb	r3, [r3, #7]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	ee07 3a90 	vmov	s15, r3
 8004004:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004008:	4b33      	ldr	r3, [pc, #204]	; (80040d8 <setControlSystemInputs+0x25c>)
 800400a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
  InverterStartupControl_U.AMK_bError_L = AMK0_ActualValues1.AMK_bError;                 
 800400e:	4b35      	ldr	r3, [pc, #212]	; (80040e4 <setControlSystemInputs+0x268>)
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	b2db      	uxtb	r3, r3
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800401c:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <setControlSystemInputs+0x25c>)
 800401e:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
  InverterStartupControl_U.AMK_bInverterOn_L = AMK0_ActualValues1.AMK_bInverterOn;            
 8004022:	4b30      	ldr	r3, [pc, #192]	; (80040e4 <setControlSystemInputs+0x268>)
 8004024:	799b      	ldrb	r3, [r3, #6]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004030:	4b29      	ldr	r3, [pc, #164]	; (80040d8 <setControlSystemInputs+0x25c>)
 8004032:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
  InverterStartupControl_U.AMK_bQuitDcOn_L = AMK0_ActualValues1.AMK_bQuitDcOn;              
 8004036:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <setControlSystemInputs+0x268>)
 8004038:	78db      	ldrb	r3, [r3, #3]
 800403a:	b2db      	uxtb	r3, r3
 800403c:	ee07 3a90 	vmov	s15, r3
 8004040:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <setControlSystemInputs+0x25c>)
 8004046:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
  InverterStartupControl_U.AMK_bQuitInverterOn_L = AMK0_ActualValues1.AMK_bQuitInverterOn;        
 800404a:	4b26      	ldr	r3, [pc, #152]	; (80040e4 <setControlSystemInputs+0x268>)
 800404c:	795b      	ldrb	r3, [r3, #5]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004058:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <setControlSystemInputs+0x25c>)
 800405a:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
  InverterStartupControl_U.AMK_bSystemReady_L = AMK0_ActualValues1.AMK_bSystemReady;           
 800405e:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <setControlSystemInputs+0x268>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	ee07 3a90 	vmov	s15, r3
 8004068:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <setControlSystemInputs+0x25c>)
 800406e:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
  InverterStartupControl_U.AMK_bWarn_L = AMK0_ActualValues1.AMK_bWarn;                  
 8004072:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <setControlSystemInputs+0x268>)
 8004074:	789b      	ldrb	r3, [r3, #2]
 8004076:	b2db      	uxtb	r3, r3
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <setControlSystemInputs+0x25c>)
 8004082:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
  InverterStartupControl_U.AMK_ErrorInfo_L = AMK0_ActualValues2.AMK_ErrorInfo;              
 8004086:	4b18      	ldr	r3, [pc, #96]	; (80040e8 <setControlSystemInputs+0x26c>)
 8004088:	891b      	ldrh	r3, [r3, #8]
 800408a:	b29b      	uxth	r3, r3
 800408c:	ee07 3a90 	vmov	s15, r3
 8004090:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004094:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <setControlSystemInputs+0x25c>)
 8004096:	ed83 7b36 	vstr	d7, [r3, #216]	; 0xd8
  InverterStartupControl_U.AMK_TempIGBT_L = AMK0_ActualValues2.AMK_TempIGBT;               
 800409a:	4b13      	ldr	r3, [pc, #76]	; (80040e8 <setControlSystemInputs+0x26c>)
 800409c:	edd3 7a03 	vldr	s15, [r3, #12]
 80040a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <setControlSystemInputs+0x25c>)
 80040a6:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
  InverterStartupControl_U.AMK_TempInverter_L = AMK0_ActualValues2.AMK_TempInverter;           
 80040aa:	4b0f      	ldr	r3, [pc, #60]	; (80040e8 <setControlSystemInputs+0x26c>)
 80040ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <setControlSystemInputs+0x25c>)
 80040b6:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
  InverterStartupControl_U.AMK_TempMotor_L = AMK0_ActualValues2.AMK_TempMotor;              
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <setControlSystemInputs+0x26c>)
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80040c4:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <setControlSystemInputs+0x25c>)
 80040c6:	ed83 7b3c 	vstr	d7, [r3, #240]	; 0xf0
}
 80040ca:	bf00      	nop
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000088 	.word	0x20000088
 80040d8:	200001e0 	.word	0x200001e0
 80040dc:	2000031c 	.word	0x2000031c
 80040e0:	2000030c 	.word	0x2000030c
 80040e4:	20000330 	.word	0x20000330
 80040e8:	20000344 	.word	0x20000344

080040ec <getControlSystemOutputs>:

void getControlSystemOutputs(void *args) {
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  AMK1_SetPoints1.AMK_bInverterOn= InverterStartupControl_Y.AMK_bInverterOn_R;
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <getControlSystemOutputs+0xd4>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf14      	ite	ne
 80040fc:	2301      	movne	r3, #1
 80040fe:	2300      	moveq	r3, #0
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <getControlSystemOutputs+0xd8>)
 8004104:	701a      	strb	r2, [r3, #0]
  AMK1_SetPoints1.AMK_bDcOn= InverterStartupControl_Y.AMK_bDcOn_R;
 8004106:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <getControlSystemOutputs+0xd4>)
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2da      	uxtb	r2, r3
 8004114:	4b2b      	ldr	r3, [pc, #172]	; (80041c4 <getControlSystemOutputs+0xd8>)
 8004116:	705a      	strb	r2, [r3, #1]
  AMK1_SetPoints1.AMK_bEnable= InverterStartupControl_Y.AMK_bEnable_R;
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800411a:	789b      	ldrb	r3, [r3, #2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2da      	uxtb	r2, r3
 8004126:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <getControlSystemOutputs+0xd8>)
 8004128:	709a      	strb	r2, [r3, #2]
  AMK1_SetPoints1.AMK_bErrorReset= InverterStartupControl_Y.AMK_bErrorReset_R;
 800412a:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800412c:	78db      	ldrb	r3, [r3, #3]
 800412e:	2b00      	cmp	r3, #0
 8004130:	bf14      	ite	ne
 8004132:	2301      	movne	r3, #1
 8004134:	2300      	moveq	r3, #0
 8004136:	b2da      	uxtb	r2, r3
 8004138:	4b22      	ldr	r3, [pc, #136]	; (80041c4 <getControlSystemOutputs+0xd8>)
 800413a:	70da      	strb	r2, [r3, #3]
  AMK1_SetPoints1.AMK_TargetVelocity= InverterStartupControl_Y.AMK_TargetVelocity_R;
 800413c:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <getControlSystemOutputs+0xd8>)
 8004142:	6053      	str	r3, [r2, #4]
  AMK1_SetPoints1.AMK_TorqueLimitPositiv= InverterStartupControl_Y.AMK_TorqueLimitPositiv_R;
 8004144:	4b1e      	ldr	r3, [pc, #120]	; (80041c0 <getControlSystemOutputs+0xd4>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <getControlSystemOutputs+0xd8>)
 800414a:	6093      	str	r3, [r2, #8]
  AMK1_SetPoints1.AMK_TorqueLimitNegativ= InverterStartupControl_Y.AMK_TorqueLimitNegativ_R;
 800414c:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <getControlSystemOutputs+0xd8>)
 8004152:	60d3      	str	r3, [r2, #12]
  AMK0_SetPoints1.AMK_bInverterOn= InverterStartupControl_Y.AMK_bInverterOn_L;
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <getControlSystemOutputs+0xd4>)
 8004156:	7c1b      	ldrb	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2da      	uxtb	r2, r3
 8004162:	4b19      	ldr	r3, [pc, #100]	; (80041c8 <getControlSystemOutputs+0xdc>)
 8004164:	701a      	strb	r2, [r3, #0]
  AMK0_SetPoints1.AMK_bDcOn= InverterStartupControl_Y.AMK_bDcOn_L;
 8004166:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <getControlSystemOutputs+0xd4>)
 8004168:	7c5b      	ldrb	r3, [r3, #17]
 800416a:	2b00      	cmp	r3, #0
 800416c:	bf14      	ite	ne
 800416e:	2301      	movne	r3, #1
 8004170:	2300      	moveq	r3, #0
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b14      	ldr	r3, [pc, #80]	; (80041c8 <getControlSystemOutputs+0xdc>)
 8004176:	705a      	strb	r2, [r3, #1]
  AMK0_SetPoints1.AMK_bEnable= InverterStartupControl_Y.AMK_bEnable_L;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800417a:	7c9b      	ldrb	r3, [r3, #18]
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf14      	ite	ne
 8004180:	2301      	movne	r3, #1
 8004182:	2300      	moveq	r3, #0
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <getControlSystemOutputs+0xdc>)
 8004188:	709a      	strb	r2, [r3, #2]
  AMK0_SetPoints1.AMK_bErrorReset= InverterStartupControl_Y.AMK_bErrorReset_L;
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800418c:	7cdb      	ldrb	r3, [r3, #19]
 800418e:	2b00      	cmp	r3, #0
 8004190:	bf14      	ite	ne
 8004192:	2301      	movne	r3, #1
 8004194:	2300      	moveq	r3, #0
 8004196:	b2da      	uxtb	r2, r3
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <getControlSystemOutputs+0xdc>)
 800419a:	70da      	strb	r2, [r3, #3]
  AMK0_SetPoints1.AMK_TargetVelocity= InverterStartupControl_Y.AMK_TargetVelocity_L;
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <getControlSystemOutputs+0xd4>)
 800419e:	695b      	ldr	r3, [r3, #20]
 80041a0:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <getControlSystemOutputs+0xdc>)
 80041a2:	6053      	str	r3, [r2, #4]
  AMK0_SetPoints1.AMK_TorqueLimitPositiv= InverterStartupControl_Y.AMK_TorqueLimitPositiv_L;
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <getControlSystemOutputs+0xd4>)
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	4a07      	ldr	r2, [pc, #28]	; (80041c8 <getControlSystemOutputs+0xdc>)
 80041aa:	6093      	str	r3, [r2, #8]
  AMK0_SetPoints1.AMK_TorqueLimitNegativ= InverterStartupControl_Y.AMK_TorqueLimitNegativ_L;
 80041ac:	4b04      	ldr	r3, [pc, #16]	; (80041c0 <getControlSystemOutputs+0xd4>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	4a05      	ldr	r2, [pc, #20]	; (80041c8 <getControlSystemOutputs+0xdc>)
 80041b2:	60d3      	str	r3, [r2, #12]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	200002d8 	.word	0x200002d8
 80041c4:	200002fc 	.word	0x200002fc
 80041c8:	20000354 	.word	0x20000354

080041cc <transmitToAMKMotors>:

void transmitToAMKMotors(void* args) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	CANAL_PRINT("TRANSMITTING\n\r");
	CanAL_Transmit(&pt1_can, AMK0_SETPOINTS1_CANAL_ID);
 80041d4:	f240 1185 	movw	r1, #389	; 0x185
 80041d8:	4805      	ldr	r0, [pc, #20]	; (80041f0 <transmitToAMKMotors+0x24>)
 80041da:	f7fd fc03 	bl	80019e4 <CanAL_Transmit>
	CanAL_Transmit(&pt1_can, AMK1_SETPOINTS1_CANAL_ID);
 80041de:	f44f 71c3 	mov.w	r1, #390	; 0x186
 80041e2:	4803      	ldr	r0, [pc, #12]	; (80041f0 <transmitToAMKMotors+0x24>)
 80041e4:	f7fd fbfe 	bl	80019e4 <CanAL_Transmit>
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000094 	.word	0x20000094

080041f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	TeCanALRet ret = CanAL_Receive(&pt1_can);
 80041fc:	4804      	ldr	r0, [pc, #16]	; (8004210 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>)
 80041fe:	f7fd fba2 	bl	8001946 <CanAL_Receive>
 8004202:	4603      	mov	r3, r0
 8004204:	73fb      	strb	r3, [r7, #15]
	if (ret != CANAL_OK) {
		CANAL_PRINT("Could not recognize message\n\r");
	}
}
 8004206:	bf00      	nop
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000094 	.word	0x20000094

08004214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004218:	b672      	cpsid	i
}
 800421a:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  CANAL_PRINT("oh no! error handler\n\r");
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, true);
 800421c:	2201      	movs	r2, #1
 800421e:	2108      	movs	r1, #8
 8004220:	4801      	ldr	r0, [pc, #4]	; (8004228 <Error_Handler+0x14>)
 8004222:	f002 fc27 	bl	8006a74 <HAL_GPIO_WritePin>
	  CANAL_PRINT("oh no! error handler\n\r");
 8004226:	e7f9      	b.n	800421c <Error_Handler+0x8>
 8004228:	40020000 	.word	0x40020000

0800422c <Printf_Init>:

// Must be global
UART_st* Printer;


UART_Return_et Printf_Init(UART_st* uart) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  UART_Return_et response;

  // Set global to selected UART
  Printer = uart;
 8004234:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <Printf_Init+0x3c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
  response = UART_Init(uart);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 fd31 	bl	8004ca2 <UART_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	73fb      	strb	r3, [r7, #15]

  if (response != UART_OK) {
 8004244:	7bfb      	ldrb	r3, [r7, #15]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d001      	beq.n	800424e <Printf_Init+0x22>
      return response;
 800424a:	7bfb      	ldrb	r3, [r7, #15]
 800424c:	e008      	b.n	8004260 <Printf_Init+0x34>
  }

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */

  setvbuf(stdout, NULL, _IONBF, 0);
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <Printf_Init+0x40>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6898      	ldr	r0, [r3, #8]
 8004254:	2300      	movs	r3, #0
 8004256:	2202      	movs	r2, #2
 8004258:	2100      	movs	r1, #0
 800425a:	f004 ff97 	bl	800918c <setvbuf>

  return UART_OK;
 800425e:	2301      	movs	r3, #1
}
 8004260:	4618      	mov	r0, r3
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20000618 	.word	0x20000618
 800426c:	200000f0 	.word	0x200000f0

08004270 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d002      	beq.n	8004288 <_write+0x18>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d110      	bne.n	80042aa <_write+0x3a>
    response = UART_Transmit(Printer, (uint8_t*) ptr, len);
 8004288:	4b0d      	ldr	r3, [pc, #52]	; (80042c0 <_write+0x50>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	68b9      	ldr	r1, [r7, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fd4d 	bl	8004d32 <UART_Transmit>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

    if (response == UART_OK)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <_write+0x36>
      return len;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	e008      	b.n	80042b8 <_write+0x48>
    else
      return EIO;
 80042a6:	2305      	movs	r3, #5
 80042a8:	e006      	b.n	80042b8 <_write+0x48>
  }

  errno = EBADF;
 80042aa:	f004 ff3d 	bl	8009128 <__errno>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2209      	movs	r2, #9
 80042b2:	601a      	str	r2, [r3, #0]
  return -1;
 80042b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20000618 	.word	0x20000618

080042c4 <_close>:


int _close(int fd) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	db04      	blt.n	80042dc <_close+0x18>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	dc01      	bgt.n	80042dc <_close+0x18>
    return 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	e006      	b.n	80042ea <_close+0x26>

  errno = EBADF;
 80042dc:	f004 ff24 	bl	8009128 <__errno>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2209      	movs	r2, #9
 80042e4:	601a      	str	r2, [r3, #0]
  return -1;
 80042e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]

  (void) fd;
  (void) ptr;
  (void) dir;
  errno = EBADF;
 80042fe:	f004 ff13 	bl	8009128 <__errno>
 8004302:	4603      	mov	r3, r0
 8004304:	2209      	movs	r2, #9
 8004306:	601a      	str	r2, [r3, #0]
  return -1;
 8004308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <_read>:

int _read(int fd, char* ptr, int len) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]

  UART_Return_et response;

  if (fd == STDIN_FILENO) {
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d110      	bne.n	8004348 <_read+0x34>
    response = UART_Receive(Printer, (uint8_t*) ptr, len);
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <_read+0x4c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	68b9      	ldr	r1, [r7, #8]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fd1a 	bl	8004d6a <UART_Receive>
 8004336:	4603      	mov	r3, r0
 8004338:	75fb      	strb	r3, [r7, #23]
    if (response == UART_OK)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <_read+0x30>
      return 1;
 8004340:	2301      	movs	r3, #1
 8004342:	e008      	b.n	8004356 <_read+0x42>
    else
      return EIO;
 8004344:	2305      	movs	r3, #5
 8004346:	e006      	b.n	8004356 <_read+0x42>
  }

  errno = EBADF;
 8004348:	f004 feee 	bl	8009128 <__errno>
 800434c:	4603      	mov	r3, r0
 800434e:	2209      	movs	r2, #9
 8004350:	601a      	str	r2, [r3, #0]
  return -1;
 8004352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000618 	.word	0x20000618

08004364 <_fstat>:


int _fstat(int fd, struct stat* st) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]

  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	db08      	blt.n	8004386 <_fstat+0x22>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	dc05      	bgt.n	8004386 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004380:	605a      	str	r2, [r3, #4]
    return 0;
 8004382:	2300      	movs	r3, #0
 8004384:	e005      	b.n	8004392 <_fstat+0x2e>
  }

  errno = EBADF;
 8004386:	f004 fecf 	bl	8009128 <__errno>
 800438a:	4603      	mov	r3, r0
 800438c:	2209      	movs	r2, #9
 800438e:	601a      	str	r2, [r3, #0]
  return 0;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <RtScheduler_startRunning>:
static uint64_t RtScheduler_GetTimeMs(void);
static uint64_t RtScheduler_GetTicks(void);
static void RtScheduler_Tick(void);
static uint64_t convertToMs(uint32_t);

int RtScheduler_startRunning(RtScheduler_tasks RtScheduler_tasks) {
 800439c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
	uint8_t tickRate = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	73bb      	strb	r3, [r7, #14]
	static uint64_t RtScheduler_currFrcTime = 0;
	static uint64_t RtScheduler_prevTicks = 0;

	while(1) {
		// Free running counter is represented in milliseconds since HAL was initialized
		RtScheduler_currFrcTime = HAL_GetTick();
 80043aa:	f000 fd75 	bl	8004e98 <HAL_GetTick>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2200      	movs	r2, #0
 80043b2:	4698      	mov	r8, r3
 80043b4:	4691      	mov	r9, r2
 80043b6:	4b42      	ldr	r3, [pc, #264]	; (80044c0 <RtScheduler_startRunning+0x124>)
 80043b8:	e9c3 8900 	strd	r8, r9, [r3]
		if ((RtScheduler_currFrcTime - RtScheduler_prevFrcTime) >= RTSCHEDULER_SYSTICK_RATE_MS) {
 80043bc:	4b40      	ldr	r3, [pc, #256]	; (80044c0 <RtScheduler_startRunning+0x124>)
 80043be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043c2:	4b40      	ldr	r3, [pc, #256]	; (80044c4 <RtScheduler_startRunning+0x128>)
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	1a84      	subs	r4, r0, r2
 80043ca:	eb61 0503 	sbc.w	r5, r1, r3
 80043ce:	2c05      	cmp	r4, #5
 80043d0:	f175 0300 	sbcs.w	r3, r5, #0
 80043d4:	d311      	bcc.n	80043fa <RtScheduler_startRunning+0x5e>
			// Tick the scheduler per the set scheduler systick rate
			RtScheduler_Tick();
 80043d6:	f000 f895 	bl	8004504 <RtScheduler_Tick>
			RtScheduler_prevFrcTime = RtScheduler_currFrcTime;
 80043da:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <RtScheduler_startRunning+0x124>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	4938      	ldr	r1, [pc, #224]	; (80044c4 <RtScheduler_startRunning+0x128>)
 80043e2:	e9c1 2300 	strd	r2, r3, [r1]
			RtScheduler_prevTicks = RtScheduler_GetTicks();
 80043e6:	f000 f89f 	bl	8004528 <RtScheduler_GetTicks>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	4936      	ldr	r1, [pc, #216]	; (80044c8 <RtScheduler_startRunning+0x12c>)
 80043f0:	e9c1 2300 	strd	r2, r3, [r1]
 80043f4:	4b35      	ldr	r3, [pc, #212]	; (80044cc <RtScheduler_startRunning+0x130>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	701a      	strb	r2, [r3, #0]
			memset(&RtScheduler_taskExecutedThisTick[0], false, sizeof(bool) * N_RATES);
		}

		for (uint8_t taskRate = eTASK1_5MS; taskRate < N_RATES; taskRate++) {
 80043fa:	2300      	movs	r3, #0
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	e05a      	b.n	80044b6 <RtScheduler_startRunning+0x11a>
			if (RtScheduler_taskMarkedForExecution[taskRate]) {
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	4a33      	ldr	r2, [pc, #204]	; (80044d0 <RtScheduler_startRunning+0x134>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d033      	beq.n	8004472 <RtScheduler_startRunning+0xd6>
				// Execute your registered task for the pool
				taskCounter = RtScheduler_taskCounter[taskRate];
 800440a:	7bfb      	ldrb	r3, [r7, #15]
 800440c:	4a31      	ldr	r2, [pc, #196]	; (80044d4 <RtScheduler_startRunning+0x138>)
 800440e:	5cd2      	ldrb	r2, [r2, r3]
 8004410:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 8004412:	701a      	strb	r2, [r3, #0]
				RtScheduler_tasks[taskRate][taskCounter]((void*)NULL);
 8004414:	7bfa      	ldrb	r2, [r7, #15]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 8004426:	7812      	ldrb	r2, [r2, #0]
 8004428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800442c:	2000      	movs	r0, #0
 800442e:	4798      	blx	r3

				// Calculate number of tasks per rate remaining, mark task rate buckets as complete
				taskCounter++;
 8004430:	4b29      	ldr	r3, [pc, #164]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	3301      	adds	r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 800443a:	701a      	strb	r2, [r3, #0]
				RtScheduler_taskCounter[taskRate] = taskCounter;
 800443c:	7bfb      	ldrb	r3, [r7, #15]
 800443e:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 8004440:	7811      	ldrb	r1, [r2, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <RtScheduler_startRunning+0x138>)
 8004444:	54d1      	strb	r1, [r2, r3]
				if (taskCounter >= RtScheduler_nTasksPerRate[taskRate]) {
 8004446:	2204      	movs	r2, #4
 8004448:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d82f      	bhi.n	80044b0 <RtScheduler_startRunning+0x114>
					RtScheduler_taskMarkedForExecution[taskRate] = false;
 8004450:	7bfb      	ldrb	r3, [r7, #15]
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <RtScheduler_startRunning+0x134>)
 8004454:	2100      	movs	r1, #0
 8004456:	54d1      	strb	r1, [r2, r3]
					RtScheduler_taskExecutedThisTick[taskRate] = true;
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	4a1c      	ldr	r2, [pc, #112]	; (80044cc <RtScheduler_startRunning+0x130>)
 800445c:	2101      	movs	r1, #1
 800445e:	54d1      	strb	r1, [r2, r3]
					taskCounter = 0;
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
					RtScheduler_taskCounter[taskRate] = taskCounter;
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <RtScheduler_startRunning+0x13c>)
 800446a:	7811      	ldrb	r1, [r2, #0]
 800446c:	4a19      	ldr	r2, [pc, #100]	; (80044d4 <RtScheduler_startRunning+0x138>)
 800446e:	54d1      	strb	r1, [r2, r3]
 8004470:	e01e      	b.n	80044b0 <RtScheduler_startRunning+0x114>
				}
			} else { // TODO: This is executing multiple times between the 5ms increments
				// Prevent all tasks from running at t = 0ms and from running multiples times between scheduler ticks
				if (RtScheduler_prevTicks > 0) {
 8004472:	4b15      	ldr	r3, [pc, #84]	; (80044c8 <RtScheduler_startRunning+0x12c>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	4313      	orrs	r3, r2
 800447a:	d019      	beq.n	80044b0 <RtScheduler_startRunning+0x114>
					tickRate = RtScheduler_rateMs[taskRate];
 800447c:	2305      	movs	r3, #5
 800447e:	73bb      	strb	r3, [r7, #14]
					// Schedule pool for execution if rate has fallen on a harmonic of the task period
					if ((0 == (RtScheduler_GetTimeMs() % RtScheduler_rateMs[taskRate])) &&
 8004480:	f000 f860 	bl	8004544 <RtScheduler_GetTimeMs>
 8004484:	2205      	movs	r2, #5
 8004486:	2300      	movs	r3, #0
 8004488:	4692      	mov	sl, r2
 800448a:	469b      	mov	fp, r3
 800448c:	4652      	mov	r2, sl
 800448e:	465b      	mov	r3, fp
 8004490:	f7fb ffe0 	bl	8000454 <__aeabi_uldivmod>
 8004494:	4313      	orrs	r3, r2
 8004496:	d10b      	bne.n	80044b0 <RtScheduler_startRunning+0x114>
							(RtScheduler_taskExecutedThisTick[taskRate] == false)) {
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <RtScheduler_startRunning+0x130>)
 800449c:	5cd3      	ldrb	r3, [r2, r3]
 800449e:	f083 0301 	eor.w	r3, r3, #1
 80044a2:	b2db      	uxtb	r3, r3
					if ((0 == (RtScheduler_GetTimeMs() % RtScheduler_rateMs[taskRate])) &&
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <RtScheduler_startRunning+0x114>
					  RtScheduler_taskMarkedForExecution[taskRate] = true;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	4a09      	ldr	r2, [pc, #36]	; (80044d0 <RtScheduler_startRunning+0x134>)
 80044ac:	2101      	movs	r1, #1
 80044ae:	54d1      	strb	r1, [r2, r3]
		for (uint8_t taskRate = eTASK1_5MS; taskRate < N_RATES; taskRate++) {
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
 80044b2:	3301      	adds	r3, #1
 80044b4:	73fb      	strb	r3, [r7, #15]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0a1      	beq.n	8004400 <RtScheduler_startRunning+0x64>
		RtScheduler_currFrcTime = HAL_GetTick();
 80044bc:	e775      	b.n	80043aa <RtScheduler_startRunning+0xe>
 80044be:	bf00      	nop
 80044c0:	20000638 	.word	0x20000638
 80044c4:	20000640 	.word	0x20000640
 80044c8:	20000648 	.word	0x20000648
 80044cc:	20000630 	.word	0x20000630
 80044d0:	2000062c 	.word	0x2000062c
 80044d4:	20000628 	.word	0x20000628
 80044d8:	20000650 	.word	0x20000650

080044dc <convertToMs>:
	}

	return RTSCHEDULER_RUN_SUCCESS;
}

uint64_t convertToMs(uint32_t sysTicks) {
 80044dc:	b4b0      	push	{r4, r5, r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
	if ((sysTicks * RTSCHEDULER_SYSTICK_RATE_MS) > UINT64_MAX) {
		return UINT64_MAX;
	}

	return sysTicks * RTSCHEDULER_SYSTICK_RATE_MS;
 80044e4:	687a      	ldr	r2, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	2200      	movs	r2, #0
 80044ee:	461c      	mov	r4, r3
 80044f0:	4615      	mov	r5, r2
}
 80044f2:	4622      	mov	r2, r4
 80044f4:	462b      	mov	r3, r5
 80044f6:	4610      	mov	r0, r2
 80044f8:	4619      	mov	r1, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bcb0      	pop	{r4, r5, r7}
 8004500:	4770      	bx	lr
	...

08004504 <RtScheduler_Tick>:

void RtScheduler_Tick(void) {
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
   ++RtScheduler_systick;
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <RtScheduler_Tick+0x20>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	1c50      	adds	r0, r2, #1
 8004510:	f143 0100 	adc.w	r1, r3, #0
 8004514:	4b03      	ldr	r3, [pc, #12]	; (8004524 <RtScheduler_Tick+0x20>)
 8004516:	e9c3 0100 	strd	r0, r1, [r3]
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	20000620 	.word	0x20000620

08004528 <RtScheduler_GetTicks>:

uint64_t RtScheduler_GetTicks(void) {
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
	return RtScheduler_systick;
 800452c:	4b04      	ldr	r3, [pc, #16]	; (8004540 <RtScheduler_GetTicks+0x18>)
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000620 	.word	0x20000620

08004544 <RtScheduler_GetTimeMs>:

uint64_t RtScheduler_GetTimeMs(void) {
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
	return convertToMs(RtScheduler_systick);
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <RtScheduler_GetTimeMs+0x1c>)
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	4613      	mov	r3, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff ffc3 	bl	80044dc <convertToMs>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
}
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000620 	.word	0x20000620

08004564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800456a:	4b0f      	ldr	r3, [pc, #60]	; (80045a8 <HAL_MspInit+0x44>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	4a0e      	ldr	r2, [pc, #56]	; (80045a8 <HAL_MspInit+0x44>)
 8004570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004574:	6413      	str	r3, [r2, #64]	; 0x40
 8004576:	4b0c      	ldr	r3, [pc, #48]	; (80045a8 <HAL_MspInit+0x44>)
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	4b09      	ldr	r3, [pc, #36]	; (80045a8 <HAL_MspInit+0x44>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	4a08      	ldr	r2, [pc, #32]	; (80045a8 <HAL_MspInit+0x44>)
 8004588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800458c:	6453      	str	r3, [r2, #68]	; 0x44
 800458e:	4b06      	ldr	r3, [pc, #24]	; (80045a8 <HAL_MspInit+0x44>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	40023800 	.word	0x40023800

080045ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b08a      	sub	sp, #40	; 0x28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a15      	ldr	r2, [pc, #84]	; (8004620 <HAL_ADC_MspInit+0x74>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d123      	bne.n	8004616 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045ce:	4b15      	ldr	r3, [pc, #84]	; (8004624 <HAL_ADC_MspInit+0x78>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	4a14      	ldr	r2, [pc, #80]	; (8004624 <HAL_ADC_MspInit+0x78>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d8:	6453      	str	r3, [r2, #68]	; 0x44
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_ADC_MspInit+0x78>)
 80045dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <HAL_ADC_MspInit+0x78>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <HAL_ADC_MspInit+0x78>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_ADC_MspInit+0x78>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f003 0304 	and.w	r3, r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APPS1_Pin|APPS2_Pin|STEERING_ANGLE_SENSOR_Pin|BPPS_BUFFERED_Pin;
 80045fe:	230f      	movs	r3, #15
 8004600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004602:	2303      	movs	r3, #3
 8004604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800460a:	f107 0314 	add.w	r3, r7, #20
 800460e:	4619      	mov	r1, r3
 8004610:	4805      	ldr	r0, [pc, #20]	; (8004628 <HAL_ADC_MspInit+0x7c>)
 8004612:	f002 f883 	bl	800671c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004616:	bf00      	nop
 8004618:	3728      	adds	r7, #40	; 0x28
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40012000 	.word	0x40012000
 8004624:	40023800 	.word	0x40023800
 8004628:	40020800 	.word	0x40020800

0800462c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08e      	sub	sp, #56	; 0x38
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	605a      	str	r2, [r3, #4]
 800463e:	609a      	str	r2, [r3, #8]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a61      	ldr	r2, [pc, #388]	; (80047d0 <HAL_CAN_MspInit+0x1a4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d13a      	bne.n	80046c4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800464e:	4b61      	ldr	r3, [pc, #388]	; (80047d4 <HAL_CAN_MspInit+0x1a8>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3301      	adds	r3, #1
 8004654:	4a5f      	ldr	r2, [pc, #380]	; (80047d4 <HAL_CAN_MspInit+0x1a8>)
 8004656:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004658:	4b5e      	ldr	r3, [pc, #376]	; (80047d4 <HAL_CAN_MspInit+0x1a8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d10b      	bne.n	8004678 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004660:	4b5d      	ldr	r3, [pc, #372]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	4a5c      	ldr	r2, [pc, #368]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004666:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800466a:	6413      	str	r3, [r2, #64]	; 0x40
 800466c:	4b5a      	ldr	r3, [pc, #360]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004674:	623b      	str	r3, [r7, #32]
 8004676:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004678:	4b57      	ldr	r3, [pc, #348]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6313      	str	r3, [r2, #48]	; 0x30
 8004684:	4b54      	ldr	r3, [pc, #336]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	69fb      	ldr	r3, [r7, #28]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PT2_CAN_RX_Pin|PT1_CAN_TX_Pin;
 8004690:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004696:	2302      	movs	r3, #2
 8004698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800469a:	2300      	movs	r3, #0
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800469e:	2303      	movs	r3, #3
 80046a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80046a2:	2309      	movs	r3, #9
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046aa:	4619      	mov	r1, r3
 80046ac:	484b      	ldr	r0, [pc, #300]	; (80047dc <HAL_CAN_MspInit+0x1b0>)
 80046ae:	f002 f835 	bl	800671c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80046b2:	2200      	movs	r2, #0
 80046b4:	2100      	movs	r1, #0
 80046b6:	2014      	movs	r0, #20
 80046b8:	f001 ff67 	bl	800658a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80046bc:	2014      	movs	r0, #20
 80046be:	f001 ff80 	bl	80065c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }

}
 80046c2:	e080      	b.n	80047c6 <HAL_CAN_MspInit+0x19a>
  else if(hcan->Instance==CAN2)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a45      	ldr	r2, [pc, #276]	; (80047e0 <HAL_CAN_MspInit+0x1b4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d145      	bne.n	800475a <HAL_CAN_MspInit+0x12e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80046ce:	4b42      	ldr	r3, [pc, #264]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	4a41      	ldr	r2, [pc, #260]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 80046d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046d8:	6413      	str	r3, [r2, #64]	; 0x40
 80046da:	4b3f      	ldr	r3, [pc, #252]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046e2:	61bb      	str	r3, [r7, #24]
 80046e4:	69bb      	ldr	r3, [r7, #24]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80046e6:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <HAL_CAN_MspInit+0x1a8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3301      	adds	r3, #1
 80046ec:	4a39      	ldr	r2, [pc, #228]	; (80047d4 <HAL_CAN_MspInit+0x1a8>)
 80046ee:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80046f0:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_CAN_MspInit+0x1a8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10b      	bne.n	8004710 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80046f8:	4b37      	ldr	r3, [pc, #220]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	4a36      	ldr	r2, [pc, #216]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 80046fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004702:	6413      	str	r3, [r2, #64]	; 0x40
 8004704:	4b34      	ldr	r3, [pc, #208]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	4a30      	ldr	r2, [pc, #192]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004716:	f043 0302 	orr.w	r3, r3, #2
 800471a:	6313      	str	r3, [r2, #48]	; 0x30
 800471c:	4b2e      	ldr	r3, [pc, #184]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PT1_CAN_RX_Pin|PT2_CAN_TX_Pin;
 8004728:	2360      	movs	r3, #96	; 0x60
 800472a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800472c:	2302      	movs	r3, #2
 800472e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	2300      	movs	r3, #0
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004734:	2303      	movs	r3, #3
 8004736:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004738:	2309      	movs	r3, #9
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004740:	4619      	mov	r1, r3
 8004742:	4828      	ldr	r0, [pc, #160]	; (80047e4 <HAL_CAN_MspInit+0x1b8>)
 8004744:	f001 ffea 	bl	800671c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8004748:	2200      	movs	r2, #0
 800474a:	2100      	movs	r1, #0
 800474c:	2040      	movs	r0, #64	; 0x40
 800474e:	f001 ff1c 	bl	800658a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004752:	2040      	movs	r0, #64	; 0x40
 8004754:	f001 ff35 	bl	80065c2 <HAL_NVIC_EnableIRQ>
}
 8004758:	e035      	b.n	80047c6 <HAL_CAN_MspInit+0x19a>
  else if(hcan->Instance==CAN3)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a22      	ldr	r2, [pc, #136]	; (80047e8 <HAL_CAN_MspInit+0x1bc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d130      	bne.n	80047c6 <HAL_CAN_MspInit+0x19a>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004768:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800476a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800476e:	6413      	str	r3, [r2, #64]	; 0x40
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477c:	4b16      	ldr	r3, [pc, #88]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6313      	str	r3, [r2, #48]	; 0x30
 8004788:	4b13      	ldr	r3, [pc, #76]	; (80047d8 <HAL_CAN_MspInit+0x1ac>)
 800478a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	60bb      	str	r3, [r7, #8]
 8004792:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VEH_CAN_RX_Pin|VEH_CAN_TX_Pin;
 8004794:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479a:	2302      	movs	r3, #2
 800479c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a2:	2303      	movs	r3, #3
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 80047a6:	230b      	movs	r3, #11
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ae:	4619      	mov	r1, r3
 80047b0:	480a      	ldr	r0, [pc, #40]	; (80047dc <HAL_CAN_MspInit+0x1b0>)
 80047b2:	f001 ffb3 	bl	800671c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 80047b6:	2200      	movs	r2, #0
 80047b8:	2100      	movs	r1, #0
 80047ba:	2069      	movs	r0, #105	; 0x69
 80047bc:	f001 fee5 	bl	800658a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 80047c0:	2069      	movs	r0, #105	; 0x69
 80047c2:	f001 fefe 	bl	80065c2 <HAL_NVIC_EnableIRQ>
}
 80047c6:	bf00      	nop
 80047c8:	3738      	adds	r7, #56	; 0x38
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40006400 	.word	0x40006400
 80047d4:	20000654 	.word	0x20000654
 80047d8:	40023800 	.word	0x40023800
 80047dc:	40020000 	.word	0x40020000
 80047e0:	40006800 	.word	0x40006800
 80047e4:	40020400 	.word	0x40020400
 80047e8:	40003400 	.word	0x40003400

080047ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0b0      	sub	sp, #192	; 0xc0
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	2290      	movs	r2, #144	; 0x90
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fcb5 	bl	800917c <memset>
  if(huart->Instance==USART2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a46      	ldr	r2, [pc, #280]	; (8004930 <HAL_UART_MspInit+0x144>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d143      	bne.n	80048a4 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004820:	2300      	movs	r3, #0
 8004822:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004824:	f107 031c 	add.w	r3, r7, #28
 8004828:	4618      	mov	r0, r3
 800482a:	f002 fdd1 	bl	80073d0 <HAL_RCCEx_PeriphCLKConfig>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004834:	f7ff fcee 	bl	8004214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004838:	4b3e      	ldr	r3, [pc, #248]	; (8004934 <HAL_UART_MspInit+0x148>)
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	4a3d      	ldr	r2, [pc, #244]	; (8004934 <HAL_UART_MspInit+0x148>)
 800483e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004842:	6413      	str	r3, [r2, #64]	; 0x40
 8004844:	4b3b      	ldr	r3, [pc, #236]	; (8004934 <HAL_UART_MspInit+0x148>)
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004850:	4b38      	ldr	r3, [pc, #224]	; (8004934 <HAL_UART_MspInit+0x148>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	4a37      	ldr	r2, [pc, #220]	; (8004934 <HAL_UART_MspInit+0x148>)
 8004856:	f043 0308 	orr.w	r3, r3, #8
 800485a:	6313      	str	r3, [r2, #48]	; 0x30
 800485c:	4b35      	ldr	r3, [pc, #212]	; (8004934 <HAL_UART_MspInit+0x148>)
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPS_UART_TX_Pin|GPS_UART_RX_Pin;
 8004868:	2360      	movs	r3, #96	; 0x60
 800486a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800486e:	2302      	movs	r3, #2
 8004870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004874:	2300      	movs	r3, #0
 8004876:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487a:	2303      	movs	r3, #3
 800487c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004880:	2307      	movs	r3, #7
 8004882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004886:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800488a:	4619      	mov	r1, r3
 800488c:	482a      	ldr	r0, [pc, #168]	; (8004938 <HAL_UART_MspInit+0x14c>)
 800488e:	f001 ff45 	bl	800671c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004892:	2200      	movs	r2, #0
 8004894:	2100      	movs	r1, #0
 8004896:	2026      	movs	r0, #38	; 0x26
 8004898:	f001 fe77 	bl	800658a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800489c:	2026      	movs	r0, #38	; 0x26
 800489e:	f001 fe90 	bl	80065c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048a2:	e041      	b.n	8004928 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a24      	ldr	r2, [pc, #144]	; (800493c <HAL_UART_MspInit+0x150>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d13c      	bne.n	8004928 <HAL_UART_MspInit+0x13c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80048ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80048b4:	2300      	movs	r3, #0
 80048b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048b8:	f107 031c 	add.w	r3, r7, #28
 80048bc:	4618      	mov	r0, r3
 80048be:	f002 fd87 	bl	80073d0 <HAL_RCCEx_PeriphCLKConfig>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d001      	beq.n	80048cc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80048c8:	f7ff fca4 	bl	8004214 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048cc:	4b19      	ldr	r3, [pc, #100]	; (8004934 <HAL_UART_MspInit+0x148>)
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	4a18      	ldr	r2, [pc, #96]	; (8004934 <HAL_UART_MspInit+0x148>)
 80048d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d6:	6413      	str	r3, [r2, #64]	; 0x40
 80048d8:	4b16      	ldr	r3, [pc, #88]	; (8004934 <HAL_UART_MspInit+0x148>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <HAL_UART_MspInit+0x148>)
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	4a12      	ldr	r2, [pc, #72]	; (8004934 <HAL_UART_MspInit+0x148>)
 80048ea:	f043 0308 	orr.w	r3, r3, #8
 80048ee:	6313      	str	r3, [r2, #48]	; 0x30
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_UART_MspInit+0x148>)
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 80048fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004900:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004904:	2302      	movs	r3, #2
 8004906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490a:	2300      	movs	r3, #0
 800490c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004916:	2307      	movs	r3, #7
 8004918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800491c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004920:	4619      	mov	r1, r3
 8004922:	4805      	ldr	r0, [pc, #20]	; (8004938 <HAL_UART_MspInit+0x14c>)
 8004924:	f001 fefa 	bl	800671c <HAL_GPIO_Init>
}
 8004928:	bf00      	nop
 800492a:	37c0      	adds	r7, #192	; 0xc0
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40004400 	.word	0x40004400
 8004934:	40023800 	.word	0x40023800
 8004938:	40020c00 	.word	0x40020c00
 800493c:	40004800 	.word	0x40004800

08004940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004944:	e7fe      	b.n	8004944 <NMI_Handler+0x4>

08004946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004946:	b480      	push	{r7}
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800494a:	e7fe      	b.n	800494a <HardFault_Handler+0x4>

0800494c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004950:	e7fe      	b.n	8004950 <MemManage_Handler+0x4>

08004952 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004952:	b480      	push	{r7}
 8004954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004956:	e7fe      	b.n	8004956 <BusFault_Handler+0x4>

08004958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800495c:	e7fe      	b.n	800495c <UsageFault_Handler+0x4>

0800495e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800495e:	b480      	push	{r7}
 8004960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004970:	bf00      	nop
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800498c:	f000 fa70 	bl	8004e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004990:	bf00      	nop
 8004992:	bd80      	pop	{r7, pc}

08004994 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004998:	4802      	ldr	r0, [pc, #8]	; (80049a4 <CAN1_RX0_IRQHandler+0x10>)
 800499a:	f001 faeb 	bl	8005f74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000042c 	.word	0x2000042c

080049a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <USART2_IRQHandler+0x10>)
 80049ae:	f003 fbeb 	bl	8008188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20000508 	.word	0x20000508

080049bc <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80049c0:	4802      	ldr	r0, [pc, #8]	; (80049cc <CAN2_RX0_IRQHandler+0x10>)
 80049c2:	f001 fad7 	bl	8005f74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80049c6:	bf00      	nop
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000454 	.word	0x20000454

080049d0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80049d4:	4802      	ldr	r0, [pc, #8]	; (80049e0 <SPI4_IRQHandler+0x10>)
 80049d6:	f003 f923 	bl	8007c20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	200004a4 	.word	0x200004a4

080049e4 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX0_IRQn 0 */

  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80049e8:	4802      	ldr	r0, [pc, #8]	; (80049f4 <CAN3_RX0_IRQHandler+0x10>)
 80049ea:	f001 fac3 	bl	8005f74 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */

  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000047c 	.word	0x2000047c

080049f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <_sbrk+0x5c>)
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <_sbrk+0x60>)
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a0c:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <_sbrk+0x64>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a14:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <_sbrk+0x64>)
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <_sbrk+0x68>)
 8004a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <_sbrk+0x64>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4413      	add	r3, r2
 8004a22:	693a      	ldr	r2, [r7, #16]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d207      	bcs.n	8004a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a28:	f004 fb7e 	bl	8009128 <__errno>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	220c      	movs	r2, #12
 8004a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a32:	f04f 33ff 	mov.w	r3, #4294967295
 8004a36:	e009      	b.n	8004a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a38:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <_sbrk+0x64>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <_sbrk+0x64>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	4a05      	ldr	r2, [pc, #20]	; (8004a5c <_sbrk+0x64>)
 8004a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3718      	adds	r7, #24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	20080000 	.word	0x20080000
 8004a58:	00000400 	.word	0x00000400
 8004a5c:	20000658 	.word	0x20000658
 8004a60:	20000670 	.word	0x20000670

08004a64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <SystemInit+0x20>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	4a05      	ldr	r2, [pc, #20]	; (8004a84 <SystemInit+0x20>)
 8004a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <UART_Select>:

/*------------- PRIVATE FUNCTION DEFINITIONS ------------ */

// UART_Select configures the corresponding UART number from a UART_st
static UART_Return_et UART_Select(UART_st* uart)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
	// Switch case for selection of 8 UARTS
	switch(uart->uart_num)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	791b      	ldrb	r3, [r3, #4]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	2b07      	cmp	r3, #7
 8004a98:	d83a      	bhi.n	8004b10 <UART_Select+0x88>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_Select+0x18>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ac1 	.word	0x08004ac1
 8004aa4:	08004acb 	.word	0x08004acb
 8004aa8:	08004ad5 	.word	0x08004ad5
 8004aac:	08004adf 	.word	0x08004adf
 8004ab0:	08004ae9 	.word	0x08004ae9
 8004ab4:	08004af3 	.word	0x08004af3
 8004ab8:	08004afd 	.word	0x08004afd
 8004abc:	08004b07 	.word	0x08004b07
	{
		case 1:
			uart->huart -> Instance = USART1;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a17      	ldr	r2, [pc, #92]	; (8004b24 <UART_Select+0x9c>)
 8004ac6:	601a      	str	r2, [r3, #0]
			break;
 8004ac8:	e024      	b.n	8004b14 <UART_Select+0x8c>
		case 2:
			uart->huart -> Instance = USART2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a16      	ldr	r2, [pc, #88]	; (8004b28 <UART_Select+0xa0>)
 8004ad0:	601a      	str	r2, [r3, #0]
			break;
 8004ad2:	e01f      	b.n	8004b14 <UART_Select+0x8c>
		case 3:
			uart->huart -> Instance = USART3;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a14      	ldr	r2, [pc, #80]	; (8004b2c <UART_Select+0xa4>)
 8004ada:	601a      	str	r2, [r3, #0]
			break;
 8004adc:	e01a      	b.n	8004b14 <UART_Select+0x8c>
		case 4:
			uart->huart -> Instance = UART4;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a13      	ldr	r2, [pc, #76]	; (8004b30 <UART_Select+0xa8>)
 8004ae4:	601a      	str	r2, [r3, #0]
			break;
 8004ae6:	e015      	b.n	8004b14 <UART_Select+0x8c>
		case 5:
			uart->huart -> Instance = UART5;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a11      	ldr	r2, [pc, #68]	; (8004b34 <UART_Select+0xac>)
 8004aee:	601a      	str	r2, [r3, #0]
			break;
 8004af0:	e010      	b.n	8004b14 <UART_Select+0x8c>
		case 6:
			uart->huart -> Instance = USART6;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <UART_Select+0xb0>)
 8004af8:	601a      	str	r2, [r3, #0]
			break;
 8004afa:	e00b      	b.n	8004b14 <UART_Select+0x8c>
		case 7:
			uart->huart -> Instance = UART7;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a0e      	ldr	r2, [pc, #56]	; (8004b3c <UART_Select+0xb4>)
 8004b02:	601a      	str	r2, [r3, #0]
			break;
 8004b04:	e006      	b.n	8004b14 <UART_Select+0x8c>
		case 8:
			uart->huart -> Instance = UART8;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a0d      	ldr	r2, [pc, #52]	; (8004b40 <UART_Select+0xb8>)
 8004b0c:	601a      	str	r2, [r3, #0]
			break;
 8004b0e:	e001      	b.n	8004b14 <UART_Select+0x8c>
		default:
			return INVALID_UART_NUM;
 8004b10:	2305      	movs	r3, #5
 8004b12:	e000      	b.n	8004b16 <UART_Select+0x8e>
	}

	return UART_OK;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40004400 	.word	0x40004400
 8004b2c:	40004800 	.word	0x40004800
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	40011400 	.word	0x40011400
 8004b3c:	40007800 	.word	0x40007800
 8004b40:	40007c00 	.word	0x40007c00

08004b44 <UART_Baud_Rate_Select>:

// UART_Baud_Rate_Select configures the baud rate from the one specified in baudrate
static UART_Return_et UART_Baud_Rate_Select(UART_st* uart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	// Baud rate must be between 123 Bits/s and 500 KBits/s, stated in .ioc requirements
	if(uart->baudrate < MIN_UART_BAUDRATE || uart->baudrate > MAX_UART_BAUDRATE){
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	2b7a      	cmp	r3, #122	; 0x7a
 8004b52:	d904      	bls.n	8004b5e <UART_Baud_Rate_Select+0x1a>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <UART_Baud_Rate_Select+0x38>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <UART_Baud_Rate_Select+0x1e>
		return BAUDRATE_OUT_OF_BOUNDS;
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e005      	b.n	8004b6e <UART_Baud_Rate_Select+0x2a>
	}

	uart->huart->Init.BaudRate = uart->baudrate;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6892      	ldr	r2, [r2, #8]
 8004b6a:	605a      	str	r2, [r3, #4]

	return UART_OK;
 8004b6c:	2301      	movs	r3, #1
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	0007a120 	.word	0x0007a120

08004b80 <UART_Datasize_Select>:

// UART_Datasize_Select configures the data size from a UART_Datasize_et
static UART_Return_et UART_Datasize_Select(UART_st* uart)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	switch(uart->datasize)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	7b1b      	ldrb	r3, [r3, #12]
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	d011      	beq.n	8004bb4 <UART_Datasize_Select+0x34>
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	dc15      	bgt.n	8004bc0 <UART_Datasize_Select+0x40>
 8004b94:	2b07      	cmp	r3, #7
 8004b96:	d002      	beq.n	8004b9e <UART_Datasize_Select+0x1e>
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d006      	beq.n	8004baa <UART_Datasize_Select+0x2a>
 8004b9c:	e010      	b.n	8004bc0 <UART_Datasize_Select+0x40>
	{
		case UART_Datasize_7:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_7B;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	609a      	str	r2, [r3, #8]
			break;
 8004ba8:	e00c      	b.n	8004bc4 <UART_Datasize_Select+0x44>
		case UART_Datasize_8:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_8B;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	609a      	str	r2, [r3, #8]
			break;
 8004bb2:	e007      	b.n	8004bc4 <UART_Datasize_Select+0x44>
		case UART_Datasize_9:
			uart->huart -> Init.WordLength = UART_WORDLENGTH_9B;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bbc:	609a      	str	r2, [r3, #8]
			break;
 8004bbe:	e001      	b.n	8004bc4 <UART_Datasize_Select+0x44>
		default:
			return INVALID_DATASIZE;
 8004bc0:	2306      	movs	r3, #6
 8004bc2:	e000      	b.n	8004bc6 <UART_Datasize_Select+0x46>
	}

	return UART_OK;
 8004bc4:	2301      	movs	r3, #1
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <UART_Mode_Select>:

// UART_Mode_Select configures the mode based on a UART_Mode_et
static UART_Return_et UART_Mode_Select(UART_st* uart)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b083      	sub	sp, #12
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
	switch(uart->mode)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7b5b      	ldrb	r3, [r3, #13]
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	d010      	beq.n	8004c04 <UART_Mode_Select+0x32>
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	dc13      	bgt.n	8004c0e <UART_Mode_Select+0x3c>
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d002      	beq.n	8004bf0 <UART_Mode_Select+0x1e>
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d005      	beq.n	8004bfa <UART_Mode_Select+0x28>
 8004bee:	e00e      	b.n	8004c0e <UART_Mode_Select+0x3c>
	{
		case UART_RX:
			uart->huart -> Init.Mode = UART_MODE_RX;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	615a      	str	r2, [r3, #20]
			break;
 8004bf8:	e00b      	b.n	8004c12 <UART_Mode_Select+0x40>
		case UART_TX:
			uart->huart -> Init.Mode = UART_MODE_TX;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2208      	movs	r2, #8
 8004c00:	615a      	str	r2, [r3, #20]
			break;
 8004c02:	e006      	b.n	8004c12 <UART_Mode_Select+0x40>
		case UART_TX_RX:
			uart->huart -> Init.Mode = UART_MODE_TX_RX;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	220c      	movs	r2, #12
 8004c0a:	615a      	str	r2, [r3, #20]
			break;
 8004c0c:	e001      	b.n	8004c12 <UART_Mode_Select+0x40>
		default:
			return INVALID_MODE;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e000      	b.n	8004c14 <UART_Mode_Select+0x42>
	}

	return UART_OK;
 8004c12:	2301      	movs	r3, #1
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <UART_MSB_Select>:

// UART_MSB_Select configures the bit position based on a UART_Bit_Position_et
static UART_Return_et UART_MSB_Select(UART_st* uart)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	switch(uart->bit_position){
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	7b9b      	ldrb	r3, [r3, #14]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d002      	beq.n	8004c36 <UART_MSB_Select+0x16>
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d005      	beq.n	8004c40 <UART_MSB_Select+0x20>
 8004c34:	e00e      	b.n	8004c54 <UART_MSB_Select+0x34>
		case LSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004c3e:	e00b      	b.n	8004c58 <UART_MSB_Select+0x38>
		case MSB_First:
			uart->huart -> AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2280      	movs	r2, #128	; 0x80
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
			uart->huart -> AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004c50:	649a      	str	r2, [r3, #72]	; 0x48
			break;
 8004c52:	e001      	b.n	8004c58 <UART_MSB_Select+0x38>
		default:
			return INVALID_BIT_POSITION;
 8004c54:	2304      	movs	r3, #4
 8004c56:	e000      	b.n	8004c5a <UART_MSB_Select+0x3a>
	}

	return UART_OK;
 8004c58:	2301      	movs	r3, #1
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <UART_Default_Configs>:

// Current configurations that are not being modified
static void UART_Default_Configs(UART_st* uart)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
	uart->huart -> Init.StopBits = UART_STOPBITS_1;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	60da      	str	r2, [r3, #12]
	uart->huart -> Init.Parity = UART_PARITY_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	611a      	str	r2, [r3, #16]
	uart->huart -> Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	619a      	str	r2, [r3, #24]
	uart->huart -> Init.OverSampling = UART_OVERSAMPLING_16;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	61da      	str	r2, [r3, #28]
	uart->huart -> Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2200      	movs	r2, #0
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <UART_Init>:

/*------------- PUBLIC FUNCTION DEFINITIONS ------------- */

UART_Return_et UART_Init(UART_st* uart)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
	UART_Return_et response;

	response = UART_Select(uart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff feec 	bl	8004a88 <UART_Select>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d001      	beq.n	8004cbe <UART_Init+0x1c>
		return response;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
 8004cbc:	e035      	b.n	8004d2a <UART_Init+0x88>
	}

	response = UART_Baud_Rate_Select(uart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ff40 	bl	8004b44 <UART_Baud_Rate_Select>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d001      	beq.n	8004cd2 <UART_Init+0x30>
		return response;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	e02b      	b.n	8004d2a <UART_Init+0x88>
	}

	response = UART_Datasize_Select(uart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff ff54 	bl	8004b80 <UART_Datasize_Select>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d001      	beq.n	8004ce6 <UART_Init+0x44>
		return response;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	e021      	b.n	8004d2a <UART_Init+0x88>
	}

	response = UART_Mode_Select(uart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff ff73 	bl	8004bd2 <UART_Mode_Select>
 8004cec:	4603      	mov	r3, r0
 8004cee:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d001      	beq.n	8004cfa <UART_Init+0x58>
		return response;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	e017      	b.n	8004d2a <UART_Init+0x88>
	}

	response = UART_MSB_Select(uart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ff90 	bl	8004c20 <UART_MSB_Select>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
	if (response != UART_OK) {
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <UART_Init+0x6c>
		return response;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	e00d      	b.n	8004d2a <UART_Init+0x88>
	}

	UART_Default_Configs(uart);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff ffa9 	bl	8004c66 <UART_Default_Configs>

	if (HAL_UART_Init(uart->huart) != HAL_OK) { Error_Handler(); }
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f003 f8a0 	bl	8007e5e <HAL_UART_Init>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <UART_Init+0x86>
 8004d24:	f7ff fa76 	bl	8004214 <Error_Handler>

	return UART_OK;
 8004d28:	2301      	movs	r3, #1
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <UART_Transmit>:

// Uses the HAL UART Transmit to transmit a buffer's contents over the channel specified in the uart struct
UART_Return_et UART_Transmit(UART_st* uart, uint8_t tx_buf[], uint8_t buf_len)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b086      	sub	sp, #24
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	60f8      	str	r0, [r7, #12]
 8004d3a:	60b9      	str	r1, [r7, #8]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef tx_response;

	tx_response = HAL_UART_Transmit(uart->huart, tx_buf, buf_len, TIMEOUT);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6818      	ldr	r0, [r3, #0]
 8004d44:	79fb      	ldrb	r3, [r7, #7]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d4c:	68b9      	ldr	r1, [r7, #8]
 8004d4e:	f003 f8d4 	bl	8007efa <HAL_UART_Transmit>
 8004d52:	4603      	mov	r3, r0
 8004d54:	75fb      	strb	r3, [r7, #23]
	if (tx_response != HAL_OK) {
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <UART_Transmit+0x2e>
		return TRANSMIT_FAILED;
 8004d5c:	2307      	movs	r3, #7
 8004d5e:	e000      	b.n	8004d62 <UART_Transmit+0x30>
	}

	return UART_OK;
 8004d60:	2301      	movs	r3, #1
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_Receive>:

// TODO: check the rx_buf dataframe being sent (casting currently)
UART_Return_et UART_Receive(UART_st* uart, uint8_t rx_buf[], uint8_t buf_len)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b086      	sub	sp, #24
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	4613      	mov	r3, r2
 8004d76:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef rx_response;

	rx_response = HAL_UART_Receive(uart->huart, rx_buf, buf_len, TIMEOUT);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	f241 3388 	movw	r3, #5000	; 0x1388
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	f003 f93b 	bl	8008000 <HAL_UART_Receive>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]
	if (rx_response != HAL_OK) {
 8004d8e:	7dfb      	ldrb	r3, [r7, #23]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <UART_Receive+0x2e>
		return RECEIVE_FAILED;
 8004d94:	2308      	movs	r3, #8
 8004d96:	e000      	b.n	8004d9a <UART_Receive+0x30>
	}

	return UART_OK;
 8004d98:	2301      	movs	r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004da4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ddc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004da8:	480d      	ldr	r0, [pc, #52]	; (8004de0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004daa:	490e      	ldr	r1, [pc, #56]	; (8004de4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004dac:	4a0e      	ldr	r2, [pc, #56]	; (8004de8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004db0:	e002      	b.n	8004db8 <LoopCopyDataInit>

08004db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004db6:	3304      	adds	r3, #4

08004db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004dbc:	d3f9      	bcc.n	8004db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004dbe:	4a0b      	ldr	r2, [pc, #44]	; (8004dec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004dc0:	4c0b      	ldr	r4, [pc, #44]	; (8004df0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004dc4:	e001      	b.n	8004dca <LoopFillZerobss>

08004dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dc8:	3204      	adds	r2, #4

08004dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004dcc:	d3fb      	bcc.n	8004dc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004dce:	f7ff fe49 	bl	8004a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004dd2:	f004 f9af 	bl	8009134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dd6:	f7fe ff2d 	bl	8003c34 <main>
  bx  lr    
 8004dda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004ddc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8004de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004de4:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8004de8:	08009cd4 	.word	0x08009cd4
  ldr r2, =_sbss
 8004dec:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8004df0:	20000670 	.word	0x20000670

08004df4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004df4:	e7fe      	b.n	8004df4 <ADC_IRQHandler>

08004df6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004df6:	b580      	push	{r7, lr}
 8004df8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dfa:	2003      	movs	r0, #3
 8004dfc:	f001 fbba 	bl	8006574 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e00:	200f      	movs	r0, #15
 8004e02:	f000 f805 	bl	8004e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e06:	f7ff fbad 	bl	8004564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e18:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_InitTick+0x54>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b12      	ldr	r3, [pc, #72]	; (8004e68 <HAL_InitTick+0x58>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	4619      	mov	r1, r3
 8004e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 fbd5 	bl	80065de <HAL_SYSTICK_Config>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e00e      	b.n	8004e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	d80a      	bhi.n	8004e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e44:	2200      	movs	r2, #0
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4c:	f001 fb9d 	bl	800658a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e50:	4a06      	ldr	r2, [pc, #24]	; (8004e6c <HAL_InitTick+0x5c>)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e000      	b.n	8004e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200000e4 	.word	0x200000e4
 8004e68:	200000ec 	.word	0x200000ec
 8004e6c:	200000e8 	.word	0x200000e8

08004e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e70:	b480      	push	{r7}
 8004e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e74:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_IncTick+0x20>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_IncTick+0x24>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4413      	add	r3, r2
 8004e80:	4a04      	ldr	r2, [pc, #16]	; (8004e94 <HAL_IncTick+0x24>)
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	200000ec 	.word	0x200000ec
 8004e94:	2000065c 	.word	0x2000065c

08004e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e9c:	4b03      	ldr	r3, [pc, #12]	; (8004eac <HAL_GetTick+0x14>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	2000065c 	.word	0x2000065c

08004eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e031      	b.n	8004f2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7ff fb6c 	bl	80045ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 0310 	and.w	r3, r3, #16
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d116      	bne.n	8004f1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef2:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_ADC_Init+0x84>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	f043 0202 	orr.w	r2, r3, #2
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fb0a 	bl	8005518 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
 8004f1a:	e001      	b.n	8004f20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	ffffeefd 	.word	0xffffeefd

08004f38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d101      	bne.n	8004f52 <HAL_ADC_Start+0x1a>
 8004f4e:	2302      	movs	r3, #2
 8004f50:	e0ad      	b.n	80050ae <HAL_ADC_Start+0x176>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d018      	beq.n	8004f9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004f78:	4b50      	ldr	r3, [pc, #320]	; (80050bc <HAL_ADC_Start+0x184>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a50      	ldr	r2, [pc, #320]	; (80050c0 <HAL_ADC_Start+0x188>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	0c9a      	lsrs	r2, r3, #18
 8004f84:	4613      	mov	r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4413      	add	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004f8c:	e002      	b.n	8004f94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f9      	bne.n	8004f8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d175      	bne.n	8005094 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fac:	4b45      	ldr	r3, [pc, #276]	; (80050c4 <HAL_ADC_Start+0x18c>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d007      	beq.n	8004fd6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	d106      	bne.n	8004ff2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f023 0206 	bic.w	r2, r3, #6
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	645a      	str	r2, [r3, #68]	; 0x44
 8004ff0:	e002      	b.n	8004ff8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005008:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800500a:	4b2f      	ldr	r3, [pc, #188]	; (80050c8 <HAL_ADC_Start+0x190>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f003 031f 	and.w	r3, r3, #31
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10f      	bne.n	8005036 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d143      	bne.n	80050ac <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	689a      	ldr	r2, [r3, #8]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	e03a      	b.n	80050ac <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a24      	ldr	r2, [pc, #144]	; (80050cc <HAL_ADC_Start+0x194>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10e      	bne.n	800505e <HAL_ADC_Start+0x126>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800505c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800505e:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <HAL_ADC_Start+0x190>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	d120      	bne.n	80050ac <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a18      	ldr	r2, [pc, #96]	; (80050d0 <HAL_ADC_Start+0x198>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d11b      	bne.n	80050ac <HAL_ADC_Start+0x174>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d114      	bne.n	80050ac <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005090:	609a      	str	r2, [r3, #8]
 8005092:	e00b      	b.n	80050ac <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a4:	f043 0201 	orr.w	r2, r3, #1
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3714      	adds	r7, #20
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	200000e4 	.word	0x200000e4
 80050c0:	431bde83 	.word	0x431bde83
 80050c4:	fffff8fe 	.word	0xfffff8fe
 80050c8:	40012300 	.word	0x40012300
 80050cc:	40012000 	.word	0x40012000
 80050d0:	40012200 	.word	0x40012200

080050d4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <HAL_ADC_Stop+0x16>
 80050e6:	2302      	movs	r3, #2
 80050e8:	e01f      	b.n	800512a <HAL_ADC_Stop+0x56>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689a      	ldr	r2, [r3, #8]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <HAL_ADC_Stop+0x64>)
 8005116:	4013      	ands	r3, r2
 8005118:	f043 0201 	orr.w	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	ffffeefe 	.word	0xffffeefe

0800513c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005158:	d113      	bne.n	8005182 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005168:	d10b      	bne.n	8005182 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516e:	f043 0220 	orr.w	r2, r3, #32
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e063      	b.n	800524a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005182:	f7ff fe89 	bl	8004e98 <HAL_GetTick>
 8005186:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005188:	e021      	b.n	80051ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d01d      	beq.n	80051ce <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_ADC_PollForConversion+0x6c>
 8005198:	f7ff fe7e 	bl	8004e98 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	683a      	ldr	r2, [r7, #0]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d212      	bcs.n	80051ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d00b      	beq.n	80051ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0204 	orr.w	r2, r3, #4
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e03d      	b.n	800524a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d1d6      	bne.n	800518a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0212 	mvn.w	r2, #18
 80051e4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d123      	bne.n	8005248 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005204:	2b00      	cmp	r3, #0
 8005206:	d11f      	bne.n	8005248 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005212:	2b00      	cmp	r3, #0
 8005214:	d006      	beq.n	8005224 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005220:	2b00      	cmp	r3, #0
 8005222:	d111      	bne.n	8005248 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d105      	bne.n	8005248 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <HAL_ADC_ConfigChannel+0x1c>
 8005284:	2302      	movs	r3, #2
 8005286:	e136      	b.n	80054f6 <HAL_ADC_ConfigChannel+0x28a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b09      	cmp	r3, #9
 8005296:	d93a      	bls.n	800530e <HAL_ADC_ConfigChannel+0xa2>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a0:	d035      	beq.n	800530e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68d9      	ldr	r1, [r3, #12]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	4613      	mov	r3, r2
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4413      	add	r3, r2
 80052b6:	3b1e      	subs	r3, #30
 80052b8:	2207      	movs	r2, #7
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43da      	mvns	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	400a      	ands	r2, r1
 80052c6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a8d      	ldr	r2, [pc, #564]	; (8005504 <HAL_ADC_ConfigChannel+0x298>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d10a      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68d9      	ldr	r1, [r3, #12]
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	061a      	lsls	r2, r3, #24
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052e6:	e035      	b.n	8005354 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68d9      	ldr	r1, [r3, #12]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4618      	mov	r0, r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4403      	add	r3, r0
 8005300:	3b1e      	subs	r3, #30
 8005302:	409a      	lsls	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800530c:	e022      	b.n	8005354 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6919      	ldr	r1, [r3, #16]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	461a      	mov	r2, r3
 800531c:	4613      	mov	r3, r2
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	4413      	add	r3, r2
 8005322:	2207      	movs	r2, #7
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43da      	mvns	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	400a      	ands	r2, r1
 8005330:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6919      	ldr	r1, [r3, #16]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	b29b      	uxth	r3, r3
 8005342:	4618      	mov	r0, r3
 8005344:	4603      	mov	r3, r0
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4403      	add	r3, r0
 800534a:	409a      	lsls	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b06      	cmp	r3, #6
 800535a:	d824      	bhi.n	80053a6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	3b05      	subs	r3, #5
 800536e:	221f      	movs	r2, #31
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	43da      	mvns	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	400a      	ands	r2, r1
 800537c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	4618      	mov	r0, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	4613      	mov	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4413      	add	r3, r2
 8005396:	3b05      	subs	r3, #5
 8005398:	fa00 f203 	lsl.w	r2, r0, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	430a      	orrs	r2, r1
 80053a2:	635a      	str	r2, [r3, #52]	; 0x34
 80053a4:	e04c      	b.n	8005440 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	d824      	bhi.n	80053f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	4613      	mov	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	3b23      	subs	r3, #35	; 0x23
 80053c0:	221f      	movs	r2, #31
 80053c2:	fa02 f303 	lsl.w	r3, r2, r3
 80053c6:	43da      	mvns	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	400a      	ands	r2, r1
 80053ce:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	4618      	mov	r0, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	3b23      	subs	r3, #35	; 0x23
 80053ea:	fa00 f203 	lsl.w	r2, r0, r3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	430a      	orrs	r2, r1
 80053f4:	631a      	str	r2, [r3, #48]	; 0x30
 80053f6:	e023      	b.n	8005440 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	3b41      	subs	r3, #65	; 0x41
 800540a:	221f      	movs	r2, #31
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	43da      	mvns	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	400a      	ands	r2, r1
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	4618      	mov	r0, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	3b41      	subs	r3, #65	; 0x41
 8005434:	fa00 f203 	lsl.w	r2, r0, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a30      	ldr	r2, [pc, #192]	; (8005508 <HAL_ADC_ConfigChannel+0x29c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10a      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x1f4>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005452:	d105      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005454:	4b2d      	ldr	r3, [pc, #180]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a2c      	ldr	r2, [pc, #176]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 800545a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800545e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a28      	ldr	r2, [pc, #160]	; (8005508 <HAL_ADC_ConfigChannel+0x29c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10f      	bne.n	800548a <HAL_ADC_ConfigChannel+0x21e>
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b12      	cmp	r3, #18
 8005470:	d10b      	bne.n	800548a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005472:	4b26      	ldr	r3, [pc, #152]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	4a25      	ldr	r2, [pc, #148]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 8005478:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800547c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800547e:	4b23      	ldr	r3, [pc, #140]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4a22      	ldr	r2, [pc, #136]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 8005484:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005488:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1e      	ldr	r2, [pc, #120]	; (8005508 <HAL_ADC_ConfigChannel+0x29c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d12b      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x280>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_ADC_ConfigChannel+0x298>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <HAL_ADC_ConfigChannel+0x23a>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2b11      	cmp	r3, #17
 80054a4:	d122      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 80054ac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80054b0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80054b2:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4a15      	ldr	r2, [pc, #84]	; (800550c <HAL_ADC_ConfigChannel+0x2a0>)
 80054b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80054bc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a10      	ldr	r2, [pc, #64]	; (8005504 <HAL_ADC_ConfigChannel+0x298>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d111      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <HAL_ADC_ConfigChannel+0x2a4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a11      	ldr	r2, [pc, #68]	; (8005514 <HAL_ADC_ConfigChannel+0x2a8>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0c9a      	lsrs	r2, r3, #18
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054de:	e002      	b.n	80054e6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3b01      	subs	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1f9      	bne.n	80054e0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	10000012 	.word	0x10000012
 8005508:	40012000 	.word	0x40012000
 800550c:	40012300 	.word	0x40012300
 8005510:	200000e4 	.word	0x200000e4
 8005514:	431bde83 	.word	0x431bde83

08005518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005520:	4b78      	ldr	r3, [pc, #480]	; (8005704 <ADC_Init+0x1ec>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	4a77      	ldr	r2, [pc, #476]	; (8005704 <ADC_Init+0x1ec>)
 8005526:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800552a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800552c:	4b75      	ldr	r3, [pc, #468]	; (8005704 <ADC_Init+0x1ec>)
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4973      	ldr	r1, [pc, #460]	; (8005704 <ADC_Init+0x1ec>)
 8005536:	4313      	orrs	r3, r2
 8005538:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005548:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6859      	ldr	r1, [r3, #4]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800556c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6859      	ldr	r1, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689a      	ldr	r2, [r3, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800558e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68da      	ldr	r2, [r3, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	4a58      	ldr	r2, [pc, #352]	; (8005708 <ADC_Init+0x1f0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d022      	beq.n	80055f2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6899      	ldr	r1, [r3, #8]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689a      	ldr	r2, [r3, #8]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80055dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6899      	ldr	r1, [r3, #8]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	e00f      	b.n	8005612 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005610:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0202 	bic.w	r2, r2, #2
 8005620:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6899      	ldr	r1, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	005a      	lsls	r2, r3, #1
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d01b      	beq.n	8005678 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800565e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	3b01      	subs	r3, #1
 800566c:	035a      	lsls	r2, r3, #13
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	605a      	str	r2, [r3, #4]
 8005676:	e007      	b.n	8005688 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005686:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	051a      	lsls	r2, r3, #20
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80056bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6899      	ldr	r1, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ca:	025a      	lsls	r2, r3, #9
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6899      	ldr	r1, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	029a      	lsls	r2, r3, #10
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	609a      	str	r2, [r3, #8]
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr
 8005704:	40012300 	.word	0x40012300
 8005708:	0f000001 	.word	0x0f000001

0800570c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0ed      	b.n	80058fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d102      	bne.n	8005730 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fe ff7e 	bl	800462c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005740:	f7ff fbaa 	bl	8004e98 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005746:	e012      	b.n	800576e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005748:	f7ff fba6 	bl	8004e98 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b0a      	cmp	r3, #10
 8005754:	d90b      	bls.n	800576e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2205      	movs	r2, #5
 8005766:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e0c5      	b.n	80058fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0e5      	beq.n	8005748 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0202 	bic.w	r2, r2, #2
 800578a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800578c:	f7ff fb84 	bl	8004e98 <HAL_GetTick>
 8005790:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005792:	e012      	b.n	80057ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005794:	f7ff fb80 	bl	8004e98 <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	2b0a      	cmp	r3, #10
 80057a0:	d90b      	bls.n	80057ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2205      	movs	r2, #5
 80057b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e09f      	b.n	80058fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e5      	bne.n	8005794 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7e1b      	ldrb	r3, [r3, #24]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d108      	bne.n	80057e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057de:	601a      	str	r2, [r3, #0]
 80057e0:	e007      	b.n	80057f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	7e5b      	ldrb	r3, [r3, #25]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d108      	bne.n	800580c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e007      	b.n	800581c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800581a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	7e9b      	ldrb	r3, [r3, #26]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d108      	bne.n	8005836 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0220 	orr.w	r2, r2, #32
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	e007      	b.n	8005846 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0220 	bic.w	r2, r2, #32
 8005844:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	7edb      	ldrb	r3, [r3, #27]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d108      	bne.n	8005860 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f022 0210 	bic.w	r2, r2, #16
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e007      	b.n	8005870 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0210 	orr.w	r2, r2, #16
 800586e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7f1b      	ldrb	r3, [r3, #28]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d108      	bne.n	800588a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0208 	orr.w	r2, r2, #8
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e007      	b.n	800589a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f022 0208 	bic.w	r2, r2, #8
 8005898:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	7f5b      	ldrb	r3, [r3, #29]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d108      	bne.n	80058b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f042 0204 	orr.w	r2, r2, #4
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	e007      	b.n	80058c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0204 	bic.w	r2, r2, #4
 80058c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	ea42 0103 	orr.w	r1, r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	1e5a      	subs	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d003      	beq.n	800592a <HAL_CAN_ConfigFilter+0x26>
 8005922:	7cfb      	ldrb	r3, [r7, #19]
 8005924:	2b02      	cmp	r3, #2
 8005926:	f040 80c7 	bne.w	8005ab8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a69      	ldr	r2, [pc, #420]	; (8005ad4 <HAL_CAN_ConfigFilter+0x1d0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d001      	beq.n	8005938 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8005934:	4b68      	ldr	r3, [pc, #416]	; (8005ad8 <HAL_CAN_ConfigFilter+0x1d4>)
 8005936:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	4a63      	ldr	r2, [pc, #396]	; (8005ad8 <HAL_CAN_ConfigFilter+0x1d4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d111      	bne.n	8005974 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005956:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	021b      	lsls	r3, r3, #8
 800596c:	431a      	orrs	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 031f 	and.w	r3, r3, #31
 800597c:	2201      	movs	r2, #1
 800597e:	fa02 f303 	lsl.w	r3, r2, r3
 8005982:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	43db      	mvns	r3, r3
 800598e:	401a      	ands	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d123      	bne.n	80059e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	401a      	ands	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80059c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	3248      	adds	r2, #72	; 0x48
 80059c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059dc:	6979      	ldr	r1, [r7, #20]
 80059de:	3348      	adds	r3, #72	; 0x48
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	440b      	add	r3, r1
 80059e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d122      	bne.n	8005a34 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005a0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	3248      	adds	r2, #72	; 0x48
 8005a14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a2a:	6979      	ldr	r1, [r7, #20]
 8005a2c:	3348      	adds	r3, #72	; 0x48
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	440b      	add	r3, r1
 8005a32:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d109      	bne.n	8005a50 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	43db      	mvns	r3, r3
 8005a46:	401a      	ands	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005a4e:	e007      	b.n	8005a60 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	43db      	mvns	r3, r3
 8005a72:	401a      	ands	r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005a7a:	e007      	b.n	8005a8c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	431a      	orrs	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d107      	bne.n	8005aa4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aaa:	f023 0201 	bic.w	r2, r3, #1
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e006      	b.n	8005ac6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40003400 	.word	0x40003400
 8005ad8:	40006400 	.word	0x40006400

08005adc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d12e      	bne.n	8005b4e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b08:	f7ff f9c6 	bl	8004e98 <HAL_GetTick>
 8005b0c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b0e:	e012      	b.n	8005b36 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005b10:	f7ff f9c2 	bl	8004e98 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b0a      	cmp	r3, #10
 8005b1c:	d90b      	bls.n	8005b36 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2205      	movs	r2, #5
 8005b2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e012      	b.n	8005b5c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e006      	b.n	8005b5c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b089      	sub	sp, #36	; 0x24
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b78:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b82:	7ffb      	ldrb	r3, [r7, #31]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d003      	beq.n	8005b90 <HAL_CAN_AddTxMessage+0x2c>
 8005b88:	7ffb      	ldrb	r3, [r7, #31]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	f040 80ad 	bne.w	8005cea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10a      	bne.n	8005bb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d105      	bne.n	8005bb0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 8095 	beq.w	8005cda <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	0e1b      	lsrs	r3, r3, #24
 8005bb4:	f003 0303 	and.w	r3, r3, #3
 8005bb8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005bba:	2201      	movs	r2, #1
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	409a      	lsls	r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bd6:	68f9      	ldr	r1, [r7, #12]
 8005bd8:	6809      	ldr	r1, [r1, #0]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	3318      	adds	r3, #24
 8005be0:	011b      	lsls	r3, r3, #4
 8005be2:	440b      	add	r3, r1
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	e00f      	b.n	8005c08 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bf2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bf8:	68f9      	ldr	r1, [r7, #12]
 8005bfa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005bfc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	3318      	adds	r3, #24
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	440b      	add	r3, r1
 8005c06:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	3318      	adds	r3, #24
 8005c14:	011b      	lsls	r3, r3, #4
 8005c16:	440b      	add	r3, r1
 8005c18:	3304      	adds	r3, #4
 8005c1a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	7d1b      	ldrb	r3, [r3, #20]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d111      	bne.n	8005c48 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	3318      	adds	r3, #24
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	4413      	add	r3, r2
 8005c30:	3304      	adds	r3, #4
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	6811      	ldr	r1, [r2, #0]
 8005c38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3318      	adds	r3, #24
 8005c40:	011b      	lsls	r3, r3, #4
 8005c42:	440b      	add	r3, r1
 8005c44:	3304      	adds	r3, #4
 8005c46:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3307      	adds	r3, #7
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	061a      	lsls	r2, r3, #24
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3306      	adds	r3, #6
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	041b      	lsls	r3, r3, #16
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	3305      	adds	r3, #5
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	4313      	orrs	r3, r2
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	3204      	adds	r2, #4
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	6811      	ldr	r1, [r2, #0]
 8005c70:	ea43 0200 	orr.w	r2, r3, r0
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	440b      	add	r3, r1
 8005c7a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005c7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3303      	adds	r3, #3
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	061a      	lsls	r2, r3, #24
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	3301      	adds	r3, #1
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	6811      	ldr	r1, [r2, #0]
 8005ca6:	ea43 0200 	orr.w	r2, r3, r0
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	440b      	add	r3, r1
 8005cb0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005cb4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	3318      	adds	r3, #24
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	4413      	add	r3, r2
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	6811      	ldr	r1, [r2, #0]
 8005cc8:	f043 0201 	orr.w	r2, r3, #1
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3318      	adds	r3, #24
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	440b      	add	r3, r1
 8005cd4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e00e      	b.n	8005cf8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cde:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e006      	b.n	8005cf8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3724      	adds	r7, #36	; 0x24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
 8005d10:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d18:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005d1a:	7dfb      	ldrb	r3, [r7, #23]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d003      	beq.n	8005d28 <HAL_CAN_GetRxMessage+0x24>
 8005d20:	7dfb      	ldrb	r3, [r7, #23]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	f040 80f3 	bne.w	8005f0e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10e      	bne.n	8005d4c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d116      	bne.n	8005d6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e0e7      	b.n	8005f1c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	f003 0303 	and.w	r3, r3, #3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0d8      	b.n	8005f1c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	331b      	adds	r3, #27
 8005d72:	011b      	lsls	r3, r3, #4
 8005d74:	4413      	add	r3, r2
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0204 	and.w	r2, r3, #4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10c      	bne.n	8005da2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	331b      	adds	r3, #27
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	4413      	add	r3, r2
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	0d5b      	lsrs	r3, r3, #21
 8005d98:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	e00b      	b.n	8005dba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	331b      	adds	r3, #27
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	4413      	add	r3, r2
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	08db      	lsrs	r3, r3, #3
 8005db2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	331b      	adds	r3, #27
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	4413      	add	r3, r2
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0202 	and.w	r2, r3, #2
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	331b      	adds	r3, #27
 8005dd8:	011b      	lsls	r3, r3, #4
 8005dda:	4413      	add	r3, r2
 8005ddc:	3304      	adds	r3, #4
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	331b      	adds	r3, #27
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	4413      	add	r3, r2
 8005df4:	3304      	adds	r3, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	331b      	adds	r3, #27
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	0c1b      	lsrs	r3, r3, #16
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	b2da      	uxtb	r2, r3
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	0a1a      	lsrs	r2, r3, #8
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	0c1a      	lsrs	r2, r3, #16
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	0e1a      	lsrs	r2, r3, #24
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	3303      	adds	r3, #3
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	011b      	lsls	r3, r3, #4
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	3304      	adds	r3, #4
 8005e90:	b2d2      	uxtb	r2, r2
 8005e92:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	0a1a      	lsrs	r2, r3, #8
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	3305      	adds	r3, #5
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	0c1a      	lsrs	r2, r3, #16
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	3306      	adds	r3, #6
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	011b      	lsls	r3, r3, #4
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	0e1a      	lsrs	r2, r3, #24
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	3307      	adds	r3, #7
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d108      	bne.n	8005efa <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0220 	orr.w	r2, r2, #32
 8005ef6:	60da      	str	r2, [r3, #12]
 8005ef8:	e007      	b.n	8005f0a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0220 	orr.w	r2, r2, #32
 8005f08:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e006      	b.n	8005f1c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
  }
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f38:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d002      	beq.n	8005f46 <HAL_CAN_ActivateNotification+0x1e>
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d109      	bne.n	8005f5a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6959      	ldr	r1, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e006      	b.n	8005f68 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
  }
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	; 0x28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d07c      	beq.n	80060b4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d023      	beq.n	800600c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f983 	bl	80062e2 <HAL_CAN_TxMailbox0CompleteCallback>
 8005fdc:	e016      	b.n	800600c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d004      	beq.n	8005ff2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	e00c      	b.n	800600c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d004      	beq.n	8006006 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
 8006004:	e002      	b.n	800600c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f989 	bl	800631e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d024      	beq.n	8006060 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f963 	bl	80062f6 <HAL_CAN_TxMailbox1CompleteCallback>
 8006030:	e016      	b.n	8006060 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	e00c      	b.n	8006060 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604c:	2b00      	cmp	r3, #0
 800604e:	d004      	beq.n	800605a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	e002      	b.n	8006060 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f969 	bl	8006332 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d024      	beq.n	80060b4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006072:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f943 	bl	800630a <HAL_CAN_TxMailbox2CompleteCallback>
 8006084:	e016      	b.n	80060b4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006086:	69bb      	ldr	r3, [r7, #24]
 8006088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
 8006098:	e00c      	b.n	80060b4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	e002      	b.n	80060b4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f949 	bl	8006346 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f003 0310 	and.w	r3, r3, #16
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2210      	movs	r2, #16
 80060d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00b      	beq.n	80060fa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d006      	beq.n	80060fa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2208      	movs	r2, #8
 80060f2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f930 	bl	800635a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fe f86e 	bl	80041f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00c      	beq.n	800613c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006132:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2210      	movs	r2, #16
 800613a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f912 	bl	8006382 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	f003 0310 	and.w	r3, r3, #16
 8006164:	2b00      	cmp	r3, #0
 8006166:	d009      	beq.n	800617c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0303 	and.w	r3, r3, #3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d002      	beq.n	800617c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8f9 	bl	800636e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00b      	beq.n	800619e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	d006      	beq.n	800619e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2210      	movs	r2, #16
 8006196:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f8fc 	bl	8006396 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00b      	beq.n	80061c0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d006      	beq.n	80061c0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2208      	movs	r2, #8
 80061b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8f5 	bl	80063aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d07b      	beq.n	80062c2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d072      	beq.n	80062ba <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d008      	beq.n	80061f0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80061f0:	6a3b      	ldr	r3, [r7, #32]
 80061f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006200:	2b00      	cmp	r3, #0
 8006202:	d003      	beq.n	800620c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	f043 0302 	orr.w	r3, r3, #2
 800620a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	f043 0304 	orr.w	r3, r3, #4
 8006226:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622e:	2b00      	cmp	r3, #0
 8006230:	d043      	beq.n	80062ba <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006238:	2b00      	cmp	r3, #0
 800623a:	d03e      	beq.n	80062ba <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006242:	2b60      	cmp	r3, #96	; 0x60
 8006244:	d02b      	beq.n	800629e <HAL_CAN_IRQHandler+0x32a>
 8006246:	2b60      	cmp	r3, #96	; 0x60
 8006248:	d82e      	bhi.n	80062a8 <HAL_CAN_IRQHandler+0x334>
 800624a:	2b50      	cmp	r3, #80	; 0x50
 800624c:	d022      	beq.n	8006294 <HAL_CAN_IRQHandler+0x320>
 800624e:	2b50      	cmp	r3, #80	; 0x50
 8006250:	d82a      	bhi.n	80062a8 <HAL_CAN_IRQHandler+0x334>
 8006252:	2b40      	cmp	r3, #64	; 0x40
 8006254:	d019      	beq.n	800628a <HAL_CAN_IRQHandler+0x316>
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d826      	bhi.n	80062a8 <HAL_CAN_IRQHandler+0x334>
 800625a:	2b30      	cmp	r3, #48	; 0x30
 800625c:	d010      	beq.n	8006280 <HAL_CAN_IRQHandler+0x30c>
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d822      	bhi.n	80062a8 <HAL_CAN_IRQHandler+0x334>
 8006262:	2b10      	cmp	r3, #16
 8006264:	d002      	beq.n	800626c <HAL_CAN_IRQHandler+0x2f8>
 8006266:	2b20      	cmp	r3, #32
 8006268:	d005      	beq.n	8006276 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800626a:	e01d      	b.n	80062a8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800626c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626e:	f043 0308 	orr.w	r3, r3, #8
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006274:	e019      	b.n	80062aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	f043 0310 	orr.w	r3, r3, #16
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800627e:	e014      	b.n	80062aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	f043 0320 	orr.w	r3, r3, #32
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006288:	e00f      	b.n	80062aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006292:	e00a      	b.n	80062aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800629c:	e005      	b.n	80062aa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80062a6:	e000      	b.n	80062aa <HAL_CAN_IRQHandler+0x336>
            break;
 80062a8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80062b8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2204      	movs	r2, #4
 80062c0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d008      	beq.n	80062da <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f872 	bl	80063be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80062da:	bf00      	nop
 80062dc:	3728      	adds	r7, #40	; 0x28
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80062ea:	bf00      	nop
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800636e:	b480      	push	{r7}
 8006370:	b083      	sub	sp, #12
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006382:	b480      	push	{r7}
 8006384:	b083      	sub	sp, #12
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f003 0307 	and.w	r3, r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063e4:	4b0b      	ldr	r3, [pc, #44]	; (8006414 <__NVIC_SetPriorityGrouping+0x40>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063f0:	4013      	ands	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80063fc:	4b06      	ldr	r3, [pc, #24]	; (8006418 <__NVIC_SetPriorityGrouping+0x44>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006402:	4a04      	ldr	r2, [pc, #16]	; (8006414 <__NVIC_SetPriorityGrouping+0x40>)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	60d3      	str	r3, [r2, #12]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	e000ed00 	.word	0xe000ed00
 8006418:	05fa0000 	.word	0x05fa0000

0800641c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006420:	4b04      	ldr	r3, [pc, #16]	; (8006434 <__NVIC_GetPriorityGrouping+0x18>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	f003 0307 	and.w	r3, r3, #7
}
 800642a:	4618      	mov	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	e000ed00 	.word	0xe000ed00

08006438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db0b      	blt.n	8006462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	4907      	ldr	r1, [pc, #28]	; (8006470 <__NVIC_EnableIRQ+0x38>)
 8006452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	2001      	movs	r0, #1
 800645a:	fa00 f202 	lsl.w	r2, r0, r2
 800645e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	e000e100 	.word	0xe000e100

08006474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	6039      	str	r1, [r7, #0]
 800647e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006484:	2b00      	cmp	r3, #0
 8006486:	db0a      	blt.n	800649e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	490c      	ldr	r1, [pc, #48]	; (80064c0 <__NVIC_SetPriority+0x4c>)
 800648e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006492:	0112      	lsls	r2, r2, #4
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	440b      	add	r3, r1
 8006498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800649c:	e00a      	b.n	80064b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	4908      	ldr	r1, [pc, #32]	; (80064c4 <__NVIC_SetPriority+0x50>)
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	3b04      	subs	r3, #4
 80064ac:	0112      	lsls	r2, r2, #4
 80064ae:	b2d2      	uxtb	r2, r2
 80064b0:	440b      	add	r3, r1
 80064b2:	761a      	strb	r2, [r3, #24]
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	e000e100 	.word	0xe000e100
 80064c4:	e000ed00 	.word	0xe000ed00

080064c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b089      	sub	sp, #36	; 0x24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	f1c3 0307 	rsb	r3, r3, #7
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	bf28      	it	cs
 80064e6:	2304      	movcs	r3, #4
 80064e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3304      	adds	r3, #4
 80064ee:	2b06      	cmp	r3, #6
 80064f0:	d902      	bls.n	80064f8 <NVIC_EncodePriority+0x30>
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	3b03      	subs	r3, #3
 80064f6:	e000      	b.n	80064fa <NVIC_EncodePriority+0x32>
 80064f8:	2300      	movs	r3, #0
 80064fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43da      	mvns	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	401a      	ands	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006510:	f04f 31ff 	mov.w	r1, #4294967295
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	43d9      	mvns	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006520:	4313      	orrs	r3, r2
         );
}
 8006522:	4618      	mov	r0, r3
 8006524:	3724      	adds	r7, #36	; 0x24
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3b01      	subs	r3, #1
 800653c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006540:	d301      	bcc.n	8006546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006542:	2301      	movs	r3, #1
 8006544:	e00f      	b.n	8006566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006546:	4a0a      	ldr	r2, [pc, #40]	; (8006570 <SysTick_Config+0x40>)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	3b01      	subs	r3, #1
 800654c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800654e:	210f      	movs	r1, #15
 8006550:	f04f 30ff 	mov.w	r0, #4294967295
 8006554:	f7ff ff8e 	bl	8006474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006558:	4b05      	ldr	r3, [pc, #20]	; (8006570 <SysTick_Config+0x40>)
 800655a:	2200      	movs	r2, #0
 800655c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800655e:	4b04      	ldr	r3, [pc, #16]	; (8006570 <SysTick_Config+0x40>)
 8006560:	2207      	movs	r2, #7
 8006562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	e000e010 	.word	0xe000e010

08006574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f7ff ff29 	bl	80063d4 <__NVIC_SetPriorityGrouping>
}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	4603      	mov	r3, r0
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	607a      	str	r2, [r7, #4]
 8006596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800659c:	f7ff ff3e 	bl	800641c <__NVIC_GetPriorityGrouping>
 80065a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	6978      	ldr	r0, [r7, #20]
 80065a8:	f7ff ff8e 	bl	80064c8 <NVIC_EncodePriority>
 80065ac:	4602      	mov	r2, r0
 80065ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065b2:	4611      	mov	r1, r2
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff ff5d 	bl	8006474 <__NVIC_SetPriority>
}
 80065ba:	bf00      	nop
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	4603      	mov	r3, r0
 80065ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff ff31 	bl	8006438 <__NVIC_EnableIRQ>
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}

080065de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065de:	b580      	push	{r7, lr}
 80065e0:	b082      	sub	sp, #8
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff ffa2 	bl	8006530 <SysTick_Config>
 80065ec:	4603      	mov	r3, r0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006604:	f7fe fc48 	bl	8004e98 <HAL_GetTick>
 8006608:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d008      	beq.n	8006628 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2280      	movs	r2, #128	; 0x80
 800661a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e052      	b.n	80066ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 0216 	bic.w	r2, r2, #22
 8006636:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006646:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d103      	bne.n	8006658 <HAL_DMA_Abort+0x62>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006654:	2b00      	cmp	r3, #0
 8006656:	d007      	beq.n	8006668 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0208 	bic.w	r2, r2, #8
 8006666:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006678:	e013      	b.n	80066a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800667a:	f7fe fc0d 	bl	8004e98 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b05      	cmp	r3, #5
 8006686:	d90c      	bls.n	80066a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2203      	movs	r2, #3
 8006692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e015      	b.n	80066ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e4      	bne.n	800667a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b4:	223f      	movs	r2, #63	; 0x3f
 80066b6:	409a      	lsls	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d004      	beq.n	80066f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2280      	movs	r2, #128	; 0x80
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e00c      	b.n	800670e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2205      	movs	r2, #5
 80066f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0201 	bic.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800671c:	b480      	push	{r7}
 800671e:	b089      	sub	sp, #36	; 0x24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006736:	2300      	movs	r3, #0
 8006738:	61fb      	str	r3, [r7, #28]
 800673a:	e175      	b.n	8006a28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800673c:	2201      	movs	r2, #1
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	fa02 f303 	lsl.w	r3, r2, r3
 8006744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4013      	ands	r3, r2
 800674e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	f040 8164 	bne.w	8006a22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b01      	cmp	r3, #1
 8006764:	d005      	beq.n	8006772 <HAL_GPIO_Init+0x56>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	2b02      	cmp	r3, #2
 8006770:	d130      	bne.n	80067d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	2203      	movs	r2, #3
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43db      	mvns	r3, r3
 8006784:	69ba      	ldr	r2, [r7, #24]
 8006786:	4013      	ands	r3, r2
 8006788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	fa02 f303 	lsl.w	r3, r2, r3
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	4313      	orrs	r3, r2
 800679a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067a8:	2201      	movs	r2, #1
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	fa02 f303 	lsl.w	r3, r2, r3
 80067b0:	43db      	mvns	r3, r3
 80067b2:	69ba      	ldr	r2, [r7, #24]
 80067b4:	4013      	ands	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	091b      	lsrs	r3, r3, #4
 80067be:	f003 0201 	and.w	r2, r3, #1
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	fa02 f303 	lsl.w	r3, r2, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f003 0303 	and.w	r3, r3, #3
 80067dc:	2b03      	cmp	r3, #3
 80067de:	d017      	beq.n	8006810 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	2203      	movs	r2, #3
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689a      	ldr	r2, [r3, #8]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	4313      	orrs	r3, r2
 8006808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f003 0303 	and.w	r3, r3, #3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d123      	bne.n	8006864 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	08da      	lsrs	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3208      	adds	r2, #8
 8006824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	f003 0307 	and.w	r3, r3, #7
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	220f      	movs	r2, #15
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	08da      	lsrs	r2, r3, #3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3208      	adds	r2, #8
 800685e:	69b9      	ldr	r1, [r7, #24]
 8006860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	005b      	lsls	r3, r3, #1
 800686e:	2203      	movs	r2, #3
 8006870:	fa02 f303 	lsl.w	r3, r2, r3
 8006874:	43db      	mvns	r3, r3
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	4013      	ands	r3, r2
 800687a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 0203 	and.w	r2, r3, #3
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4313      	orrs	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80be 	beq.w	8006a22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <HAL_GPIO_Init+0x324>)
 80068a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068aa:	4a65      	ldr	r2, [pc, #404]	; (8006a40 <HAL_GPIO_Init+0x324>)
 80068ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068b0:	6453      	str	r3, [r2, #68]	; 0x44
 80068b2:	4b63      	ldr	r3, [pc, #396]	; (8006a40 <HAL_GPIO_Init+0x324>)
 80068b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80068be:	4a61      	ldr	r2, [pc, #388]	; (8006a44 <HAL_GPIO_Init+0x328>)
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	089b      	lsrs	r3, r3, #2
 80068c4:	3302      	adds	r3, #2
 80068c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	220f      	movs	r2, #15
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43db      	mvns	r3, r3
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	4013      	ands	r3, r2
 80068e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <HAL_GPIO_Init+0x32c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d037      	beq.n	800695a <HAL_GPIO_Init+0x23e>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a57      	ldr	r2, [pc, #348]	; (8006a4c <HAL_GPIO_Init+0x330>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d031      	beq.n	8006956 <HAL_GPIO_Init+0x23a>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a56      	ldr	r2, [pc, #344]	; (8006a50 <HAL_GPIO_Init+0x334>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d02b      	beq.n	8006952 <HAL_GPIO_Init+0x236>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a55      	ldr	r2, [pc, #340]	; (8006a54 <HAL_GPIO_Init+0x338>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d025      	beq.n	800694e <HAL_GPIO_Init+0x232>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a54      	ldr	r2, [pc, #336]	; (8006a58 <HAL_GPIO_Init+0x33c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <HAL_GPIO_Init+0x22e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a53      	ldr	r2, [pc, #332]	; (8006a5c <HAL_GPIO_Init+0x340>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d019      	beq.n	8006946 <HAL_GPIO_Init+0x22a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a52      	ldr	r2, [pc, #328]	; (8006a60 <HAL_GPIO_Init+0x344>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d013      	beq.n	8006942 <HAL_GPIO_Init+0x226>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a51      	ldr	r2, [pc, #324]	; (8006a64 <HAL_GPIO_Init+0x348>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00d      	beq.n	800693e <HAL_GPIO_Init+0x222>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a50      	ldr	r2, [pc, #320]	; (8006a68 <HAL_GPIO_Init+0x34c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d007      	beq.n	800693a <HAL_GPIO_Init+0x21e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a4f      	ldr	r2, [pc, #316]	; (8006a6c <HAL_GPIO_Init+0x350>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_GPIO_Init+0x21a>
 8006932:	2309      	movs	r3, #9
 8006934:	e012      	b.n	800695c <HAL_GPIO_Init+0x240>
 8006936:	230a      	movs	r3, #10
 8006938:	e010      	b.n	800695c <HAL_GPIO_Init+0x240>
 800693a:	2308      	movs	r3, #8
 800693c:	e00e      	b.n	800695c <HAL_GPIO_Init+0x240>
 800693e:	2307      	movs	r3, #7
 8006940:	e00c      	b.n	800695c <HAL_GPIO_Init+0x240>
 8006942:	2306      	movs	r3, #6
 8006944:	e00a      	b.n	800695c <HAL_GPIO_Init+0x240>
 8006946:	2305      	movs	r3, #5
 8006948:	e008      	b.n	800695c <HAL_GPIO_Init+0x240>
 800694a:	2304      	movs	r3, #4
 800694c:	e006      	b.n	800695c <HAL_GPIO_Init+0x240>
 800694e:	2303      	movs	r3, #3
 8006950:	e004      	b.n	800695c <HAL_GPIO_Init+0x240>
 8006952:	2302      	movs	r3, #2
 8006954:	e002      	b.n	800695c <HAL_GPIO_Init+0x240>
 8006956:	2301      	movs	r3, #1
 8006958:	e000      	b.n	800695c <HAL_GPIO_Init+0x240>
 800695a:	2300      	movs	r3, #0
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	f002 0203 	and.w	r2, r2, #3
 8006962:	0092      	lsls	r2, r2, #2
 8006964:	4093      	lsls	r3, r2
 8006966:	69ba      	ldr	r2, [r7, #24]
 8006968:	4313      	orrs	r3, r2
 800696a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800696c:	4935      	ldr	r1, [pc, #212]	; (8006a44 <HAL_GPIO_Init+0x328>)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	089b      	lsrs	r3, r3, #2
 8006972:	3302      	adds	r3, #2
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800697a:	4b3d      	ldr	r3, [pc, #244]	; (8006a70 <HAL_GPIO_Init+0x354>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	43db      	mvns	r3, r3
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	4013      	ands	r3, r2
 8006988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d003      	beq.n	800699e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006996:	69ba      	ldr	r2, [r7, #24]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	4313      	orrs	r3, r2
 800699c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800699e:	4a34      	ldr	r2, [pc, #208]	; (8006a70 <HAL_GPIO_Init+0x354>)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069a4:	4b32      	ldr	r3, [pc, #200]	; (8006a70 <HAL_GPIO_Init+0x354>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	43db      	mvns	r3, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4013      	ands	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80069c8:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <HAL_GPIO_Init+0x354>)
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80069ce:	4b28      	ldr	r3, [pc, #160]	; (8006a70 <HAL_GPIO_Init+0x354>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	43db      	mvns	r3, r3
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	4013      	ands	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80069ea:	69ba      	ldr	r2, [r7, #24]
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80069f2:	4a1f      	ldr	r2, [pc, #124]	; (8006a70 <HAL_GPIO_Init+0x354>)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <HAL_GPIO_Init+0x354>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	43db      	mvns	r3, r3
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	4013      	ands	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a1c:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <HAL_GPIO_Init+0x354>)
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3301      	adds	r3, #1
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b0f      	cmp	r3, #15
 8006a2c:	f67f ae86 	bls.w	800673c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	3724      	adds	r7, #36	; 0x24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40023800 	.word	0x40023800
 8006a44:	40013800 	.word	0x40013800
 8006a48:	40020000 	.word	0x40020000
 8006a4c:	40020400 	.word	0x40020400
 8006a50:	40020800 	.word	0x40020800
 8006a54:	40020c00 	.word	0x40020c00
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	40021400 	.word	0x40021400
 8006a60:	40021800 	.word	0x40021800
 8006a64:	40021c00 	.word	0x40021c00
 8006a68:	40022000 	.word	0x40022000
 8006a6c:	40022400 	.word	0x40022400
 8006a70:	40013c00 	.word	0x40013c00

08006a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	807b      	strh	r3, [r7, #2]
 8006a80:	4613      	mov	r3, r2
 8006a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a84:	787b      	ldrb	r3, [r7, #1]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a8a:	887a      	ldrh	r2, [r7, #2]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006a90:	e003      	b.n	8006a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006a92:	887b      	ldrh	r3, [r7, #2]
 8006a94:	041a      	lsls	r2, r3, #16
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	619a      	str	r2, [r3, #24]
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e29b      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8087 	beq.w	8006bda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006acc:	4b96      	ldr	r3, [pc, #600]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 030c 	and.w	r3, r3, #12
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d00c      	beq.n	8006af2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad8:	4b93      	ldr	r3, [pc, #588]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 030c 	and.w	r3, r3, #12
 8006ae0:	2b08      	cmp	r3, #8
 8006ae2:	d112      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62>
 8006ae4:	4b90      	ldr	r3, [pc, #576]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006af0:	d10b      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af2:	4b8d      	ldr	r3, [pc, #564]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d06c      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x130>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d168      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e275      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b12:	d106      	bne.n	8006b22 <HAL_RCC_OscConfig+0x7a>
 8006b14:	4b84      	ldr	r3, [pc, #528]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a83      	ldr	r2, [pc, #524]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	e02e      	b.n	8006b80 <HAL_RCC_OscConfig+0xd8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10c      	bne.n	8006b44 <HAL_RCC_OscConfig+0x9c>
 8006b2a:	4b7f      	ldr	r3, [pc, #508]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a7e      	ldr	r2, [pc, #504]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	4b7c      	ldr	r3, [pc, #496]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a7b      	ldr	r2, [pc, #492]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e01d      	b.n	8006b80 <HAL_RCC_OscConfig+0xd8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RCC_OscConfig+0xc0>
 8006b4e:	4b76      	ldr	r3, [pc, #472]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a75      	ldr	r2, [pc, #468]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b73      	ldr	r3, [pc, #460]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a72      	ldr	r2, [pc, #456]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_OscConfig+0xd8>
 8006b68:	4b6f      	ldr	r3, [pc, #444]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a6e      	ldr	r2, [pc, #440]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b6c      	ldr	r3, [pc, #432]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a6b      	ldr	r2, [pc, #428]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b88:	f7fe f986 	bl	8004e98 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fe f982 	bl	8004e98 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	; 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e229      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	4b61      	ldr	r3, [pc, #388]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0xe8>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fe f972 	bl	8004e98 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fe f96e 	bl	8004e98 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e215      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	4b57      	ldr	r3, [pc, #348]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x110>
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d069      	beq.n	8006cba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006be6:	4b50      	ldr	r3, [pc, #320]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf2:	4b4d      	ldr	r3, [pc, #308]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d11c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x190>
 8006bfe:	4b4a      	ldr	r3, [pc, #296]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0a:	4b47      	ldr	r3, [pc, #284]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_RCC_OscConfig+0x17a>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d001      	beq.n	8006c22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e1e9      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c22:	4b41      	ldr	r3, [pc, #260]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	493d      	ldr	r1, [pc, #244]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	e040      	b.n	8006cba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d023      	beq.n	8006c88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c40:	4b39      	ldr	r3, [pc, #228]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a38      	ldr	r2, [pc, #224]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c46:	f043 0301 	orr.w	r3, r3, #1
 8006c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c4c:	f7fe f924 	bl	8004e98 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c54:	f7fe f920 	bl	8004e98 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e1c7      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c66:	4b30      	ldr	r3, [pc, #192]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c72:	4b2d      	ldr	r3, [pc, #180]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	00db      	lsls	r3, r3, #3
 8006c80:	4929      	ldr	r1, [pc, #164]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	600b      	str	r3, [r1, #0]
 8006c86:	e018      	b.n	8006cba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c88:	4b27      	ldr	r3, [pc, #156]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a26      	ldr	r2, [pc, #152]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fe f900 	bl	8004e98 <HAL_GetTick>
 8006c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9c:	f7fe f8fc 	bl	8004e98 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e1a3      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cae:	4b1e      	ldr	r3, [pc, #120]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1f0      	bne.n	8006c9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d038      	beq.n	8006d38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d019      	beq.n	8006d02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cd2:	4a15      	ldr	r2, [pc, #84]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cda:	f7fe f8dd 	bl	8004e98 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ce2:	f7fe f8d9 	bl	8004e98 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e180      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cf4:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f0      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x23a>
 8006d00:	e01a      	b.n	8006d38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d02:	4b09      	ldr	r3, [pc, #36]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d06:	4a08      	ldr	r2, [pc, #32]	; (8006d28 <HAL_RCC_OscConfig+0x280>)
 8006d08:	f023 0301 	bic.w	r3, r3, #1
 8006d0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d0e:	f7fe f8c3 	bl	8004e98 <HAL_GetTick>
 8006d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d14:	e00a      	b.n	8006d2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d16:	f7fe f8bf 	bl	8004e98 <HAL_GetTick>
 8006d1a:	4602      	mov	r2, r0
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	1ad3      	subs	r3, r2, r3
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d903      	bls.n	8006d2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e166      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
 8006d28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d2c:	4b92      	ldr	r3, [pc, #584]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1ee      	bne.n	8006d16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80a4 	beq.w	8006e8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d46:	4b8c      	ldr	r3, [pc, #560]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	4b89      	ldr	r3, [pc, #548]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	4a88      	ldr	r2, [pc, #544]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8006d5e:	4b86      	ldr	r3, [pc, #536]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d66:	60bb      	str	r3, [r7, #8]
 8006d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d6e:	4b83      	ldr	r3, [pc, #524]	; (8006f7c <HAL_RCC_OscConfig+0x4d4>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d118      	bne.n	8006dac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d7a:	4b80      	ldr	r3, [pc, #512]	; (8006f7c <HAL_RCC_OscConfig+0x4d4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a7f      	ldr	r2, [pc, #508]	; (8006f7c <HAL_RCC_OscConfig+0x4d4>)
 8006d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d86:	f7fe f887 	bl	8004e98 <HAL_GetTick>
 8006d8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d8c:	e008      	b.n	8006da0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d8e:	f7fe f883 	bl	8004e98 <HAL_GetTick>
 8006d92:	4602      	mov	r2, r0
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	1ad3      	subs	r3, r2, r3
 8006d98:	2b64      	cmp	r3, #100	; 0x64
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e12a      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006da0:	4b76      	ldr	r3, [pc, #472]	; (8006f7c <HAL_RCC_OscConfig+0x4d4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0f0      	beq.n	8006d8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d106      	bne.n	8006dc2 <HAL_RCC_OscConfig+0x31a>
 8006db4:	4b70      	ldr	r3, [pc, #448]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a6f      	ldr	r2, [pc, #444]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc0:	e02d      	b.n	8006e1e <HAL_RCC_OscConfig+0x376>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x33c>
 8006dca:	4b6b      	ldr	r3, [pc, #428]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	4a6a      	ldr	r2, [pc, #424]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8006dd6:	4b68      	ldr	r3, [pc, #416]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dda:	4a67      	ldr	r2, [pc, #412]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006ddc:	f023 0304 	bic.w	r3, r3, #4
 8006de0:	6713      	str	r3, [r2, #112]	; 0x70
 8006de2:	e01c      	b.n	8006e1e <HAL_RCC_OscConfig+0x376>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	2b05      	cmp	r3, #5
 8006dea:	d10c      	bne.n	8006e06 <HAL_RCC_OscConfig+0x35e>
 8006dec:	4b62      	ldr	r3, [pc, #392]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df0:	4a61      	ldr	r2, [pc, #388]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006df2:	f043 0304 	orr.w	r3, r3, #4
 8006df6:	6713      	str	r3, [r2, #112]	; 0x70
 8006df8:	4b5f      	ldr	r3, [pc, #380]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfc:	4a5e      	ldr	r2, [pc, #376]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6713      	str	r3, [r2, #112]	; 0x70
 8006e04:	e00b      	b.n	8006e1e <HAL_RCC_OscConfig+0x376>
 8006e06:	4b5c      	ldr	r3, [pc, #368]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e0a:	4a5b      	ldr	r2, [pc, #364]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e0c:	f023 0301 	bic.w	r3, r3, #1
 8006e10:	6713      	str	r3, [r2, #112]	; 0x70
 8006e12:	4b59      	ldr	r3, [pc, #356]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e16:	4a58      	ldr	r2, [pc, #352]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e18:	f023 0304 	bic.w	r3, r3, #4
 8006e1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d015      	beq.n	8006e52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e26:	f7fe f837 	bl	8004e98 <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e2c:	e00a      	b.n	8006e44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e2e:	f7fe f833 	bl	8004e98 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e0d8      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e44:	4b4c      	ldr	r3, [pc, #304]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0ee      	beq.n	8006e2e <HAL_RCC_OscConfig+0x386>
 8006e50:	e014      	b.n	8006e7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e52:	f7fe f821 	bl	8004e98 <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e58:	e00a      	b.n	8006e70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e5a:	f7fe f81d 	bl	8004e98 <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0c2      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e70:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ee      	bne.n	8006e5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e7c:	7dfb      	ldrb	r3, [r7, #23]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d105      	bne.n	8006e8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e82:	4b3d      	ldr	r3, [pc, #244]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	4a3c      	ldr	r2, [pc, #240]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80ae 	beq.w	8006ff4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e98:	4b37      	ldr	r3, [pc, #220]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 030c 	and.w	r3, r3, #12
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d06d      	beq.n	8006f80 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2b02      	cmp	r3, #2
 8006eaa:	d14b      	bne.n	8006f44 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eac:	4b32      	ldr	r3, [pc, #200]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a31      	ldr	r2, [pc, #196]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006eb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006eb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb8:	f7fd ffee 	bl	8004e98 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec0:	f7fd ffea 	bl	8004e98 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e091      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed2:	4b29      	ldr	r3, [pc, #164]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69da      	ldr	r2, [r3, #28]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eec:	019b      	lsls	r3, r3, #6
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	3b01      	subs	r3, #1
 8006ef8:	041b      	lsls	r3, r3, #16
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f00:	061b      	lsls	r3, r3, #24
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	071b      	lsls	r3, r3, #28
 8006f0a:	491b      	ldr	r1, [pc, #108]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f10:	4b19      	ldr	r3, [pc, #100]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a18      	ldr	r2, [pc, #96]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1c:	f7fd ffbc 	bl	8004e98 <HAL_GetTick>
 8006f20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f22:	e008      	b.n	8006f36 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f24:	f7fd ffb8 	bl	8004e98 <HAL_GetTick>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e05f      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0f0      	beq.n	8006f24 <HAL_RCC_OscConfig+0x47c>
 8006f42:	e057      	b.n	8006ff4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f44:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a0b      	ldr	r2, [pc, #44]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f50:	f7fd ffa2 	bl	8004e98 <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fd ff9e 	bl	8004e98 <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e045      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f6a:	4b03      	ldr	r3, [pc, #12]	; (8006f78 <HAL_RCC_OscConfig+0x4d0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f0      	bne.n	8006f58 <HAL_RCC_OscConfig+0x4b0>
 8006f76:	e03d      	b.n	8006ff4 <HAL_RCC_OscConfig+0x54c>
 8006f78:	40023800 	.word	0x40023800
 8006f7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f80:	4b1f      	ldr	r3, [pc, #124]	; (8007000 <HAL_RCC_OscConfig+0x558>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d030      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d129      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d122      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006fb6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d119      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d10f      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fda:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40023800 	.word	0x40023800

08007004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e0d0      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800701c:	4b6a      	ldr	r3, [pc, #424]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d910      	bls.n	800704c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702a:	4b67      	ldr	r3, [pc, #412]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f023 020f 	bic.w	r2, r3, #15
 8007032:	4965      	ldr	r1, [pc, #404]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703a:	4b63      	ldr	r3, [pc, #396]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e0b8      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d020      	beq.n	800709a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007064:	4b59      	ldr	r3, [pc, #356]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	4a58      	ldr	r2, [pc, #352]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800706a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800706e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0308 	and.w	r3, r3, #8
 8007078:	2b00      	cmp	r3, #0
 800707a:	d005      	beq.n	8007088 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800707c:	4b53      	ldr	r3, [pc, #332]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4a52      	ldr	r2, [pc, #328]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007086:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007088:	4b50      	ldr	r3, [pc, #320]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	494d      	ldr	r1, [pc, #308]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007096:	4313      	orrs	r3, r2
 8007098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d040      	beq.n	8007128 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d107      	bne.n	80070be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ae:	4b47      	ldr	r3, [pc, #284]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d115      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e07f      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d107      	bne.n	80070d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c6:	4b41      	ldr	r3, [pc, #260]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e073      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070d6:	4b3d      	ldr	r3, [pc, #244]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e06b      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070e6:	4b39      	ldr	r3, [pc, #228]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 0203 	bic.w	r2, r3, #3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4936      	ldr	r1, [pc, #216]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f8:	f7fd fece 	bl	8004e98 <HAL_GetTick>
 80070fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070fe:	e00a      	b.n	8007116 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007100:	f7fd feca 	bl	8004e98 <HAL_GetTick>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	1ad3      	subs	r3, r2, r3
 800710a:	f241 3288 	movw	r2, #5000	; 0x1388
 800710e:	4293      	cmp	r3, r2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e053      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f003 020c 	and.w	r2, r3, #12
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	429a      	cmp	r2, r3
 8007126:	d1eb      	bne.n	8007100 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007128:	4b27      	ldr	r3, [pc, #156]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d210      	bcs.n	8007158 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f023 020f 	bic.w	r2, r3, #15
 800713e:	4922      	ldr	r1, [pc, #136]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007146:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <HAL_RCC_ClockConfig+0x1c4>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d001      	beq.n	8007158 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	e032      	b.n	80071be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0304 	and.w	r3, r3, #4
 8007160:	2b00      	cmp	r3, #0
 8007162:	d008      	beq.n	8007176 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007164:	4b19      	ldr	r3, [pc, #100]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	4916      	ldr	r1, [pc, #88]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007172:	4313      	orrs	r3, r2
 8007174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007182:	4b12      	ldr	r3, [pc, #72]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	490e      	ldr	r1, [pc, #56]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 8007192:	4313      	orrs	r3, r2
 8007194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007196:	f000 f821 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 800719a:	4602      	mov	r2, r0
 800719c:	4b0b      	ldr	r3, [pc, #44]	; (80071cc <HAL_RCC_ClockConfig+0x1c8>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	091b      	lsrs	r3, r3, #4
 80071a2:	f003 030f 	and.w	r3, r3, #15
 80071a6:	490a      	ldr	r1, [pc, #40]	; (80071d0 <HAL_RCC_ClockConfig+0x1cc>)
 80071a8:	5ccb      	ldrb	r3, [r1, r3]
 80071aa:	fa22 f303 	lsr.w	r3, r2, r3
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <HAL_RCC_ClockConfig+0x1d0>)
 80071b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <HAL_RCC_ClockConfig+0x1d4>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fd fe2a 	bl	8004e10 <HAL_InitTick>

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40023c00 	.word	0x40023c00
 80071cc:	40023800 	.word	0x40023800
 80071d0:	08009c48 	.word	0x08009c48
 80071d4:	200000e4 	.word	0x200000e4
 80071d8:	200000e8 	.word	0x200000e8

080071dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071e0:	b090      	sub	sp, #64	; 0x40
 80071e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
 80071e8:	2300      	movs	r3, #0
 80071ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ec:	2300      	movs	r3, #0
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071f4:	4b59      	ldr	r3, [pc, #356]	; (800735c <HAL_RCC_GetSysClockFreq+0x180>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 030c 	and.w	r3, r3, #12
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	d00d      	beq.n	800721c <HAL_RCC_GetSysClockFreq+0x40>
 8007200:	2b08      	cmp	r3, #8
 8007202:	f200 80a1 	bhi.w	8007348 <HAL_RCC_GetSysClockFreq+0x16c>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0x34>
 800720a:	2b04      	cmp	r3, #4
 800720c:	d003      	beq.n	8007216 <HAL_RCC_GetSysClockFreq+0x3a>
 800720e:	e09b      	b.n	8007348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007210:	4b53      	ldr	r3, [pc, #332]	; (8007360 <HAL_RCC_GetSysClockFreq+0x184>)
 8007212:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007214:	e09b      	b.n	800734e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007216:	4b53      	ldr	r3, [pc, #332]	; (8007364 <HAL_RCC_GetSysClockFreq+0x188>)
 8007218:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800721a:	e098      	b.n	800734e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800721c:	4b4f      	ldr	r3, [pc, #316]	; (800735c <HAL_RCC_GetSysClockFreq+0x180>)
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007226:	4b4d      	ldr	r3, [pc, #308]	; (800735c <HAL_RCC_GetSysClockFreq+0x180>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d028      	beq.n	8007284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007232:	4b4a      	ldr	r3, [pc, #296]	; (800735c <HAL_RCC_GetSysClockFreq+0x180>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	099b      	lsrs	r3, r3, #6
 8007238:	2200      	movs	r2, #0
 800723a:	623b      	str	r3, [r7, #32]
 800723c:	627a      	str	r2, [r7, #36]	; 0x24
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007244:	2100      	movs	r1, #0
 8007246:	4b47      	ldr	r3, [pc, #284]	; (8007364 <HAL_RCC_GetSysClockFreq+0x188>)
 8007248:	fb03 f201 	mul.w	r2, r3, r1
 800724c:	2300      	movs	r3, #0
 800724e:	fb00 f303 	mul.w	r3, r0, r3
 8007252:	4413      	add	r3, r2
 8007254:	4a43      	ldr	r2, [pc, #268]	; (8007364 <HAL_RCC_GetSysClockFreq+0x188>)
 8007256:	fba0 1202 	umull	r1, r2, r0, r2
 800725a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800725c:	460a      	mov	r2, r1
 800725e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007262:	4413      	add	r3, r2
 8007264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	2200      	movs	r2, #0
 800726a:	61bb      	str	r3, [r7, #24]
 800726c:	61fa      	str	r2, [r7, #28]
 800726e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007276:	f7f9 f8ed 	bl	8000454 <__aeabi_uldivmod>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4613      	mov	r3, r2
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007282:	e053      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007284:	4b35      	ldr	r3, [pc, #212]	; (800735c <HAL_RCC_GetSysClockFreq+0x180>)
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	099b      	lsrs	r3, r3, #6
 800728a:	2200      	movs	r2, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	617a      	str	r2, [r7, #20]
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007296:	f04f 0b00 	mov.w	fp, #0
 800729a:	4652      	mov	r2, sl
 800729c:	465b      	mov	r3, fp
 800729e:	f04f 0000 	mov.w	r0, #0
 80072a2:	f04f 0100 	mov.w	r1, #0
 80072a6:	0159      	lsls	r1, r3, #5
 80072a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80072ac:	0150      	lsls	r0, r2, #5
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	ebb2 080a 	subs.w	r8, r2, sl
 80072b6:	eb63 090b 	sbc.w	r9, r3, fp
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80072c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80072ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072ce:	ebb2 0408 	subs.w	r4, r2, r8
 80072d2:	eb63 0509 	sbc.w	r5, r3, r9
 80072d6:	f04f 0200 	mov.w	r2, #0
 80072da:	f04f 0300 	mov.w	r3, #0
 80072de:	00eb      	lsls	r3, r5, #3
 80072e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072e4:	00e2      	lsls	r2, r4, #3
 80072e6:	4614      	mov	r4, r2
 80072e8:	461d      	mov	r5, r3
 80072ea:	eb14 030a 	adds.w	r3, r4, sl
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	eb45 030b 	adc.w	r3, r5, fp
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	f04f 0200 	mov.w	r2, #0
 80072fa:	f04f 0300 	mov.w	r3, #0
 80072fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007302:	4629      	mov	r1, r5
 8007304:	028b      	lsls	r3, r1, #10
 8007306:	4621      	mov	r1, r4
 8007308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800730c:	4621      	mov	r1, r4
 800730e:	028a      	lsls	r2, r1, #10
 8007310:	4610      	mov	r0, r2
 8007312:	4619      	mov	r1, r3
 8007314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007316:	2200      	movs	r2, #0
 8007318:	60bb      	str	r3, [r7, #8]
 800731a:	60fa      	str	r2, [r7, #12]
 800731c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007320:	f7f9 f898 	bl	8000454 <__aeabi_uldivmod>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4613      	mov	r3, r2
 800732a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800732c:	4b0b      	ldr	r3, [pc, #44]	; (800735c <HAL_RCC_GetSysClockFreq+0x180>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	3301      	adds	r3, #1
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800733c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	fbb2 f3f3 	udiv	r3, r2, r3
 8007344:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007346:	e002      	b.n	800734e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <HAL_RCC_GetSysClockFreq+0x184>)
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800734c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007350:	4618      	mov	r0, r3
 8007352:	3740      	adds	r7, #64	; 0x40
 8007354:	46bd      	mov	sp, r7
 8007356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800735a:	bf00      	nop
 800735c:	40023800 	.word	0x40023800
 8007360:	00f42400 	.word	0x00f42400
 8007364:	017d7840 	.word	0x017d7840

08007368 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800736c:	4b03      	ldr	r3, [pc, #12]	; (800737c <HAL_RCC_GetHCLKFreq+0x14>)
 800736e:	681b      	ldr	r3, [r3, #0]
}
 8007370:	4618      	mov	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	200000e4 	.word	0x200000e4

08007380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007384:	f7ff fff0 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 8007388:	4602      	mov	r2, r0
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	0a9b      	lsrs	r3, r3, #10
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	4903      	ldr	r1, [pc, #12]	; (80073a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007396:	5ccb      	ldrb	r3, [r1, r3]
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800739c:	4618      	mov	r0, r3
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	40023800 	.word	0x40023800
 80073a4:	08009c58 	.word	0x08009c58

080073a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073ac:	f7ff ffdc 	bl	8007368 <HAL_RCC_GetHCLKFreq>
 80073b0:	4602      	mov	r2, r0
 80073b2:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	0b5b      	lsrs	r3, r3, #13
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	4903      	ldr	r1, [pc, #12]	; (80073cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80073be:	5ccb      	ldrb	r3, [r1, r3]
 80073c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	bd80      	pop	{r7, pc}
 80073c8:	40023800 	.word	0x40023800
 80073cc:	08009c58 	.word	0x08009c58

080073d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80073d8:	2300      	movs	r3, #0
 80073da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073e4:	2300      	movs	r3, #0
 80073e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d012      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073f8:	4b69      	ldr	r3, [pc, #420]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	4a68      	ldr	r2, [pc, #416]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007402:	6093      	str	r3, [r2, #8]
 8007404:	4b66      	ldr	r3, [pc, #408]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007406:	689a      	ldr	r2, [r3, #8]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	4964      	ldr	r1, [pc, #400]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800740e:	4313      	orrs	r3, r2
 8007410:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800741a:	2301      	movs	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d017      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800742a:	4b5d      	ldr	r3, [pc, #372]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007430:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	4959      	ldr	r1, [pc, #356]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	4313      	orrs	r3, r2
 800743c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007448:	d101      	bne.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800744a:	2301      	movs	r3, #1
 800744c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007456:	2301      	movs	r3, #1
 8007458:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007462:	2b00      	cmp	r3, #0
 8007464:	d017      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007466:	4b4e      	ldr	r3, [pc, #312]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800746c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	494a      	ldr	r1, [pc, #296]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007484:	d101      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007486:	2301      	movs	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007492:	2301      	movs	r3, #1
 8007494:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80074a2:	2301      	movs	r3, #1
 80074a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f000 808b 	beq.w	80075ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074b4:	4b3a      	ldr	r3, [pc, #232]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	4a39      	ldr	r2, [pc, #228]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074be:	6413      	str	r3, [r2, #64]	; 0x40
 80074c0:	4b37      	ldr	r3, [pc, #220]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c8:	60bb      	str	r3, [r7, #8]
 80074ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074cc:	4b35      	ldr	r3, [pc, #212]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a34      	ldr	r2, [pc, #208]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d8:	f7fd fcde 	bl	8004e98 <HAL_GetTick>
 80074dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074e0:	f7fd fcda 	bl	8004e98 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b64      	cmp	r3, #100	; 0x64
 80074ec:	d901      	bls.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e38f      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074f2:	4b2c      	ldr	r3, [pc, #176]	; (80075a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074fe:	4b28      	ldr	r3, [pc, #160]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007506:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d035      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	429a      	cmp	r2, r3
 800751a:	d02e      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800751c:	4b20      	ldr	r3, [pc, #128]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007524:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007526:	4b1e      	ldr	r3, [pc, #120]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752a:	4a1d      	ldr	r2, [pc, #116]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800752c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007530:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007532:	4b1b      	ldr	r3, [pc, #108]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007536:	4a1a      	ldr	r2, [pc, #104]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800753c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800753e:	4a18      	ldr	r2, [pc, #96]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007544:	4b16      	ldr	r3, [pc, #88]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b01      	cmp	r3, #1
 800754e:	d114      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007550:	f7fd fca2 	bl	8004e98 <HAL_GetTick>
 8007554:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007556:	e00a      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007558:	f7fd fc9e 	bl	8004e98 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	f241 3288 	movw	r2, #5000	; 0x1388
 8007566:	4293      	cmp	r3, r2
 8007568:	d901      	bls.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e351      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800756e:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007572:	f003 0302 	and.w	r3, r3, #2
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0ee      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007582:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007586:	d111      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007594:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007596:	400b      	ands	r3, r1
 8007598:	4901      	ldr	r1, [pc, #4]	; (80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800759a:	4313      	orrs	r3, r2
 800759c:	608b      	str	r3, [r1, #8]
 800759e:	e00b      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80075a0:	40023800 	.word	0x40023800
 80075a4:	40007000 	.word	0x40007000
 80075a8:	0ffffcff 	.word	0x0ffffcff
 80075ac:	4bac      	ldr	r3, [pc, #688]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4aab      	ldr	r2, [pc, #684]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80075b6:	6093      	str	r3, [r2, #8]
 80075b8:	4ba9      	ldr	r3, [pc, #676]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075c4:	49a6      	ldr	r1, [pc, #664]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075d6:	4ba2      	ldr	r3, [pc, #648]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075dc:	4aa0      	ldr	r2, [pc, #640]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075e6:	4b9e      	ldr	r3, [pc, #632]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	499b      	ldr	r1, [pc, #620]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007604:	4b96      	ldr	r3, [pc, #600]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007612:	4993      	ldr	r1, [pc, #588]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007626:	4b8e      	ldr	r3, [pc, #568]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007634:	498a      	ldr	r1, [pc, #552]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007648:	4b85      	ldr	r3, [pc, #532]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007656:	4982      	ldr	r1, [pc, #520]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800766a:	4b7d      	ldr	r3, [pc, #500]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007670:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007678:	4979      	ldr	r1, [pc, #484]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800768c:	4b74      	ldr	r3, [pc, #464]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f023 0203 	bic.w	r2, r3, #3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800769a:	4971      	ldr	r1, [pc, #452]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076ae:	4b6c      	ldr	r3, [pc, #432]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	f023 020c 	bic.w	r2, r3, #12
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076bc:	4968      	ldr	r1, [pc, #416]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076d0:	4b63      	ldr	r3, [pc, #396]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076de:	4960      	ldr	r1, [pc, #384]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076f2:	4b5b      	ldr	r3, [pc, #364]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007700:	4957      	ldr	r1, [pc, #348]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007714:	4b52      	ldr	r3, [pc, #328]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007722:	494f      	ldr	r1, [pc, #316]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007736:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007744:	4946      	ldr	r1, [pc, #280]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007758:	4b41      	ldr	r3, [pc, #260]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007766:	493e      	ldr	r1, [pc, #248]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800777a:	4b39      	ldr	r3, [pc, #228]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007788:	4935      	ldr	r1, [pc, #212]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800779c:	4b30      	ldr	r3, [pc, #192]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800779e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077aa:	492d      	ldr	r1, [pc, #180]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d011      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80077be:	4b28      	ldr	r3, [pc, #160]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077cc:	4924      	ldr	r1, [pc, #144]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077dc:	d101      	bne.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80077de:	2301      	movs	r3, #1
 80077e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077ee:	2301      	movs	r3, #1
 80077f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077fe:	4b18      	ldr	r3, [pc, #96]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007804:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780c:	4914      	ldr	r1, [pc, #80]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800780e:	4313      	orrs	r3, r2
 8007810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00b      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007826:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007830:	490b      	ldr	r1, [pc, #44]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00f      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007844:	4b06      	ldr	r3, [pc, #24]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007854:	4902      	ldr	r1, [pc, #8]	; (8007860 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800785c:	e002      	b.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800785e:	bf00      	nop
 8007860:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d00b      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007870:	4b8a      	ldr	r3, [pc, #552]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007876:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007880:	4986      	ldr	r1, [pc, #536]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007882:	4313      	orrs	r3, r2
 8007884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007894:	4b81      	ldr	r3, [pc, #516]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007896:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800789a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	497d      	ldr	r1, [pc, #500]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d006      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f000 80d6 	beq.w	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078c0:	4b76      	ldr	r3, [pc, #472]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a75      	ldr	r2, [pc, #468]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078cc:	f7fd fae4 	bl	8004e98 <HAL_GetTick>
 80078d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078d2:	e008      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078d4:	f7fd fae0 	bl	8004e98 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b64      	cmp	r3, #100	; 0x64
 80078e0:	d901      	bls.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e195      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078e6:	4b6d      	ldr	r3, [pc, #436]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1f0      	bne.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0301 	and.w	r3, r3, #1
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d021      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007902:	2b00      	cmp	r3, #0
 8007904:	d11d      	bne.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007906:	4b65      	ldr	r3, [pc, #404]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	f003 0303 	and.w	r3, r3, #3
 8007912:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007914:	4b61      	ldr	r3, [pc, #388]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007916:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800791a:	0e1b      	lsrs	r3, r3, #24
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	019a      	lsls	r2, r3, #6
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	041b      	lsls	r3, r3, #16
 800792c:	431a      	orrs	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	061b      	lsls	r3, r3, #24
 8007932:	431a      	orrs	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	071b      	lsls	r3, r3, #28
 800793a:	4958      	ldr	r1, [pc, #352]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007956:	d00a      	beq.n	800796e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007960:	2b00      	cmp	r3, #0
 8007962:	d02e      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007968:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800796c:	d129      	bne.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800796e:	4b4b      	ldr	r3, [pc, #300]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007974:	0c1b      	lsrs	r3, r3, #16
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800797c:	4b47      	ldr	r3, [pc, #284]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800797e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007982:	0f1b      	lsrs	r3, r3, #28
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	019a      	lsls	r2, r3, #6
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	431a      	orrs	r2, r3
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	071b      	lsls	r3, r3, #28
 80079a2:	493e      	ldr	r1, [pc, #248]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80079aa:	4b3c      	ldr	r3, [pc, #240]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b0:	f023 021f 	bic.w	r2, r3, #31
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	3b01      	subs	r3, #1
 80079ba:	4938      	ldr	r1, [pc, #224]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d01d      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079ce:	4b33      	ldr	r3, [pc, #204]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d4:	0e1b      	lsrs	r3, r3, #24
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079dc:	4b2f      	ldr	r3, [pc, #188]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e2:	0f1b      	lsrs	r3, r3, #28
 80079e4:	f003 0307 	and.w	r3, r3, #7
 80079e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	019a      	lsls	r2, r3, #6
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	041b      	lsls	r3, r3, #16
 80079f6:	431a      	orrs	r2, r3
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	061b      	lsls	r3, r3, #24
 80079fc:	431a      	orrs	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	071b      	lsls	r3, r3, #28
 8007a02:	4926      	ldr	r1, [pc, #152]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d011      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	019a      	lsls	r2, r3, #6
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	041b      	lsls	r3, r3, #16
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	061b      	lsls	r3, r3, #24
 8007a2a:	431a      	orrs	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	071b      	lsls	r3, r3, #28
 8007a32:	491a      	ldr	r1, [pc, #104]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a3a:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a17      	ldr	r2, [pc, #92]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a46:	f7fd fa27 	bl	8004e98 <HAL_GetTick>
 8007a4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a4c:	e008      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a4e:	f7fd fa23 	bl	8004e98 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b64      	cmp	r3, #100	; 0x64
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e0d8      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a60:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0f0      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	f040 80ce 	bne.w	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a74:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a80:	f7fd fa0a 	bl	8004e98 <HAL_GetTick>
 8007a84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a86:	e00b      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a88:	f7fd fa06 	bl	8004e98 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b64      	cmp	r3, #100	; 0x64
 8007a94:	d904      	bls.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e0bb      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007a9a:	bf00      	nop
 8007a9c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007aa0:	4b5e      	ldr	r3, [pc, #376]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aac:	d0ec      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d009      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d02e      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d12a      	bne.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ad6:	4b51      	ldr	r3, [pc, #324]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	0c1b      	lsrs	r3, r3, #16
 8007ade:	f003 0303 	and.w	r3, r3, #3
 8007ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ae4:	4b4d      	ldr	r3, [pc, #308]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	0f1b      	lsrs	r3, r3, #28
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	019a      	lsls	r2, r3, #6
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	061b      	lsls	r3, r3, #24
 8007b04:	431a      	orrs	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	071b      	lsls	r3, r3, #28
 8007b0a:	4944      	ldr	r1, [pc, #272]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007b12:	4b42      	ldr	r3, [pc, #264]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	3b01      	subs	r3, #1
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	493d      	ldr	r1, [pc, #244]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d022      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b40:	d11d      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b42:	4b36      	ldr	r3, [pc, #216]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b48:	0e1b      	lsrs	r3, r3, #24
 8007b4a:	f003 030f 	and.w	r3, r3, #15
 8007b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b50:	4b32      	ldr	r3, [pc, #200]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b56:	0f1b      	lsrs	r3, r3, #28
 8007b58:	f003 0307 	and.w	r3, r3, #7
 8007b5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	019a      	lsls	r2, r3, #6
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	041b      	lsls	r3, r3, #16
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	061b      	lsls	r3, r3, #24
 8007b70:	431a      	orrs	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	071b      	lsls	r3, r3, #28
 8007b76:	4929      	ldr	r1, [pc, #164]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0308 	and.w	r3, r3, #8
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d028      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b8a:	4b24      	ldr	r3, [pc, #144]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b90:	0e1b      	lsrs	r3, r3, #24
 8007b92:	f003 030f 	and.w	r3, r3, #15
 8007b96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b98:	4b20      	ldr	r3, [pc, #128]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	0c1b      	lsrs	r3, r3, #16
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	019a      	lsls	r2, r3, #6
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	041b      	lsls	r3, r3, #16
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	061b      	lsls	r3, r3, #24
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	071b      	lsls	r3, r3, #28
 8007bbe:	4917      	ldr	r1, [pc, #92]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bcc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd4:	4911      	ldr	r1, [pc, #68]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a0e      	ldr	r2, [pc, #56]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007be8:	f7fd f956 	bl	8004e98 <HAL_GetTick>
 8007bec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bee:	e008      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bf0:	f7fd f952 	bl	8004e98 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	2b64      	cmp	r3, #100	; 0x64
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e007      	b.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007c02:	4b06      	ldr	r3, [pc, #24]	; (8007c1c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c0e:	d1ef      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3720      	adds	r7, #32
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	40023800 	.word	0x40023800

08007c20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	099b      	lsrs	r3, r3, #6
 8007c3c:	f003 0301 	and.w	r3, r3, #1
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10f      	bne.n	8007c64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	099b      	lsrs	r3, r3, #6
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d004      	beq.n	8007c64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	4798      	blx	r3
    return;
 8007c62:	e0d7      	b.n	8007e14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <HAL_SPI_IRQHandler+0x66>
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	09db      	lsrs	r3, r3, #7
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	4798      	blx	r3
    return;
 8007c84:	e0c6      	b.n	8007e14 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	095b      	lsrs	r3, r3, #5
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d10c      	bne.n	8007cac <HAL_SPI_IRQHandler+0x8c>
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	099b      	lsrs	r3, r3, #6
 8007c96:	f003 0301 	and.w	r3, r3, #1
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	0a1b      	lsrs	r3, r3, #8
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80b4 	beq.w	8007e14 <HAL_SPI_IRQHandler+0x1f4>
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	095b      	lsrs	r3, r3, #5
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f000 80ad 	beq.w	8007e14 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	099b      	lsrs	r3, r3, #6
 8007cbe:	f003 0301 	and.w	r3, r3, #1
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d023      	beq.n	8007d0e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b03      	cmp	r3, #3
 8007cd0:	d011      	beq.n	8007cf6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd6:	f043 0204 	orr.w	r2, r3, #4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	e00b      	b.n	8007d0e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	613b      	str	r3, [r7, #16]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	613b      	str	r3, [r7, #16]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	693b      	ldr	r3, [r7, #16]
        return;
 8007d0c:	e082      	b.n	8007e14 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	095b      	lsrs	r3, r3, #5
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d014      	beq.n	8007d44 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d1e:	f043 0201 	orr.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00c      	beq.n	8007d6a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d54:	f043 0208 	orr.w	r2, r3, #8
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	60bb      	str	r3, [r7, #8]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04f      	beq.n	8007e12 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d80:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d104      	bne.n	8007d9e <HAL_SPI_IRQHandler+0x17e>
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d034      	beq.n	8007e08 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f022 0203 	bic.w	r2, r2, #3
 8007dac:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d011      	beq.n	8007dda <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dba:	4a18      	ldr	r2, [pc, #96]	; (8007e1c <HAL_SPI_IRQHandler+0x1fc>)
 8007dbc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fc87 	bl	80066d6 <HAL_DMA_Abort_IT>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d016      	beq.n	8007e10 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007de6:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <HAL_SPI_IRQHandler+0x1fc>)
 8007de8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fc71 	bl	80066d6 <HAL_DMA_Abort_IT>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007e06:	e003      	b.n	8007e10 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f809 	bl	8007e20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007e0e:	e000      	b.n	8007e12 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007e10:	bf00      	nop
    return;
 8007e12:	bf00      	nop
  }
}
 8007e14:	3720      	adds	r7, #32
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	08007e35 	.word	0x08007e35

08007e20 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff ffe5 	bl	8007e20 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e56:	bf00      	nop
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e040      	b.n	8007ef2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7fc fcb3 	bl	80047ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2224      	movs	r2, #36	; 0x24
 8007e8a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0201 	bic.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 fc85 	bl	80087ac <UART_SetConfig>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d101      	bne.n	8007eac <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	e022      	b.n	8007ef2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d002      	beq.n	8007eba <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 fedd 	bl	8008c74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ec8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ed8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0201 	orr.w	r2, r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 ff64 	bl	8008db8 <UART_CheckIdleState>
 8007ef0:	4603      	mov	r3, r0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b08a      	sub	sp, #40	; 0x28
 8007efe:	af02      	add	r7, sp, #8
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	603b      	str	r3, [r7, #0]
 8007f06:	4613      	mov	r3, r2
 8007f08:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d171      	bne.n	8007ff6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <HAL_UART_Transmit+0x24>
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e06a      	b.n	8007ff8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2221      	movs	r2, #33	; 0x21
 8007f2e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f30:	f7fc ffb2 	bl	8004e98 <HAL_GetTick>
 8007f34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	88fa      	ldrh	r2, [r7, #6]
 8007f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	88fa      	ldrh	r2, [r7, #6]
 8007f42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4e:	d108      	bne.n	8007f62 <HAL_UART_Transmit+0x68>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	e003      	b.n	8007f6a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f6a:	e02c      	b.n	8007fc6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	2180      	movs	r1, #128	; 0x80
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 ff6b 	bl	8008e52 <UART_WaitOnFlagUntilTimeout>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e038      	b.n	8007ff8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10b      	bne.n	8007fa4 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	61bb      	str	r3, [r7, #24]
 8007fa2:	e007      	b.n	8007fb4 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	781a      	ldrb	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1cc      	bne.n	8007f6c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2140      	movs	r1, #64	; 0x40
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 ff38 	bl	8008e52 <UART_WaitOnFlagUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e005      	b.n	8007ff8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	e000      	b.n	8007ff8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007ff6:	2302      	movs	r3, #2
  }
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08a      	sub	sp, #40	; 0x28
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	4613      	mov	r3, r2
 800800e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008016:	2b20      	cmp	r3, #32
 8008018:	f040 80b1 	bne.w	800817e <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <HAL_UART_Receive+0x28>
 8008022:	88fb      	ldrh	r3, [r7, #6]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	e0a9      	b.n	8008180 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2222      	movs	r2, #34	; 0x22
 8008038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008042:	f7fc ff29 	bl	8004e98 <HAL_GetTick>
 8008046:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	88fa      	ldrh	r2, [r7, #6]
 800804c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	88fa      	ldrh	r2, [r7, #6]
 8008054:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008060:	d10e      	bne.n	8008080 <HAL_UART_Receive+0x80>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d105      	bne.n	8008076 <HAL_UART_Receive+0x76>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008070:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008074:	e02d      	b.n	80080d2 <HAL_UART_Receive+0xd2>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	22ff      	movs	r2, #255	; 0xff
 800807a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800807e:	e028      	b.n	80080d2 <HAL_UART_Receive+0xd2>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10d      	bne.n	80080a4 <HAL_UART_Receive+0xa4>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	691b      	ldr	r3, [r3, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d104      	bne.n	800809a <HAL_UART_Receive+0x9a>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	22ff      	movs	r2, #255	; 0xff
 8008094:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008098:	e01b      	b.n	80080d2 <HAL_UART_Receive+0xd2>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	227f      	movs	r2, #127	; 0x7f
 800809e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080a2:	e016      	b.n	80080d2 <HAL_UART_Receive+0xd2>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080ac:	d10d      	bne.n	80080ca <HAL_UART_Receive+0xca>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d104      	bne.n	80080c0 <HAL_UART_Receive+0xc0>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	227f      	movs	r2, #127	; 0x7f
 80080ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080be:	e008      	b.n	80080d2 <HAL_UART_Receive+0xd2>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	223f      	movs	r2, #63	; 0x3f
 80080c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080c8:	e003      	b.n	80080d2 <HAL_UART_Receive+0xd2>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080d8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	d108      	bne.n	80080f6 <HAL_UART_Receive+0xf6>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d104      	bne.n	80080f6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	61bb      	str	r3, [r7, #24]
 80080f4:	e003      	b.n	80080fe <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80080fa:	2300      	movs	r3, #0
 80080fc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80080fe:	e032      	b.n	8008166 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	2200      	movs	r2, #0
 8008108:	2120      	movs	r1, #32
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 fea1 	bl	8008e52 <UART_WaitOnFlagUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8008116:	2303      	movs	r3, #3
 8008118:	e032      	b.n	8008180 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d10c      	bne.n	800813a <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	b29a      	uxth	r2, r3
 8008128:	8a7b      	ldrh	r3, [r7, #18]
 800812a:	4013      	ands	r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	3302      	adds	r3, #2
 8008136:	61bb      	str	r3, [r7, #24]
 8008138:	e00c      	b.n	8008154 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008140:	b2da      	uxtb	r2, r3
 8008142:	8a7b      	ldrh	r3, [r7, #18]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	4013      	ands	r3, r2
 8008148:	b2da      	uxtb	r2, r3
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3301      	adds	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800816c:	b29b      	uxth	r3, r3
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1c6      	bne.n	8008100 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2220      	movs	r2, #32
 8008176:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800817e:	2302      	movs	r3, #2
  }
}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b0ba      	sub	sp, #232	; 0xe8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80081ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80081b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80081b6:	4013      	ands	r3, r2
 80081b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80081bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d115      	bne.n	80081f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80081c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00f      	beq.n	80081f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80081d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d009      	beq.n	80081f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 82ac 	beq.w	800873e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
      }
      return;
 80081ee:	e2a6      	b.n	800873e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80081f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 8117 	beq.w	8008428 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80081fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800820a:	4b85      	ldr	r3, [pc, #532]	; (8008420 <HAL_UART_IRQHandler+0x298>)
 800820c:	4013      	ands	r3, r2
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 810a 	beq.w	8008428 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d011      	beq.n	8008244 <HAL_UART_IRQHandler+0xbc>
 8008220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00b      	beq.n	8008244 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2201      	movs	r2, #1
 8008232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800823a:	f043 0201 	orr.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008248:	f003 0302 	and.w	r3, r3, #2
 800824c:	2b00      	cmp	r3, #0
 800824e:	d011      	beq.n	8008274 <HAL_UART_IRQHandler+0xec>
 8008250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00b      	beq.n	8008274 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2202      	movs	r2, #2
 8008262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800826a:	f043 0204 	orr.w	r2, r3, #4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d011      	beq.n	80082a4 <HAL_UART_IRQHandler+0x11c>
 8008280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2204      	movs	r2, #4
 8008292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829a:	f043 0202 	orr.w	r2, r3, #2
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d017      	beq.n	80082e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b4:	f003 0320 	and.w	r3, r3, #32
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80082bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d00b      	beq.n	80082e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2208      	movs	r2, #8
 80082ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d6:	f043 0208 	orr.w	r2, r3, #8
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80082e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d012      	beq.n	8008312 <HAL_UART_IRQHandler+0x18a>
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00c      	beq.n	8008312 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008308:	f043 0220 	orr.w	r2, r3, #32
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 8212 	beq.w	8008742 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008322:	f003 0320 	and.w	r3, r3, #32
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00d      	beq.n	8008346 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800832a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800832e:	f003 0320 	and.w	r3, r3, #32
 8008332:	2b00      	cmp	r3, #0
 8008334:	d007      	beq.n	8008346 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800834c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800835a:	2b40      	cmp	r3, #64	; 0x40
 800835c:	d005      	beq.n	800836a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800835e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008362:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008366:	2b00      	cmp	r3, #0
 8008368:	d04f      	beq.n	800840a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fe37 	bl	8008fde <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d141      	bne.n	8008402 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	3308      	adds	r3, #8
 8008384:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008388:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008394:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80083aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80083ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80083b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80083c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d1d9      	bne.n	800837e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d013      	beq.n	80083fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d6:	4a13      	ldr	r2, [pc, #76]	; (8008424 <HAL_UART_IRQHandler+0x29c>)
 80083d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083de:	4618      	mov	r0, r3
 80083e0:	f7fe f979 	bl	80066d6 <HAL_DMA_Abort_IT>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d017      	beq.n	800841a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80083f4:	4610      	mov	r0, r2
 80083f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083f8:	e00f      	b.n	800841a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9b6 	bl	800876c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008400:	e00b      	b.n	800841a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f9b2 	bl	800876c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008408:	e007      	b.n	800841a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9ae 	bl	800876c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008418:	e193      	b.n	8008742 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800841a:	bf00      	nop
    return;
 800841c:	e191      	b.n	8008742 <HAL_UART_IRQHandler+0x5ba>
 800841e:	bf00      	nop
 8008420:	04000120 	.word	0x04000120
 8008424:	080090a7 	.word	0x080090a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800842c:	2b01      	cmp	r3, #1
 800842e:	f040 814c 	bne.w	80086ca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008436:	f003 0310 	and.w	r3, r3, #16
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 8145 	beq.w	80086ca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008444:	f003 0310 	and.w	r3, r3, #16
 8008448:	2b00      	cmp	r3, #0
 800844a:	f000 813e 	beq.w	80086ca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2210      	movs	r2, #16
 8008454:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b40      	cmp	r3, #64	; 0x40
 8008462:	f040 80b6 	bne.w	80085d2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008472:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 8165 	beq.w	8008746 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008486:	429a      	cmp	r2, r3
 8008488:	f080 815d 	bcs.w	8008746 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008492:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	f000 8086 	beq.w	80085b0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80084b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80084bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	461a      	mov	r2, r3
 80084ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80084ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80084d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80084da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80084de:	e841 2300 	strex	r3, r2, [r1]
 80084e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80084e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1da      	bne.n	80084a4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3308      	adds	r3, #8
 80084f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084f8:	e853 3f00 	ldrex	r3, [r3]
 80084fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80084fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008500:	f023 0301 	bic.w	r3, r3, #1
 8008504:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008512:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008516:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800851a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e1      	bne.n	80084ee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3308      	adds	r3, #8
 8008530:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008534:	e853 3f00 	ldrex	r3, [r3]
 8008538:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800853a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800853c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008540:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800854e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008550:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008552:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008554:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008556:	e841 2300 	strex	r3, r2, [r1]
 800855a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800855c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800855e:	2b00      	cmp	r3, #0
 8008560:	d1e3      	bne.n	800852a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008578:	e853 3f00 	ldrex	r3, [r3]
 800857c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800857e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008580:	f023 0310 	bic.w	r3, r3, #16
 8008584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	461a      	mov	r2, r3
 800858e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008592:	65bb      	str	r3, [r7, #88]	; 0x58
 8008594:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008598:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80085a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e4      	bne.n	8008570 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe f823 	bl	80065f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2202      	movs	r2, #2
 80085b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	1ad3      	subs	r3, r2, r3
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	4619      	mov	r1, r3
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f8d8 	bl	8008780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085d0:	e0b9      	b.n	8008746 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085de:	b29b      	uxth	r3, r3
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 80ab 	beq.w	800874a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80085f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 80a6 	beq.w	800874a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800860c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008620:	647b      	str	r3, [r7, #68]	; 0x44
 8008622:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008624:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008628:	e841 2300 	strex	r3, r2, [r1]
 800862c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800862e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1e4      	bne.n	80085fe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	3308      	adds	r3, #8
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863e:	e853 3f00 	ldrex	r3, [r3]
 8008642:	623b      	str	r3, [r7, #32]
   return(result);
 8008644:	6a3b      	ldr	r3, [r7, #32]
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008658:	633a      	str	r2, [r7, #48]	; 0x30
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800865e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008660:	e841 2300 	strex	r3, r2, [r1]
 8008664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e3      	bne.n	8008634 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2200      	movs	r2, #0
 800867e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	e853 3f00 	ldrex	r3, [r3]
 800868c:	60fb      	str	r3, [r7, #12]
   return(result);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f023 0310 	bic.w	r3, r3, #16
 8008694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086a2:	61fb      	str	r3, [r7, #28]
 80086a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	69b9      	ldr	r1, [r7, #24]
 80086a8:	69fa      	ldr	r2, [r7, #28]
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	617b      	str	r3, [r7, #20]
   return(result);
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e4      	bne.n	8008680 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2202      	movs	r2, #2
 80086ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f85c 	bl	8008780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086c8:	e03f      	b.n	800874a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80086ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00e      	beq.n	80086f4 <HAL_UART_IRQHandler+0x56c>
 80086d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d008      	beq.n	80086f4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f853 	bl	8008798 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086f2:	e02d      	b.n	8008750 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80086f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00e      	beq.n	800871e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008708:	2b00      	cmp	r3, #0
 800870a:	d008      	beq.n	800871e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01c      	beq.n	800874e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	4798      	blx	r3
    }
    return;
 800871c:	e017      	b.n	800874e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800871e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	d012      	beq.n	8008750 <HAL_UART_IRQHandler+0x5c8>
 800872a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800872e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00c      	beq.n	8008750 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fccb 	bl	80090d2 <UART_EndTransmit_IT>
    return;
 800873c:	e008      	b.n	8008750 <HAL_UART_IRQHandler+0x5c8>
      return;
 800873e:	bf00      	nop
 8008740:	e006      	b.n	8008750 <HAL_UART_IRQHandler+0x5c8>
    return;
 8008742:	bf00      	nop
 8008744:	e004      	b.n	8008750 <HAL_UART_IRQHandler+0x5c8>
      return;
 8008746:	bf00      	nop
 8008748:	e002      	b.n	8008750 <HAL_UART_IRQHandler+0x5c8>
      return;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <HAL_UART_IRQHandler+0x5c8>
    return;
 800874e:	bf00      	nop
  }

}
 8008750:	37e8      	adds	r7, #232	; 0xe8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop

08008758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008760:	bf00      	nop
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087a0:	bf00      	nop
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689a      	ldr	r2, [r3, #8]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	431a      	orrs	r2, r3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695b      	ldr	r3, [r3, #20]
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	4ba6      	ldr	r3, [pc, #664]	; (8008a70 <UART_SetConfig+0x2c4>)
 80087d8:	4013      	ands	r3, r2
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	6979      	ldr	r1, [r7, #20]
 80087e0:	430b      	orrs	r3, r1
 80087e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	4313      	orrs	r3, r2
 8008808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	430a      	orrs	r2, r1
 800881c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a94      	ldr	r2, [pc, #592]	; (8008a74 <UART_SetConfig+0x2c8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d120      	bne.n	800886a <UART_SetConfig+0xbe>
 8008828:	4b93      	ldr	r3, [pc, #588]	; (8008a78 <UART_SetConfig+0x2cc>)
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882e:	f003 0303 	and.w	r3, r3, #3
 8008832:	2b03      	cmp	r3, #3
 8008834:	d816      	bhi.n	8008864 <UART_SetConfig+0xb8>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <UART_SetConfig+0x90>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	0800884d 	.word	0x0800884d
 8008840:	08008859 	.word	0x08008859
 8008844:	08008853 	.word	0x08008853
 8008848:	0800885f 	.word	0x0800885f
 800884c:	2301      	movs	r3, #1
 800884e:	77fb      	strb	r3, [r7, #31]
 8008850:	e150      	b.n	8008af4 <UART_SetConfig+0x348>
 8008852:	2302      	movs	r3, #2
 8008854:	77fb      	strb	r3, [r7, #31]
 8008856:	e14d      	b.n	8008af4 <UART_SetConfig+0x348>
 8008858:	2304      	movs	r3, #4
 800885a:	77fb      	strb	r3, [r7, #31]
 800885c:	e14a      	b.n	8008af4 <UART_SetConfig+0x348>
 800885e:	2308      	movs	r3, #8
 8008860:	77fb      	strb	r3, [r7, #31]
 8008862:	e147      	b.n	8008af4 <UART_SetConfig+0x348>
 8008864:	2310      	movs	r3, #16
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	e144      	b.n	8008af4 <UART_SetConfig+0x348>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a83      	ldr	r2, [pc, #524]	; (8008a7c <UART_SetConfig+0x2d0>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d132      	bne.n	80088da <UART_SetConfig+0x12e>
 8008874:	4b80      	ldr	r3, [pc, #512]	; (8008a78 <UART_SetConfig+0x2cc>)
 8008876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887a:	f003 030c 	and.w	r3, r3, #12
 800887e:	2b0c      	cmp	r3, #12
 8008880:	d828      	bhi.n	80088d4 <UART_SetConfig+0x128>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0xdc>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088bd 	.word	0x080088bd
 800888c:	080088d5 	.word	0x080088d5
 8008890:	080088d5 	.word	0x080088d5
 8008894:	080088d5 	.word	0x080088d5
 8008898:	080088c9 	.word	0x080088c9
 800889c:	080088d5 	.word	0x080088d5
 80088a0:	080088d5 	.word	0x080088d5
 80088a4:	080088d5 	.word	0x080088d5
 80088a8:	080088c3 	.word	0x080088c3
 80088ac:	080088d5 	.word	0x080088d5
 80088b0:	080088d5 	.word	0x080088d5
 80088b4:	080088d5 	.word	0x080088d5
 80088b8:	080088cf 	.word	0x080088cf
 80088bc:	2300      	movs	r3, #0
 80088be:	77fb      	strb	r3, [r7, #31]
 80088c0:	e118      	b.n	8008af4 <UART_SetConfig+0x348>
 80088c2:	2302      	movs	r3, #2
 80088c4:	77fb      	strb	r3, [r7, #31]
 80088c6:	e115      	b.n	8008af4 <UART_SetConfig+0x348>
 80088c8:	2304      	movs	r3, #4
 80088ca:	77fb      	strb	r3, [r7, #31]
 80088cc:	e112      	b.n	8008af4 <UART_SetConfig+0x348>
 80088ce:	2308      	movs	r3, #8
 80088d0:	77fb      	strb	r3, [r7, #31]
 80088d2:	e10f      	b.n	8008af4 <UART_SetConfig+0x348>
 80088d4:	2310      	movs	r3, #16
 80088d6:	77fb      	strb	r3, [r7, #31]
 80088d8:	e10c      	b.n	8008af4 <UART_SetConfig+0x348>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a68      	ldr	r2, [pc, #416]	; (8008a80 <UART_SetConfig+0x2d4>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d120      	bne.n	8008926 <UART_SetConfig+0x17a>
 80088e4:	4b64      	ldr	r3, [pc, #400]	; (8008a78 <UART_SetConfig+0x2cc>)
 80088e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088ee:	2b30      	cmp	r3, #48	; 0x30
 80088f0:	d013      	beq.n	800891a <UART_SetConfig+0x16e>
 80088f2:	2b30      	cmp	r3, #48	; 0x30
 80088f4:	d814      	bhi.n	8008920 <UART_SetConfig+0x174>
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d009      	beq.n	800890e <UART_SetConfig+0x162>
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d810      	bhi.n	8008920 <UART_SetConfig+0x174>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d002      	beq.n	8008908 <UART_SetConfig+0x15c>
 8008902:	2b10      	cmp	r3, #16
 8008904:	d006      	beq.n	8008914 <UART_SetConfig+0x168>
 8008906:	e00b      	b.n	8008920 <UART_SetConfig+0x174>
 8008908:	2300      	movs	r3, #0
 800890a:	77fb      	strb	r3, [r7, #31]
 800890c:	e0f2      	b.n	8008af4 <UART_SetConfig+0x348>
 800890e:	2302      	movs	r3, #2
 8008910:	77fb      	strb	r3, [r7, #31]
 8008912:	e0ef      	b.n	8008af4 <UART_SetConfig+0x348>
 8008914:	2304      	movs	r3, #4
 8008916:	77fb      	strb	r3, [r7, #31]
 8008918:	e0ec      	b.n	8008af4 <UART_SetConfig+0x348>
 800891a:	2308      	movs	r3, #8
 800891c:	77fb      	strb	r3, [r7, #31]
 800891e:	e0e9      	b.n	8008af4 <UART_SetConfig+0x348>
 8008920:	2310      	movs	r3, #16
 8008922:	77fb      	strb	r3, [r7, #31]
 8008924:	e0e6      	b.n	8008af4 <UART_SetConfig+0x348>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a56      	ldr	r2, [pc, #344]	; (8008a84 <UART_SetConfig+0x2d8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d120      	bne.n	8008972 <UART_SetConfig+0x1c6>
 8008930:	4b51      	ldr	r3, [pc, #324]	; (8008a78 <UART_SetConfig+0x2cc>)
 8008932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008936:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800893a:	2bc0      	cmp	r3, #192	; 0xc0
 800893c:	d013      	beq.n	8008966 <UART_SetConfig+0x1ba>
 800893e:	2bc0      	cmp	r3, #192	; 0xc0
 8008940:	d814      	bhi.n	800896c <UART_SetConfig+0x1c0>
 8008942:	2b80      	cmp	r3, #128	; 0x80
 8008944:	d009      	beq.n	800895a <UART_SetConfig+0x1ae>
 8008946:	2b80      	cmp	r3, #128	; 0x80
 8008948:	d810      	bhi.n	800896c <UART_SetConfig+0x1c0>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d002      	beq.n	8008954 <UART_SetConfig+0x1a8>
 800894e:	2b40      	cmp	r3, #64	; 0x40
 8008950:	d006      	beq.n	8008960 <UART_SetConfig+0x1b4>
 8008952:	e00b      	b.n	800896c <UART_SetConfig+0x1c0>
 8008954:	2300      	movs	r3, #0
 8008956:	77fb      	strb	r3, [r7, #31]
 8008958:	e0cc      	b.n	8008af4 <UART_SetConfig+0x348>
 800895a:	2302      	movs	r3, #2
 800895c:	77fb      	strb	r3, [r7, #31]
 800895e:	e0c9      	b.n	8008af4 <UART_SetConfig+0x348>
 8008960:	2304      	movs	r3, #4
 8008962:	77fb      	strb	r3, [r7, #31]
 8008964:	e0c6      	b.n	8008af4 <UART_SetConfig+0x348>
 8008966:	2308      	movs	r3, #8
 8008968:	77fb      	strb	r3, [r7, #31]
 800896a:	e0c3      	b.n	8008af4 <UART_SetConfig+0x348>
 800896c:	2310      	movs	r3, #16
 800896e:	77fb      	strb	r3, [r7, #31]
 8008970:	e0c0      	b.n	8008af4 <UART_SetConfig+0x348>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a44      	ldr	r2, [pc, #272]	; (8008a88 <UART_SetConfig+0x2dc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d125      	bne.n	80089c8 <UART_SetConfig+0x21c>
 800897c:	4b3e      	ldr	r3, [pc, #248]	; (8008a78 <UART_SetConfig+0x2cc>)
 800897e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008986:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800898a:	d017      	beq.n	80089bc <UART_SetConfig+0x210>
 800898c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008990:	d817      	bhi.n	80089c2 <UART_SetConfig+0x216>
 8008992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008996:	d00b      	beq.n	80089b0 <UART_SetConfig+0x204>
 8008998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899c:	d811      	bhi.n	80089c2 <UART_SetConfig+0x216>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <UART_SetConfig+0x1fe>
 80089a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089a6:	d006      	beq.n	80089b6 <UART_SetConfig+0x20a>
 80089a8:	e00b      	b.n	80089c2 <UART_SetConfig+0x216>
 80089aa:	2300      	movs	r3, #0
 80089ac:	77fb      	strb	r3, [r7, #31]
 80089ae:	e0a1      	b.n	8008af4 <UART_SetConfig+0x348>
 80089b0:	2302      	movs	r3, #2
 80089b2:	77fb      	strb	r3, [r7, #31]
 80089b4:	e09e      	b.n	8008af4 <UART_SetConfig+0x348>
 80089b6:	2304      	movs	r3, #4
 80089b8:	77fb      	strb	r3, [r7, #31]
 80089ba:	e09b      	b.n	8008af4 <UART_SetConfig+0x348>
 80089bc:	2308      	movs	r3, #8
 80089be:	77fb      	strb	r3, [r7, #31]
 80089c0:	e098      	b.n	8008af4 <UART_SetConfig+0x348>
 80089c2:	2310      	movs	r3, #16
 80089c4:	77fb      	strb	r3, [r7, #31]
 80089c6:	e095      	b.n	8008af4 <UART_SetConfig+0x348>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a2f      	ldr	r2, [pc, #188]	; (8008a8c <UART_SetConfig+0x2e0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d125      	bne.n	8008a1e <UART_SetConfig+0x272>
 80089d2:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <UART_SetConfig+0x2cc>)
 80089d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089e0:	d017      	beq.n	8008a12 <UART_SetConfig+0x266>
 80089e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089e6:	d817      	bhi.n	8008a18 <UART_SetConfig+0x26c>
 80089e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089ec:	d00b      	beq.n	8008a06 <UART_SetConfig+0x25a>
 80089ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f2:	d811      	bhi.n	8008a18 <UART_SetConfig+0x26c>
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d003      	beq.n	8008a00 <UART_SetConfig+0x254>
 80089f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089fc:	d006      	beq.n	8008a0c <UART_SetConfig+0x260>
 80089fe:	e00b      	b.n	8008a18 <UART_SetConfig+0x26c>
 8008a00:	2301      	movs	r3, #1
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	e076      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a06:	2302      	movs	r3, #2
 8008a08:	77fb      	strb	r3, [r7, #31]
 8008a0a:	e073      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a0c:	2304      	movs	r3, #4
 8008a0e:	77fb      	strb	r3, [r7, #31]
 8008a10:	e070      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a12:	2308      	movs	r3, #8
 8008a14:	77fb      	strb	r3, [r7, #31]
 8008a16:	e06d      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a18:	2310      	movs	r3, #16
 8008a1a:	77fb      	strb	r3, [r7, #31]
 8008a1c:	e06a      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <UART_SetConfig+0x2e4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d138      	bne.n	8008a9a <UART_SetConfig+0x2ee>
 8008a28:	4b13      	ldr	r3, [pc, #76]	; (8008a78 <UART_SetConfig+0x2cc>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a36:	d017      	beq.n	8008a68 <UART_SetConfig+0x2bc>
 8008a38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a3c:	d82a      	bhi.n	8008a94 <UART_SetConfig+0x2e8>
 8008a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a42:	d00b      	beq.n	8008a5c <UART_SetConfig+0x2b0>
 8008a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a48:	d824      	bhi.n	8008a94 <UART_SetConfig+0x2e8>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d003      	beq.n	8008a56 <UART_SetConfig+0x2aa>
 8008a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a52:	d006      	beq.n	8008a62 <UART_SetConfig+0x2b6>
 8008a54:	e01e      	b.n	8008a94 <UART_SetConfig+0x2e8>
 8008a56:	2300      	movs	r3, #0
 8008a58:	77fb      	strb	r3, [r7, #31]
 8008a5a:	e04b      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	77fb      	strb	r3, [r7, #31]
 8008a60:	e048      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a62:	2304      	movs	r3, #4
 8008a64:	77fb      	strb	r3, [r7, #31]
 8008a66:	e045      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a68:	2308      	movs	r3, #8
 8008a6a:	77fb      	strb	r3, [r7, #31]
 8008a6c:	e042      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a6e:	bf00      	nop
 8008a70:	efff69f3 	.word	0xefff69f3
 8008a74:	40011000 	.word	0x40011000
 8008a78:	40023800 	.word	0x40023800
 8008a7c:	40004400 	.word	0x40004400
 8008a80:	40004800 	.word	0x40004800
 8008a84:	40004c00 	.word	0x40004c00
 8008a88:	40005000 	.word	0x40005000
 8008a8c:	40011400 	.word	0x40011400
 8008a90:	40007800 	.word	0x40007800
 8008a94:	2310      	movs	r3, #16
 8008a96:	77fb      	strb	r3, [r7, #31]
 8008a98:	e02c      	b.n	8008af4 <UART_SetConfig+0x348>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a72      	ldr	r2, [pc, #456]	; (8008c68 <UART_SetConfig+0x4bc>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d125      	bne.n	8008af0 <UART_SetConfig+0x344>
 8008aa4:	4b71      	ldr	r3, [pc, #452]	; (8008c6c <UART_SetConfig+0x4c0>)
 8008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008aae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ab2:	d017      	beq.n	8008ae4 <UART_SetConfig+0x338>
 8008ab4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ab8:	d817      	bhi.n	8008aea <UART_SetConfig+0x33e>
 8008aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008abe:	d00b      	beq.n	8008ad8 <UART_SetConfig+0x32c>
 8008ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ac4:	d811      	bhi.n	8008aea <UART_SetConfig+0x33e>
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <UART_SetConfig+0x326>
 8008aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ace:	d006      	beq.n	8008ade <UART_SetConfig+0x332>
 8008ad0:	e00b      	b.n	8008aea <UART_SetConfig+0x33e>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	77fb      	strb	r3, [r7, #31]
 8008ad6:	e00d      	b.n	8008af4 <UART_SetConfig+0x348>
 8008ad8:	2302      	movs	r3, #2
 8008ada:	77fb      	strb	r3, [r7, #31]
 8008adc:	e00a      	b.n	8008af4 <UART_SetConfig+0x348>
 8008ade:	2304      	movs	r3, #4
 8008ae0:	77fb      	strb	r3, [r7, #31]
 8008ae2:	e007      	b.n	8008af4 <UART_SetConfig+0x348>
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	77fb      	strb	r3, [r7, #31]
 8008ae8:	e004      	b.n	8008af4 <UART_SetConfig+0x348>
 8008aea:	2310      	movs	r3, #16
 8008aec:	77fb      	strb	r3, [r7, #31]
 8008aee:	e001      	b.n	8008af4 <UART_SetConfig+0x348>
 8008af0:	2310      	movs	r3, #16
 8008af2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afc:	d15b      	bne.n	8008bb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008afe:	7ffb      	ldrb	r3, [r7, #31]
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d828      	bhi.n	8008b56 <UART_SetConfig+0x3aa>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <UART_SetConfig+0x360>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b31 	.word	0x08008b31
 8008b10:	08008b39 	.word	0x08008b39
 8008b14:	08008b41 	.word	0x08008b41
 8008b18:	08008b57 	.word	0x08008b57
 8008b1c:	08008b47 	.word	0x08008b47
 8008b20:	08008b57 	.word	0x08008b57
 8008b24:	08008b57 	.word	0x08008b57
 8008b28:	08008b57 	.word	0x08008b57
 8008b2c:	08008b4f 	.word	0x08008b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b30:	f7fe fc26 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 8008b34:	61b8      	str	r0, [r7, #24]
        break;
 8008b36:	e013      	b.n	8008b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b38:	f7fe fc36 	bl	80073a8 <HAL_RCC_GetPCLK2Freq>
 8008b3c:	61b8      	str	r0, [r7, #24]
        break;
 8008b3e:	e00f      	b.n	8008b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b40:	4b4b      	ldr	r3, [pc, #300]	; (8008c70 <UART_SetConfig+0x4c4>)
 8008b42:	61bb      	str	r3, [r7, #24]
        break;
 8008b44:	e00c      	b.n	8008b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b46:	f7fe fb49 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8008b4a:	61b8      	str	r0, [r7, #24]
        break;
 8008b4c:	e008      	b.n	8008b60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b52:	61bb      	str	r3, [r7, #24]
        break;
 8008b54:	e004      	b.n	8008b60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	77bb      	strb	r3, [r7, #30]
        break;
 8008b5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d074      	beq.n	8008c50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	005a      	lsls	r2, r3, #1
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	441a      	add	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b0f      	cmp	r3, #15
 8008b80:	d916      	bls.n	8008bb0 <UART_SetConfig+0x404>
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b88:	d212      	bcs.n	8008bb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	f023 030f 	bic.w	r3, r3, #15
 8008b92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f003 0307 	and.w	r3, r3, #7
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	89fb      	ldrh	r3, [r7, #14]
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	89fa      	ldrh	r2, [r7, #14]
 8008bac:	60da      	str	r2, [r3, #12]
 8008bae:	e04f      	b.n	8008c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	77bb      	strb	r3, [r7, #30]
 8008bb4:	e04c      	b.n	8008c50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bb6:	7ffb      	ldrb	r3, [r7, #31]
 8008bb8:	2b08      	cmp	r3, #8
 8008bba:	d828      	bhi.n	8008c0e <UART_SetConfig+0x462>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <UART_SetConfig+0x418>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008be9 	.word	0x08008be9
 8008bc8:	08008bf1 	.word	0x08008bf1
 8008bcc:	08008bf9 	.word	0x08008bf9
 8008bd0:	08008c0f 	.word	0x08008c0f
 8008bd4:	08008bff 	.word	0x08008bff
 8008bd8:	08008c0f 	.word	0x08008c0f
 8008bdc:	08008c0f 	.word	0x08008c0f
 8008be0:	08008c0f 	.word	0x08008c0f
 8008be4:	08008c07 	.word	0x08008c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008be8:	f7fe fbca 	bl	8007380 <HAL_RCC_GetPCLK1Freq>
 8008bec:	61b8      	str	r0, [r7, #24]
        break;
 8008bee:	e013      	b.n	8008c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bf0:	f7fe fbda 	bl	80073a8 <HAL_RCC_GetPCLK2Freq>
 8008bf4:	61b8      	str	r0, [r7, #24]
        break;
 8008bf6:	e00f      	b.n	8008c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bf8:	4b1d      	ldr	r3, [pc, #116]	; (8008c70 <UART_SetConfig+0x4c4>)
 8008bfa:	61bb      	str	r3, [r7, #24]
        break;
 8008bfc:	e00c      	b.n	8008c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bfe:	f7fe faed 	bl	80071dc <HAL_RCC_GetSysClockFreq>
 8008c02:	61b8      	str	r0, [r7, #24]
        break;
 8008c04:	e008      	b.n	8008c18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0a:	61bb      	str	r3, [r7, #24]
        break;
 8008c0c:	e004      	b.n	8008c18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	77bb      	strb	r3, [r7, #30]
        break;
 8008c16:	bf00      	nop
    }

    if (pclk != 0U)
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d018      	beq.n	8008c50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	085a      	lsrs	r2, r3, #1
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	441a      	add	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	2b0f      	cmp	r3, #15
 8008c36:	d909      	bls.n	8008c4c <UART_SetConfig+0x4a0>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c3e:	d205      	bcs.n	8008c4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	b29a      	uxth	r2, r3
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60da      	str	r2, [r3, #12]
 8008c4a:	e001      	b.n	8008c50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3720      	adds	r7, #32
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	40007c00 	.word	0x40007c00
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	00f42400 	.word	0x00f42400

08008c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00a      	beq.n	8008ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00a      	beq.n	8008d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	430a      	orrs	r2, r1
 8008d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00a      	beq.n	8008d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d00a      	beq.n	8008d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	430a      	orrs	r2, r1
 8008d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d01a      	beq.n	8008d8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d72:	d10a      	bne.n	8008d8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	430a      	orrs	r2, r1
 8008daa:	605a      	str	r2, [r3, #4]
  }
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dc8:	f7fc f866 	bl	8004e98 <HAL_GetTick>
 8008dcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d10e      	bne.n	8008dfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008de0:	9300      	str	r3, [sp, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f831 	bl	8008e52 <UART_WaitOnFlagUntilTimeout>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e027      	b.n	8008e4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0304 	and.w	r3, r3, #4
 8008e04:	2b04      	cmp	r3, #4
 8008e06:	d10e      	bne.n	8008e26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f81b 	bl	8008e52 <UART_WaitOnFlagUntilTimeout>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e011      	b.n	8008e4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2220      	movs	r2, #32
 8008e2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2220      	movs	r2, #32
 8008e30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b09c      	sub	sp, #112	; 0x70
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	603b      	str	r3, [r7, #0]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e62:	e0a7      	b.n	8008fb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	f000 80a3 	beq.w	8008fb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e6e:	f7fc f813 	bl	8004e98 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d302      	bcc.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d13f      	bne.n	8008f04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e8c:	e853 3f00 	ldrex	r3, [r3]
 8008e90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e98:	667b      	str	r3, [r7, #100]	; 0x64
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ea8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e6      	bne.n	8008e84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3308      	adds	r3, #8
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	f023 0301 	bic.w	r3, r3, #1
 8008ecc:	663b      	str	r3, [r7, #96]	; 0x60
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ed6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ed8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008edc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e5      	bne.n	8008eb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2220      	movs	r2, #32
 8008eee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008f00:	2303      	movs	r3, #3
 8008f02:	e068      	b.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f003 0304 	and.w	r3, r3, #4
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d050      	beq.n	8008fb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f20:	d148      	bne.n	8008fb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	461a      	mov	r2, r3
 8008f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4a:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e6      	bne.n	8008f2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	e853 3f00 	ldrex	r3, [r3]
 8008f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f023 0301 	bic.w	r3, r3, #1
 8008f74:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f7e:	623a      	str	r2, [r7, #32]
 8008f80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f82:	69f9      	ldr	r1, [r7, #28]
 8008f84:	6a3a      	ldr	r2, [r7, #32]
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f8c:	69bb      	ldr	r3, [r7, #24]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e5      	bne.n	8008f5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2220      	movs	r2, #32
 8008f96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2220      	movs	r2, #32
 8008fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e010      	b.n	8008fd6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69da      	ldr	r2, [r3, #28]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2301      	moveq	r3, #1
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	461a      	mov	r2, r3
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	f43f af48 	beq.w	8008e64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3770      	adds	r7, #112	; 0x70
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b095      	sub	sp, #84	; 0x54
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fee:	e853 3f00 	ldrex	r3, [r3]
 8008ff2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009004:	643b      	str	r3, [r7, #64]	; 0x40
 8009006:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800900a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e6      	bne.n	8008fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6a3b      	ldr	r3, [r7, #32]
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	61fb      	str	r3, [r7, #28]
   return(result);
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f023 0301 	bic.w	r3, r3, #1
 800902e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3308      	adds	r3, #8
 8009036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009038:	62fa      	str	r2, [r7, #44]	; 0x2c
 800903a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800903e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e5      	bne.n	8009018 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009050:	2b01      	cmp	r3, #1
 8009052:	d118      	bne.n	8009086 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	60bb      	str	r3, [r7, #8]
   return(result);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	f023 0310 	bic.w	r3, r3, #16
 8009068:	647b      	str	r3, [r7, #68]	; 0x44
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009072:	61bb      	str	r3, [r7, #24]
 8009074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009076:	6979      	ldr	r1, [r7, #20]
 8009078:	69ba      	ldr	r2, [r7, #24]
 800907a:	e841 2300 	strex	r3, r2, [r1]
 800907e:	613b      	str	r3, [r7, #16]
   return(result);
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d1e6      	bne.n	8009054 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2220      	movs	r2, #32
 800908a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	669a      	str	r2, [r3, #104]	; 0x68
}
 800909a:	bf00      	nop
 800909c:	3754      	adds	r7, #84	; 0x54
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7ff fb51 	bl	800876c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090ca:	bf00      	nop
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b088      	sub	sp, #32
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090ee:	61fb      	str	r3, [r7, #28]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	461a      	mov	r2, r3
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	61bb      	str	r3, [r7, #24]
 80090fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090fc:	6979      	ldr	r1, [r7, #20]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	e841 2300 	strex	r3, r2, [r1]
 8009104:	613b      	str	r3, [r7, #16]
   return(result);
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1e6      	bne.n	80090da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f7ff fb1d 	bl	8008758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911e:	bf00      	nop
 8009120:	3720      	adds	r7, #32
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <__errno>:
 8009128:	4b01      	ldr	r3, [pc, #4]	; (8009130 <__errno+0x8>)
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	200000f0 	.word	0x200000f0

08009134 <__libc_init_array>:
 8009134:	b570      	push	{r4, r5, r6, lr}
 8009136:	4d0d      	ldr	r5, [pc, #52]	; (800916c <__libc_init_array+0x38>)
 8009138:	4c0d      	ldr	r4, [pc, #52]	; (8009170 <__libc_init_array+0x3c>)
 800913a:	1b64      	subs	r4, r4, r5
 800913c:	10a4      	asrs	r4, r4, #2
 800913e:	2600      	movs	r6, #0
 8009140:	42a6      	cmp	r6, r4
 8009142:	d109      	bne.n	8009158 <__libc_init_array+0x24>
 8009144:	4d0b      	ldr	r5, [pc, #44]	; (8009174 <__libc_init_array+0x40>)
 8009146:	4c0c      	ldr	r4, [pc, #48]	; (8009178 <__libc_init_array+0x44>)
 8009148:	f000 fc66 	bl	8009a18 <_init>
 800914c:	1b64      	subs	r4, r4, r5
 800914e:	10a4      	asrs	r4, r4, #2
 8009150:	2600      	movs	r6, #0
 8009152:	42a6      	cmp	r6, r4
 8009154:	d105      	bne.n	8009162 <__libc_init_array+0x2e>
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	f855 3b04 	ldr.w	r3, [r5], #4
 800915c:	4798      	blx	r3
 800915e:	3601      	adds	r6, #1
 8009160:	e7ee      	b.n	8009140 <__libc_init_array+0xc>
 8009162:	f855 3b04 	ldr.w	r3, [r5], #4
 8009166:	4798      	blx	r3
 8009168:	3601      	adds	r6, #1
 800916a:	e7f2      	b.n	8009152 <__libc_init_array+0x1e>
 800916c:	08009ccc 	.word	0x08009ccc
 8009170:	08009ccc 	.word	0x08009ccc
 8009174:	08009ccc 	.word	0x08009ccc
 8009178:	08009cd0 	.word	0x08009cd0

0800917c <memset>:
 800917c:	4402      	add	r2, r0
 800917e:	4603      	mov	r3, r0
 8009180:	4293      	cmp	r3, r2
 8009182:	d100      	bne.n	8009186 <memset+0xa>
 8009184:	4770      	bx	lr
 8009186:	f803 1b01 	strb.w	r1, [r3], #1
 800918a:	e7f9      	b.n	8009180 <memset+0x4>

0800918c <setvbuf>:
 800918c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009190:	461d      	mov	r5, r3
 8009192:	4b5d      	ldr	r3, [pc, #372]	; (8009308 <setvbuf+0x17c>)
 8009194:	681f      	ldr	r7, [r3, #0]
 8009196:	4604      	mov	r4, r0
 8009198:	460e      	mov	r6, r1
 800919a:	4690      	mov	r8, r2
 800919c:	b127      	cbz	r7, 80091a8 <setvbuf+0x1c>
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	b913      	cbnz	r3, 80091a8 <setvbuf+0x1c>
 80091a2:	4638      	mov	r0, r7
 80091a4:	f000 f9d2 	bl	800954c <__sinit>
 80091a8:	4b58      	ldr	r3, [pc, #352]	; (800930c <setvbuf+0x180>)
 80091aa:	429c      	cmp	r4, r3
 80091ac:	d167      	bne.n	800927e <setvbuf+0xf2>
 80091ae:	687c      	ldr	r4, [r7, #4]
 80091b0:	f1b8 0f02 	cmp.w	r8, #2
 80091b4:	d006      	beq.n	80091c4 <setvbuf+0x38>
 80091b6:	f1b8 0f01 	cmp.w	r8, #1
 80091ba:	f200 809f 	bhi.w	80092fc <setvbuf+0x170>
 80091be:	2d00      	cmp	r5, #0
 80091c0:	f2c0 809c 	blt.w	80092fc <setvbuf+0x170>
 80091c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80091c6:	07db      	lsls	r3, r3, #31
 80091c8:	d405      	bmi.n	80091d6 <setvbuf+0x4a>
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	0598      	lsls	r0, r3, #22
 80091ce:	d402      	bmi.n	80091d6 <setvbuf+0x4a>
 80091d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80091d2:	f000 fa59 	bl	8009688 <__retarget_lock_acquire_recursive>
 80091d6:	4621      	mov	r1, r4
 80091d8:	4638      	mov	r0, r7
 80091da:	f000 f923 	bl	8009424 <_fflush_r>
 80091de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091e0:	b141      	cbz	r1, 80091f4 <setvbuf+0x68>
 80091e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091e6:	4299      	cmp	r1, r3
 80091e8:	d002      	beq.n	80091f0 <setvbuf+0x64>
 80091ea:	4638      	mov	r0, r7
 80091ec:	f000 fa7c 	bl	80096e8 <_free_r>
 80091f0:	2300      	movs	r3, #0
 80091f2:	6363      	str	r3, [r4, #52]	; 0x34
 80091f4:	2300      	movs	r3, #0
 80091f6:	61a3      	str	r3, [r4, #24]
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	0619      	lsls	r1, r3, #24
 80091fe:	d503      	bpl.n	8009208 <setvbuf+0x7c>
 8009200:	6921      	ldr	r1, [r4, #16]
 8009202:	4638      	mov	r0, r7
 8009204:	f000 fa70 	bl	80096e8 <_free_r>
 8009208:	89a3      	ldrh	r3, [r4, #12]
 800920a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800920e:	f023 0303 	bic.w	r3, r3, #3
 8009212:	f1b8 0f02 	cmp.w	r8, #2
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	d06c      	beq.n	80092f4 <setvbuf+0x168>
 800921a:	ab01      	add	r3, sp, #4
 800921c:	466a      	mov	r2, sp
 800921e:	4621      	mov	r1, r4
 8009220:	4638      	mov	r0, r7
 8009222:	f000 fa33 	bl	800968c <__swhatbuf_r>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	4318      	orrs	r0, r3
 800922a:	81a0      	strh	r0, [r4, #12]
 800922c:	2d00      	cmp	r5, #0
 800922e:	d130      	bne.n	8009292 <setvbuf+0x106>
 8009230:	9d00      	ldr	r5, [sp, #0]
 8009232:	4628      	mov	r0, r5
 8009234:	f000 fa50 	bl	80096d8 <malloc>
 8009238:	4606      	mov	r6, r0
 800923a:	2800      	cmp	r0, #0
 800923c:	d155      	bne.n	80092ea <setvbuf+0x15e>
 800923e:	f8dd 9000 	ldr.w	r9, [sp]
 8009242:	45a9      	cmp	r9, r5
 8009244:	d14a      	bne.n	80092dc <setvbuf+0x150>
 8009246:	f04f 35ff 	mov.w	r5, #4294967295
 800924a:	2200      	movs	r2, #0
 800924c:	60a2      	str	r2, [r4, #8]
 800924e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009252:	6022      	str	r2, [r4, #0]
 8009254:	6122      	str	r2, [r4, #16]
 8009256:	2201      	movs	r2, #1
 8009258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800925c:	6162      	str	r2, [r4, #20]
 800925e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009260:	f043 0302 	orr.w	r3, r3, #2
 8009264:	07d2      	lsls	r2, r2, #31
 8009266:	81a3      	strh	r3, [r4, #12]
 8009268:	d405      	bmi.n	8009276 <setvbuf+0xea>
 800926a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800926e:	d102      	bne.n	8009276 <setvbuf+0xea>
 8009270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009272:	f000 fa0a 	bl	800968a <__retarget_lock_release_recursive>
 8009276:	4628      	mov	r0, r5
 8009278:	b003      	add	sp, #12
 800927a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800927e:	4b24      	ldr	r3, [pc, #144]	; (8009310 <setvbuf+0x184>)
 8009280:	429c      	cmp	r4, r3
 8009282:	d101      	bne.n	8009288 <setvbuf+0xfc>
 8009284:	68bc      	ldr	r4, [r7, #8]
 8009286:	e793      	b.n	80091b0 <setvbuf+0x24>
 8009288:	4b22      	ldr	r3, [pc, #136]	; (8009314 <setvbuf+0x188>)
 800928a:	429c      	cmp	r4, r3
 800928c:	bf08      	it	eq
 800928e:	68fc      	ldreq	r4, [r7, #12]
 8009290:	e78e      	b.n	80091b0 <setvbuf+0x24>
 8009292:	2e00      	cmp	r6, #0
 8009294:	d0cd      	beq.n	8009232 <setvbuf+0xa6>
 8009296:	69bb      	ldr	r3, [r7, #24]
 8009298:	b913      	cbnz	r3, 80092a0 <setvbuf+0x114>
 800929a:	4638      	mov	r0, r7
 800929c:	f000 f956 	bl	800954c <__sinit>
 80092a0:	f1b8 0f01 	cmp.w	r8, #1
 80092a4:	bf08      	it	eq
 80092a6:	89a3      	ldrheq	r3, [r4, #12]
 80092a8:	6026      	str	r6, [r4, #0]
 80092aa:	bf04      	itt	eq
 80092ac:	f043 0301 	orreq.w	r3, r3, #1
 80092b0:	81a3      	strheq	r3, [r4, #12]
 80092b2:	89a2      	ldrh	r2, [r4, #12]
 80092b4:	f012 0308 	ands.w	r3, r2, #8
 80092b8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80092bc:	d01c      	beq.n	80092f8 <setvbuf+0x16c>
 80092be:	07d3      	lsls	r3, r2, #31
 80092c0:	bf41      	itttt	mi
 80092c2:	2300      	movmi	r3, #0
 80092c4:	426d      	negmi	r5, r5
 80092c6:	60a3      	strmi	r3, [r4, #8]
 80092c8:	61a5      	strmi	r5, [r4, #24]
 80092ca:	bf58      	it	pl
 80092cc:	60a5      	strpl	r5, [r4, #8]
 80092ce:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80092d0:	f015 0501 	ands.w	r5, r5, #1
 80092d4:	d115      	bne.n	8009302 <setvbuf+0x176>
 80092d6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80092da:	e7c8      	b.n	800926e <setvbuf+0xe2>
 80092dc:	4648      	mov	r0, r9
 80092de:	f000 f9fb 	bl	80096d8 <malloc>
 80092e2:	4606      	mov	r6, r0
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d0ae      	beq.n	8009246 <setvbuf+0xba>
 80092e8:	464d      	mov	r5, r9
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092f0:	81a3      	strh	r3, [r4, #12]
 80092f2:	e7d0      	b.n	8009296 <setvbuf+0x10a>
 80092f4:	2500      	movs	r5, #0
 80092f6:	e7a8      	b.n	800924a <setvbuf+0xbe>
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	e7e8      	b.n	80092ce <setvbuf+0x142>
 80092fc:	f04f 35ff 	mov.w	r5, #4294967295
 8009300:	e7b9      	b.n	8009276 <setvbuf+0xea>
 8009302:	2500      	movs	r5, #0
 8009304:	e7b7      	b.n	8009276 <setvbuf+0xea>
 8009306:	bf00      	nop
 8009308:	200000f0 	.word	0x200000f0
 800930c:	08009c84 	.word	0x08009c84
 8009310:	08009ca4 	.word	0x08009ca4
 8009314:	08009c64 	.word	0x08009c64

08009318 <__sflush_r>:
 8009318:	898a      	ldrh	r2, [r1, #12]
 800931a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	4605      	mov	r5, r0
 8009320:	0710      	lsls	r0, r2, #28
 8009322:	460c      	mov	r4, r1
 8009324:	d458      	bmi.n	80093d8 <__sflush_r+0xc0>
 8009326:	684b      	ldr	r3, [r1, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	dc05      	bgt.n	8009338 <__sflush_r+0x20>
 800932c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800932e:	2b00      	cmp	r3, #0
 8009330:	dc02      	bgt.n	8009338 <__sflush_r+0x20>
 8009332:	2000      	movs	r0, #0
 8009334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800933a:	2e00      	cmp	r6, #0
 800933c:	d0f9      	beq.n	8009332 <__sflush_r+0x1a>
 800933e:	2300      	movs	r3, #0
 8009340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009344:	682f      	ldr	r7, [r5, #0]
 8009346:	602b      	str	r3, [r5, #0]
 8009348:	d032      	beq.n	80093b0 <__sflush_r+0x98>
 800934a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	075a      	lsls	r2, r3, #29
 8009350:	d505      	bpl.n	800935e <__sflush_r+0x46>
 8009352:	6863      	ldr	r3, [r4, #4]
 8009354:	1ac0      	subs	r0, r0, r3
 8009356:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009358:	b10b      	cbz	r3, 800935e <__sflush_r+0x46>
 800935a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800935c:	1ac0      	subs	r0, r0, r3
 800935e:	2300      	movs	r3, #0
 8009360:	4602      	mov	r2, r0
 8009362:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009364:	6a21      	ldr	r1, [r4, #32]
 8009366:	4628      	mov	r0, r5
 8009368:	47b0      	blx	r6
 800936a:	1c43      	adds	r3, r0, #1
 800936c:	89a3      	ldrh	r3, [r4, #12]
 800936e:	d106      	bne.n	800937e <__sflush_r+0x66>
 8009370:	6829      	ldr	r1, [r5, #0]
 8009372:	291d      	cmp	r1, #29
 8009374:	d82c      	bhi.n	80093d0 <__sflush_r+0xb8>
 8009376:	4a2a      	ldr	r2, [pc, #168]	; (8009420 <__sflush_r+0x108>)
 8009378:	40ca      	lsrs	r2, r1
 800937a:	07d6      	lsls	r6, r2, #31
 800937c:	d528      	bpl.n	80093d0 <__sflush_r+0xb8>
 800937e:	2200      	movs	r2, #0
 8009380:	6062      	str	r2, [r4, #4]
 8009382:	04d9      	lsls	r1, r3, #19
 8009384:	6922      	ldr	r2, [r4, #16]
 8009386:	6022      	str	r2, [r4, #0]
 8009388:	d504      	bpl.n	8009394 <__sflush_r+0x7c>
 800938a:	1c42      	adds	r2, r0, #1
 800938c:	d101      	bne.n	8009392 <__sflush_r+0x7a>
 800938e:	682b      	ldr	r3, [r5, #0]
 8009390:	b903      	cbnz	r3, 8009394 <__sflush_r+0x7c>
 8009392:	6560      	str	r0, [r4, #84]	; 0x54
 8009394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009396:	602f      	str	r7, [r5, #0]
 8009398:	2900      	cmp	r1, #0
 800939a:	d0ca      	beq.n	8009332 <__sflush_r+0x1a>
 800939c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093a0:	4299      	cmp	r1, r3
 80093a2:	d002      	beq.n	80093aa <__sflush_r+0x92>
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 f99f 	bl	80096e8 <_free_r>
 80093aa:	2000      	movs	r0, #0
 80093ac:	6360      	str	r0, [r4, #52]	; 0x34
 80093ae:	e7c1      	b.n	8009334 <__sflush_r+0x1c>
 80093b0:	6a21      	ldr	r1, [r4, #32]
 80093b2:	2301      	movs	r3, #1
 80093b4:	4628      	mov	r0, r5
 80093b6:	47b0      	blx	r6
 80093b8:	1c41      	adds	r1, r0, #1
 80093ba:	d1c7      	bne.n	800934c <__sflush_r+0x34>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0c4      	beq.n	800934c <__sflush_r+0x34>
 80093c2:	2b1d      	cmp	r3, #29
 80093c4:	d001      	beq.n	80093ca <__sflush_r+0xb2>
 80093c6:	2b16      	cmp	r3, #22
 80093c8:	d101      	bne.n	80093ce <__sflush_r+0xb6>
 80093ca:	602f      	str	r7, [r5, #0]
 80093cc:	e7b1      	b.n	8009332 <__sflush_r+0x1a>
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	e7ad      	b.n	8009334 <__sflush_r+0x1c>
 80093d8:	690f      	ldr	r7, [r1, #16]
 80093da:	2f00      	cmp	r7, #0
 80093dc:	d0a9      	beq.n	8009332 <__sflush_r+0x1a>
 80093de:	0793      	lsls	r3, r2, #30
 80093e0:	680e      	ldr	r6, [r1, #0]
 80093e2:	bf08      	it	eq
 80093e4:	694b      	ldreq	r3, [r1, #20]
 80093e6:	600f      	str	r7, [r1, #0]
 80093e8:	bf18      	it	ne
 80093ea:	2300      	movne	r3, #0
 80093ec:	eba6 0807 	sub.w	r8, r6, r7
 80093f0:	608b      	str	r3, [r1, #8]
 80093f2:	f1b8 0f00 	cmp.w	r8, #0
 80093f6:	dd9c      	ble.n	8009332 <__sflush_r+0x1a>
 80093f8:	6a21      	ldr	r1, [r4, #32]
 80093fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093fc:	4643      	mov	r3, r8
 80093fe:	463a      	mov	r2, r7
 8009400:	4628      	mov	r0, r5
 8009402:	47b0      	blx	r6
 8009404:	2800      	cmp	r0, #0
 8009406:	dc06      	bgt.n	8009416 <__sflush_r+0xfe>
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	f04f 30ff 	mov.w	r0, #4294967295
 8009414:	e78e      	b.n	8009334 <__sflush_r+0x1c>
 8009416:	4407      	add	r7, r0
 8009418:	eba8 0800 	sub.w	r8, r8, r0
 800941c:	e7e9      	b.n	80093f2 <__sflush_r+0xda>
 800941e:	bf00      	nop
 8009420:	20400001 	.word	0x20400001

08009424 <_fflush_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	690b      	ldr	r3, [r1, #16]
 8009428:	4605      	mov	r5, r0
 800942a:	460c      	mov	r4, r1
 800942c:	b913      	cbnz	r3, 8009434 <_fflush_r+0x10>
 800942e:	2500      	movs	r5, #0
 8009430:	4628      	mov	r0, r5
 8009432:	bd38      	pop	{r3, r4, r5, pc}
 8009434:	b118      	cbz	r0, 800943e <_fflush_r+0x1a>
 8009436:	6983      	ldr	r3, [r0, #24]
 8009438:	b90b      	cbnz	r3, 800943e <_fflush_r+0x1a>
 800943a:	f000 f887 	bl	800954c <__sinit>
 800943e:	4b14      	ldr	r3, [pc, #80]	; (8009490 <_fflush_r+0x6c>)
 8009440:	429c      	cmp	r4, r3
 8009442:	d11b      	bne.n	800947c <_fflush_r+0x58>
 8009444:	686c      	ldr	r4, [r5, #4]
 8009446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d0ef      	beq.n	800942e <_fflush_r+0xa>
 800944e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009450:	07d0      	lsls	r0, r2, #31
 8009452:	d404      	bmi.n	800945e <_fflush_r+0x3a>
 8009454:	0599      	lsls	r1, r3, #22
 8009456:	d402      	bmi.n	800945e <_fflush_r+0x3a>
 8009458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800945a:	f000 f915 	bl	8009688 <__retarget_lock_acquire_recursive>
 800945e:	4628      	mov	r0, r5
 8009460:	4621      	mov	r1, r4
 8009462:	f7ff ff59 	bl	8009318 <__sflush_r>
 8009466:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009468:	07da      	lsls	r2, r3, #31
 800946a:	4605      	mov	r5, r0
 800946c:	d4e0      	bmi.n	8009430 <_fflush_r+0xc>
 800946e:	89a3      	ldrh	r3, [r4, #12]
 8009470:	059b      	lsls	r3, r3, #22
 8009472:	d4dd      	bmi.n	8009430 <_fflush_r+0xc>
 8009474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009476:	f000 f908 	bl	800968a <__retarget_lock_release_recursive>
 800947a:	e7d9      	b.n	8009430 <_fflush_r+0xc>
 800947c:	4b05      	ldr	r3, [pc, #20]	; (8009494 <_fflush_r+0x70>)
 800947e:	429c      	cmp	r4, r3
 8009480:	d101      	bne.n	8009486 <_fflush_r+0x62>
 8009482:	68ac      	ldr	r4, [r5, #8]
 8009484:	e7df      	b.n	8009446 <_fflush_r+0x22>
 8009486:	4b04      	ldr	r3, [pc, #16]	; (8009498 <_fflush_r+0x74>)
 8009488:	429c      	cmp	r4, r3
 800948a:	bf08      	it	eq
 800948c:	68ec      	ldreq	r4, [r5, #12]
 800948e:	e7da      	b.n	8009446 <_fflush_r+0x22>
 8009490:	08009c84 	.word	0x08009c84
 8009494:	08009ca4 	.word	0x08009ca4
 8009498:	08009c64 	.word	0x08009c64

0800949c <std>:
 800949c:	2300      	movs	r3, #0
 800949e:	b510      	push	{r4, lr}
 80094a0:	4604      	mov	r4, r0
 80094a2:	e9c0 3300 	strd	r3, r3, [r0]
 80094a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094aa:	6083      	str	r3, [r0, #8]
 80094ac:	8181      	strh	r1, [r0, #12]
 80094ae:	6643      	str	r3, [r0, #100]	; 0x64
 80094b0:	81c2      	strh	r2, [r0, #14]
 80094b2:	6183      	str	r3, [r0, #24]
 80094b4:	4619      	mov	r1, r3
 80094b6:	2208      	movs	r2, #8
 80094b8:	305c      	adds	r0, #92	; 0x5c
 80094ba:	f7ff fe5f 	bl	800917c <memset>
 80094be:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <std+0x38>)
 80094c0:	6263      	str	r3, [r4, #36]	; 0x24
 80094c2:	4b05      	ldr	r3, [pc, #20]	; (80094d8 <std+0x3c>)
 80094c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80094c6:	4b05      	ldr	r3, [pc, #20]	; (80094dc <std+0x40>)
 80094c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094ca:	4b05      	ldr	r3, [pc, #20]	; (80094e0 <std+0x44>)
 80094cc:	6224      	str	r4, [r4, #32]
 80094ce:	6323      	str	r3, [r4, #48]	; 0x30
 80094d0:	bd10      	pop	{r4, pc}
 80094d2:	bf00      	nop
 80094d4:	080098c9 	.word	0x080098c9
 80094d8:	080098eb 	.word	0x080098eb
 80094dc:	08009923 	.word	0x08009923
 80094e0:	08009947 	.word	0x08009947

080094e4 <_cleanup_r>:
 80094e4:	4901      	ldr	r1, [pc, #4]	; (80094ec <_cleanup_r+0x8>)
 80094e6:	f000 b8af 	b.w	8009648 <_fwalk_reent>
 80094ea:	bf00      	nop
 80094ec:	08009425 	.word	0x08009425

080094f0 <__sfmoreglue>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	2268      	movs	r2, #104	; 0x68
 80094f4:	1e4d      	subs	r5, r1, #1
 80094f6:	4355      	muls	r5, r2
 80094f8:	460e      	mov	r6, r1
 80094fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80094fe:	f000 f95f 	bl	80097c0 <_malloc_r>
 8009502:	4604      	mov	r4, r0
 8009504:	b140      	cbz	r0, 8009518 <__sfmoreglue+0x28>
 8009506:	2100      	movs	r1, #0
 8009508:	e9c0 1600 	strd	r1, r6, [r0]
 800950c:	300c      	adds	r0, #12
 800950e:	60a0      	str	r0, [r4, #8]
 8009510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009514:	f7ff fe32 	bl	800917c <memset>
 8009518:	4620      	mov	r0, r4
 800951a:	bd70      	pop	{r4, r5, r6, pc}

0800951c <__sfp_lock_acquire>:
 800951c:	4801      	ldr	r0, [pc, #4]	; (8009524 <__sfp_lock_acquire+0x8>)
 800951e:	f000 b8b3 	b.w	8009688 <__retarget_lock_acquire_recursive>
 8009522:	bf00      	nop
 8009524:	20000661 	.word	0x20000661

08009528 <__sfp_lock_release>:
 8009528:	4801      	ldr	r0, [pc, #4]	; (8009530 <__sfp_lock_release+0x8>)
 800952a:	f000 b8ae 	b.w	800968a <__retarget_lock_release_recursive>
 800952e:	bf00      	nop
 8009530:	20000661 	.word	0x20000661

08009534 <__sinit_lock_acquire>:
 8009534:	4801      	ldr	r0, [pc, #4]	; (800953c <__sinit_lock_acquire+0x8>)
 8009536:	f000 b8a7 	b.w	8009688 <__retarget_lock_acquire_recursive>
 800953a:	bf00      	nop
 800953c:	20000662 	.word	0x20000662

08009540 <__sinit_lock_release>:
 8009540:	4801      	ldr	r0, [pc, #4]	; (8009548 <__sinit_lock_release+0x8>)
 8009542:	f000 b8a2 	b.w	800968a <__retarget_lock_release_recursive>
 8009546:	bf00      	nop
 8009548:	20000662 	.word	0x20000662

0800954c <__sinit>:
 800954c:	b510      	push	{r4, lr}
 800954e:	4604      	mov	r4, r0
 8009550:	f7ff fff0 	bl	8009534 <__sinit_lock_acquire>
 8009554:	69a3      	ldr	r3, [r4, #24]
 8009556:	b11b      	cbz	r3, 8009560 <__sinit+0x14>
 8009558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800955c:	f7ff bff0 	b.w	8009540 <__sinit_lock_release>
 8009560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009564:	6523      	str	r3, [r4, #80]	; 0x50
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <__sinit+0x68>)
 8009568:	4a13      	ldr	r2, [pc, #76]	; (80095b8 <__sinit+0x6c>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	62a2      	str	r2, [r4, #40]	; 0x28
 800956e:	42a3      	cmp	r3, r4
 8009570:	bf04      	itt	eq
 8009572:	2301      	moveq	r3, #1
 8009574:	61a3      	streq	r3, [r4, #24]
 8009576:	4620      	mov	r0, r4
 8009578:	f000 f820 	bl	80095bc <__sfp>
 800957c:	6060      	str	r0, [r4, #4]
 800957e:	4620      	mov	r0, r4
 8009580:	f000 f81c 	bl	80095bc <__sfp>
 8009584:	60a0      	str	r0, [r4, #8]
 8009586:	4620      	mov	r0, r4
 8009588:	f000 f818 	bl	80095bc <__sfp>
 800958c:	2200      	movs	r2, #0
 800958e:	60e0      	str	r0, [r4, #12]
 8009590:	2104      	movs	r1, #4
 8009592:	6860      	ldr	r0, [r4, #4]
 8009594:	f7ff ff82 	bl	800949c <std>
 8009598:	68a0      	ldr	r0, [r4, #8]
 800959a:	2201      	movs	r2, #1
 800959c:	2109      	movs	r1, #9
 800959e:	f7ff ff7d 	bl	800949c <std>
 80095a2:	68e0      	ldr	r0, [r4, #12]
 80095a4:	2202      	movs	r2, #2
 80095a6:	2112      	movs	r1, #18
 80095a8:	f7ff ff78 	bl	800949c <std>
 80095ac:	2301      	movs	r3, #1
 80095ae:	61a3      	str	r3, [r4, #24]
 80095b0:	e7d2      	b.n	8009558 <__sinit+0xc>
 80095b2:	bf00      	nop
 80095b4:	08009c60 	.word	0x08009c60
 80095b8:	080094e5 	.word	0x080094e5

080095bc <__sfp>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	4607      	mov	r7, r0
 80095c0:	f7ff ffac 	bl	800951c <__sfp_lock_acquire>
 80095c4:	4b1e      	ldr	r3, [pc, #120]	; (8009640 <__sfp+0x84>)
 80095c6:	681e      	ldr	r6, [r3, #0]
 80095c8:	69b3      	ldr	r3, [r6, #24]
 80095ca:	b913      	cbnz	r3, 80095d2 <__sfp+0x16>
 80095cc:	4630      	mov	r0, r6
 80095ce:	f7ff ffbd 	bl	800954c <__sinit>
 80095d2:	3648      	adds	r6, #72	; 0x48
 80095d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80095d8:	3b01      	subs	r3, #1
 80095da:	d503      	bpl.n	80095e4 <__sfp+0x28>
 80095dc:	6833      	ldr	r3, [r6, #0]
 80095de:	b30b      	cbz	r3, 8009624 <__sfp+0x68>
 80095e0:	6836      	ldr	r6, [r6, #0]
 80095e2:	e7f7      	b.n	80095d4 <__sfp+0x18>
 80095e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80095e8:	b9d5      	cbnz	r5, 8009620 <__sfp+0x64>
 80095ea:	4b16      	ldr	r3, [pc, #88]	; (8009644 <__sfp+0x88>)
 80095ec:	60e3      	str	r3, [r4, #12]
 80095ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095f2:	6665      	str	r5, [r4, #100]	; 0x64
 80095f4:	f000 f847 	bl	8009686 <__retarget_lock_init_recursive>
 80095f8:	f7ff ff96 	bl	8009528 <__sfp_lock_release>
 80095fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009600:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009604:	6025      	str	r5, [r4, #0]
 8009606:	61a5      	str	r5, [r4, #24]
 8009608:	2208      	movs	r2, #8
 800960a:	4629      	mov	r1, r5
 800960c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009610:	f7ff fdb4 	bl	800917c <memset>
 8009614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800961c:	4620      	mov	r0, r4
 800961e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009620:	3468      	adds	r4, #104	; 0x68
 8009622:	e7d9      	b.n	80095d8 <__sfp+0x1c>
 8009624:	2104      	movs	r1, #4
 8009626:	4638      	mov	r0, r7
 8009628:	f7ff ff62 	bl	80094f0 <__sfmoreglue>
 800962c:	4604      	mov	r4, r0
 800962e:	6030      	str	r0, [r6, #0]
 8009630:	2800      	cmp	r0, #0
 8009632:	d1d5      	bne.n	80095e0 <__sfp+0x24>
 8009634:	f7ff ff78 	bl	8009528 <__sfp_lock_release>
 8009638:	230c      	movs	r3, #12
 800963a:	603b      	str	r3, [r7, #0]
 800963c:	e7ee      	b.n	800961c <__sfp+0x60>
 800963e:	bf00      	nop
 8009640:	08009c60 	.word	0x08009c60
 8009644:	ffff0001 	.word	0xffff0001

08009648 <_fwalk_reent>:
 8009648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800964c:	4606      	mov	r6, r0
 800964e:	4688      	mov	r8, r1
 8009650:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009654:	2700      	movs	r7, #0
 8009656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800965a:	f1b9 0901 	subs.w	r9, r9, #1
 800965e:	d505      	bpl.n	800966c <_fwalk_reent+0x24>
 8009660:	6824      	ldr	r4, [r4, #0]
 8009662:	2c00      	cmp	r4, #0
 8009664:	d1f7      	bne.n	8009656 <_fwalk_reent+0xe>
 8009666:	4638      	mov	r0, r7
 8009668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966c:	89ab      	ldrh	r3, [r5, #12]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d907      	bls.n	8009682 <_fwalk_reent+0x3a>
 8009672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009676:	3301      	adds	r3, #1
 8009678:	d003      	beq.n	8009682 <_fwalk_reent+0x3a>
 800967a:	4629      	mov	r1, r5
 800967c:	4630      	mov	r0, r6
 800967e:	47c0      	blx	r8
 8009680:	4307      	orrs	r7, r0
 8009682:	3568      	adds	r5, #104	; 0x68
 8009684:	e7e9      	b.n	800965a <_fwalk_reent+0x12>

08009686 <__retarget_lock_init_recursive>:
 8009686:	4770      	bx	lr

08009688 <__retarget_lock_acquire_recursive>:
 8009688:	4770      	bx	lr

0800968a <__retarget_lock_release_recursive>:
 800968a:	4770      	bx	lr

0800968c <__swhatbuf_r>:
 800968c:	b570      	push	{r4, r5, r6, lr}
 800968e:	460e      	mov	r6, r1
 8009690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009694:	2900      	cmp	r1, #0
 8009696:	b096      	sub	sp, #88	; 0x58
 8009698:	4614      	mov	r4, r2
 800969a:	461d      	mov	r5, r3
 800969c:	da08      	bge.n	80096b0 <__swhatbuf_r+0x24>
 800969e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	602a      	str	r2, [r5, #0]
 80096a6:	061a      	lsls	r2, r3, #24
 80096a8:	d410      	bmi.n	80096cc <__swhatbuf_r+0x40>
 80096aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ae:	e00e      	b.n	80096ce <__swhatbuf_r+0x42>
 80096b0:	466a      	mov	r2, sp
 80096b2:	f000 f96f 	bl	8009994 <_fstat_r>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	dbf1      	blt.n	800969e <__swhatbuf_r+0x12>
 80096ba:	9a01      	ldr	r2, [sp, #4]
 80096bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096c4:	425a      	negs	r2, r3
 80096c6:	415a      	adcs	r2, r3
 80096c8:	602a      	str	r2, [r5, #0]
 80096ca:	e7ee      	b.n	80096aa <__swhatbuf_r+0x1e>
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	2000      	movs	r0, #0
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	b016      	add	sp, #88	; 0x58
 80096d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080096d8 <malloc>:
 80096d8:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <malloc+0xc>)
 80096da:	4601      	mov	r1, r0
 80096dc:	6818      	ldr	r0, [r3, #0]
 80096de:	f000 b86f 	b.w	80097c0 <_malloc_r>
 80096e2:	bf00      	nop
 80096e4:	200000f0 	.word	0x200000f0

080096e8 <_free_r>:
 80096e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ea:	2900      	cmp	r1, #0
 80096ec:	d044      	beq.n	8009778 <_free_r+0x90>
 80096ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096f2:	9001      	str	r0, [sp, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f1a1 0404 	sub.w	r4, r1, #4
 80096fa:	bfb8      	it	lt
 80096fc:	18e4      	addlt	r4, r4, r3
 80096fe:	f000 f96d 	bl	80099dc <__malloc_lock>
 8009702:	4a1e      	ldr	r2, [pc, #120]	; (800977c <_free_r+0x94>)
 8009704:	9801      	ldr	r0, [sp, #4]
 8009706:	6813      	ldr	r3, [r2, #0]
 8009708:	b933      	cbnz	r3, 8009718 <_free_r+0x30>
 800970a:	6063      	str	r3, [r4, #4]
 800970c:	6014      	str	r4, [r2, #0]
 800970e:	b003      	add	sp, #12
 8009710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009714:	f000 b968 	b.w	80099e8 <__malloc_unlock>
 8009718:	42a3      	cmp	r3, r4
 800971a:	d908      	bls.n	800972e <_free_r+0x46>
 800971c:	6825      	ldr	r5, [r4, #0]
 800971e:	1961      	adds	r1, r4, r5
 8009720:	428b      	cmp	r3, r1
 8009722:	bf01      	itttt	eq
 8009724:	6819      	ldreq	r1, [r3, #0]
 8009726:	685b      	ldreq	r3, [r3, #4]
 8009728:	1949      	addeq	r1, r1, r5
 800972a:	6021      	streq	r1, [r4, #0]
 800972c:	e7ed      	b.n	800970a <_free_r+0x22>
 800972e:	461a      	mov	r2, r3
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	b10b      	cbz	r3, 8009738 <_free_r+0x50>
 8009734:	42a3      	cmp	r3, r4
 8009736:	d9fa      	bls.n	800972e <_free_r+0x46>
 8009738:	6811      	ldr	r1, [r2, #0]
 800973a:	1855      	adds	r5, r2, r1
 800973c:	42a5      	cmp	r5, r4
 800973e:	d10b      	bne.n	8009758 <_free_r+0x70>
 8009740:	6824      	ldr	r4, [r4, #0]
 8009742:	4421      	add	r1, r4
 8009744:	1854      	adds	r4, r2, r1
 8009746:	42a3      	cmp	r3, r4
 8009748:	6011      	str	r1, [r2, #0]
 800974a:	d1e0      	bne.n	800970e <_free_r+0x26>
 800974c:	681c      	ldr	r4, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	6053      	str	r3, [r2, #4]
 8009752:	4421      	add	r1, r4
 8009754:	6011      	str	r1, [r2, #0]
 8009756:	e7da      	b.n	800970e <_free_r+0x26>
 8009758:	d902      	bls.n	8009760 <_free_r+0x78>
 800975a:	230c      	movs	r3, #12
 800975c:	6003      	str	r3, [r0, #0]
 800975e:	e7d6      	b.n	800970e <_free_r+0x26>
 8009760:	6825      	ldr	r5, [r4, #0]
 8009762:	1961      	adds	r1, r4, r5
 8009764:	428b      	cmp	r3, r1
 8009766:	bf04      	itt	eq
 8009768:	6819      	ldreq	r1, [r3, #0]
 800976a:	685b      	ldreq	r3, [r3, #4]
 800976c:	6063      	str	r3, [r4, #4]
 800976e:	bf04      	itt	eq
 8009770:	1949      	addeq	r1, r1, r5
 8009772:	6021      	streq	r1, [r4, #0]
 8009774:	6054      	str	r4, [r2, #4]
 8009776:	e7ca      	b.n	800970e <_free_r+0x26>
 8009778:	b003      	add	sp, #12
 800977a:	bd30      	pop	{r4, r5, pc}
 800977c:	20000664 	.word	0x20000664

08009780 <sbrk_aligned>:
 8009780:	b570      	push	{r4, r5, r6, lr}
 8009782:	4e0e      	ldr	r6, [pc, #56]	; (80097bc <sbrk_aligned+0x3c>)
 8009784:	460c      	mov	r4, r1
 8009786:	6831      	ldr	r1, [r6, #0]
 8009788:	4605      	mov	r5, r0
 800978a:	b911      	cbnz	r1, 8009792 <sbrk_aligned+0x12>
 800978c:	f000 f88c 	bl	80098a8 <_sbrk_r>
 8009790:	6030      	str	r0, [r6, #0]
 8009792:	4621      	mov	r1, r4
 8009794:	4628      	mov	r0, r5
 8009796:	f000 f887 	bl	80098a8 <_sbrk_r>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	d00a      	beq.n	80097b4 <sbrk_aligned+0x34>
 800979e:	1cc4      	adds	r4, r0, #3
 80097a0:	f024 0403 	bic.w	r4, r4, #3
 80097a4:	42a0      	cmp	r0, r4
 80097a6:	d007      	beq.n	80097b8 <sbrk_aligned+0x38>
 80097a8:	1a21      	subs	r1, r4, r0
 80097aa:	4628      	mov	r0, r5
 80097ac:	f000 f87c 	bl	80098a8 <_sbrk_r>
 80097b0:	3001      	adds	r0, #1
 80097b2:	d101      	bne.n	80097b8 <sbrk_aligned+0x38>
 80097b4:	f04f 34ff 	mov.w	r4, #4294967295
 80097b8:	4620      	mov	r0, r4
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	20000668 	.word	0x20000668

080097c0 <_malloc_r>:
 80097c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	1ccd      	adds	r5, r1, #3
 80097c6:	f025 0503 	bic.w	r5, r5, #3
 80097ca:	3508      	adds	r5, #8
 80097cc:	2d0c      	cmp	r5, #12
 80097ce:	bf38      	it	cc
 80097d0:	250c      	movcc	r5, #12
 80097d2:	2d00      	cmp	r5, #0
 80097d4:	4607      	mov	r7, r0
 80097d6:	db01      	blt.n	80097dc <_malloc_r+0x1c>
 80097d8:	42a9      	cmp	r1, r5
 80097da:	d905      	bls.n	80097e8 <_malloc_r+0x28>
 80097dc:	230c      	movs	r3, #12
 80097de:	603b      	str	r3, [r7, #0]
 80097e0:	2600      	movs	r6, #0
 80097e2:	4630      	mov	r0, r6
 80097e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e8:	4e2e      	ldr	r6, [pc, #184]	; (80098a4 <_malloc_r+0xe4>)
 80097ea:	f000 f8f7 	bl	80099dc <__malloc_lock>
 80097ee:	6833      	ldr	r3, [r6, #0]
 80097f0:	461c      	mov	r4, r3
 80097f2:	bb34      	cbnz	r4, 8009842 <_malloc_r+0x82>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4638      	mov	r0, r7
 80097f8:	f7ff ffc2 	bl	8009780 <sbrk_aligned>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	4604      	mov	r4, r0
 8009800:	d14d      	bne.n	800989e <_malloc_r+0xde>
 8009802:	6834      	ldr	r4, [r6, #0]
 8009804:	4626      	mov	r6, r4
 8009806:	2e00      	cmp	r6, #0
 8009808:	d140      	bne.n	800988c <_malloc_r+0xcc>
 800980a:	6823      	ldr	r3, [r4, #0]
 800980c:	4631      	mov	r1, r6
 800980e:	4638      	mov	r0, r7
 8009810:	eb04 0803 	add.w	r8, r4, r3
 8009814:	f000 f848 	bl	80098a8 <_sbrk_r>
 8009818:	4580      	cmp	r8, r0
 800981a:	d13a      	bne.n	8009892 <_malloc_r+0xd2>
 800981c:	6821      	ldr	r1, [r4, #0]
 800981e:	3503      	adds	r5, #3
 8009820:	1a6d      	subs	r5, r5, r1
 8009822:	f025 0503 	bic.w	r5, r5, #3
 8009826:	3508      	adds	r5, #8
 8009828:	2d0c      	cmp	r5, #12
 800982a:	bf38      	it	cc
 800982c:	250c      	movcc	r5, #12
 800982e:	4629      	mov	r1, r5
 8009830:	4638      	mov	r0, r7
 8009832:	f7ff ffa5 	bl	8009780 <sbrk_aligned>
 8009836:	3001      	adds	r0, #1
 8009838:	d02b      	beq.n	8009892 <_malloc_r+0xd2>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	442b      	add	r3, r5
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	e00e      	b.n	8009860 <_malloc_r+0xa0>
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	1b52      	subs	r2, r2, r5
 8009846:	d41e      	bmi.n	8009886 <_malloc_r+0xc6>
 8009848:	2a0b      	cmp	r2, #11
 800984a:	d916      	bls.n	800987a <_malloc_r+0xba>
 800984c:	1961      	adds	r1, r4, r5
 800984e:	42a3      	cmp	r3, r4
 8009850:	6025      	str	r5, [r4, #0]
 8009852:	bf18      	it	ne
 8009854:	6059      	strne	r1, [r3, #4]
 8009856:	6863      	ldr	r3, [r4, #4]
 8009858:	bf08      	it	eq
 800985a:	6031      	streq	r1, [r6, #0]
 800985c:	5162      	str	r2, [r4, r5]
 800985e:	604b      	str	r3, [r1, #4]
 8009860:	4638      	mov	r0, r7
 8009862:	f104 060b 	add.w	r6, r4, #11
 8009866:	f000 f8bf 	bl	80099e8 <__malloc_unlock>
 800986a:	f026 0607 	bic.w	r6, r6, #7
 800986e:	1d23      	adds	r3, r4, #4
 8009870:	1af2      	subs	r2, r6, r3
 8009872:	d0b6      	beq.n	80097e2 <_malloc_r+0x22>
 8009874:	1b9b      	subs	r3, r3, r6
 8009876:	50a3      	str	r3, [r4, r2]
 8009878:	e7b3      	b.n	80097e2 <_malloc_r+0x22>
 800987a:	6862      	ldr	r2, [r4, #4]
 800987c:	42a3      	cmp	r3, r4
 800987e:	bf0c      	ite	eq
 8009880:	6032      	streq	r2, [r6, #0]
 8009882:	605a      	strne	r2, [r3, #4]
 8009884:	e7ec      	b.n	8009860 <_malloc_r+0xa0>
 8009886:	4623      	mov	r3, r4
 8009888:	6864      	ldr	r4, [r4, #4]
 800988a:	e7b2      	b.n	80097f2 <_malloc_r+0x32>
 800988c:	4634      	mov	r4, r6
 800988e:	6876      	ldr	r6, [r6, #4]
 8009890:	e7b9      	b.n	8009806 <_malloc_r+0x46>
 8009892:	230c      	movs	r3, #12
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4638      	mov	r0, r7
 8009898:	f000 f8a6 	bl	80099e8 <__malloc_unlock>
 800989c:	e7a1      	b.n	80097e2 <_malloc_r+0x22>
 800989e:	6025      	str	r5, [r4, #0]
 80098a0:	e7de      	b.n	8009860 <_malloc_r+0xa0>
 80098a2:	bf00      	nop
 80098a4:	20000664 	.word	0x20000664

080098a8 <_sbrk_r>:
 80098a8:	b538      	push	{r3, r4, r5, lr}
 80098aa:	4d06      	ldr	r5, [pc, #24]	; (80098c4 <_sbrk_r+0x1c>)
 80098ac:	2300      	movs	r3, #0
 80098ae:	4604      	mov	r4, r0
 80098b0:	4608      	mov	r0, r1
 80098b2:	602b      	str	r3, [r5, #0]
 80098b4:	f7fb f8a0 	bl	80049f8 <_sbrk>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d102      	bne.n	80098c2 <_sbrk_r+0x1a>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	b103      	cbz	r3, 80098c2 <_sbrk_r+0x1a>
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	bd38      	pop	{r3, r4, r5, pc}
 80098c4:	2000066c 	.word	0x2000066c

080098c8 <__sread>:
 80098c8:	b510      	push	{r4, lr}
 80098ca:	460c      	mov	r4, r1
 80098cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d0:	f000 f890 	bl	80099f4 <_read_r>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	bfab      	itete	ge
 80098d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098da:	89a3      	ldrhlt	r3, [r4, #12]
 80098dc:	181b      	addge	r3, r3, r0
 80098de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098e2:	bfac      	ite	ge
 80098e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098e6:	81a3      	strhlt	r3, [r4, #12]
 80098e8:	bd10      	pop	{r4, pc}

080098ea <__swrite>:
 80098ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	461f      	mov	r7, r3
 80098f0:	898b      	ldrh	r3, [r1, #12]
 80098f2:	05db      	lsls	r3, r3, #23
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	4616      	mov	r6, r2
 80098fa:	d505      	bpl.n	8009908 <__swrite+0x1e>
 80098fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009900:	2302      	movs	r3, #2
 8009902:	2200      	movs	r2, #0
 8009904:	f000 f858 	bl	80099b8 <_lseek_r>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009912:	81a3      	strh	r3, [r4, #12]
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	4628      	mov	r0, r5
 800991a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991e:	f000 b817 	b.w	8009950 <_write_r>

08009922 <__sseek>:
 8009922:	b510      	push	{r4, lr}
 8009924:	460c      	mov	r4, r1
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 f845 	bl	80099b8 <_lseek_r>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	89a3      	ldrh	r3, [r4, #12]
 8009932:	bf15      	itete	ne
 8009934:	6560      	strne	r0, [r4, #84]	; 0x54
 8009936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800993a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800993e:	81a3      	strheq	r3, [r4, #12]
 8009940:	bf18      	it	ne
 8009942:	81a3      	strhne	r3, [r4, #12]
 8009944:	bd10      	pop	{r4, pc}

08009946 <__sclose>:
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 b813 	b.w	8009974 <_close_r>
	...

08009950 <_write_r>:
 8009950:	b538      	push	{r3, r4, r5, lr}
 8009952:	4d07      	ldr	r5, [pc, #28]	; (8009970 <_write_r+0x20>)
 8009954:	4604      	mov	r4, r0
 8009956:	4608      	mov	r0, r1
 8009958:	4611      	mov	r1, r2
 800995a:	2200      	movs	r2, #0
 800995c:	602a      	str	r2, [r5, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	f7fa fc86 	bl	8004270 <_write>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_write_r+0x1e>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_write_r+0x1e>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	2000066c 	.word	0x2000066c

08009974 <_close_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d06      	ldr	r5, [pc, #24]	; (8009990 <_close_r+0x1c>)
 8009978:	2300      	movs	r3, #0
 800997a:	4604      	mov	r4, r0
 800997c:	4608      	mov	r0, r1
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	f7fa fca0 	bl	80042c4 <_close>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	d102      	bne.n	800998e <_close_r+0x1a>
 8009988:	682b      	ldr	r3, [r5, #0]
 800998a:	b103      	cbz	r3, 800998e <_close_r+0x1a>
 800998c:	6023      	str	r3, [r4, #0]
 800998e:	bd38      	pop	{r3, r4, r5, pc}
 8009990:	2000066c 	.word	0x2000066c

08009994 <_fstat_r>:
 8009994:	b538      	push	{r3, r4, r5, lr}
 8009996:	4d07      	ldr	r5, [pc, #28]	; (80099b4 <_fstat_r+0x20>)
 8009998:	2300      	movs	r3, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	f7fa fcdf 	bl	8004364 <_fstat>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	d102      	bne.n	80099b0 <_fstat_r+0x1c>
 80099aa:	682b      	ldr	r3, [r5, #0]
 80099ac:	b103      	cbz	r3, 80099b0 <_fstat_r+0x1c>
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	bd38      	pop	{r3, r4, r5, pc}
 80099b2:	bf00      	nop
 80099b4:	2000066c 	.word	0x2000066c

080099b8 <_lseek_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4d07      	ldr	r5, [pc, #28]	; (80099d8 <_lseek_r+0x20>)
 80099bc:	4604      	mov	r4, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	602a      	str	r2, [r5, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7fa fc93 	bl	80042f2 <_lseek>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_lseek_r+0x1e>
 80099d0:	682b      	ldr	r3, [r5, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_lseek_r+0x1e>
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	2000066c 	.word	0x2000066c

080099dc <__malloc_lock>:
 80099dc:	4801      	ldr	r0, [pc, #4]	; (80099e4 <__malloc_lock+0x8>)
 80099de:	f7ff be53 	b.w	8009688 <__retarget_lock_acquire_recursive>
 80099e2:	bf00      	nop
 80099e4:	20000660 	.word	0x20000660

080099e8 <__malloc_unlock>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__malloc_unlock+0x8>)
 80099ea:	f7ff be4e 	b.w	800968a <__retarget_lock_release_recursive>
 80099ee:	bf00      	nop
 80099f0:	20000660 	.word	0x20000660

080099f4 <_read_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_read_r+0x20>)
 80099f8:	4604      	mov	r4, r0
 80099fa:	4608      	mov	r0, r1
 80099fc:	4611      	mov	r1, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	602a      	str	r2, [r5, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	f7fa fc86 	bl	8004314 <_read>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_read_r+0x1e>
 8009a0c:	682b      	ldr	r3, [r5, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_read_r+0x1e>
 8009a10:	6023      	str	r3, [r4, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	2000066c 	.word	0x2000066c

08009a18 <_init>:
 8009a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1a:	bf00      	nop
 8009a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a1e:	bc08      	pop	{r3}
 8009a20:	469e      	mov	lr, r3
 8009a22:	4770      	bx	lr

08009a24 <_fini>:
 8009a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a26:	bf00      	nop
 8009a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2a:	bc08      	pop	{r3}
 8009a2c:	469e      	mov	lr, r3
 8009a2e:	4770      	bx	lr
